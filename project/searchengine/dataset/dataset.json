[
    {
        "Number": "9005",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Path Computation Element Communication Protocol (PCEP) Extension for Associating Policies and Label Switched Paths (LSPs)",
        "Authors": [
            "S. Litkowski",
            "S. Sivabalan",
            "J. Tantsura",
            "J. Hardwick",
            "C. Li"
        ],
        "Date": "2021-03",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document introduces a simple mechanism to associate policies with a group of Label Switched Paths (LSPs) via an extension to the Path Computation Element Communication Protocol (PCEP). The extension allows a PCEP speaker to advertise to a PCEP peer that a particular LSP belongs to a particular Policy Association Group (PAG).",
        "Keywords": [
            "Association",
            "Policy"
        ],
        "Content": "RFC 9005: Path Computation Element Communication Protocol (PCEP) Extension for Associating Policies and Label Switched Paths (LSPs) RFC 9005 PCEP Extensions for Policy Association March 2021 Litkowski, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9005 Category: Standards Track Published: March 2021 ISSN: 2070-1721 Authors: S. Litkowski Cisco Systems, Inc. S. Sivabalan Ciena J. Tantsura Juniper Networks J. Hardwick Metaswitch Networks 李呈 (C. Li) 华为技术有限公司 (Huawei Technologies) RFC 9005 Path Computation Element Communication Protocol (PCEP) Extension for Associating Policies and Label Switched Paths (LSPs) Abstract This document introduces a simple mechanism to associate policies with a group of Label Switched Paths (LSPs) via an extension to the Path Computation Element Communication Protocol (PCEP). The extension allows a PCEP speaker to advertise to a PCEP peer that a particular LSP belongs to a particular Policy Association Group (PAG).¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9005.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 2.  Terminology 3.  Motivation 3.1.  Policy-Based Constraints 4.  Overview 5.  Policy Association Group 5.1.  POLICY-PARAMETERS-TLV 6.  Security Considerations 7.  IANA Considerations 7.1.  ASSOCIATION Object Type Indicators 7.2.  PCEP TLV Type Indicators 7.3.  PCEP Errors 8.  Manageability Considerations 8.1.  Control of Function and Policy 8.2.  Information and Data Models 8.3.  Liveness Detection and Monitoring 8.4.  Verifying Correct Operations 8.5.  Requirements on Other Protocols 8.6.  Impact on Network Operations 9.  References 9.1.  Normative References 9.2.  Informative References Appendix A.  Example of Policy Parameters Acknowledgments Contributors Authors' Addresses 1. Introduction [RFC5440] describes the Path Computation Element Communication Protocol (PCEP), which enables the communication between a Path Computation Client (PCC) and a Path Control Element (PCE) or between two PCEs based on the PCE architecture [RFC4655]. [RFC5394] provides additional details on policy within the PCE architecture and also provides context for the support of PCE policy.¶ \"Path Computation Element Communication Protocol (PCEP) Extensions for Stateful PCE\" ([RFC8231]) describes a set of extensions to PCEP to enable active control of Multiprotocol Label Switching Traffic Engineering (MPLS-TE) and Generalized MPLS (GMPLS) tunnels. [RFC8281] describes the setup and teardown of PCE-initiated LSPs under the active stateful PCE model without the need for local configuration on the PCC, thus allowing for a dynamic network. Currently, the LSPs can either be signaled via Resource Reservation Protocol Traffic Engineering (RSVP-TE) or segment routed as specified in [RFC8664].¶ [RFC8697] introduces a generic mechanism to create a grouping of LSPs that can then be used to define associations between a set of LSPs and a set of attributes (such as configuration parameters or behaviors) and is equally applicable to stateful PCE (active and passive modes) and stateless PCE.¶ This document specifies a PCEP extension to associate one or more LSPs with policies using the generic association mechanism.¶ A PCEP speaker may want to influence the PCEP peer with respect to path selection and other policies. This document describes a PCEP extension to associate policies by creating a Policy Association Group (PAG) and encoding this association in PCEP messages. The specification is applicable to both stateful and stateless PCEP sessions.¶ Note that the actual policy definition and the associated parameters are out of scope of this document.¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2. Terminology The following terminology is used in this document.¶ Association parameters: As described in [RFC8697], the combination of the mandatory fields Association Type, Association ID, and Association Source in the ASSOCIATION object uniquely identifies the association group. If the optional TLVs -- Global Association Source or Extended Association ID -- are included, then they are included in combination with mandatory fields to uniquely identify the association group.¶ Association information: As described in [RFC8697], the ASSOCIATION object could include other optional TLVs based on the Association Types that provide \"information\" related to the association.¶ LSR: Label Switching Router¶ MPLS: Multiprotocol Label Switching¶ PAG: Policy Association Group¶ PAT: Policy Association Type¶ PCC: Path Computation Client; any client application requesting a path computation to be performed by a Path Computation Element.¶ PCE: Path Computation Element; an entity (component, application, or network node) that is capable of computing a network path or route based on a network graph and applying computational constraints.¶ PCEP: Path Computation Element Communication Protocol¶ 3. Motivation Paths computed using PCE can be subjected to various policies at both the PCE and the PCC. For example, in a centralized TE scenario, network operators may instantiate LSPs and specify policies for traffic accounting, path monitoring, telemetry, etc., for some LSPs via the stateful PCE. Similarly, a PCC could request a user-specific or service-specific policy to be applied at the PCE, such as a constraints relaxation policy, to meet optimal QoS and resiliency levels.¶ PCEP speakers can use the generic mechanism of [RFC8697] to associate a set of LSPs with a policy, without the need to know the details of such a policy. This simplifies network operations, avoids frequent software upgrades, and provides the ability to introduce new policies more quickly.¶ PAG Y {Service-Specific Policy for constraint Monitor LSP relaxation} | | | PAG X PCReq/PCRpt | V {Monitor LSP} {PAG Y} V +-----+ ----------------> +-----+ _ _ _ _ _ _| PCE | | | PCE | | +-----+ | ----------> +-----+ | PCInitiate/PCUpd | | PCReq/PCRpt |{PAG X} | | {PAG Y} | | | | .-----. | | .-----. | ( ) | +----+ ( ) | .--( )--. | |PCC1|--.--( )--. V ( ) | +----+ ( ) +---+ ( ) | ( ) |PCC|----( (G)MPLS network ) +----+ ( (G)MPLS network ) +---+ ( ) |PCC2|------( ) PAG X ( ) +----+ ( ) {Monitor '--( )--' '--( )--' LSP} ( ) ( ) '-----' '-----' Case 1: Policy requested by PCE Case 2: Policy requested by and enforced by PCC PCC and enforced by PCE Figure 1: Sample Use Cases for Carrying Policies over PCEP 3.1. Policy-Based Constraints In the context of a policy-enabled path computation framework [RFC5394], path computation policies may be applied at a PCC, a PCE, or both. A Label Switching Router (LSR) with a policy-enabled PCC can receive:¶ A service request via signaling, including over a Network-Network Interface (NNI) or User-Network Interface (UNI) reference point.¶ A configuration request over a management interface to establish a service.¶ The PCC may apply user-specific or service-specific policies to decide how the path selection process should be constrained -- that is, which constraints, diversities, optimization criteria, and constraint-relaxation strategies should be applied to increase the likelihood that the service LSP(s) will be successfully established and will provide the necessary QoS and resilience against network failures. The user-specific or service-specific policies are applied to the PCC and are then passed to the PCE along with the path computation request in the form of constraints [RFC5394].¶ The PCEP speaker can use the generic mechanism as per [RFC8697] to associate a set of LSPs with user-specific or service-specific policies. This would simplify the path computation message exchanges in PCEP.¶ 4. Overview As per [RFC8697], LSPs are associated with other LSPs with which they interact by adding them to a common association group. Grouping can also be used to define the association between LSPs and the policies associated with them. As described in [RFC8697], the association group is uniquely identified by the combination of the following fields in the ASSOCIATION object: Association Type, Association ID, Association Source, and (if present) Global Association Source or Extended Association ID. This document defines a new Association Type called \"Policy Association\" with value 3 based on the generic ASSOCIATION object. This new Association Type is called \"Policy Association Type\" (PAT).¶ [RFC8697] specifies the mechanism for the capability advertisement of the Association Types supported by a PCEP speaker by defining an ASSOC-Type-List TLV to be carried within an OPEN object. This capability exchange for the PAT MUST be done before using the Policy Association. Thus, the PCEP speaker MUST include the PAT in the ASSOC-Type-List TLV and MUST receive the same from the PCEP peer before using the PAG in PCEP messages.¶ The Policy Association Type (3) is operator configured (as specified in [RFC8697]), i.e., the association is created by the operator manually on the PCEP peers, and an LSP belonging to this association is conveyed via PCEP messages to the PCEP peer. There is no need to convey an explicit Operator-configured Association Range, which could only serve to artificially limit the available Association IDs. Thus, for the Policy Association Type, the Operator-configured Association Range MUST NOT be set and MUST be ignored if received.¶ A PAG can have one or more LSPs. The association parameters including Association Identifier, Policy Association Type (PAT), as well as the Association Source IP address are manually configured by the operator and are used to identify the PAG as described in [RFC8697]. The Global Association Source and Extended Association ID MAY also be included.¶ As per the processing rules specified in Section 6.4 of [RFC8697], if a PCEP speaker does not support this Policy Association Type, it would return a PCEP error (PCErr) message with Error-Type 26 \"Association Error\" and Error-value 1 \"Association type is not supported\". The PAG and the policy MUST be configured on the PCEP peers as per the operator-configured association procedures. All further processing is as per Section 6.4 of [RFC8697]. If a PCE speaker receives a PAG in a PCEP message and the Policy Association information is not configured, it MUST return a PCErr message with Error-Type 26 \"Association Error\" and Error-value 4 \"Association unknown\".¶ Associating a particular LSP with multiple policy groups is allowed from a protocol perspective; however, there is no assurance that the PCEP speaker will be able to apply multiple policies. If a PCEP speaker does not support handling of multiple policies for an LSP, it MUST NOT add the LSP into the association group and MUST return a PCErr with Error-Type 26 \"Association Error\" and Error-value 7 \"Cannot join the association group\".¶ 5. Policy Association Group Association groups and their memberships are defined using the ASSOCIATION object defined in [RFC8697]. Two object types for IPv4 and IPv6 are defined. The ASSOCIATION object includes \"Association type\" indicating the type of the association group. This document adds a new Association Type, Policy Association Type (PAT).¶ PAG may carry optional TLVs including but not limited to:¶ POLICY-PARAMETERS-TLV: Used to communicate opaque information useful to applying the policy, described in Section 5.1.¶ VENDOR-INFORMATION-TLV: Used to communicate arbitrary vendor-specific behavioral information, described in [RFC7470].¶ 5.1. POLICY-PARAMETERS-TLV The ASSOCIATION object (for PAT) can carry an optional POLICY-PARAMETERS-TLV with opaque information that is needed to apply the policy at the PCEP peer. In some cases, to apply a PCE policy successfully, it is required to also associate some policy parameters that need to be evaluated. This TLV is used to carry those policy parameters. The TLV could include one or more policy-related parameters. The encoding format and the order MUST be known to the PCEP peers; this could be done during the configuration of the policy (and its association parameters) for the PAG. The TLV format is as per the format of the PCEP TLVs, as defined in [RFC5440] and shown in Figure 2. Only one POLICY-PARAMETERS-TLV can be carried, and only the first occurrence is processed. Any others MUST be ignored.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type=48 | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Policy Parameters // | | +---------------------------------------------------------------+ Figure 2: The POLICY-PARAMETERS-TLV Format The POLICY-PARAMETERS-TLV type is 48, and it has a variable length. The Value field is variable and padded to a 4-byte alignment; padding is not included in the Length field. The PCEP peer implementation needs to be aware of the encoding format, order, and meaning of the policy parameters well in advance based on the policy. Note that from the protocol point of view, this data is opaque and can be used to carry parameters in any format understood by the PCEP peers and associated with the policy. The exact use of this TLV is beyond the scope of this document. Examples are included for illustration purposes in Appendix A.¶ If the PCEP peer is unaware of the policy parameters associated with the policy and it receives the POLICY-PARAMETERS-TLV, it MUST reject the PCEP message and send a PCErr message with Error-Type 26 \"Association Error\" and Error-value 12 \"Not expecting policy parameters\". Further, if at least one parameter in the POLICY-PARAMETERS-TLV received by the PCEP speaker is considered unacceptable in the context of the associated policy (e.g., out of range value, badly encoded value, etc.), the PCEP speaker MUST reject the PCEP message and send a PCErr message with Error-Type 26 \"Association Error\" and Error-value 13 \"Unacceptable policy parameters\".¶ Note that the vendor-specific behavioral information is encoded in the VENDOR-INFORMATION-TLV, which can be used along with this TLV.¶ 6. Security Considerations The security considerations described in [RFC8697], [RFC8231], [RFC5394], and [RFC5440] apply to the extensions described in this document as well. In particular, a malicious PCEP speaker could be spoofed and used as an attack vector by creating spurious Policy Associations as described in [RFC8697]. Further, as described in [RFC8697], a spurious LSP can have policies that are inconsistent with those of the legitimate LSPs of the group and, thus, cause problems in the handling of the policy for the legitimate LSPs. It should be noted that Policy Association could provide an adversary with the opportunity to eavesdrop on the relationship between the LSPs. [RFC8697] suggests that the implementations and operators use indirect values as a way to hide any sensitive business relationships. Thus, securing the PCEP session using Transport Layer Security (TLS) [RFC8253], as per the recommendations and best current practices in BCP 195 [RFC7525], is RECOMMENDED.¶ Further, extra care needs to be taken by the implementation with respect to the POLICY-PARAMETERS-TLV while decoding, verifying, and applying these policy variables. This TLV parsing could be exploited by an attacker; thus, extra care must be taken while configuring a Policy Association that uses the POLICY-PARAMETERS-TLV and making sure that the data is easy to parse and verify before use. Ensuring agreement among all relevant PCEP peers as to the format and layout of the policy parameters information is key for correct operations. Note that the parser for POLICY-PARAMETERS-TLV is particularly sensitive since it is opaque to PCEP and can be used to convey data with many different internal structures/formats. The choice of decoder is dependent on the additional metadata associated with the policy; thus, additional risk of using a wrong decoder and getting garbage results is incurred. Using standard and well-known policy formats could help alleviate those risks.¶ 7. IANA Considerations 7.1. ASSOCIATION Object Type Indicators This document defines a new Association Type in the subregistry \"ASSOCIATION Type Field\" of the \"Path Computation Element Protocol (PCEP) Numbers\" registry that was originally defined in [RFC8697].¶ Table 1 Value Name Reference 3 Policy Association RFC 9005 7.2. PCEP TLV Type Indicators The following TLV Type Indicator value has been registered within the \"PCEP TLV Type Indicators\" subregistry of the \"Path Computation Element Protocol (PCEP) Numbers\" registry.¶ Table 2 Value Description Reference 48 POLICY-PARAMETERS-TLV RFC 9005 7.3. PCEP Errors This document defines new Error-values for Error-Type 26 \"Association Error\" defined in [RFC8697]. IANA has allocated new error values within the \"PCEP-ERROR Object Error Types and Values\" subregistry of the \"Path Computation Element Protocol (PCEP) Numbers\" registry as follows:¶ Table 3 Error-Type Meaning Error-value Reference 26 Association Error [RFC8697] 12: Not expecting policy parameters RFC 9005 13: Unacceptable policy parameters RFC 9005 8. Manageability Considerations 8.1. Control of Function and Policy An operator MUST be allowed to configure the Policy Associations at PCEP peers and associate them with the LSPs. They MAY also allow configuration to related policy parameters and provide information on the encoding format and order to parse the associated POLICY-PARAMETERS-TLV.¶ 8.2. Information and Data Models [RFC7420] describes the PCEP MIB; there are no new MIB objects for this document.¶ The PCEP YANG module is defined in [PCE-PCEP-YANG]. That module supports associations as defined in [RFC8697]; thus, it supports the Policy Association Groups.¶ An implementation SHOULD allow the operator to view the PAG configured. Further implementation SHOULD allow one to view associations reported by each peer and the current set of LSPs in the PAG.¶ 8.3. Liveness Detection and Monitoring The mechanisms defined in this document do not imply any new liveness detection and monitoring requirements in addition to those already listed in [RFC5440] and [RFC8231].¶ 8.4. Verifying Correct Operations Verifying the correct operation of a policy can be performed by monitoring various parameters as described in [RFC5440] and [RFC8231]. A PCEP implementation SHOULD provide information on failed path computation due to applying policy and log error events, e.g., parsing failure for a POLICY-PARAMETERS-TLV.¶ 8.5. Requirements on Other Protocols The mechanisms defined in this document do not imply any new requirements on other protocols.¶ 8.6. Impact on Network Operations The mechanisms defined in this document do not have any impact on network operations in addition to those already listed in [RFC5440], [RFC8231], and [RFC8281].¶ 9. References 9.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC5440] Vasseur, JP., Ed. and JL. Le Roux, Ed., \"Path Computation Element (PCE) Communication Protocol (PCEP)\", RFC 5440, DOI 10.17487/RFC5440, March 2009, <https://www.rfc-editor.org/info/rfc5440>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8231] Crabbe, E., Minei, I., Medved, J., and R. Varga, \"Path Computation Element Communication Protocol (PCEP) Extensions for Stateful PCE\", RFC 8231, DOI 10.17487/RFC8231, September 2017, <https://www.rfc-editor.org/info/rfc8231>. [RFC8253] Lopez, D., Gonzalez de Dios, O., Wu, Q., and D. Dhody, \"PCEPS: Usage of TLS to Provide a Secure Transport for the Path Computation Element Communication Protocol (PCEP)\", RFC 8253, DOI 10.17487/RFC8253, October 2017, <https://www.rfc-editor.org/info/rfc8253>. [RFC8697] Minei, I., Crabbe, E., Sivabalan, S., Ananthakrishnan, H., Dhody, D., and Y. Tanaka, \"Path Computation Element Communication Protocol (PCEP) Extensions for Establishing Relationships between Sets of Label Switched Paths (LSPs)\", RFC 8697, DOI 10.17487/RFC8697, January 2020, <https://www.rfc-editor.org/info/rfc8697>. 9.2. Informative References [PCE-PCEP-YANG] Dhody, D., Ed., Hardwick, J., Beeram, V., and J. Tantsura, \"A YANG Data Model for Path Computation Element Communications Protocol (PCEP)\", Work in Progress, Internet-Draft, draft-ietf-pce-pcep-yang-16, 22 February 2021, <https://tools.ietf.org/html/draft-ietf-pce-pcep-yang-16>. [RFC4655] Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path Computation Element (PCE)-Based Architecture\", RFC 4655, DOI 10.17487/RFC4655, August 2006, <https://www.rfc-editor.org/info/rfc4655>. [RFC5394] Bryskin, I., Papadimitriou, D., Berger, L., and J. Ash, \"Policy-Enabled Path Computation Framework\", RFC 5394, DOI 10.17487/RFC5394, December 2008, <https://www.rfc-editor.org/info/rfc5394>. [RFC5905] Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch, \"Network Time Protocol Version 4: Protocol and Algorithms Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010, <https://www.rfc-editor.org/info/rfc5905>. [RFC7420] Koushik, A., Stephan, E., Zhao, Q., King, D., and J. Hardwick, \"Path Computation Element Communication Protocol (PCEP) Management Information Base (MIB) Module\", RFC 7420, DOI 10.17487/RFC7420, December 2014, <https://www.rfc-editor.org/info/rfc7420>. [RFC7470] Zhang, F. and A. Farrel, \"Conveying Vendor-Specific Constraints in the Path Computation Element Communication Protocol\", RFC 7470, DOI 10.17487/RFC7470, March 2015, <https://www.rfc-editor.org/info/rfc7470>. [RFC7525] Sheffer, Y., Holz, R., and P. Saint-Andre, \"Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May 2015, <https://www.rfc-editor.org/info/rfc7525>. [RFC8281] Crabbe, E., Minei, I., Sivabalan, S., and R. Varga, \"Path Computation Element Communication Protocol (PCEP) Extensions for PCE-Initiated LSP Setup in a Stateful PCE Model\", RFC 8281, DOI 10.17487/RFC8281, December 2017, <https://www.rfc-editor.org/info/rfc8281>. [RFC8664] Sivabalan, S., Filsfils, C., Tantsura, J., Henderickx, W., and J. Hardwick, \"Path Computation Element Communication Protocol (PCEP) Extensions for Segment Routing\", RFC 8664, DOI 10.17487/RFC8664, December 2019, <https://www.rfc-editor.org/info/rfc8664>. Appendix A. Example of Policy Parameters An example could be a monitoring and telemetry policy, P1, that is dependent on a profile (GOLD/SILVER/BRONZE) as set by the operator. The PCEP peers need to be aware of policy P1 (and its associated characteristics) in advance as well the fact that the policy parameter will encode the profile of a type string in the POLICY-PARAMETERS-TLV. As an example, LSP1 could encode the PAG with the POLICY-PARAMETERS-TLV using the string \"GOLD\".¶ The following is another example where the path computation at the PCE could be dependent on when the LSP was configured at the PCC. For such a policy, P2, the timestamp can be encoded in the POLICY-PARAMETERS-TLV, and the exact encoding could be the 64-bit timestamp format as defined in [RFC5905].¶ While the above example has a single field in the POLICY-PARAMETERS-TLV, it is possible to include multiple fields, but the exact order, encoding format, and meanings need to be known in advance at the PCEP peers.¶ Acknowledgments We would like to acknowledge and thank Santiago Alvarez, Zafar Ali, Luis Tomotaki, Victor Lopez, Rob Shakir, and Clarence Filsfils for working on earlier draft versions with similar motivation.¶ Special thanks to the authors of [RFC8697]. This document borrowed some of its text. The authors would like to thank Aijun Wang, Peng Shuping, and Gyan Mishra for their useful comments.¶ Thanks to Hariharan Ananthakrishnan for shepherding this document. Thanks to Deborah Brungard for providing comments and being the responsible AD for this document.¶ Thanks to Nic Leymann for the RTGDIR review.¶ Thanks to Benjamin Kaduk and Murray Kucherawy for their comments during the IESG review.¶ Contributors The following individuals have contributed extensively:¶ Mahendra Singh Negi RtBrick Inc N-17L, 18th Cross Rd, HSR Layout Bangalore 560102 Karnataka India Email: mahend.ietf@gmail.com Dhruv Dhody Huawei Technologies Divyashree Techno Park, Whitefield Bangalore 560066 Karnataka India Email: dhruv.ietf@gmail.com The following individuals have contributed text that was incorporated:¶ Qin Wu Huawei Technologies 101 Software Avenue, Yuhua District Nanjing Jiangsu, 210012 China Email: sunseawq@huawei.com Xian Zhang Huawei Technologies Bantian, Longgang District Shenzhen 518129 China Email: zhang.xian@huawei.com Udayasree Palle Email: udayasreereddy@gmail.com Mike Koldychev Cisco Systems, Inc. Canada Email: mkoldych@cisco.com Authors' Addresses Stephane Litkowski Cisco Systems, Inc. 11 Rue Camille Desmoulins 92130 Issy-les-Moulineaux France Email: slitkows@cisco.com Siva Sivabalan Ciena 385 Terry Fox Drive Kanata Ontario K2K 0L1 Canada Email: msiva282@gmail.com Jeff Tantsura Juniper Networks Email: jefftant.ietf@gmail.com Jonathan Hardwick Metaswitch Networks 33 Genotin Road Enfield United Kingdom Email: Jonathan.Hardwick@metaswitch.com Cheng Li Huawei Technologies Huawei Campus, No. 156 Beiqing Rd. Beijing 100095 China Email: c.l@huawei.com Additional contact information: 李呈 中国 100095 北京 华为北研所 华为技术有限公司"
    },
    {
        "Number": "9003",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Extended BGP Administrative Shutdown Communication",
        "Authors": [
            "J. Snijders",
            "J. Heitz",
            "J. Scudder",
            "A. Azimov"
        ],
        "Date": "2021-01",
        "More Info": "Obsoletes RFC 8203, Updates RFC 4486",
        "Status": "Proposed Standard",
        "Abstract": "This document enhances the BGP Cease NOTIFICATION message \"Administrative Shutdown\" and \"Administrative Reset\" subcodes for operators to transmit a short free-form message to describe why a BGP session was shut down or reset. This document updates RFC 4486 and obsoletes RFC 8203 by defining an Extended BGP Administrative Shutdown Communication of up to 255 octets to improve communication using multibyte character sets.",
        "Keywords": [
            "BGP",
            "cease",
            "shutdown"
        ],
        "Content": "RFC 9003: Extended BGP Administrative Shutdown Communication RFC 9003 BGP Shutdown Communication January 2021 Snijders, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9003 Obsoletes: 8203 Updates: 4486 Category: Standards Track Published: January 2021 ISSN: 2070-1721 Authors: J. Snijders NTT J. Heitz Cisco J. Scudder Juniper A. Azimov Yandex RFC 9003 Extended BGP Administrative Shutdown Communication Abstract This document enhances the BGP Cease NOTIFICATION message \"Administrative Shutdown\" and \"Administrative Reset\" subcodes for operators to transmit a short free-form message to describe why a BGP session was shut down or reset. This document updates RFC 4486 and obsoletes RFC 8203 by defining an Extended BGP Administrative Shutdown Communication of up to 255 octets to improve communication using multibyte character sets.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9003.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction¶ 1.1.  Requirements Language¶ 2.  Shutdown Communication¶ 3.  Operational Considerations¶ 4.  Error Handling¶ 5.  IANA Considerations¶ 6.  Security Considerations¶ 7.  References¶ 7.1.  Normative References¶ 7.2.  Informative References¶ Appendix A.  Changes to RFC 8203¶ Acknowledgements¶ Authors' Addresses¶ 1. Introduction It can be troublesome for an operator to correlate a BGP-4 [RFC4271] session teardown in the network with a notice that was transmitted via offline methods, such as email or telephone calls. This document updates [RFC4486] by specifying a mechanism to transmit a short free-form UTF-8 [RFC3629] message as part of a Cease NOTIFICATION message [RFC4271] to inform the peer why the BGP session is being shut down or reset. This document obsoletes [RFC8203]; the specific differences and rationale are discussed in detail in Appendix A.¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2. Shutdown Communication If a BGP speaker decides to terminate its session with a BGP neighbor, and it sends a NOTIFICATION message with the Error Code \"Cease\" and Error Subcode \"Administrative Shutdown\" or \"Administrative Reset\" [RFC4486], it MAY include a UTF-8-encoded string. The contents of the string are at the operator's discretion.¶ The Cease NOTIFICATION message with a Shutdown Communication is encoded as below:¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Error Code 6 | Subcode | Length | ... \\ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / \\ \\ / ... Shutdown Communication ... / \\ \\ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 1 Subcode: The Error Subcode value MUST be one of the following values: 2 (\"Administrative Shutdown\") or 4 (\"Administrative Reset\").¶ Length: This 8-bit field represents the length of the Shutdown Communication field in octets. When the length value is zero, no Shutdown Communication field follows.¶ Shutdown Communication: To support international characters, the Shutdown Communication field MUST be encoded using UTF-8. A receiving BGP speaker MUST NOT interpret invalid UTF-8 sequences. Note that when the Shutdown Communication contains multibyte characters, the number of characters will be less than the length value. This field is not NUL terminated. UTF-8 \"Shortest Form\" encoding is REQUIRED to guard against the technical issues outlined in [UTR36].¶ Mechanisms concerning the reporting of information contained in the Shutdown Communication are implementation specific but SHOULD include methods such as syslog [RFC5424].¶ 3. Operational Considerations Operators are encouraged to use the Shutdown Communication to inform their peers of the reason for the shutdown of the BGP session and include out-of-band reference materials. An example of a useful Shutdown Communication would be:¶ \"[TICKET-1-1438367390] software upgrade; back in 2 hours\"¶ \"[TICKET-1-1438367390]\" is a ticket reference with significance to both the sender and receiver, followed by a brief human-readable message regarding the reason for the BGP session shutdown followed by an indication about the length of the maintenance. The receiver can now use the string 'TICKET-1-1438367390' to search in their email archive to find more details.¶ If a Shutdown Communication longer than 128 octets is sent to a BGP speaker that implements [RFC8203], then that speaker will treat it as an error, the consequence of which should be a log message.¶ If a Shutdown Communication of any length is sent to a BGP speaker that implements neither [RFC8203] nor this specification, then that speaker will treat it as an error, the consequence of which should be a log message.¶ In any case, a receiver of a NOTIFICATION message is unable to acknowledge the receipt and correct understanding of any Shutdown Communication.¶ Operators should not rely on Shutdown Communications as their sole form of communication with their peers for important events.¶ If it is known that the peer BGP speaker supports this specification, then a Shutdown Communication that is not longer than 255 octets MAY be sent. Otherwise, a Shutdown Communication MAY be sent, but it SHOULD NOT be longer than 128 octets.¶ 4. Error Handling If a Shutdown Communication with an invalid UTF-8 sequence is received, a message indicating this event SHOULD be logged for the attention of the operator. An erroneous or malformed Shutdown Communication itself MAY be logged in a hexdump format.¶ 5. IANA Considerations IANA has referenced this document at subcodes \"Administrative Shutdown\" and \"Administrative Reset\" in the \"BGP Cease NOTIFICATION message subcodes\" registry under the \"Border Gateway Protocol (BGP) Parameters\" group in addition to [RFC4486].¶ 6. Security Considerations This document uses UTF-8 encoding for the Shutdown Communication. There are a number of security issues with Unicode. Implementers and operators are advised to review Unicode Technical Report #36 [UTR36] to learn about these issues. UTF-8 \"Shortest Form\" encoding is REQUIRED to guard against the technical issues outlined in [UTR36].¶ As BGP Shutdown Communications are likely to appear in syslog output, there is a risk that carefully constructed Shutdown Communication might be formatted by receiving systems in a way to make them appear as additional syslog messages. The 255-octet length limit on the BGP Shutdown Communication may help limit the ability to mount such an attack.¶ Users of this mechanism should be aware that unless a transport that provides integrity is used for the BGP session in question, a Shutdown Communication message could be forged. Unless a transport that provides confidentiality is used, a Shutdown Communication message could be snooped by an attacker. These issues are common to any BGP message, but they may be of greater interest in the context of this proposal since the information carried in the message is generally expected to be used for human-to-human communication. Refer to the related considerations in [RFC4271] and [RFC4272].¶ Users of this mechanism should consider applying data minimization practices as outlined in Section 6.1 of [RFC6973] because a received Shutdown Communication may be used at the receiver's discretion.¶ 7. References 7.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November 2003, <https://www.rfc-editor.org/info/rfc3629>. [RFC4271] Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A Border Gateway Protocol 4 (BGP-4)\", RFC 4271, DOI 10.17487/RFC4271, January 2006, <https://www.rfc-editor.org/info/rfc4271>. [RFC4486] Chen, E. and V. Gillet, \"Subcodes for BGP Cease Notification Message\", RFC 4486, DOI 10.17487/RFC4486, April 2006, <https://www.rfc-editor.org/info/rfc4486>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 7.2. Informative References [RFC4272] Murphy, S., \"BGP Security Vulnerabilities Analysis\", RFC 4272, DOI 10.17487/RFC4272, January 2006, <https://www.rfc-editor.org/info/rfc4272>. [RFC5424] Gerhards, R., \"The Syslog Protocol\", RFC 5424, DOI 10.17487/RFC5424, March 2009, <https://www.rfc-editor.org/info/rfc5424>. [RFC6973] Cooper, A., Tschofenig, H., Aboba, B., Peterson, J., Morris, J., Hansen, M., and R. Smith, \"Privacy Considerations for Internet Protocols\", RFC 6973, DOI 10.17487/RFC6973, July 2013, <https://www.rfc-editor.org/info/rfc6973>. [RFC8203] Snijders, J., Heitz, J., and J. Scudder, \"BGP Administrative Shutdown Communication\", RFC 8203, DOI 10.17487/RFC8203, July 2017, <https://www.rfc-editor.org/info/rfc8203>. [UTR36] Davis, M., Ed. and M. Suignard, Ed., \"Unicode Security Considerations\", Unicode Technical Report #36, August 2010, <http://unicode.org/reports/tr36/>. Appendix A. Changes to RFC 8203 The maximum permitted length was changed from 128 to 255.¶ Feedback from operators based in regions that predominantly use multibyte character sets showed that messages similar in meaning to what can be sent in other languages using single-byte encoding failed to fit within the length constraints as specified by [RFC8203]. For example, the phrase \"Planned work to add switch to stack. Completion time - 30 minutes\" has a length of 65 bytes. Its translation in Russian has a length of 139 bytes.¶ If a Shutdown Communication message longer than 128 octets is sent to a BGP speaker that implements [RFC8203], then that speaker will bring it to the attention of an operator but will otherwise process the NOTIFICATION message as normal.¶ Acknowledgements The authors would like to gratefully acknowledge Tom Scholl, David Freedman, Jared Mauch, Jeff Haas, Peter Hessler, Bruno Decraene, John Heasley, Peter van Dijk, Arjen Zonneveld, James Bensley, Susan Hares, Saku Ytti, Lou Berger, Alvaro Retana, and Adam Roach.¶ The authors would like to thank Enke Chen and Vincent Gillet for their work on [RFC4486] and granting the related BCP 78 rights to the IETF Trust.¶ The authors would like to acknowledge Misha Grishin (MSK-IX) for raising awareness that the length specification of [RFC8203] was insufficient in context of multibyte character sets.¶ Authors' Addresses Job Snijders NTT Ltd. Theodorus Majofskistraat 100 1065 SZ Amsterdam Netherlands Email: job@ntt.net Jakob Heitz Cisco 170 West Tasman Drive San Jose, CA 95134 United States of America Email: jheitz@cisco.com John Scudder Juniper Networks 1133 Innovation Way Sunnyvale, CA 94089 United States of America Email: jgs@juniper.net Alexander Azimov Yandex Ulitsa Lva Tolstogo 16 Moscow 119021 Russian Federation Email: a.e.azimov@gmail.com"
    },
    {
        "Number": "9007",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Handling Message Disposition Notification with the JSON Meta Application Protocol (JMAP)",
        "Authors": [
            "R. Ouazana",
            "Ed."
        ],
        "Date": "2021-03",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies a data model for handling Message Disposition Notifications (MDNs) (see RFC 8098) in the JSON Meta Application Protocol (JMAP) (see RFCs 8620 and 8621).",
        "Keywords": [
            "JMAP",
            "JSON",
            "email",
            "MDN"
        ],
        "Content": "RFC 9007: Handling Message Disposition Notification with the JSON Meta Application Protocol (JMAP) RFC 9007 JMAP MDN Handling March 2021 Ouazana Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9007 Category: Standards Track Published: March 2021 ISSN: 2070-1721 Author: R. Ouazana, Ed. Linagora RFC 9007 Handling Message Disposition Notification with the JSON Meta Application Protocol (JMAP) Abstract This document specifies a data model for handling Message Disposition Notifications (MDNs) (see RFC 8098) in the JSON Meta Application Protocol (JMAP) (see RFCs 8620 and 8621).¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9007.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Notational Conventions 1.2.  Terminology 1.3.  Addition to the Capabilities Object 2.  MDN 2.1.  MDN/send 2.2.  MDN/parse 3.  Samples 3.1.  Sending an MDN for a Received Email Message 3.2.  Asking for an MDN When Sending an Email Message 3.3.  Parsing a Received MDN 4.  IANA Considerations 4.1.  JMAP Capability Registration for \"mdn\" 4.2.  JMAP Error Codes Registration for \"mdnAlreadySent\" 5.  Security Considerations 6.  Normative References Author's Address 1. Introduction JMAP (\"The JSON Meta Application Protocol (JMAP)\" [RFC8620]) is a generic protocol for synchronising data, such as mail, calendars, or contacts, between a client and a server. It is optimised for mobile and web environments, and it provides a consistent interface to different data types.¶ JMAP for Mail (\"The JSON Meta Application Protocol (JMAP) for Mail\" [RFC8621]) specifies a data model for synchronising email data with a server using JMAP. Clients can use this to efficiently search, access, organise, and send messages.¶ Message Disposition Notifications (MDNs) are defined in [RFC8098] and are used as \"read receipts\", \"acknowledgements\", or \"receipt notifications\".¶ A client can come across MDNs in different ways:¶ When receiving an email message, an MDN can be sent to the sender. This specification defines an \"MDN/send\" method to cover this case.¶ When sending an email message, an MDN can be requested. This must be done with the help of a header field, as already specified by [RFC8098]; the header field can already be handled by guidance in [RFC8621].¶ When receiving an MDN, the MDN could be related to an existing sent message. This is already covered by [RFC8621] in the EmailSubmission object. A client might want to display detailed information about a received MDN. This specification defines an \"MDN/parse\" method to cover this case.¶ 1.1. Notational Conventions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ Type signatures, examples, and property descriptions in this document follow the conventions established in Section 1.1 of [RFC8620]. Data types defined in the core specification are also used in this document.¶ Servers MUST support all properties specified for the new data types defined in this document.¶ 1.2. Terminology The same terminology is used in this document as in the core JMAP specification.¶ Because keywords are case insensitive in IMAP but case sensitive in JMAP, the $mdnsent keyword MUST always be used in lowercase.¶ 1.3. Addition to the Capabilities Object Capabilities are announced as part of the standard JMAP Session resource; see [RFC8620], Section 2. This defines a new capability, \"urn:ietf:params:jmap:mdn\".¶ The capability \"urn:ietf:params:jmap:mdn\" being present in the \"accountCapabilities\" property of an account represents support for the \"MDN\" data type, parsing MDNs via the \"MDN/parse\" method, and creating and sending MDN messages via the \"MDN/send\" method. Servers that include the capability in one or more \"accountCapabilities\" properties MUST also include the property in the \"capabilities\" property.¶ The value of this \"urn:ietf:params:jmap:mdn\" property is an empty object both in the account's \"accountCapabilities\" property and in the \"capabilities\" property.¶ 2. MDN An MDN object has the following properties:¶ forEmailId: Id|null¶ The Email id of the received message to which this MDN is related. This property MUST NOT be null for \"MDN/send\" but MAY be null in the response from the \"MDN/parse\" method.¶ subject: String|null¶ The subject used as \"Subject\" header field for this MDN.¶ textBody: String|null¶ The human-readable part of the MDN, as plain text.¶ includeOriginalMessage: Boolean (default: false)¶ If true, the content of the original message will appear in the third component of the multipart/report generated for the MDN. See [RFC8098] for details and security considerations.¶ reportingUA: String|null¶ The name of the Mail User Agent (MUA) creating this MDN. It is used to build the MDN report part of the MDN. Note that a null value may have better privacy properties.¶ disposition: Disposition¶ The object containing the diverse MDN disposition options.¶ mdnGateway: String|null (server-set)¶ The name of the gateway or Message Transfer Agent (MTA) that translated a foreign (non-Internet) message disposition notification into this MDN.¶ originalRecipient: String|null (server-set)¶ The original recipient address as specified by the sender of the message for which the MDN is being issued.¶ finalRecipient: String|null¶ The recipient for which the MDN is being issued. If set, it overrides the value that would be calculated by the server from the Identity defined in the \"MDN/send\" method, unless explicitly set by the client.¶ originalMessageId: String|null (server-set)¶ The \"Message-ID\" header field [RFC5322] (not the JMAP id) of the message for which the MDN is being issued.¶ error: String[]|null (server-set)¶ Additional information in the form of text messages when the \"error\" disposition modifier appears.¶ extensionFields: String[String]|null¶ The object where keys are extension-field names, and values are extension-field values (see [RFC8098], Section 3.3).¶ A Disposition object has the following properties:¶ actionMode: String¶ This MUST be one of the following strings: manual-action / automatic-action¶ sendingMode: String¶ This MUST be one of the following strings: mdn-sent-manually / mdn-sent-automatically¶ type: String¶ This MUST be one of the following strings: deleted / dispatched / displayed / processed¶ See [RFC8098] for the exact meaning of these different fields. These fields are defined as case insensitive in [RFC8098] but are case sensitive in this RFC and MUST be converted to lowercase by \"MDN/parse\".¶ 2.1. MDN/send The \"MDN/send\" method sends a message in the style of [RFC5322] from an MDN object. When calling this method, the \"using\" property of the Request object MUST contain the capabilities \"urn:ietf:params:jmap:mdn\" and \"urn:ietf:params:jmap:mail\"; the latter because of the implicit call to \"Email/set\" and the use of Identity objects, which is described below. The method takes the following arguments:¶ accountId: Id¶ The id of the account to use.¶ identityId: Id¶ The id of the Identity to associate with these MDNs. The server will use this identity to define the sender of the MDNs and to set the \"finalRecipient\" field.¶ send: Id[MDN]¶ A map of the creation id (client specified) to MDN objects.¶ onSuccessUpdateEmail: Id[PatchObject]|null¶ A map of the id to an object containing properties to update on the Email object referenced by the \"MDN/send\" if the sending succeeds. This will always be a backward reference to the creation id (see the example below in Section 3.1).¶ The response has the following arguments:¶ accountId: Id¶ The id of the account used for the call.¶ sent: Id[MDN]|null¶ A map of the creation id to an MDN containing any properties that were not set by the client. This includes any properties that were omitted by the client and thus set to a default by the server. This argument is null if no MDN objects were successfully sent.¶ notSent: Id[SetError]|null¶ A map of the creation id to a SetError object for each record that failed to be sent or null if all successful.¶ In this context, the existing SetError types defined in [RFC8620] and [RFC8621] are interpreted as follows:¶ notFound: The reference \"forEmailId\" cannot be found or has no valid \"Disposition-Notification-To\" header field.¶ forbidden: \"MDN/send\" would violate an Access Control List (ACL) or other permissions policy.¶ forbiddenFrom: The user is not allowed to use the given \"finalRecipient\" property.¶ overQuota: \"MDN/send\" would exceed a server-defined limit on the number or total size of sent MDNs. It could include limitations on sent messages.¶ tooLarge: \"MDN/send\" would result in an MDN that exceeds a server-defined limit for the maximum size of an MDN or more generally, on email message.¶ rateLimit: Too many MDNs or email messages have been created recently, and a server-defined rate limit has been reached. It may work if tried again later.¶ invalidProperties: The record given is invalid in some way.¶ The following is a new SetError:¶ mdnAlreadySent: The message has the $mdnsent keyword already set.¶ If the \"accountId\" or \"identityId\" given cannot be found, the method call is rejected with an invalidArguments error.¶ The client MUST NOT issue an \"MDN/send\" request if the message has the $mdnsent keyword set.¶ When sending the MDN, the server is in charge of generating the \"originalRecipient\" and \"originalMessageId\" fields according to [RFC8098]. \"finalRecipient\" will also generally be generated by the server based on the provided identity, but if specified by the client and allowed (see Section 5), the server will use the client-provided value.¶ The client is expected to explicitly update each \"Email\" for which an \"MDN/send\" has been invoked in order to set the $mdnsent keyword on these messages. To ensure that, the server MUST reject an \"MDN/send\" that does not result in setting the keyword $mdnsent. Thus, the server MUST check that the \"onSuccessUpdateEmail\" property of the method is correctly set to update this keyword.¶ 2.2. MDN/parse This method allows a client to parse blobs as messages in the style of [RFC5322] to get MDN objects. This can be used to parse and get detailed information about blobs referenced in the \"mdnBlobIds\" of the EmailSubmission object or any email message the client could expect to be an MDN.¶ The \"forEmailId\" property can be null or missing if the \"originalMessageId\" property is missing or does not refer to an existing message or if the server cannot efficiently calculate the related message (for example, if several messages get the same \"Message-ID\" header field).¶ The \"MDN/parse\" method takes the following arguments:¶ accountId: Id¶ The id of the account to use.¶ blobIds: Id[]¶ The ids of the blobs to parse.¶ The response has the following arguments:¶ accountId: Id¶ The id of the account used for the call.¶ parsed: Id[MDN]|null¶ A map of the blob id to a parsed MDN representation for each successfully parsed blob or null if none.¶ notParsable: Id[]|null¶ A list of ids given that corresponds to blobs that could not be parsed as MDNs or null if none.¶ notFound: Id[]|null¶ A list of blob ids given that could not be found or null if none.¶ The following additional errors may be returned instead of the \"MDN/parse\" response:¶ requestTooLarge: The number of ids requested by the client exceeds the maximum number the server is willing to process in a single method call.¶ invalidArguments: If the given \"accountId\" cannot be found, the MDN parsing is rejected with an invalidArguments error.¶ 3. Samples 3.1. Sending an MDN for a Received Email Message A client can use the following request to send an MDN back to the sender:¶ [[ \"MDN/send\", { \"accountId\": \"ue150411c\", \"identityId\": \"I64588216\", \"send\": { \"k1546\": { \"forEmailId\": \"Md45b47b4877521042cec0938\", \"subject\": \"Read receipt for: World domination\", \"textBody\": \"This receipt shows that the email has been displayed on your recipient's computer. There is no guarantee it has been read or understood.\", \"reportingUA\": \"joes-pc.cs.example.com; Foomail 97.1\", \"disposition\": { \"actionMode\": \"manual-action\", \"sendingMode\": \"mdn-sent-manually\", \"type\": \"displayed\" }, \"extension\": { \"EXTENSION-EXAMPLE\": \"example.com\" } } }, \"onSuccessUpdateEmail\": { \"#k1546\": { \"keywords/$mdnsent\": true } } }, \"0\" ]] ¶ If the email id matches an existing email message without the $mdnsent keyword, the server can answer:¶ [[ \"MDN/send\", { \"accountId\": \"ue150411c\", \"sent\": { \"k1546\": { \"finalRecipient\": \"rfc822; john@example.com\", \"originalMessageId\": \"<199509192301.23456@example.org>\" } } }, \"0\" ], [ \"Email/set\", { \"accountId\": \"ue150411c\", \"oldState\": \"23\", \"newState\": \"42\", \"updated\": { \"Md45b47b4877521042cec0938\": {} } }, \"0\" ]] ¶ If the $mdnsent keyword has already been set, the server can answer an error:¶ [[ \"MDN/send\", { \"accountId\": \"ue150411c\", \"notSent\": { \"k1546\": { \"type\": \"mdnAlreadySent\", \"description\" : \"$mdnsent keyword is already present\" } } }, \"0\" ]] ¶ 3.2. Asking for an MDN When Sending an Email Message This is done with the \"Email/set\" \"create\" method of [RFC8621].¶ [[ \"Email/set\", { \"accountId\": \"ue150411c\", \"create\": { \"k2657\": { \"mailboxIds\": { \"2ea1ca41b38e\": true }, \"keywords\": { \"$seen\": true, \"$draft\": true }, \"from\": [{ \"name\": \"Joe Bloggs\", \"email\": \"joe@example.com\" }], \"to\": [{ \"name\": \"John\", \"email\": \"john@example.com\" }], \"header:Disposition-Notification-To:asText\": \"joe@example.com\", \"subject\": \"World domination\", ... } } }, \"0\" ]] ¶ Note the specified \"Disposition-Notification-To\" header field indicating where to send the MDN (usually the sender of the message).¶ 3.3. Parsing a Received MDN The client issues a parse request:¶ [[ \"MDN/parse\", { \"accountId\": \"ue150411c\", \"blobIds\": [ \"0f9f65ab-dc7b-4146-850f-6e4881093965\" ] }, \"0\" ]] ¶ The server responds:¶ [[ \"MDN/parse\", { \"accountId\": \"ue150411c\", \"parsed\": { \"0f9f65ab-dc7b-4146-850f-6e4881093965\": { \"forEmailId\": \"Md45b47b4877521042cec0938\", \"subject\": \"Read receipt for: World domination\", \"textBody\": \"This receipt shows that the email has been displayed on your recipient's computer. There is no guarantee it has been read or understood.\", \"reportingUA\": \"joes-pc.cs.example.com; Foomail 97.1\", \"disposition\": { \"actionMode\": \"manual-action\", \"sendingMode\": \"mdn-sent-manually\", \"type\": \"displayed\" }, \"finalRecipient\": \"rfc822; john@example.com\", \"originalMessageId\": \"<199509192301.23456@example.org>\" } } }, \"0\" ]] ¶ In the case that a blob id is not found, the server would respond:¶ [[ \"MDN/parse\", { \"accountId\": \"ue150411c\", \"notFound\": [ \"0f9f65ab-dc7b-4146-850f-6e4881093965\" ] }, \"0\" ]] ¶ If the blob id has been found but is not parsable, the server would respond:¶ [[ \"MDN/parse\", { \"accountId\": \"ue150411c\", \"notParsable\": [ \"0f9f65ab-dc7b-4146-850f-6e4881093965\" ] }, \"0\" ]] ¶ 4. IANA Considerations 4.1. JMAP Capability Registration for \"mdn\" This section registers the \"mdn\" JMAP Capability in the \"JMAP Capabilities\" registry as follows:¶ Capability Name: urn:ietf:params:jmap:mdn¶ Intended Use: common¶ Change Controller: IETF¶ Security and Privacy Considerations: This document, Section 5.¶ Reference: This document¶ 4.2. JMAP Error Codes Registration for \"mdnAlreadySent\" IANA has registered one new error code in the \"JMAP Error Codes\" registry, as defined in [RFC8620].¶ JMAP Error Code: mdnAlreadySent¶ Intended Use: common¶ Change Controller: IETF¶ Description: The message has the $mdnsent keyword already set. The client MUST NOT try again to send an MDN for this message.¶ Reference: This document, Section 2.1¶ 5. Security Considerations The same considerations regarding MDN (see [RFC8098] and [RFC3503]) apply to this document.¶ In order to reinforce trust regarding the relation between the user sending an email message and the identity of this user, the server SHOULD validate in conformance to the provided Identity that the user is permitted to use the \"finalRecipient\" value and return a forbiddenFrom error if not.¶ 6. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3503] Melnikov, A., \"Message Disposition Notification (MDN) profile for Internet Message Access Protocol (IMAP)\", RFC 3503, DOI 10.17487/RFC3503, March 2003, <https://www.rfc-editor.org/info/rfc3503>. [RFC5322] Resnick, P., Ed., \"Internet Message Format\", RFC 5322, DOI 10.17487/RFC5322, October 2008, <https://www.rfc-editor.org/info/rfc5322>. [RFC8098] Hansen, T., Ed. and A. Melnikov, Ed., \"Message Disposition Notification\", STD 85, RFC 8098, DOI 10.17487/RFC8098, February 2017, <https://www.rfc-editor.org/info/rfc8098>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8620] Jenkins, N. and C. Newman, \"The JSON Meta Application Protocol (JMAP)\", RFC 8620, DOI 10.17487/RFC8620, July 2019, <https://www.rfc-editor.org/info/rfc8620>. [RFC8621] Jenkins, N. and C. Newman, \"The JSON Meta Application Protocol (JMAP) for Mail\", RFC 8621, DOI 10.17487/RFC8621, August 2019, <https://www.rfc-editor.org/info/rfc8621>. Author's Address Raphaël Ouazana (editor) Linagora 100 Terrasse Boieldieu - Tour Franklin 92042 Paris - La Défense CEDEX France Email: rouazana@linagora.com URI: https://www.linagora.com"
    },
    {
        "Number": "9004",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Updates for the Back-to-Back Frame Benchmark in RFC 2544",
        "Authors": [
            "A. Morton"
        ],
        "Date": "2021-05",
        "More Info": "Updates RFC 2544",
        "Status": "Informational",
        "Abstract": "Fundamental benchmarking methodologies for network interconnect devices of interest to the IETF are defined in RFC 2544. This memo updates the procedures of the test to measure the Back-to-Back Frames benchmark of RFC 2544, based on further experience.  This memo updates Section 26.4 of RFC 2544.",
        "Keywords": [
            "Buffer size",
            "Buffer delay",
            "Correction Factor"
        ],
        "Content": "RFC 9004: Updates for the Back-to-Back Frame Benchmark in RFC 2544 RFC 9004 B2B Frame Update May 2021 Morton Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9004 Updates: 2544 Category: Informational Published: May 2021 ISSN: 2070-1721 Author: A. Morton AT&T Labs RFC 9004 Updates for the Back-to-Back Frame Benchmark in RFC 2544 Abstract Fundamental benchmarking methodologies for network interconnect devices of interest to the IETF are defined in RFC 2544. This memo updates the procedures of the test to measure the Back-to-Back Frames benchmark of RFC 2544, based on further experience.¶ This memo updates Section 26.4 of RFC 2544.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9004.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Requirements Language 3.  Scope and Goals 4.  Motivation 5.  Prerequisites 6.  Back-to-Back Frames 6.1.  Preparing the List of Frame Sizes 6.2.  Test for a Single Frame Size 6.3.  Test Repetition and Benchmark 6.4.  Benchmark Calculations 7.  Reporting 8.  Security Considerations 9.  IANA Considerations 10. References 10.1.  Normative References 10.2.  Informative References Acknowledgments Author's Address 1. Introduction The IETF's fundamental benchmarking methodologies are defined in [RFC2544], supported by the terms and definitions in [RFC1242]. [RFC2544] actually obsoletes an earlier specification, [RFC1944]. Over time, the benchmarking community has updated [RFC2544] several times, including the Device Reset benchmark [RFC6201] and the important Applicability Statement [RFC6815] concerning use outside the Isolated Test Environment (ITE) required for accurate benchmarking. Other specifications implicitly update [RFC2544], such as the IPv6 benchmarking methodologies in [RFC5180].¶ Recent testing experience with the Back-to-Back Frame test and benchmark in Section 26.4 of [RFC2544] indicates that an update is warranted [OPNFV-2017] [VSPERF-b2b]. In particular, analysis of the results indicates that buffer size matters when compensating for interruptions of software-packet processing, and this finding increases the importance of the Back-to-Back Frame characterization described here. This memo provides additional rationale and the updated method.¶ [RFC2544] provides its own requirements language consistent with [RFC2119], since [RFC1944] (which it obsoletes) predates [RFC2119]. All three memos share common authorship. Today, [RFC8174] clarifies the usage of requirements language, so the requirements language presented in this memo are expressed in accordance with [RFC8174]. They are intended for those performing/reporting laboratory tests to improve clarity and repeatability, and for those designing devices that facilitate these tests.¶ 2. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Scope and Goals The scope of this memo is to define an updated method to unambiguously perform tests, measure the benchmark(s), and report the results for Back-to-Back Frames (as described in Section 26.4 of [RFC2544]).¶ The goal is to provide more efficient test procedures where possible and expand reporting with additional interpretation of the results. The tests described in this memo address the cases in which the maximum frame rate of a single ingress port cannot be transferred to an egress port without loss (for some frame sizes of interest).¶ Benchmarks as described in [RFC2544] rely on test conditions with constant frame sizes, with the goal of understanding what network-device capability has been tested. Tests with the smallest size stress the header-processing capacity, and tests with the largest size stress the overall bit-processing capacity. Tests with sizes in between may determine the transition between these two capacities. However, conditions simultaneously sending a mixture of Internet (IMIX) frame sizes, such as those described in [RFC6985], MUST NOT be used in Back-to-Back Frame testing.¶ Section 3 of [RFC8239] describes buffer-size testing for physical networking devices in a data center. Those methods measure buffer latency directly with traffic on multiple ingress ports that overload an egress port on the Device Under Test (DUT) and are not subject to the revised calculations presented in this memo. Likewise, the methods of [RFC8239] SHOULD be used for test cases where the egress-port buffer is the known point of overload.¶ 4. Motivation Section 3.1 of [RFC1242] describes the rationale for the Back-to-Back Frames benchmark. To summarize, there are several reasons that devices on a network produce bursts of frames at the minimum allowed spacing; and it is, therefore, worthwhile to understand the DUT limit on the length of such bursts in practice. The same document also states:¶ Tests of this parameter are intended to determine the extent of data buffering in the device.¶ Since this test was defined, there have been occasional discussions of the stability and repeatability of the results, both over time and across labs. Fortunately, the Open Platform for Network Function Virtualization (OPNFV) project on Virtual Switch Performance (VSPERF) Continuous Integration (CI) [VSPERF-CI] testing routinely repeats Back-to-Back Frame tests to verify that test functionality has been maintained through development of the test-control programs. These tests were used as a basis to evaluate stability and repeatability, even across lab setups when the test platform was migrated to new DUT hardware at the end of 2016.¶ When the VSPERF CI results were examined [VSPERF-b2b], several aspects of the results were considered notable:¶ Back-to-Back Frame benchmark was very consistent for some fixed frame sizes, and somewhat variable for other frame sizes.¶ The number of Back-to-Back Frames with zero loss reported for large frame sizes was unexpectedly long (translating to 30 seconds of buffer time), and no explanation or measurement limit condition was indicated. It was important that the buffering time calculations were part of the referenced testing and analysis [VSPERF-b2b], because the calculated buffer time of 30 seconds for some frame sizes was clearly wrong or highly suspect. On the other hand, a result expressed only as a large number of Back-to-Back Frames does not permit such an easy comparison with reality.¶ Calculation of the extent of buffer time in the DUT helped to explain the results observed with all frame sizes. For example, tests with some frame sizes cannot exceed the frame-header-processing rate of the DUT, thus, no buffering occurs. Therefore, the results depended on the test equipment and not the DUT.¶ It was found that a better estimate of the DUT buffer time could be calculated using measurements of both the longest burst in frames without loss and results from the Throughput tests conducted according to Section 26.1 of [RFC2544]. It is apparent that the DUT's frame-processing rate empties the buffer during a trial and tends to increase the \"implied\" buffer-size estimate (measured according to Section 26.4 of [RFC2544] because many frames have departed the buffer when the burst of frames ends). A calculation using the Throughput measurement can reveal a \"corrected\" buffer-size estimate.¶ Further, if the Throughput tests of Section 26.1 of [RFC2544] are conducted as a prerequisite, the number of frame sizes required for Back-to-Back Frame benchmarking can be reduced to one or more of the small frame sizes, or the results for large frame sizes can be noted as invalid in the results if tested anyway. These are the larger frame sizes for which the Back-to-Back Frame rate cannot exceed the frame-header-processing rate of the DUT and little or no buffering occurs.¶ The material below provides the details of the calculation to estimate the actual buffer storage available in the DUT, using results from the Throughput tests for each frame size and the Max Theoretical Frame Rate for the DUT links (which constrain the minimum frame spacing).¶ In reality, there are many buffers and packet-header-processing steps in a typical DUT. The simplified model used in these calculations for the DUT includes a packet-header-processing function with limited rate of operation, as shown in Figure 1.¶ |------------ DUT --------| Generator -> Ingress -> Buffer -> HeaderProc -> Egress -> Receiver Figure 1: Simplified Model for DUT Testing So, in the Back-to-Back Frame testing:¶ The ingress burst arrives at Max Theoretical Frame Rate, and initially the frames are buffered.¶ The packet-header-processing function (HeaderProc) operates at the \"Measured Throughput\" (Section 26.1 of [RFC2544]), removing frames from the buffer (this is the best approximation we have, another acceptable approximation is the received frame rate during Back-to-back Frame testing, if Measured Throughput is not available).¶ Frames that have been processed are clearly not in the buffer, so the Corrected DUT Buffer Time equation (Section 6.4) estimates and removes the frames that the DUT forwarded on egress during the burst. We define buffer time as the number of frames occupying the buffer divided by the Max Theoretical Frame Rate (on ingress) for the frame size under test.¶ A helpful concept is the buffer-filling rate, which is the difference between the Max Theoretical Frame Rate (ingress) and the Measured Throughput (HeaderProc on egress). If the actual buffer size in frames is known, the time to fill the buffer during a measurement can be calculated using the filling rate, as a check on measurements. However, the buffer in the model represents many buffers of different sizes in the DUT data path.¶ Knowledge of approximate buffer storage size (in time or bytes) may be useful in estimating whether frame losses will occur if DUT forwarding is temporarily suspended in a production deployment due to an unexpected interruption of frame processing (an interruption of duration greater than the estimated buffer would certainly cause lost frames). In Section 6, the calculations for the correct buffer time use the combination of offered load at Max Theoretical Frame Rate and header-processing speed at 100% of Measured Throughput. Other combinations are possible, such as changing the percent of Measured Throughput to account for other processes reducing the header processing rate.¶ The presentation of OPNFV VSPERF evaluation and development of enhanced search algorithms [VSPERF-BSLV] was given and discussed at IETF 102. The enhancements are intended to compensate for transient processor interrupts that may cause loss at near-Throughput levels of offered load. Subsequent analysis of the results indicates that buffers within the DUT can compensate for some interrupts, and this finding increases the importance of the Back-to-Back Frame characterization described here.¶ 5. Prerequisites The test setup MUST be consistent with Figure 1 of [RFC2544], or Figure 2 of that document when the tester's sender and receiver are different devices. Other mandatory testing aspects described in [RFC2544] MUST be included, unless explicitly modified in the next section.¶ The ingress and egress link speeds and link-layer protocols MUST be specified and used to compute the Max Theoretical Frame Rate when respecting the minimum interframe gap.¶ The test results for the Throughput benchmark conducted according to Section 26.1 of [RFC2544] for all frame sizes RECOMMENDED by [RFC2544] MUST be available to reduce the tested-frame-size list or to note invalid results for individual frame sizes (because the burst length may be essentially infinite for large frame sizes).¶ Note that:¶ the Throughput and the Back-to-Back Frame measurement-configuration traffic characteristics (unidirectional or bidirectional, and number of flows generated) MUST match.¶ the Throughput measurement MUST be taken under zero-loss conditions, according to Section 26.1 of [RFC2544].¶ The Back-to-Back Benchmark described in Section 3.1 of [RFC1242] MUST be measured directly by the tester, where buffer size is inferred from Back-to-Back Frame bursts and associated packet-loss measurements. Therefore, sources of frame loss that are unrelated to consistent evaluation of buffer size SHOULD be identified and removed or mitigated. Example sources include:¶ On-path active components that are external to the DUT¶ Operating-system environment interrupting DUT operation¶ Shared-resource contention between the DUT and other off-path component(s) impacting DUT's behavior, sometimes called the \"noisy neighbor\" problem with virtualized network functions.¶ Mitigations applicable to some of the sources above are discussed in Section 6.2, with the other measurement requirements described below in Section 6.¶ 6. Back-to-Back Frames Objective: To characterize the ability of a DUT to process Back-to-Back Frames as defined in [RFC1242].¶ The procedure follows.¶ 6.1. Preparing the List of Frame Sizes From the list of RECOMMENDED frame sizes (Section 9 of [RFC2544]), select the subset of frame sizes whose Measured Throughput (during prerequisite testing) was less than the Max Theoretical Frame Rate of the DUT/test setup. These are the only frame sizes where it is possible to produce a burst of frames that cause the DUT buffers to fill and eventually overflow, producing one or more discarded frames.¶ 6.2. Test for a Single Frame Size Each trial in the test requires the tester to send a burst of frames (after idle time) with the minimum interframe gap and to count the corresponding frames forwarded by the DUT.¶ The duration of the trial includes three REQUIRED components:¶ The time to send the burst of frames (at the back-to-back rate), determined by the search algorithm.¶ The time to receive the transferred burst of frames (at the [RFC2544] Throughput rate), possibly truncated by buffer overflow, and certainly including the latency of the DUT.¶ At least 2 seconds not overlapping the time to receive the burst (Component 2, above), to ensure that DUT buffers have depleted. Longer times MUST be used when conditions warrant, such as when buffer times >2 seconds are measured or when burst sending times are >2 seconds, but care is needed, since this time component directly increases trial duration, and many trials and tests comprise a complete benchmarking study.¶ The upper search limit for the time to send each burst MUST be configurable to values as high as 30 seconds (buffer time results reported at or near the configured upper limit are likely invalid, and the test MUST be repeated with a higher search limit).¶ If all frames have been received, the tester increases the length of the burst according to the search algorithm and performs another trial.¶ If the received frame count is less than the number of frames in the burst, then the limit of DUT processing and buffering may have been exceeded, and the burst length for the next trial is determined by the search algorithm (the burst length is typically reduced, but see below).¶ Classic search algorithms have been adapted for use in benchmarking, where the search requires discovery of a pair of outcomes, one with no loss and another with loss, at load conditions within the acceptable tolerance or accuracy. Conditions encountered when benchmarking the infrastructure for network function virtualization require algorithm enhancement. Fortunately, the adaptation of Binary Search, and an enhanced Binary Search with Loss Verification, have been specified in Clause 12.3 of [TST009]. These algorithms can easily be used for Back-to-Back Frame benchmarking by replacing the offered load level with burst length in frames. [TST009], Annex B describes the theory behind the enhanced Binary Search with Loss Verification algorithm.¶ There are also promising works in progress that may prove useful in Back-to-Back Frame benchmarking. [BMWG-MLRSEARCH] and [BMWG-PLRSEARCH] are two such examples.¶ Either the [TST009] Binary Search or Binary Search with Loss Verification algorithms MUST be used, and input parameters to the algorithm(s) MUST be reported.¶ The tester usually imposes a (configurable) minimum step size for burst length, and the step size MUST be reported with the results (as this influences the accuracy and variation of test results).¶ The original Section 26.4 of [RFC2544] definition is stated below:¶ The back-to-back value is the number of frames in the longest burst that the DUT will handle without the loss of any frames.¶ 6.3. Test Repetition and Benchmark On this topic, Section 26.4 of [RFC2544] requires:¶ The trial length MUST be at least 2 seconds and SHOULD be repeated at least 50 times with the average of the recorded values being reported.¶ Therefore, the Back-to-Back Frame benchmark is the average of burst-length values over repeated tests to determine the longest burst of frames that the DUT can successfully process and buffer without frame loss. Each of the repeated tests completes an independent search process.¶ In this update, the test MUST be repeated N times (the number of repetitions is now a variable that must be reported) for each frame size in the subset list, and each Back-to-Back Frame value MUST be made available for further processing (below).¶ 6.4. Benchmark Calculations For each frame size, calculate the following summary statistics for longest Back-to-Back Frame values over the N tests:¶ Average (Benchmark)¶ Minimum¶ Maximum¶ Standard Deviation¶ Further, calculate the Implied DUT Buffer Time and the Corrected DUT Buffer Time in seconds, as follows:¶ Implied DUT buffer time = Average num of Back-to-back Frames / Max Theoretical Frame Rate ¶ The formula above is simply expressing the burst of frames in units of time.¶ The next step is to apply a correction factor that accounts for the DUT's frame forwarding operation during the test (assuming the simple model of the DUT composed of a buffer and a forwarding function, described in Section 4).¶ Corrected DUT Buffer Time = / \\ Implied DUT |Implied DUT Measured Throughput | = Buffer Time - |Buffer Time * -------------------------- | | Max Theoretical Frame Rate | \\ /¶ where:¶ The \"Measured Throughput\" is the [RFC2544] Throughput Benchmark for the frame size tested, as augmented by methods including the Binary Search with Loss Verification algorithm in [TST009] where applicable and MUST be expressed in frames per second in this equation.¶ The \"Max Theoretical Frame Rate\" is a calculated value for the interface speed and link-layer technology used, and it MUST be expressed in frames per second in this equation.¶ The term on the far right in the formula for Corrected DUT Buffer Time accounts for all the frames in the burst that were transmitted by the DUT while the burst of frames was sent in.  So, these frames are not in the buffer, and the buffer size is more accurately estimated by excluding them. If Measured Throughput is not available, an acceptable approximation is the received frame rate (see Forwarding Rate in [RFC2889] measured during Back-to-back Frame testing).¶ 7. Reporting The Back-to-Back Frame results SHOULD be reported in the format of a table with a row for each of the tested frame sizes. There SHOULD be columns for the frame size and the resultant average frame count for each type of data stream tested.¶ The number of tests averaged for the benchmark, N, MUST be reported.¶ The minimum, maximum, and standard deviation across all complete tests SHOULD also be reported (they are referred to as \"Min,Max,StdDev\" in Table 1).¶ The Corrected DUT Buffer Time SHOULD also be reported.¶ If the tester operates using a limited maximum burst length in frames, then this maximum length SHOULD be reported.¶ Table 1: Back-to-Back Frame Results Frame Size, octets Ave B2B Length, frames Min,Max,StdDev Corrected Buff Time, Sec 64 26000 25500,27000,20 0.00004 Static and configuration parameters (reported with Table 1):¶ Number of test repetitions, N¶ Minimum Step Size (during searches), in frames.¶ If the tester has a specific (actual) frame rate of interest (less than the Throughput rate), it is useful to estimate the buffer time at that actual frame rate:¶ Actual Buffer Time = Max Theoretical Frame Rate = Corrected DUT Buffer Time * -------------------------- Actual Frame Rate ¶ and report this value, properly labeled.¶ 8. Security Considerations Benchmarking activities as described in this memo are limited to technology characterization using controlled stimuli in a laboratory environment, with dedicated address space and the other constraints of [RFC2544].¶ The benchmarking network topology will be an independent test setup and MUST NOT be connected to devices that may forward the test traffic into a production network or misroute traffic to the test management network. See [RFC6815].¶ Further, benchmarking is performed on an \"opaque-box\" (a.k.a. \"black-box\") basis, relying solely on measurements observable external to the Device or System Under Test (SUT).¶ The DUT developers are commonly independent from the personnel and institutions conducting benchmarking studies. DUT developers might have incentives to alter the performance of the DUT if the test conditions can be detected. Special capabilities SHOULD NOT exist in the DUT/SUT specifically for benchmarking purposes. Procedures described in this document are not designed to detect such activity. Additional testing outside of the scope of this document would be needed and has been used successfully in the past to discover such malpractices.¶ Any implications for network security arising from the DUT/SUT SHOULD be identical in the lab and in production networks.¶ 9. IANA Considerations This document has no IANA actions.¶ 10. References 10.1. Normative References [RFC1242] Bradner, S., \"Benchmarking Terminology for Network Interconnection Devices\", RFC 1242, DOI 10.17487/RFC1242, July 1991, <https://www.rfc-editor.org/info/rfc1242>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2544] Bradner, S. and J. McQuaid, \"Benchmarking Methodology for Network Interconnect Devices\", RFC 2544, DOI 10.17487/RFC2544, March 1999, <https://www.rfc-editor.org/info/rfc2544>. [RFC6985] Morton, A., \"IMIX Genome: Specification of Variable Packet Sizes for Additional Testing\", RFC 6985, DOI 10.17487/RFC6985, July 2013, <https://www.rfc-editor.org/info/rfc6985>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8239] Avramov, L. and J. Rapp, \"Data Center Benchmarking Methodology\", RFC 8239, DOI 10.17487/RFC8239, August 2017, <https://www.rfc-editor.org/info/rfc8239>. [TST009] ETSI, \"Network Functions Virtualisation (NFV) Release 3; Testing; Specification of Networking Benchmarks and Measurement Methods for NFVI\", Rapporteur: A. Morton, ETSI GS NFV-TST 009 v3.4.1, December 2020, <https://www.etsi.org/deliver/etsi_gs/NFV-TST/001_099/009/03.04.01_60/gs_NFV-TST009v030401p.pdf>. 10.2. Informative References [BMWG-MLRSEARCH] Konstantynowicz, M., Ed. and V. Polák, Ed., \"Multiple Loss Ratio Search for Packet Throughput (MLRsearch)\", Work in Progress, Internet-Draft, draft-ietf-bmwg-mlrsearch-00, 9 February 2021, <https://tools.ietf.org/html/draft-ietf-bmwg-mlrsearch-00>. [BMWG-PLRSEARCH] Konstantynowicz, M., Ed. and V. Polák, Ed., \"Probabilistic Loss Ratio Search for Packet Throughput (PLRsearch)\", Work in Progress, Internet-Draft, draft-vpolak-bmwg-plrsearch-03, 6 March 2020, <https://tools.ietf.org/html/draft-vpolak-bmwg-plrsearch-03>. [OPNFV-2017] Cooper, T., Rao, S., and A. Morton, \"Dataplane Performance, Capacity, and Benchmarking in OPNFV\", 15 June 2017, <https://wiki.anuket.io/download/attachments/4404001/VSPERF-Dataplane-Perf-Cap-Bench.pdf?version=1&modificationDate=1621191833500&api=v2>. [RFC1944] Bradner, S. and J. McQuaid, \"Benchmarking Methodology for Network Interconnect Devices\", RFC 1944, DOI 10.17487/RFC1944, May 1996, <https://www.rfc-editor.org/info/rfc1944>. [RFC2889] Mandeville, R. and J. Perser, \"Benchmarking Methodology for LAN Switching Devices\", RFC 2889, DOI 10.17487/RFC2889, August 2000, <https://www.rfc-editor.org/info/rfc2889>. [RFC5180] Popoviciu, C., Hamza, A., Van de Velde, G., and D. Dugatkin, \"IPv6 Benchmarking Methodology for Network Interconnect Devices\", RFC 5180, DOI 10.17487/RFC5180, May 2008, <https://www.rfc-editor.org/info/rfc5180>. [RFC6201] Asati, R., Pignataro, C., Calabria, F., and C. Olvera, \"Device Reset Characterization\", RFC 6201, DOI 10.17487/RFC6201, March 2011, <https://www.rfc-editor.org/info/rfc6201>. [RFC6815] Bradner, S., Dubray, K., McQuaid, J., and A. Morton, \"Applicability Statement for RFC 2544: Use on Production Networks Considered Harmful\", RFC 6815, DOI 10.17487/RFC6815, November 2012, <https://www.rfc-editor.org/info/rfc6815>. [VSPERF-b2b] Morton, A., \"Back2Back Testing Time Series (from CI)\", May 2021, <https://wiki.anuket.io/display/HOME/Traffic+Generator+Testing#TrafficGeneratorTesting-AppendixB:Back2BackTestingTimeSeries(fromCI)>. [VSPERF-BSLV] Rao, S. and A. Morton, \"Evolution of Repeatability in Benchmarking: Fraser Plugfest (Summary for IETF BMWG)\", July 2018, <https://datatracker.ietf.org/meeting/102/materials/slides-102-bmwg-evolution-of-repeatability-in-benchmarking-fraser-plugfest-summary-for-ietf-bmwg-00>. [VSPERF-CI] Tahhan, M., \"OPNFV VSPERF CI\", September 2019, <https://wiki.anuket.io/display/HOME/VSPERF+CI>. Acknowledgments Thanks to Trevor Cooper, Sridhar Rao, and Martin Klozik of the VSPERF project for many contributions to the early testing [VSPERF-b2b]. Yoshiaki Itou has also investigated the topic and made useful suggestions. Maciek Konstantyowicz and Vratko Polák also provided many comments and suggestions based on extensive integration testing and resulting search-algorithm proposals -- the most up-to-date feedback possible. Tim Carlin also provided comments and support for the document. Warren Kumari's review improved readability in several key passages. David Black, Martin Duke, and Scott Bradner's comments improved the clarity and configuration advice on trial duration. Mališa Vučinić suggested additional text on DUT design cautions in the Security Considerations section.¶ Author's Address Al Morton AT&T Labs 200 Laurel Avenue South Middletown, NJ 07748 United States of America Phone: +1 732 420 1571 Email: acmorton@att.com"
    },
    {
        "Number": "9009",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Efficient Route Invalidation",
        "Authors": [
            "R.A. Jadhav",
            "Ed.",
            "P. Thubert",
            "R.N. Sahoo",
            "Z. Cao"
        ],
        "Date": "2021-04",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document explains the problems associated with the use of No-Path Destination Advertisement Object (NPDAO) messaging in RFC 6550 and also discusses the requirements for an optimized route invalidation messaging scheme. Further, this document specifies a new proactive route invalidation message called the \"Destination Cleanup Object\" (DCO), which fulfills requirements for optimized route invalidation messaging.",
        "Keywords": [
            "NPDAO",
            "DCO",
            "no-path",
            "route",
            "cleanup"
        ],
        "Content": "RFC 9009: Efficient Route Invalidation RFC 9009 Efficient Route Invalidation April 2021 Jadhav, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9009 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: R.A. Jadhav, Ed. Huawei P. Thubert Cisco R.N. Sahoo Huawei Z. Cao Huawei RFC 9009 Efficient Route Invalidation Abstract This document explains the problems associated with the use of No-Path Destination Advertisement Object (NPDAO) messaging in RFC 6550 and also discusses the requirements for an optimized route invalidation messaging scheme. Further, this document specifies a new proactive route invalidation message called the \"Destination Cleanup Object\" (DCO), which fulfills requirements for optimized route invalidation messaging.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9009.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language and Terminology 1.2.  RPL NPDAO Messaging 1.3.  Why Is NPDAO Messaging Important? 2.  Problems with the RPL NPDAO Messaging 2.1.  Lost NPDAO Due to Link Break to the Previous Parent 2.2.  Invalidating Routes of Dependent Nodes 2.3.  Possible Route Downtime Caused by Asynchronous Operation of the NPDAO and DAO 3.  Requirements for NPDAO Optimization 3.1.  Req. #1: Remove Messaging Dependency on the Link to the Previous Parent 3.2.  Req. #2: Route Invalidation for Dependent Nodes at the Parent Switching Node 3.3.  Req. #3: Route Invalidation Should Not Impact Data Traffic 4.  Changes to RPL Signaling 4.1.  Change in RPL Route Invalidation Semantics 4.2.  Transit Information Option Changes 4.3.  Destination Cleanup Object (DCO) 4.3.1.  Secure DCO 4.3.2.  DCO Options 4.3.3.  Path Sequence in the DCO 4.3.4.  Destination Cleanup Option Acknowledgment (DCO-ACK) 4.3.5.  Secure DCO-ACK 4.4.  DCO Base Rules 4.5.  Unsolicited DCO 4.6.  Other Considerations 4.6.1.  Invalidation of Dependent Nodes 4.6.2.  NPDAO and DCO in the Same Network 4.6.3.  Considerations for DCO Retries 4.6.4.  DCO with Multiple Preferred Parents 5.  IANA Considerations 5.1.  New Registry for the Destination Cleanup Object (DCO) Flags 5.2.  New Registry for the Destination Cleanup Object (DCO) Acknowledgment Flags 5.3.  RPL Rejection Status Values 6.  Security Considerations 7.  Normative References Appendix A.  Example Messaging A.1.  Example DCO Messaging A.2.  Example DCO Messaging with Multiple Preferred Parents Acknowledgments Authors' Addresses 1. Introduction RPL (the Routing Protocol for Low-Power and Lossy Networks) as defined in [RFC6550] specifies a proactive distance-vector-based routing scheme. RPL has optional messaging in the form of DAO (Destination Advertisement Object) messages, which the 6LBR (6LoWPAN Border Router) and 6LR (6LoWPAN Router) can use to learn a route towards the downstream nodes. (\"6LoWPAN\" stands for \"IPv6 over Low-Power Wireless Personal Area Network\".) In Storing mode, DAO messages would result in routing entries being created on all intermediate 6LRs from a node's parent all the way towards the 6LBR.¶ RPL allows the use of No-Path DAO (NPDAO) messaging to invalidate a routing path corresponding to the given target, thus releasing resources utilized on that path. An NPDAO is a DAO message with a route lifetime of zero. It originates at the target node and always flows upstream towards the 6LBR. This document explains the problems associated with the use of NPDAO messaging in [RFC6550] and also discusses the requirements for an optimized route invalidation messaging scheme. Further, this document specifies a new proactive route invalidation message called the \"Destination Cleanup Object\" (DCO), which fulfills requirements for optimized route invalidation messaging.¶ This document only caters to RPL's Storing Mode of Operation (MOP). The Non-Storing MOP does not require the use of an NPDAO for route invalidation, since routing entries are not maintained on 6LRs.¶ 1.1. Requirements Language and Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ This specification requires readers to be familiar with all the terms and concepts that are discussed in \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550].¶ Low-Power and Lossy Network (LLN): A network in which both the routers and their interconnects are constrained. LLN routers typically operate with constraints on processing power, memory, and energy (battery power). Their interconnects are characterized by high loss rates, low data rates, and instability.¶ 6LoWPAN Router (6LR): An intermediate router that is able to send and receive Router Advertisements (RAs) and Router Solicitations (RSs) as well as forward and route IPv6 packets.¶ Directed Acyclic Graph (DAG): A directed graph having the property that all edges are oriented in such a way that no cycles exist.¶ Destination-Oriented DAG (DODAG): A DAG rooted at a single destination, i.e., at a single DAG root with no outgoing edges.¶ 6LoWPAN Border Router (6LBR): A border router that is a DODAG root and is the edge node for traffic flowing in and out of the 6LoWPAN.¶ Destination Advertisement Object (DAO): DAO messaging allows downstream routes to the nodes to be established.¶ DODAG Information Object (DIO): DIO messaging allows upstream routes to the 6LBR to be established. DIO messaging is initiated at the DAO root.¶ Common ancestor node: A 6LR/6LBR node that is the first common node between two paths of a target node.¶ No-Path DAO (NPDAO): A DAO message that has a target with a lifetime of 0. Used for the purpose of route invalidation.¶ Destination Cleanup Object (DCO): A new RPL control message code defined by this document. DCO messaging improves proactive route invalidation in RPL.¶ Regular DAO: A DAO message with a non-zero lifetime. Routing adjacencies are created or updated based on this message.¶ Target node: The node switching its parent whose routing adjacencies are updated (created/removed).¶ 1.2. RPL NPDAO Messaging RPL uses NPDAO messaging in Storing mode so that the node changing its routing adjacencies can invalidate the previous route. This is needed so that nodes along the previous path can release any resources (such as the routing entry) they maintain on behalf of the target node.¶ Throughout this document, we will refer to the topology shown in Figure 1:¶ (6LBR) | | | (A) / \\ / \\ / \\ (G) (H) | | | | | | (B) (C) \\ ; \\ ; \\ ; (D) / \\ / \\ / \\ (E) (F) Figure 1: Sample Topology Node D is connected via preferred parent B. D has an alternate path via C towards the 6LBR. Node A is the common ancestor for D for paths through B-G and C-H. When D switches from B to C, RPL allows sending an NPDAO to B and a regular DAO to C.¶ 1.3. Why Is NPDAO Messaging Important? Resources in LLN nodes are typically constrained. There is limited memory available, and routing entry records are one of the primary elements occupying dynamic memory in the nodes. Route invalidation helps 6LR nodes to decide which routing entries can be discarded for better use of the limited resources. Thus, it becomes necessary to have an efficient route invalidation mechanism. Also note that a single parent switch may result in a \"subtree\" switching from one parent to another. Thus, the route invalidation needs to be done on behalf of the subtree and not the switching node alone. In the above example, when Node D switches its parent, route updates need to be done for the routing table entries of C, H, A, G, and B with destinations D, E, and F. Without efficient route invalidation, a 6LR may have to hold a lot of stale route entries.¶ 2. Problems with the RPL NPDAO Messaging 2.1. Lost NPDAO Due to Link Break to the Previous Parent When a node switches its parent, the NPDAO is to be sent to its previous parent and a regular DAO to its new parent. In cases where the node switches its parent because of transient or permanent parent link/node failure, the NPDAO message may not be received by the parent.¶ 2.2. Invalidating Routes of Dependent Nodes RPL does not specify how route invalidation will work for dependent nodes in the switching node subDAG, resulting in stale routing entries of the dependent nodes. The only way for a 6LR to invalidate the route entries for dependent nodes would be to use route lifetime expiry, which could be substantially high for LLNs.¶ In the example topology, when Node D switches its parent, Node D generates an NPDAO on its own behalf. There is no NPDAO generated by the dependent child Nodes E and F, through the previous path via D to B and G, resulting in stale entries on Nodes B and G for Nodes E and F.¶ 2.3. Possible Route Downtime Caused by Asynchronous Operation of the NPDAO and DAO A switching node may generate both an NPDAO and a DAO via two different paths at almost the same time. It is possible that the NPDAO may invalidate the previous route and the regular DAO sent via the new path gets lost on the way. This may result in route downtime, impacting downward traffic for the switching node.¶ In the example topology, say that Node D switches from parent B to C. An NPDAO sent via the previous route may invalidate the previous route, whereas there is no way to determine whether the new DAO has successfully updated the route entries on the new path.¶ 3. Requirements for NPDAO Optimization 3.1. Req. #1: Remove Messaging Dependency on the Link to the Previous Parent When the switching node sends the NPDAO message to the previous parent, it is normal that the link to the previous parent is prone to failure (that's why the node decided to switch). Therefore, it is required that the route invalidation does not depend on the previous link, which is prone to failure. The previous link referred to here represents the link between the node and its previous parent (from which the node is now disassociating).¶ 3.2. Req. #2: Route Invalidation for Dependent Nodes at the Parent Switching Node It should be possible to do route invalidation for dependent nodes rooted at the switching node.¶ 3.3. Req. #3: Route Invalidation Should Not Impact Data Traffic While sending the NPDAO and DAO messages, it is possible that the NPDAO successfully invalidates the previous path, while the newly sent DAO gets lost (new path not set up successfully). This will result in downstream unreachability to the node switching paths. Therefore, it is desirable that the route invalidation is synchronized with the DAO to avoid the risk of route downtime.¶ 4. Changes to RPL Signaling 4.1. Change in RPL Route Invalidation Semantics As described in Section 1.2, the NPDAO originates at the node changing to a new parent and traverses upstream towards the root. In order to solve the problems discussed in Section 2, this document adds a new proactive route invalidation message called the \"Destination Cleanup Object\" (DCO), which originates at a common ancestor node and flows downstream the old path. The common ancestor node generates a DCO when removing a next hop to a target -- for instance, as a delayed response to receiving a regular DAO from another child node with a Path Sequence for the target that is the same or newer, in which case the DCO transmission is canceled.¶ The 6LRs in the path for the DCO take such action as route invalidation based on the DCO information and subsequently send another DCO with the same information downstream to the next hop(s). This operation is similar to how the DAOs are handled on intermediate 6LRs in the Storing MOP [RFC6550]. Just like the DAO in the Storing MOP, the DCO is sent using link-local unicast source and destination IPv6 addresses. Unlike the DAO, which always travels upstream, the DCO always travels downstream.¶ In Figure 1, when child Node D decides to switch the path from parent B to parent C, it sends a regular DAO to Node C with reachability information containing the address of D as the target and an incremented Path Sequence. Node C will update the routing table based on the reachability information in the DAO and will in turn generate another DAO with the same reachability information and forward it to H. Node H recursively follows the same procedure as Node C and forwards it to Node A. When Node A receives the regular DAO, it finds that it already has a routing table entry on behalf of the Target Address of Node D. It finds, however, that the next-hop information for reaching Node D has changed, i.e., Node D has decided to change the paths. In this case, Node A, which is the common ancestor node for Node D along the two paths (previous and new), can generate a DCO that traverses the network downwards over the old path to the target. Node A handles normal DAO forwarding to the 6LBR as required by [RFC6550].¶ 4.2. Transit Information Option Changes Every RPL message is divided into base message fields and additional options, as described in Section 6 of [RFC6550]. The base fields apply to the message as a whole, and options are appended to add message-specific / use-case-specific attributes. As an example, a DAO message may be attributed by one or more \"RPL Target\" options that specify that the reachability information is for the given targets. Similarly, a Transit Information option may be associated with a set of RPL Target options.¶ This document specifies a change in the Transit Information option to contain the \"Invalidate previous route\" (I) flag. This 'I' flag signals the common ancestor node to generate a DCO on behalf of the target node with a RPL Status of 195, indicating that the address has moved. The 'I' flag is carried in the Transit Information option, which augments the reachability information for a given set of one or more RPL Targets. A Transit Information option with the 'I' flag set should be carried in the DAO message when route invalidation is sought for the corresponding target or targets.¶ Value 195 represents the 'U' and 'A' bits in RPL Status, to be set as per Figure 6 of [RFC9010], with the lower 6 bits set to the 6LoWPAN Neighbor Discovery (ND) Extended Address Registration Option (EARO) Status value of 3 indicating 'Moved' as per Table 1 of [RFC8505].¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type = 0x06 | Option Length |E|I| Flags | Path Control | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Path Sequence | Path Lifetime | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 2: Updated Transit Information Option (New 'I' Flag Added) I (Invalidate previous route) flag: The 'I' flag is set by the target node to indicate to the common ancestor node that it wishes to invalidate any previous route between the two paths.¶ [RFC6550] allows the parent address to be sent in the Transit Information option, depending on the MOP. In the case of the Storing MOP, the field is usually not needed. In the case of a DCO, the Parent Address field MUST NOT be included.¶ Upon receiving a DAO message with a Transit Information option that has the 'I' flag set, and as a delayed response removing a routing adjacency to the target indicated in the Transit Information option, the common ancestor node SHOULD generate a DCO message to the next hop associated to that adjacency. The 'I' flag is intended to give the target node control over its own route invalidation, serving as a signal to request DCO generation.¶ 4.3. Destination Cleanup Object (DCO) A new ICMPv6 RPL control message code is defined by this specification and is referred to as the \"Destination Cleanup Object\" (DCO), which is used for proactive cleanup of state and routing information held on behalf of the target node by 6LRs. The DCO message always traverses downstream and cleans up route information and other state information associated with the given target. The format of the DCO message is shown in Figure 3.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | RPLInstanceID |K|D| Flags | RPL Status | DCOSequence | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | + + | | + DODAGID (optional) + | | + + | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Option(s)... +-+-+-+-+-+-+-+-+ Figure 3: DCO Base Object RPLInstanceID: 8-bit field indicating the topology instance associated with the DODAG, as learned from the DIO.¶ K: The 'K' flag indicates that the recipient of a DCO message is expected to send a DCO-ACK back. If the DCO-ACK is not received even after setting the 'K' flag, an implementation may retry the DCO at a later time. The number of retries is implementation and deployment dependent and is expected to be kept similar to the number of DAO retries [RFC6550]. Section 4.6.3 specifies the considerations for DCO retries. A node receiving a DCO message without the 'K' flag set MAY respond with a DCO-ACK, especially to report an error condition. An example error condition could be that the node sending the DCO-ACK does not find the routing entry for the indicated target. When the sender does not set the 'K' flag, it is an indication that the sender does not expect a response, and the sender SHOULD NOT retry the DCO.¶ D: The 'D' flag indicates that the DODAGID field is present. This flag MUST be set when a local RPLInstanceID is used.¶ Flags: The 6 bits remaining unused in the Flags field are reserved for future use. These bits MUST be initialized to zero by the sender and MUST be ignored by the receiver.¶ RPL Status: As defined in [RFC6550] and updated in [RFC9010]. The root or common parent that generates a DCO is authoritative for setting the status information, and the information is unchanged as propagated down the DODAG. This document does not specify a differentiated action based on the RPL Status.¶ DCOSequence: 8-bit field incremented at each unique DCO message from a node and echoed in the DCO-ACK message. The initial DCOSequence can be chosen randomly by the node. Section 4.4 explains the handling of the DCOSequence.¶ DODAGID (optional): 128-bit unsigned integer set by a DODAG root that uniquely identifies a DODAG. This field MUST be present when the 'D' flag is set and MUST NOT be present if the 'D' flag is not set. The DODAGID is used when a local RPLInstanceID is in use, in order to identify the DODAGID that is associated with the RPLInstanceID.¶ 4.3.1. Secure DCO A Secure DCO message follows the format shown in [RFC6550], Figure 7, where the base message format is the DCO message shown in Figure 3 of this document.¶ 4.3.2. DCO Options The DCO message MUST carry at least one RPL Target and the Transit Information option and MAY carry other valid options. This specification allows for the DCO message to carry the following options:¶ 0x00 Pad1¶ 0x01 PadN¶ 0x05 RPL Target¶ 0x06 Transit Information¶ 0x09 RPL Target Descriptor¶ Section 6.7 of [RFC6550] defines all the above-mentioned options. The DCO carries a RPL Target option and an associated Transit Information option with a lifetime of 0x00000000 to indicate a loss of reachability to that target.¶ 4.3.3. Path Sequence in the DCO A DCO message includes a Transit Information option for each invalidated path. The value of the Path Sequence counter in the Transit Information option allows identification of the freshness of the DCO message versus the newest known to the 6LRs along the path being removed. If the DCO is generated by a common parent in response to a DAO message, then the Transit Information option in the DCO MUST use the value of the Path Sequence as found in the newest Transit Information option that was received for that target by the common parent. If a 6LR down the path receives a DCO with a Path Sequence that is not newer than the Path Sequence as known from a Transit Information option in a DAO message, then the 6LR MUST NOT remove its current routing state, and it MUST NOT forward the DCO down a path where it is not newer. If the DCO is newer, the 6LR may retain a temporary state to ensure that a DAO that is received later with a Transit Information option with an older sequence number is ignored. A Transit Information option in a DAO message that is as new as or newer than that in a DCO wins, meaning that the path indicated in the DAO is installed and the DAO is propagated. When the DCO is propagated upon a DCO from an upstream parent, the Path Sequence MUST be copied from the received DCO.¶ 4.3.4. Destination Cleanup Option Acknowledgment (DCO-ACK) The DCO-ACK message SHOULD be sent as a unicast packet by a DCO recipient in response to a unicast DCO message with the 'K' flag set. If the 'K' flag is not set, then the receiver of the DCO message MAY send a DCO-ACK, especially to report an error condition. The format of the DCO-ACK message is shown in Figure 4.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | RPLInstanceID |D| Flags | DCOSequence | DCO-ACK Status| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | + + | | + DODAGID (optional) + | | + + | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 4: DCO-ACK Base Object RPLInstanceID: 8-bit field indicating the topology instance associated with the DODAG, as learned from the DIO.¶ D: The 'D' flag indicates that the DODAGID field is present. This flag MUST be set when a local RPLInstanceID is used.¶ Flags: 7-bit unused field. The field MUST be initialized to zero by the sender and MUST be ignored by the receiver.¶ DCOSequence: 8-bit field. The DCOSequence in the DCO-ACK is copied from the DCOSequence received in the DCO message.¶ DCO-ACK Status: Indicates completion status. The DCO-ACK Status field is defined based on Figure 6 of [RFC9010] defining the RPL Status Format. A StatusValue of 0 along with the 'U' bit set to 0 indicates Success / Unqualified acceptance as per Figure 6 of [RFC9010]. A StatusValue of 1 with the 'U' bit set to 1 indicates 'No routing entry' as defined in Section 5.3 of this document.¶ DODAGID (optional): 128-bit unsigned integer set by a DODAG root that uniquely identifies a DODAG. This field MUST be present when the 'D' flag is set and MUST NOT be present when the 'D' flag is not set. The DODAGID is used when a local RPLInstanceID is in use, in order to identify the DODAGID that is associated with the RPLInstanceID.¶ 4.3.5. Secure DCO-ACK A Secure DCO-ACK message follows the format shown in [RFC6550], Figure 7, where the base message format is the DCO-ACK message shown in Figure 4 of this document.¶ 4.4. DCO Base Rules If a node sends a DCO message with newer or different information than the prior DCO message transmission, it MUST increment the DCOSequence field by at least one. A DCO message transmission that is identical to the prior DCO message transmission MAY increment the DCOSequence field. The DCOSequence counter follows the sequence counter operation as defined in Section 7.2 of [RFC6550].¶ The RPLInstanceID and DODAGID fields of a DCO message MUST have the same values as those contained in the DAO message in response to which the DCO is generated on the common ancestor node.¶ A node MAY set the 'K' flag in a unicast DCO message to solicit a unicast DCO-ACK in response, in order to confirm the attempt.¶ A node receiving a unicast DCO message with the 'K' flag set SHOULD respond with a DCO-ACK. A node receiving a DCO message without the 'K' flag set MAY respond with a DCO-ACK, especially to report an error condition.¶ A node receiving a unicast DCO message MUST verify the stored Path Sequence in context to the given target. If the stored Path Sequence is as new as or newer than the Path Sequence received in the DCO, then the DCO MUST be dropped.¶ A node that sets the 'K' flag in a unicast DCO message but does not receive a DCO-ACK in response MAY reschedule the DCO message transmission for another attempt, up until an implementation-specific number of retries.¶ A node receiving a unicast DCO message with its own address in the RPL Target option MUST strip off that Target option. If this Target option is the only one in the DCO message, then the DCO message MUST be dropped.¶ The scope of DCOSequence values is unique to the node that generates them.¶ 4.5. Unsolicited DCO A 6LR may generate an unsolicited DCO to unilaterally clean up the path on behalf of the target entry. The 6LR has all the state information, namely, the Target Address and the Path Sequence, required for generating a DCO in its routing table. The conditions under which a 6LR may generate an unsolicited DCO are beyond the scope of this document, but possible reasons could be as follows:¶ On route expiry of an entry, a 6LR may decide to graciously clean up the entry by initiating a DCO.¶ A 6LR needs to entertain higher-priority entries in case the routing table is full, thus resulting in eviction of an existing routing entry. In this case, the eviction can be handled graciously by using a DCO.¶ A DCO that is generated asynchronously to a DAO message and is meant to discard all state along the path regardless of the Path Sequence MUST use a Path Sequence value of 240 (see Section 7.2 of [RFC6550]). This value allows the DCO to win against any established DAO path but to lose against a DAO path that is being installed. Note that if an ancestor initiates a unilateral path cleanup on an established path using a DCO with a Path Sequence value of 240, the DCO will eventually reach the target node, which will thus be informed of the path invalidation.¶ 4.6. Other Considerations 4.6.1. Invalidation of Dependent Nodes The RPL specification [RFC6550] does not provide a mechanism for route invalidation for dependent nodes. This document allows the invalidation of dependent nodes. Dependent nodes will generate their respective DAOs to update their paths, and the previous route invalidation for those nodes should work in a manner similar to what is described for a switching node. The dependent node may set the 'I' flag in the Transit Information option as part of a regular DAO so as to request invalidation of the previous route from the common ancestor node.¶ Dependent nodes do not have any indication regarding whether any of their parents have in turn decided to switch their parent. Thus, for route invalidation, the dependent nodes may choose to always set the 'I' flag in all their DAO messages' Transit Information options. Note that setting the 'I' flag is not counterproductive even if there is no previous route to be invalidated.¶ 4.6.2. NPDAO and DCO in the Same Network The NPDAO mechanism provided in [RFC6550] can still be used in the same network where a DCO is used. NPDAO messaging can be used, for example, on route lifetime expiry of the target or when the node simply decides to gracefully terminate the RPL session on graceful node shutdown. Moreover, a deployment can have a mix of nodes supporting the DCO and the existing NPDAO mechanism. It is also possible that the same node supports both NPDAO and DCO signaling for route invalidation.¶ Section 9.8 of [RFC6550] states, \"When a node removes a node from its DAO parent set, it SHOULD send a No-Path DAO message (Section 6.4.3) to that removed DAO parent to invalidate the existing route.\" This document introduces an alternative and more optimized way to perform route invalidation, but it also allows existing NPDAO messaging to work. Thus, an implementation has two choices to make when a route invalidation is to be initiated:¶ Use an NPDAO to invalidate the previous route, and send a regular DAO on the new path.¶ Send a regular DAO on the new path with the 'I' flag set in the Transit Information option such that the common ancestor node initiates the DCO message downstream to invalidate the previous route.¶ This document recommends using option 2, for the reasons specified in Section 3 of this document.¶ This document assumes that all the 6LRs in the network support this specification. If there are 6LR nodes that do not support this document that are in the path of the DCO message transmission, then the route invalidation for the corresponding targets (targets that are in the DCO message) may not work or may work partially. Alternatively, a node could generate an NPDAO if it does not receive a DCO with itself as the target within a specified time limit. The specified time limit is deployment specific and depends upon the maximum depth of the network and per-hop average latency. Note that sending an NPDAO and a DCO for the same operation would not result in unwanted side effects because the acceptability of an NPDAO or a DCO depends upon the Path Sequence freshness.¶ 4.6.3. Considerations for DCO Retries A DCO message could be retried by a sender if it sets the 'K' flag and does not receive a DCO-ACK. The DCO retry time could be dependent on the maximum depth of the network and average per-hop latency. This could range from 2 seconds to 120 seconds, depending on the deployment. If the latency limits are not known, an implementation MUST NOT retry more than once in 3 seconds and MUST NOT retry more than three times.¶ The number of retries could also be set depending on how critical the route invalidation could be for the deployment and the link-layer retry configuration. For networks supporting only Multi-Point to Point (MP2P) and Point-to-Multipoint (P2MP) flows, such as in Advanced Metering Infrastructure (AMI) and telemetry applications, the 6LRs may not be very keen to invalidate routes, unless they are highly memory constrained. For home and building automation networks that may have substantial P2P traffic, the 6LRs might be keen to invalidate efficiently because it may additionally impact forwarding efficiency.¶ 4.6.4. DCO with Multiple Preferred Parents [RFC6550] allows a node to select multiple preferred parents for route establishment. Section 9.2.1 of [RFC6550] specifies, \"All DAOs generated at the same time for the same target MUST be sent with the same Path Sequence in the Transit Information.\" Subsequently, when route invalidation has to be initiated, an NPDAO, which can be initiated with an updated Path Sequence to all the parent nodes through which the route is to be invalidated, can be used; see [RFC6550].¶ With a DCO, the target node itself does not initiate the route invalidation; this is left to the common ancestor node. A common ancestor node when it discovers an updated DAO from a new next hop, it initiates a DCO. It is recommended that an implementation initiate a DCO after a time period (DelayDCO) such that the common ancestor node may receive updated DAOs from all possible next hops. This will help to reduce DCO control overhead, i.e., the common ancestor can wait for updated DAOs from all possible directions before initiating a DCO for route invalidation. After timeout, the DCO needs to be generated for all the next hops for which the route invalidation needs to be done.¶ This document recommends using a DelayDCO timer value of 1 second. This value is inspired by the default DelayDAO timer value of 1 second [RFC6550]. Here, the hypothesis is that the DAOs from all possible parent sets would be received on the common ancestor within this time period.¶ It is still possible that a DCO is generated before all the updated DAOs from all the paths are received. In this case, the ancestor node would start the invalidation procedure for paths from which the updated DAO is not received. The DCO generated in this case would start invalidating the segments along these paths on which the updated DAOs are not received. But once the DAO reaches these segments, the routing state would be updated along these segments; this should not lead to any inconsistent routing states.¶ Note that there is no requirement for synchronization between a DCO and DAOs. The DelayDCO timer simply ensures that DCO control overhead can be reduced and is only needed when the network contains nodes using multiple preferred parents.¶ 5. IANA Considerations IANA has allocated codes for the DCO and DCO-ACK messages from the \"RPL Control Codes\" registry.¶ Table 1: New Codes for DCO and DCO-ACK Messages Code Description Reference 0x07 Destination Cleanup Object This document 0x08 Destination Cleanup Object Acknowledgment This document 0x87 Secure Destination Cleanup Object This document 0x88 Secure Destination Cleanup Object Acknowledgment This document IANA has allocated bit 1 from the \"Transit Information Option Flags\" registry for the 'I' flag (Invalidate previous route; see Section 4.2).¶ 5.1. New Registry for the Destination Cleanup Object (DCO) Flags IANA has created a registry for the 8-bit Destination Cleanup Object (DCO) Flags field. The \"Destination Cleanup Object (DCO) Flags\" registry is located in the \"Routing Protocol for Low Power and Lossy Networks (RPL)\" registry.¶ New bit numbers may be allocated only by IETF Review [RFC8126]. Each bit is tracked with the following qualities:¶ Bit number (counting from bit 0 as the most significant bit)¶ Capability description¶ Defining RFC¶ The following bits are currently defined:¶ Table 2: DCO Base Flags Bit number Description Reference 0 DCO-ACK request (K) This document 1 DODAGID field is present (D) This document 5.2. New Registry for the Destination Cleanup Object (DCO) Acknowledgment Flags IANA has created a registry for the 8-bit Destination Cleanup Object (DCO) Acknowledgment Flags field. The \"Destination Cleanup Object (DCO) Acknowledgment Flags\" registry is located in the \"Routing Protocol for Low Power and Lossy Networks (RPL)\" registry.¶ New bit numbers may be allocated only by IETF Review [RFC8126]. Each bit is tracked with the following qualities:¶ Bit number (counting from bit 0 as the most significant bit)¶ Capability description¶ Defining RFC¶ The following bit is currently defined:¶ Table 3: DCO-ACK Base Flag Bit number Description Reference 0 DODAGID field is present (D) This document 5.3. RPL Rejection Status Values This document adds a new status value to the \"RPL Rejection Status\" subregistry initially created per Section 12.6 of [RFC9010].¶ Table 4: Rejection Value of the RPL Status Value Meaning Reference 1 No routing entry This document 6. Security Considerations This document introduces the ability for a common ancestor node to invalidate a route on behalf of the target node. The common ancestor node could be directed to do so by the target node, using the 'I' flag in a DCO's Transit Information option. However, the common ancestor node is in a position to unilaterally initiate the route invalidation, since it possesses all the required state information, namely, the Target Address and the corresponding Path Sequence. Thus, a rogue common ancestor node could initiate such an invalidation and impact the traffic to the target node.¶ The DCO carries a RPL Status value, which is informative. New Status values may be created over time, and a node will ignore an unknown Status value. This enables the RPL Status field to be used as a cover channel. But the channel only works once, since the message destroys its own medium, i.e., the existing route that it is removing.¶ This document also introduces an 'I' flag, which is set by the target node and used by the ancestor node to initiate a DCO if the ancestor sees an update in the routing adjacency. However, this flag could be spoofed by a malicious 6LR in the path and can cause invalidation of an existing active path. Note that invalidation will work only if the Path Sequence condition is also met for the target for which the invalidation is attempted. Having said that, such a malicious 6LR may spoof a DAO on behalf of the (sub) child with the 'I' flag set and can cause route invalidation on behalf of the (sub) child node. Note that by using existing mechanisms offered by [RFC6550], a malicious 6LR might also spoof a DAO with a lifetime of zero or otherwise cause denial of service by dropping traffic entirely, so the new mechanism described in this document does not present a substantially increased risk of disruption.¶ This document assumes that the security mechanisms as defined in [RFC6550] are followed, which means that the common ancestor node and all the 6LRs are part of the RPL network because they have the required credentials. A non-secure RPL network needs to take into consideration the risks highlighted in this section as well as those highlighted in [RFC6550].¶ All RPL messages support a secure version of messages; this allows integrity protection using either a Message Authentication Code (MAC) or a signature. Optionally, secured RPL messages also have encryption protection for confidentiality.¶ This document adds new messages (DCO and DCO-ACK) that are syntactically similar to existing RPL messages such as DAO and DAO-ACK. Secure versions of DCO and DCO-ACK messages are added in a way that is similar to the technique used for other RPL messages (such as DAO and DAO-ACK).¶ RPL supports three security modes, as mentioned in Section 10.1 of [RFC6550]:¶ Unsecured: In this mode, it is expected that the RPL control messages are secured by other security mechanisms, such as link-layer security. In this mode, the RPL control messages, including DCO and DCO-ACK messages, do not have Security sections. Also note that unsecured mode does not imply that all messages are sent without any protection.¶ Preinstalled: In this mode, RPL uses secure messages. Thus, secure versions of DCO and DCO-ACK messages MUST be used in this mode.¶ Authenticated: In this mode, RPL uses secure messages. Thus, secure versions of DCO and DCO-ACK messages MUST be used in this mode.¶ 7. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC9010] Thubert, P., Ed. and M. Richardson, \"Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves\", RFC 9010, DOI 10.17487/RFC9010, April 2021, <https://www.rfc-editor.org/info/rfc9010>. Appendix A. Example Messaging A.1. Example DCO Messaging In this example, Node D (Figure 1) switches its parent from B to C. This example assumes that Node D has already established its own route via Node B-G-A-6LBR using pathseq=x. The example uses DAO and DCO messaging conventions and specifies only the required parameters to explain the example, namely, the parameter 'tgt', which stands for \"Target option\"; the value of this parameter specifies the address of the target node. The parameter 'pathseq' specifies the Path Sequence value carried in the Transit Information option, and the parameter 'I_flag' specifies the 'I' flag in the Transit Information option. The sequence of actions is as follows:¶ Node D switches its parent from Node B to Node C.¶ D sends a regular DAO(tgt=D,pathseq=x+1,I_flag=1) in the updated path to C.¶ C checks for a routing entry on behalf of D; since it cannot find an entry on behalf of D, it creates a new routing entry and forwards the reachability information of the target D to H in a DAO(tgt=D,pathseq=x+1,I_flag=1).¶ Similar to C, Node H checks for a routing entry on behalf of D, cannot find an entry, and hence creates a new routing entry and forwards the reachability information of the target D to A in a DAO(tgt=D,pathseq=x+1,I_flag=1).¶ Node A receives the DAO(tgt=D,pathseq=x+1,I_flag=1) and checks for a routing entry on behalf of D. It finds a routing entry but checks that the next hop for target D is different (i.e., Node G). Node A checks the I_flag and generates the DCO(tgt=D,pathseq=x+1) to the previous next hop for target D, which is G. Subsequently, Node A updates the routing entry and forwards the reachability information of target D upstream using the DAO(tgt=D,pathseq=x+1,I_flag=1).¶ Node G receives the DCO(tgt=D,pathseq=x+1). It checks to see if the received Path Sequence is later than the stored Path Sequence. If it is later, Node G invalidates the routing entry of target D and forwards the (un)reachability information downstream to B in the DCO(tgt=D,pathseq=x+1).¶ Similarly, B processes the DCO(tgt=D,pathseq=x+1) by invalidating the routing entry of target D and forwards the (un)reachability information downstream to D.¶ D ignores the DCO(tgt=D,pathseq=x+1), since the target is itself.¶ The propagation of the DCO will stop at any node where the node does not have routing information associated with the target. If cached routing information is present and the cached Path Sequence is higher than the value in the DCO, then the DCO is dropped.¶ A.2. Example DCO Messaging with Multiple Preferred Parents As shown in Figure 5, node (N41) selects multiple preferred parents (N32) and (N33). The sequence of actions is listed below the figure.¶ (6LBR) | | | (N11) / \\ / \\ / \\ (N21) (N22) / / \\ / / \\ / / \\ (N31) (N32) (N33) : | / : | / : | / (N41) Figure 5: Sample Topology 2 (N41) sends a DAO(tgt=N41,PS=x,I_flag=1) to (N32) and (N33). Here, 'I_flag' refers to the Invalidation flag, and 'PS' refers to the Path Sequence in the Transit Information option.¶ (N32) sends the DAO(tgt=N41,PS=x,I_flag=1) to (N22). (N33) also sends the DAO(tgt=N41,PS=x,I_flag=1) to (N22). (N22) learns multiple routes for the same destination (N41) through multiple next hops. (N22) may receive the DAOs from (N32) and (N33) in any order with the I_flag set. The implementation should use the DelayDCO timer to wait to initiate the DCO. If (N22) receives an updated DAO from all the paths, then the DCO need not be initiated in this case. Thus, the routing table at N22 should contain (Dst,NextHop,PS): { (N41,N32,x), (N41,N33,x) }.¶ (N22) sends the DAO(tgt=N41,PS=x,I_flag=1) to (N11).¶ (N11) sends the DAO(tgt=N41,PS=x,I_flag=1) to (6LBR). Thus, the complete path is established.¶ (N41) decides to change the preferred parent set from { N32, N33 } to { N31, N32 }.¶ (N41) sends the DAO(tgt=N41,PS=x+1,I_flag=1) to (N32). (N41) sends the DAO(tgt=N41,PS=x+1,I_flag=1) to (N31).¶ (N32) sends the DAO(tgt=N41,PS=x+1,I_flag=1) to (N22). (N22) has multiple routes to destination (N41). It sees that a new Path Sequence for Target=N41 is received and thus waits for a predetermined time period (the DelayDCO time period) to invalidate another route { (N41),(N33),x }.  After the time period, (N22) sends the DCO(tgt=N41,PS=x+1) to (N33). Also (N22) sends the regular DAO(tgt=N41,PS=x+1,I_flag=1) to (N11).¶ (N33) receives the DCO(tgt=N41,PS=x+1). The received Path Sequence is the latest and thus invalidates the entry associated with the target (N41). (N33) then sends the DCO(tgt=N41,PS=x+1) to (N41). (N41) sees itself as the target and drops the DCO.¶ From Step 6 above, (N31) receives the DAO(tgt=N41,PS=x+1,I_flag=1). It creates a routing entry and sends the DAO(tgt=N41,PS=x+1,I_flag=1) to (N21). Similarly, (N21) receives the DAO and subsequently sends the DAO(tgt=N41,PS=x+1,I_flag=1) to (N11).¶ (N11) receives the DAO(tgt=N41,PS=x+1,I_flag=1) from (N21). It waits for the DelayDCO timer, since it has multiple routes to (N41). (N41) will receive the DAO(tgt=N41,PS=x+1,I_flag=1) from (N22) from Step 7 above. Thus, (N11) has received the regular DAO(tgt=N41,PS=x+1,I_flag=1) from all paths and thus does not initiate the DCO.¶ (N11) forwards the DAO(tgt=N41,PS=x+1,I_flag=1) to (6LBR), and the full path is established.¶ Acknowledgments Many thanks to Alvaro Retana, Cenk Gundogan, Simon Duquennoy, Georgios Papadopoulos, and Peter van der Stok for their review and comments. Alvaro Retana helped shape this document's final version with critical review comments.¶ Authors' Addresses Rahul Arvind Jadhav (editor) Huawei Whitefield Kundalahalli Village Bangalore 560037 Karnataka India Phone: +91-080-49160700 Email: rahul.ietf@gmail.com Pascal Thubert Cisco Systems, Inc. Building D 45 Allee des Ormes - BP1200 06254 MOUGINS - Sophia Antipolis France Phone: +33-497-23-26-34 Email: pthubert@cisco.com Rabi Narayan Sahoo Huawei Whitefield Kundalahalli Village Bangalore 560037 Karnataka India Phone: +91-080-49160700 Email: rabinarayans0828@gmail.com Zhen Cao Huawei W Chang'an Ave Beijing China Email: zhencao.ietf@gmail.com"
    },
    {
        "Number": "9000",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "QUIC: A UDP-Based Multiplexed and Secure Transport",
        "Authors": [
            "J. Iyengar",
            "Ed.",
            "M. Thomson",
            "Ed."
        ],
        "Date": "2021-05",
        "More Info": "Errata",
        "Status": "Proposed Standard",
        "Abstract": "This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.",
        "Keywords": [
            "multipath",
            "next generations",
            "protocol",
            "sctp++",
            "secure",
            "smart",
            "tcp/2",
            "tcpng",
            "transport",
            "transport-ng"
        ],
        "Content": "RFC 9000: QUIC: A UDP-Based Multiplexed and Secure Transport RFC 9000 QUIC Transport Protocol May 2021 Iyengar & Thomson Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9000 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: J. Iyengar, Ed. Fastly M. Thomson, Ed. Mozilla RFC 9000 QUIC: A UDP-Based Multiplexed and Secure Transport Abstract This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9000.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Overview 1.1.  Document Structure 1.2.  Terms and Definitions 1.3.  Notational Conventions 2.  Streams 2.1.  Stream Types and Identifiers 2.2.  Sending and Receiving Data 2.3.  Stream Prioritization 2.4.  Operations on Streams 3.  Stream States 3.1.  Sending Stream States 3.2.  Receiving Stream States 3.3.  Permitted Frame Types 3.4.  Bidirectional Stream States 3.5.  Solicited State Transitions 4.  Flow Control 4.1.  Data Flow Control 4.2.  Increasing Flow Control Limits 4.3.  Flow Control Performance 4.4.  Handling Stream Cancellation 4.5.  Stream Final Size 4.6.  Controlling Concurrency 5.  Connections 5.1.  Connection ID 5.1.1.  Issuing Connection IDs 5.1.2.  Consuming and Retiring Connection IDs 5.2.  Matching Packets to Connections 5.2.1.  Client Packet Handling 5.2.2.  Server Packet Handling 5.2.3.  Considerations for Simple Load Balancers 5.3.  Operations on Connections 6.  Version Negotiation 6.1.  Sending Version Negotiation Packets 6.2.  Handling Version Negotiation Packets 6.3.  Using Reserved Versions 7.  Cryptographic and Transport Handshake 7.1.  Example Handshake Flows 7.2.  Negotiating Connection IDs 7.3.  Authenticating Connection IDs 7.4.  Transport Parameters 7.4.1.  Values of Transport Parameters for 0-RTT 7.4.2.  New Transport Parameters 7.5.  Cryptographic Message Buffering 8.  Address Validation 8.1.  Address Validation during Connection Establishment 8.1.1.  Token Construction 8.1.2.  Address Validation Using Retry Packets 8.1.3.  Address Validation for Future Connections 8.1.4.  Address Validation Token Integrity 8.2.  Path Validation 8.2.1.  Initiating Path Validation 8.2.2.  Path Validation Responses 8.2.3.  Successful Path Validation 8.2.4.  Failed Path Validation 9.  Connection Migration 9.1.  Probing a New Path 9.2.  Initiating Connection Migration 9.3.  Responding to Connection Migration 9.3.1.  Peer Address Spoofing 9.3.2.  On-Path Address Spoofing 9.3.3.  Off-Path Packet Forwarding 9.4.  Loss Detection and Congestion Control 9.5.  Privacy Implications of Connection Migration 9.6.  Server's Preferred Address 9.6.1.  Communicating a Preferred Address 9.6.2.  Migration to a Preferred Address 9.6.3.  Interaction of Client Migration and Preferred Address 9.7.  Use of IPv6 Flow Label and Migration 10. Connection Termination 10.1.  Idle Timeout 10.1.1.  Liveness Testing 10.1.2.  Deferring Idle Timeout 10.2.  Immediate Close 10.2.1.  Closing Connection State 10.2.2.  Draining Connection State 10.2.3.  Immediate Close during the Handshake 10.3.  Stateless Reset 10.3.1.  Detecting a Stateless Reset 10.3.2.  Calculating a Stateless Reset Token 10.3.3.  Looping 11. Error Handling 11.1.  Connection Errors 11.2.  Stream Errors 12. Packets and Frames 12.1.  Protected Packets 12.2.  Coalescing Packets 12.3.  Packet Numbers 12.4.  Frames and Frame Types 12.5.  Frames and Number Spaces 13. Packetization and Reliability 13.1.  Packet Processing 13.2.  Generating Acknowledgments 13.2.1.  Sending ACK Frames 13.2.2.  Acknowledgment Frequency 13.2.3.  Managing ACK Ranges 13.2.4.  Limiting Ranges by Tracking ACK Frames 13.2.5.  Measuring and Reporting Host Delay 13.2.6.  ACK Frames and Packet Protection 13.2.7.  PADDING Frames Consume Congestion Window 13.3.  Retransmission of Information 13.4.  Explicit Congestion Notification 13.4.1.  Reporting ECN Counts 13.4.2.  ECN Validation 14. Datagram Size 14.1.  Initial Datagram Size 14.2.  Path Maximum Transmission Unit 14.2.1.  Handling of ICMP Messages by PMTUD 14.3.  Datagram Packetization Layer PMTU Discovery 14.3.1.  DPLPMTUD and Initial Connectivity 14.3.2.  Validating the Network Path with DPLPMTUD 14.3.3.  Handling of ICMP Messages by DPLPMTUD 14.4.  Sending QUIC PMTU Probes 14.4.1.  PMTU Probes Containing Source Connection ID 15. Versions 16. Variable-Length Integer Encoding 17. Packet Formats 17.1.  Packet Number Encoding and Decoding 17.2.  Long Header Packets 17.2.1.  Version Negotiation Packet 17.2.2.  Initial Packet 17.2.3.  0-RTT 17.2.4.  Handshake Packet 17.2.5.  Retry Packet 17.3.  Short Header Packets 17.3.1.  1-RTT Packet 17.4.  Latency Spin Bit 18. Transport Parameter Encoding 18.1.  Reserved Transport Parameters 18.2.  Transport Parameter Definitions 19. Frame Types and Formats 19.1.  PADDING Frames 19.2.  PING Frames 19.3.  ACK Frames 19.3.1.  ACK Ranges 19.3.2.  ECN Counts 19.4.  RESET_STREAM Frames 19.5.  STOP_SENDING Frames 19.6.  CRYPTO Frames 19.7.  NEW_TOKEN Frames 19.8.  STREAM Frames 19.9.  MAX_DATA Frames 19.10. MAX_STREAM_DATA Frames 19.11. MAX_STREAMS Frames 19.12. DATA_BLOCKED Frames 19.13. STREAM_DATA_BLOCKED Frames 19.14. STREAMS_BLOCKED Frames 19.15. NEW_CONNECTION_ID Frames 19.16. RETIRE_CONNECTION_ID Frames 19.17. PATH_CHALLENGE Frames 19.18. PATH_RESPONSE Frames 19.19. CONNECTION_CLOSE Frames 19.20. HANDSHAKE_DONE Frames 19.21. Extension Frames 20. Error Codes 20.1.  Transport Error Codes 20.2.  Application Protocol Error Codes 21. Security Considerations 21.1.  Overview of Security Properties 21.1.1.  Handshake 21.1.2.  Protected Packets 21.1.3.  Connection Migration 21.2.  Handshake Denial of Service 21.3.  Amplification Attack 21.4.  Optimistic ACK Attack 21.5.  Request Forgery Attacks 21.5.1.  Control Options for Endpoints 21.5.2.  Request Forgery with Client Initial Packets 21.5.3.  Request Forgery with Preferred Addresses 21.5.4.  Request Forgery with Spoofed Migration 21.5.5.  Request Forgery with Version Negotiation 21.5.6.  Generic Request Forgery Countermeasures 21.6.  Slowloris Attacks 21.7.  Stream Fragmentation and Reassembly Attacks 21.8.  Stream Commitment Attack 21.9.  Peer Denial of Service 21.10. Explicit Congestion Notification Attacks 21.11. Stateless Reset Oracle 21.12. Version Downgrade 21.13. Targeted Attacks by Routing 21.14. Traffic Analysis 22. IANA Considerations 22.1.  Registration Policies for QUIC Registries 22.1.1.  Provisional Registrations 22.1.2.  Selecting Codepoints 22.1.3.  Reclaiming Provisional Codepoints 22.1.4.  Permanent Registrations 22.2.  QUIC Versions Registry 22.3.  QUIC Transport Parameters Registry 22.4.  QUIC Frame Types Registry 22.5.  QUIC Transport Error Codes Registry 23. References 23.1.  Normative References 23.2.  Informative References Appendix A.  Pseudocode A.1.  Sample Variable-Length Integer Decoding A.2.  Sample Packet Number Encoding Algorithm A.3.  Sample Packet Number Decoding Algorithm A.4.  Sample ECN Validation Algorithm Contributors Authors' Addresses 1. Overview QUIC is a secure general-purpose transport protocol. This document defines version 1 of QUIC, which conforms to the version-independent properties of QUIC defined in [QUIC-INVARIANTS].¶ QUIC is a connection-oriented protocol that creates a stateful interaction between a client and server.¶ The QUIC handshake combines negotiation of cryptographic and transport parameters. QUIC integrates the TLS handshake [TLS13], although using a customized framing for protecting packets. The integration of TLS and QUIC is described in more detail in [QUIC-TLS]. The handshake is structured to permit the exchange of application data as soon as possible. This includes an option for clients to send data immediately (0-RTT), which requires some form of prior communication or configuration to enable.¶ Endpoints communicate in QUIC by exchanging QUIC packets. Most packets contain frames, which carry control information and application data between endpoints. QUIC authenticates the entirety of each packet and encrypts as much of each packet as is practical. QUIC packets are carried in UDP datagrams [UDP] to better facilitate deployment in existing systems and networks.¶ Application protocols exchange information over a QUIC connection via streams, which are ordered sequences of bytes. Two types of streams can be created: bidirectional streams, which allow both endpoints to send data; and unidirectional streams, which allow a single endpoint to send data. A credit-based scheme is used to limit stream creation and to bound the amount of data that can be sent.¶ QUIC provides the necessary feedback to implement reliable delivery and congestion control. An algorithm for detecting and recovering from loss of data is described in Section 6 of [QUIC-RECOVERY]. QUIC depends on congestion control to avoid network congestion. An exemplary congestion control algorithm is described in Section 7 of [QUIC-RECOVERY].¶ QUIC connections are not strictly bound to a single network path. Connection migration uses connection identifiers to allow connections to transfer to a new network path. Only clients are able to migrate in this version of QUIC. This design also allows connections to continue after changes in network topology or address mappings, such as might be caused by NAT rebinding.¶ Once established, multiple options are provided for connection termination. Applications can manage a graceful shutdown, endpoints can negotiate a timeout period, errors can cause immediate connection teardown, and a stateless mechanism provides for termination of connections after one endpoint has lost state.¶ 1.1. Document Structure This document describes the core QUIC protocol and is structured as follows:¶ Streams are the basic service abstraction that QUIC provides.¶ Section 2 describes core concepts related to streams,¶ Section 3 provides a reference model for stream states, and¶ Section 4 outlines the operation of flow control.¶ Connections are the context in which QUIC endpoints communicate.¶ Section 5 describes core concepts related to connections,¶ Section 6 describes version negotiation,¶ Section 7 details the process for establishing connections,¶ Section 8 describes address validation and critical denial-of-service mitigations,¶ Section 9 describes how endpoints migrate a connection to a new network path,¶ Section 10 lists the options for terminating an open connection, and¶ Section 11 provides guidance for stream and connection error handling.¶ Packets and frames are the basic unit used by QUIC to communicate.¶ Section 12 describes concepts related to packets and frames,¶ Section 13 defines models for the transmission, retransmission, and acknowledgment of data, and¶ Section 14 specifies rules for managing the size of datagrams carrying QUIC packets.¶ Finally, encoding details of QUIC protocol elements are described in:¶ Section 15 (versions),¶ Section 16 (integer encoding),¶ Section 17 (packet headers),¶ Section 18 (transport parameters),¶ Section 19 (frames), and¶ Section 20 (errors).¶ Accompanying documents describe QUIC's loss detection and congestion control [QUIC-RECOVERY], and the use of TLS and other cryptographic mechanisms [QUIC-TLS].¶ This document defines QUIC version 1, which conforms to the protocol invariants in [QUIC-INVARIANTS].¶ To refer to QUIC version 1, cite this document. References to the limited set of version-independent properties of QUIC can cite [QUIC-INVARIANTS].¶ 1.2. Terms and Definitions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ Commonly used terms in this document are described below.¶ QUIC: The transport protocol described by this document. QUIC is a name, not an acronym.¶ Endpoint: An entity that can participate in a QUIC connection by generating, receiving, and processing QUIC packets. There are only two types of endpoints in QUIC: client and server.¶ Client: The endpoint that initiates a QUIC connection.¶ Server: The endpoint that accepts a QUIC connection.¶ QUIC packet: A complete processable unit of QUIC that can be encapsulated in a UDP datagram. One or more QUIC packets can be encapsulated in a single UDP datagram.¶ Ack-eliciting packet: A QUIC packet that contains frames other than ACK, PADDING, and CONNECTION_CLOSE. These cause a recipient to send an acknowledgment; see Section 13.2.1.¶ Frame: A unit of structured protocol information. There are multiple frame types, each of which carries different information. Frames are contained in QUIC packets.¶ Address: When used without qualification, the tuple of IP version, IP address, and UDP port number that represents one end of a network path.¶ Connection ID: An identifier that is used to identify a QUIC connection at an endpoint. Each endpoint selects one or more connection IDs for its peer to include in packets sent towards the endpoint. This value is opaque to the peer.¶ Stream: A unidirectional or bidirectional channel of ordered bytes within a QUIC connection. A QUIC connection can carry multiple simultaneous streams.¶ Application: An entity that uses QUIC to send and receive data.¶ This document uses the terms \"QUIC packets\", \"UDP datagrams\", and \"IP packets\" to refer to the units of the respective protocols. That is, one or more QUIC packets can be encapsulated in a UDP datagram, which is in turn encapsulated in an IP packet.¶ 1.3. Notational Conventions Packet and frame diagrams in this document use a custom format. The purpose of this format is to summarize, not define, protocol elements. Prose defines the complete semantics and details of structures.¶ Complex fields are named and then followed by a list of fields surrounded by a pair of matching braces. Each field in this list is separated by commas.¶ Individual fields include length information, plus indications about fixed value, optionality, or repetitions. Individual fields use the following notational conventions, with all lengths in bits:¶ x (A): Indicates that x is A bits long¶ x (i): Indicates that x holds an integer value using the variable-length encoding described in Section 16¶ x (A..B): Indicates that x can be any length from A to B; A can be omitted to indicate a minimum of zero bits, and B can be omitted to indicate no set upper limit; values in this format always end on a byte boundary¶ x (L) = C: Indicates that x has a fixed value of C; the length of x is described by L, which can use any of the length forms above¶ x (L) = C..D: Indicates that x has a value in the range from C to D, inclusive, with the length described by L, as above¶ [x (L)]: Indicates that x is optional and has a length of L¶ x (L) ...: Indicates that x is repeated zero or more times and that each instance has a length of L¶ This document uses network byte order (that is, big endian) values. Fields are placed starting from the high-order bits of each byte.¶ By convention, individual fields reference a complex field by using the name of the complex field.¶ Figure 1 provides an example:¶ Example Structure { One-bit Field (1), 7-bit Field with Fixed Value (7) = 61, Field with Variable-Length Integer (i), Arbitrary-Length Field (..), Variable-Length Field (8..24), Field With Minimum Length (16..), Field With Maximum Length (..128), [Optional Field (64)], Repeated Field (8) ..., } Figure 1: Example Format When a single-bit field is referenced in prose, the position of that field can be clarified by using the value of the byte that carries the field with the field's value set. For example, the value 0x80 could be used to refer to the single-bit field in the most significant bit of the byte, such as One-bit Field in Figure 1.¶ 2. Streams Streams in QUIC provide a lightweight, ordered byte-stream abstraction to an application. Streams can be unidirectional or bidirectional.¶ Streams can be created by sending data. Other processes associated with stream management -- ending, canceling, and managing flow control -- are all designed to impose minimal overheads. For instance, a single STREAM frame (Section 19.8) can open, carry data for, and close a stream. Streams can also be long-lived and can last the entire duration of a connection.¶ Streams can be created by either endpoint, can concurrently send data interleaved with other streams, and can be canceled. QUIC does not provide any means of ensuring ordering between bytes on different streams.¶ QUIC allows for an arbitrary number of streams to operate concurrently and for an arbitrary amount of data to be sent on any stream, subject to flow control constraints and stream limits; see Section 4.¶ 2.1. Stream Types and Identifiers Streams can be unidirectional or bidirectional. Unidirectional streams carry data in one direction: from the initiator of the stream to its peer. Bidirectional streams allow for data to be sent in both directions.¶ Streams are identified within a connection by a numeric value, referred to as the stream ID. A stream ID is a 62-bit integer (0 to 262-1) that is unique for all streams on a connection. Stream IDs are encoded as variable-length integers; see Section 16. A QUIC endpoint MUST NOT reuse a stream ID within a connection.¶ The least significant bit (0x01) of the stream ID identifies the initiator of the stream. Client-initiated streams have even-numbered stream IDs (with the bit set to 0), and server-initiated streams have odd-numbered stream IDs (with the bit set to 1).¶ The second least significant bit (0x02) of the stream ID distinguishes between bidirectional streams (with the bit set to 0) and unidirectional streams (with the bit set to 1).¶ The two least significant bits from a stream ID therefore identify a stream as one of four types, as summarized in Table 1.¶ Table 1: Stream ID Types Bits Stream Type 0x00 Client-Initiated, Bidirectional 0x01 Server-Initiated, Bidirectional 0x02 Client-Initiated, Unidirectional 0x03 Server-Initiated, Unidirectional The stream space for each type begins at the minimum value (0x00 through 0x03, respectively); successive streams of each type are created with numerically increasing stream IDs. A stream ID that is used out of order results in all streams of that type with lower-numbered stream IDs also being opened.¶ 2.2. Sending and Receiving Data STREAM frames (Section 19.8) encapsulate data sent by an application. An endpoint uses the Stream ID and Offset fields in STREAM frames to place data in order.¶ Endpoints MUST be able to deliver stream data to an application as an ordered byte stream. Delivering an ordered byte stream requires that an endpoint buffer any data that is received out of order, up to the advertised flow control limit.¶ QUIC makes no specific allowances for delivery of stream data out of order. However, implementations MAY choose to offer the ability to deliver data out of order to a receiving application.¶ An endpoint could receive data for a stream at the same stream offset multiple times. Data that has already been received can be discarded. The data at a given offset MUST NOT change if it is sent multiple times; an endpoint MAY treat receipt of different data at the same offset within a stream as a connection error of type PROTOCOL_VIOLATION.¶ Streams are an ordered byte-stream abstraction with no other structure visible to QUIC. STREAM frame boundaries are not expected to be preserved when data is transmitted, retransmitted after packet loss, or delivered to the application at a receiver.¶ An endpoint MUST NOT send data on any stream without ensuring that it is within the flow control limits set by its peer. Flow control is described in detail in Section 4.¶ 2.3. Stream Prioritization Stream multiplexing can have a significant effect on application performance if resources allocated to streams are correctly prioritized.¶ QUIC does not provide a mechanism for exchanging prioritization information. Instead, it relies on receiving priority information from the application.¶ A QUIC implementation SHOULD provide ways in which an application can indicate the relative priority of streams. An implementation uses information provided by the application to determine how to allocate resources to active streams.¶ 2.4. Operations on Streams This document does not define an API for QUIC; it instead defines a set of functions on streams that application protocols can rely upon. An application protocol can assume that a QUIC implementation provides an interface that includes the operations described in this section. An implementation designed for use with a specific application protocol might provide only those operations that are used by that protocol.¶ On the sending part of a stream, an application protocol can:¶ write data, understanding when stream flow control credit (Section 4.1) has successfully been reserved to send the written data;¶ end the stream (clean termination), resulting in a STREAM frame (Section 19.8) with the FIN bit set; and¶ reset the stream (abrupt termination), resulting in a RESET_STREAM frame (Section 19.4) if the stream was not already in a terminal state.¶ On the receiving part of a stream, an application protocol can:¶ read data; and¶ abort reading of the stream and request closure, possibly resulting in a STOP_SENDING frame (Section 19.5).¶ An application protocol can also request to be informed of state changes on streams, including when the peer has opened or reset a stream, when a peer aborts reading on a stream, when new data is available, and when data can or cannot be written to the stream due to flow control.¶ 3. Stream States This section describes streams in terms of their send or receive components. Two state machines are described: one for the streams on which an endpoint transmits data (Section 3.1) and another for streams on which an endpoint receives data (Section 3.2).¶ Unidirectional streams use either the sending or receiving state machine, depending on the stream type and endpoint role. Bidirectional streams use both state machines at both endpoints. For the most part, the use of these state machines is the same whether the stream is unidirectional or bidirectional. The conditions for opening a stream are slightly more complex for a bidirectional stream because the opening of either the send or receive side causes the stream to open in both directions.¶ The state machines shown in this section are largely informative. This document uses stream states to describe rules for when and how different types of frames can be sent and the reactions that are expected when different types of frames are received. Though these state machines are intended to be useful in implementing QUIC, these states are not intended to constrain implementations. An implementation can define a different state machine as long as its behavior is consistent with an implementation that implements these states.¶ Note: In some cases, a single event or action can cause a transition through multiple states. For instance, sending STREAM with a FIN bit set can cause two state transitions for a sending stream: from the \"Ready\" state to the \"Send\" state, and from the \"Send\" state to the \"Data Sent\" state.¶ 3.1. Sending Stream States Figure 2 shows the states for the part of a stream that sends data to a peer.¶ o | Create Stream (Sending) | Peer Creates Bidirectional Stream v +-------+ | Ready | Send RESET_STREAM | |-----------------------. +-------+ | | | | Send STREAM / | | STREAM_DATA_BLOCKED | v | +-------+ | | Send | Send RESET_STREAM | | |---------------------->| +-------+ | | | | Send STREAM + FIN | v v +-------+ +-------+ | Data | Send RESET_STREAM | Reset | | Sent |------------------>| Sent | +-------+ +-------+ | | | Recv All ACKs | Recv ACK v v +-------+ +-------+ | Data | | Reset | | Recvd | | Recvd | +-------+ +-------+ Figure 2: States for Sending Parts of Streams The sending part of a stream that the endpoint initiates (types 0 and 2 for clients, 1 and 3 for servers) is opened by the application. The \"Ready\" state represents a newly created stream that is able to accept data from the application. Stream data might be buffered in this state in preparation for sending.¶ Sending the first STREAM or STREAM_DATA_BLOCKED frame causes a sending part of a stream to enter the \"Send\" state. An implementation might choose to defer allocating a stream ID to a stream until it sends the first STREAM frame and enters this state, which can allow for better stream prioritization.¶ The sending part of a bidirectional stream initiated by a peer (type 0 for a server, type 1 for a client) starts in the \"Ready\" state when the receiving part is created.¶ In the \"Send\" state, an endpoint transmits -- and retransmits as necessary -- stream data in STREAM frames. The endpoint respects the flow control limits set by its peer and continues to accept and process MAX_STREAM_DATA frames. An endpoint in the \"Send\" state generates STREAM_DATA_BLOCKED frames if it is blocked from sending by stream flow control limits (Section 4.1).¶ After the application indicates that all stream data has been sent and a STREAM frame containing the FIN bit is sent, the sending part of the stream enters the \"Data Sent\" state. From this state, the endpoint only retransmits stream data as necessary. The endpoint does not need to check flow control limits or send STREAM_DATA_BLOCKED frames for a stream in this state. MAX_STREAM_DATA frames might be received until the peer receives the final stream offset. The endpoint can safely ignore any MAX_STREAM_DATA frames it receives from its peer for a stream in this state.¶ Once all stream data has been successfully acknowledged, the sending part of the stream enters the \"Data Recvd\" state, which is a terminal state.¶ From any state that is one of \"Ready\", \"Send\", or \"Data Sent\", an application can signal that it wishes to abandon transmission of stream data. Alternatively, an endpoint might receive a STOP_SENDING frame from its peer. In either case, the endpoint sends a RESET_STREAM frame, which causes the stream to enter the \"Reset Sent\" state.¶ An endpoint MAY send a RESET_STREAM as the first frame that mentions a stream; this causes the sending part of that stream to open and then immediately transition to the \"Reset Sent\" state.¶ Once a packet containing a RESET_STREAM has been acknowledged, the sending part of the stream enters the \"Reset Recvd\" state, which is a terminal state.¶ 3.2. Receiving Stream States Figure 3 shows the states for the part of a stream that receives data from a peer. The states for a receiving part of a stream mirror only some of the states of the sending part of the stream at the peer. The receiving part of a stream does not track states on the sending part that cannot be observed, such as the \"Ready\" state. Instead, the receiving part of a stream tracks the delivery of data to the application, some of which cannot be observed by the sender.¶ o | Recv STREAM / STREAM_DATA_BLOCKED / RESET_STREAM | Create Bidirectional Stream (Sending) | Recv MAX_STREAM_DATA / STOP_SENDING (Bidirectional) | Create Higher-Numbered Stream v +-------+ | Recv | Recv RESET_STREAM | |-----------------------. +-------+ | | | | Recv STREAM + FIN | v | +-------+ | | Size | Recv RESET_STREAM | | Known |---------------------->| +-------+ | | | | Recv All Data | v v +-------+ Recv RESET_STREAM +-------+ | Data |--- (optional) --->| Reset | | Recvd | Recv All Data | Recvd | +-------+<-- (optional) ----+-------+ | | | App Read All Data | App Read Reset v v +-------+ +-------+ | Data | | Reset | | Read | | Read | +-------+ +-------+ Figure 3: States for Receiving Parts of Streams The receiving part of a stream initiated by a peer (types 1 and 3 for a client, or 0 and 2 for a server) is created when the first STREAM, STREAM_DATA_BLOCKED, or RESET_STREAM frame is received for that stream. For bidirectional streams initiated by a peer, receipt of a MAX_STREAM_DATA or STOP_SENDING frame for the sending part of the stream also creates the receiving part. The initial state for the receiving part of a stream is \"Recv\".¶ For a bidirectional stream, the receiving part enters the \"Recv\" state when the sending part initiated by the endpoint (type 0 for a client, type 1 for a server) enters the \"Ready\" state.¶ An endpoint opens a bidirectional stream when a MAX_STREAM_DATA or STOP_SENDING frame is received from the peer for that stream. Receiving a MAX_STREAM_DATA frame for an unopened stream indicates that the remote peer has opened the stream and is providing flow control credit. Receiving a STOP_SENDING frame for an unopened stream indicates that the remote peer no longer wishes to receive data on this stream. Either frame might arrive before a STREAM or STREAM_DATA_BLOCKED frame if packets are lost or reordered.¶ Before a stream is created, all streams of the same type with lower-numbered stream IDs MUST be created. This ensures that the creation order for streams is consistent on both endpoints.¶ In the \"Recv\" state, the endpoint receives STREAM and STREAM_DATA_BLOCKED frames. Incoming data is buffered and can be reassembled into the correct order for delivery to the application. As data is consumed by the application and buffer space becomes available, the endpoint sends MAX_STREAM_DATA frames to allow the peer to send more data.¶ When a STREAM frame with a FIN bit is received, the final size of the stream is known; see Section 4.5. The receiving part of the stream then enters the \"Size Known\" state. In this state, the endpoint no longer needs to send MAX_STREAM_DATA frames; it only receives any retransmissions of stream data.¶ Once all data for the stream has been received, the receiving part enters the \"Data Recvd\" state. This might happen as a result of receiving the same STREAM frame that causes the transition to \"Size Known\". After all data has been received, any STREAM or STREAM_DATA_BLOCKED frames for the stream can be discarded.¶ The \"Data Recvd\" state persists until stream data has been delivered to the application. Once stream data has been delivered, the stream enters the \"Data Read\" state, which is a terminal state.¶ Receiving a RESET_STREAM frame in the \"Recv\" or \"Size Known\" state causes the stream to enter the \"Reset Recvd\" state. This might cause the delivery of stream data to the application to be interrupted.¶ It is possible that all stream data has already been received when a RESET_STREAM is received (that is, in the \"Data Recvd\" state). Similarly, it is possible for remaining stream data to arrive after receiving a RESET_STREAM frame (the \"Reset Recvd\" state). An implementation is free to manage this situation as it chooses.¶ Sending a RESET_STREAM means that an endpoint cannot guarantee delivery of stream data; however, there is no requirement that stream data not be delivered if a RESET_STREAM is received. An implementation MAY interrupt delivery of stream data, discard any data that was not consumed, and signal the receipt of the RESET_STREAM. A RESET_STREAM signal might be suppressed or withheld if stream data is completely received and is buffered to be read by the application. If the RESET_STREAM is suppressed, the receiving part of the stream remains in \"Data Recvd\".¶ Once the application receives the signal indicating that the stream was reset, the receiving part of the stream transitions to the \"Reset Read\" state, which is a terminal state.¶ 3.3. Permitted Frame Types The sender of a stream sends just three frame types that affect the state of a stream at either the sender or the receiver: STREAM (Section 19.8), STREAM_DATA_BLOCKED (Section 19.13), and RESET_STREAM (Section 19.4).¶ A sender MUST NOT send any of these frames from a terminal state (\"Data Recvd\" or \"Reset Recvd\"). A sender MUST NOT send a STREAM or STREAM_DATA_BLOCKED frame for a stream in the \"Reset Sent\" state or any terminal state -- that is, after sending a RESET_STREAM frame. A receiver could receive any of these three frames in any state, due to the possibility of delayed delivery of packets carrying them.¶ The receiver of a stream sends MAX_STREAM_DATA frames (Section 19.10) and STOP_SENDING frames (Section 19.5).¶ The receiver only sends MAX_STREAM_DATA frames in the \"Recv\" state. A receiver MAY send a STOP_SENDING frame in any state where it has not received a RESET_STREAM frame -- that is, states other than \"Reset Recvd\" or \"Reset Read\". However, there is little value in sending a STOP_SENDING frame in the \"Data Recvd\" state, as all stream data has been received. A sender could receive either of these two types of frames in any state as a result of delayed delivery of packets.¶ 3.4. Bidirectional Stream States A bidirectional stream is composed of sending and receiving parts. Implementations can represent states of the bidirectional stream as composites of sending and receiving stream states. The simplest model presents the stream as \"open\" when either sending or receiving parts are in a non-terminal state and \"closed\" when both sending and receiving streams are in terminal states.¶ Table 2 shows a more complex mapping of bidirectional stream states that loosely correspond to the stream states defined in HTTP/2 [HTTP2]. This shows that multiple states on sending or receiving parts of streams are mapped to the same composite state. Note that this is just one possibility for such a mapping; this mapping requires that data be acknowledged before the transition to a \"closed\" or \"half-closed\" state.¶ Table 2: Possible Mapping of Stream States to HTTP/2 Sending Part Receiving Part Composite State No Stream / Ready No Stream / Recv (*1) idle Ready / Send / Data Sent Recv / Size Known open Ready / Send / Data Sent Data Recvd / Data Read half-closed (remote) Ready / Send / Data Sent Reset Recvd / Reset Read half-closed (remote) Data Recvd Recv / Size Known half-closed (local) Reset Sent / Reset Recvd Recv / Size Known half-closed (local) Reset Sent / Reset Recvd Data Recvd / Data Read closed Reset Sent / Reset Recvd Reset Recvd / Reset Read closed Data Recvd Data Recvd / Data Read closed Data Recvd Reset Recvd / Reset Read closed Note (*1): A stream is considered \"idle\" if it has not yet been created or if the receiving part of the stream is in the \"Recv\" state without yet having received any frames.¶ 3.5. Solicited State Transitions If an application is no longer interested in the data it is receiving on a stream, it can abort reading the stream and specify an application error code.¶ If the stream is in the \"Recv\" or \"Size Known\" state, the transport SHOULD signal this by sending a STOP_SENDING frame to prompt closure of the stream in the opposite direction. This typically indicates that the receiving application is no longer reading data it receives from the stream, but it is not a guarantee that incoming data will be ignored.¶ STREAM frames received after sending a STOP_SENDING frame are still counted toward connection and stream flow control, even though these frames can be discarded upon receipt.¶ A STOP_SENDING frame requests that the receiving endpoint send a RESET_STREAM frame. An endpoint that receives a STOP_SENDING frame MUST send a RESET_STREAM frame if the stream is in the \"Ready\" or \"Send\" state. If the stream is in the \"Data Sent\" state, the endpoint MAY defer sending the RESET_STREAM frame until the packets containing outstanding data are acknowledged or declared lost. If any outstanding data is declared lost, the endpoint SHOULD send a RESET_STREAM frame instead of retransmitting the data.¶ An endpoint SHOULD copy the error code from the STOP_SENDING frame to the RESET_STREAM frame it sends, but it can use any application error code. An endpoint that sends a STOP_SENDING frame MAY ignore the error code in any RESET_STREAM frames subsequently received for that stream.¶ STOP_SENDING SHOULD only be sent for a stream that has not been reset by the peer. STOP_SENDING is most useful for streams in the \"Recv\" or \"Size Known\" state.¶ An endpoint is expected to send another STOP_SENDING frame if a packet containing a previous STOP_SENDING is lost. However, once either all stream data or a RESET_STREAM frame has been received for the stream -- that is, the stream is in any state other than \"Recv\" or \"Size Known\" -- sending a STOP_SENDING frame is unnecessary.¶ An endpoint that wishes to terminate both directions of a bidirectional stream can terminate one direction by sending a RESET_STREAM frame, and it can encourage prompt termination in the opposite direction by sending a STOP_SENDING frame.¶ 4. Flow Control Receivers need to limit the amount of data that they are required to buffer, in order to prevent a fast sender from overwhelming them or a malicious sender from consuming a large amount of memory. To enable a receiver to limit memory commitments for a connection, streams are flow controlled both individually and across a connection as a whole. A QUIC receiver controls the maximum amount of data the sender can send on a stream as well as across all streams at any time, as described in Sections 4.1 and 4.2.¶ Similarly, to limit concurrency within a connection, a QUIC endpoint controls the maximum cumulative number of streams that its peer can initiate, as described in Section 4.6.¶ Data sent in CRYPTO frames is not flow controlled in the same way as stream data. QUIC relies on the cryptographic protocol implementation to avoid excessive buffering of data; see [QUIC-TLS]. To avoid excessive buffering at multiple layers, QUIC implementations SHOULD provide an interface for the cryptographic protocol implementation to communicate its buffering limits.¶ 4.1. Data Flow Control QUIC employs a limit-based flow control scheme where a receiver advertises the limit of total bytes it is prepared to receive on a given stream or for the entire connection. This leads to two levels of data flow control in QUIC:¶ Stream flow control, which prevents a single stream from consuming the entire receive buffer for a connection by limiting the amount of data that can be sent on each stream.¶ Connection flow control, which prevents senders from exceeding a receiver's buffer capacity for the connection by limiting the total bytes of stream data sent in STREAM frames on all streams.¶ Senders MUST NOT send data in excess of either limit.¶ A receiver sets initial limits for all streams through transport parameters during the handshake (Section 7.4). Subsequently, a receiver sends MAX_STREAM_DATA frames (Section 19.10) or MAX_DATA frames (Section 19.9) to the sender to advertise larger limits.¶ A receiver can advertise a larger limit for a stream by sending a MAX_STREAM_DATA frame with the corresponding stream ID. A MAX_STREAM_DATA frame indicates the maximum absolute byte offset of a stream. A receiver could determine the flow control offset to be advertised based on the current offset of data consumed on that stream.¶ A receiver can advertise a larger limit for a connection by sending a MAX_DATA frame, which indicates the maximum of the sum of the absolute byte offsets of all streams. A receiver maintains a cumulative sum of bytes received on all streams, which is used to check for violations of the advertised connection or stream data limits. A receiver could determine the maximum data limit to be advertised based on the sum of bytes consumed on all streams.¶ Once a receiver advertises a limit for the connection or a stream, it is not an error to advertise a smaller limit, but the smaller limit has no effect.¶ A receiver MUST close the connection with an error of type FLOW_CONTROL_ERROR if the sender violates the advertised connection or stream data limits; see Section 11 for details on error handling.¶ A sender MUST ignore any MAX_STREAM_DATA or MAX_DATA frames that do not increase flow control limits.¶ If a sender has sent data up to the limit, it will be unable to send new data and is considered blocked. A sender SHOULD send a STREAM_DATA_BLOCKED or DATA_BLOCKED frame to indicate to the receiver that it has data to write but is blocked by flow control limits. If a sender is blocked for a period longer than the idle timeout (Section 10.1), the receiver might close the connection even when the sender has data that is available for transmission. To keep the connection from closing, a sender that is flow control limited SHOULD periodically send a STREAM_DATA_BLOCKED or DATA_BLOCKED frame when it has no ack-eliciting packets in flight.¶ 4.2. Increasing Flow Control Limits Implementations decide when and how much credit to advertise in MAX_STREAM_DATA and MAX_DATA frames, but this section offers a few considerations.¶ To avoid blocking a sender, a receiver MAY send a MAX_STREAM_DATA or MAX_DATA frame multiple times within a round trip or send it early enough to allow time for loss of the frame and subsequent recovery.¶ Control frames contribute to connection overhead. Therefore, frequently sending MAX_STREAM_DATA and MAX_DATA frames with small changes is undesirable. On the other hand, if updates are less frequent, larger increments to limits are necessary to avoid blocking a sender, requiring larger resource commitments at the receiver. There is a trade-off between resource commitment and overhead when determining how large a limit is advertised.¶ A receiver can use an autotuning mechanism to tune the frequency and amount of advertised additional credit based on a round-trip time estimate and the rate at which the receiving application consumes data, similar to common TCP implementations. As an optimization, an endpoint could send frames related to flow control only when there are other frames to send, ensuring that flow control does not cause extra packets to be sent.¶ A blocked sender is not required to send STREAM_DATA_BLOCKED or DATA_BLOCKED frames. Therefore, a receiver MUST NOT wait for a STREAM_DATA_BLOCKED or DATA_BLOCKED frame before sending a MAX_STREAM_DATA or MAX_DATA frame; doing so could result in the sender being blocked for the rest of the connection. Even if the sender sends these frames, waiting for them will result in the sender being blocked for at least an entire round trip.¶ When a sender receives credit after being blocked, it might be able to send a large amount of data in response, resulting in short-term congestion; see Section 7.7 of [QUIC-RECOVERY] for a discussion of how a sender can avoid this congestion.¶ 4.3. Flow Control Performance If an endpoint cannot ensure that its peer always has available flow control credit that is greater than the peer's bandwidth-delay product on this connection, its receive throughput will be limited by flow control.¶ Packet loss can cause gaps in the receive buffer, preventing the application from consuming data and freeing up receive buffer space.¶ Sending timely updates of flow control limits can improve performance. Sending packets only to provide flow control updates can increase network load and adversely affect performance. Sending flow control updates along with other frames, such as ACK frames, reduces the cost of those updates.¶ 4.4. Handling Stream Cancellation Endpoints need to eventually agree on the amount of flow control credit that has been consumed on every stream, to be able to account for all bytes for connection-level flow control.¶ On receipt of a RESET_STREAM frame, an endpoint will tear down state for the matching stream and ignore further data arriving on that stream.¶ RESET_STREAM terminates one direction of a stream abruptly. For a bidirectional stream, RESET_STREAM has no effect on data flow in the opposite direction. Both endpoints MUST maintain flow control state for the stream in the unterminated direction until that direction enters a terminal state.¶ 4.5. Stream Final Size The final size is the amount of flow control credit that is consumed by a stream. Assuming that every contiguous byte on the stream was sent once, the final size is the number of bytes sent. More generally, this is one higher than the offset of the byte with the largest offset sent on the stream, or zero if no bytes were sent.¶ A sender always communicates the final size of a stream to the receiver reliably, no matter how the stream is terminated. The final size is the sum of the Offset and Length fields of a STREAM frame with a FIN flag, noting that these fields might be implicit. Alternatively, the Final Size field of a RESET_STREAM frame carries this value. This guarantees that both endpoints agree on how much flow control credit was consumed by the sender on that stream.¶ An endpoint will know the final size for a stream when the receiving part of the stream enters the \"Size Known\" or \"Reset Recvd\" state (Section 3). The receiver MUST use the final size of the stream to account for all bytes sent on the stream in its connection-level flow controller.¶ An endpoint MUST NOT send data on a stream at or beyond the final size.¶ Once a final size for a stream is known, it cannot change. If a RESET_STREAM or STREAM frame is received indicating a change in the final size for the stream, an endpoint SHOULD respond with an error of type FINAL_SIZE_ERROR; see Section 11 for details on error handling. A receiver SHOULD treat receipt of data at or beyond the final size as an error of type FINAL_SIZE_ERROR, even after a stream is closed. Generating these errors is not mandatory, because requiring that an endpoint generate these errors also means that the endpoint needs to maintain the final size state for closed streams, which could mean a significant state commitment.¶ 4.6. Controlling Concurrency An endpoint limits the cumulative number of incoming streams a peer can open. Only streams with a stream ID less than (max_streams * 4 + first_stream_id_of_type) can be opened; see Table 1. Initial limits are set in the transport parameters; see Section 18.2. Subsequent limits are advertised using MAX_STREAMS frames; see Section 19.11. Separate limits apply to unidirectional and bidirectional streams.¶ If a max_streams transport parameter or a MAX_STREAMS frame is received with a value greater than 260, this would allow a maximum stream ID that cannot be expressed as a variable-length integer; see Section 16. If either is received, the connection MUST be closed immediately with a connection error of type TRANSPORT_PARAMETER_ERROR if the offending value was received in a transport parameter or of type FRAME_ENCODING_ERROR if it was received in a frame; see Section 10.2.¶ Endpoints MUST NOT exceed the limit set by their peer. An endpoint that receives a frame with a stream ID exceeding the limit it has sent MUST treat this as a connection error of type STREAM_LIMIT_ERROR; see Section 11 for details on error handling.¶ Once a receiver advertises a stream limit using the MAX_STREAMS frame, advertising a smaller limit has no effect. MAX_STREAMS frames that do not increase the stream limit MUST be ignored.¶ As with stream and connection flow control, this document leaves implementations to decide when and how many streams should be advertised to a peer via MAX_STREAMS. Implementations might choose to increase limits as streams are closed, to keep the number of streams available to peers roughly consistent.¶ An endpoint that is unable to open a new stream due to the peer's limits SHOULD send a STREAMS_BLOCKED frame (Section 19.14). This signal is considered useful for debugging. An endpoint MUST NOT wait to receive this signal before advertising additional credit, since doing so will mean that the peer will be blocked for at least an entire round trip, and potentially indefinitely if the peer chooses not to send STREAMS_BLOCKED frames.¶ 5. Connections A QUIC connection is shared state between a client and a server.¶ Each connection starts with a handshake phase, during which the two endpoints establish a shared secret using the cryptographic handshake protocol [QUIC-TLS] and negotiate the application protocol. The handshake (Section 7) confirms that both endpoints are willing to communicate (Section 8.1) and establishes parameters for the connection (Section 7.4).¶ An application protocol can use the connection during the handshake phase with some limitations. 0-RTT allows application data to be sent by a client before receiving a response from the server. However, 0-RTT provides no protection against replay attacks; see Section 9.2 of [QUIC-TLS]. A server can also send application data to a client before it receives the final cryptographic handshake messages that allow it to confirm the identity and liveness of the client. These capabilities allow an application protocol to offer the option of trading some security guarantees for reduced latency.¶ The use of connection IDs (Section 5.1) allows connections to migrate to a new network path, both as a direct choice of an endpoint and when forced by a change in a middlebox. Section 9 describes mitigations for the security and privacy issues associated with migration.¶ For connections that are no longer needed or desired, there are several ways for a client and server to terminate a connection, as described in Section 10.¶ 5.1. Connection ID Each connection possesses a set of connection identifiers, or connection IDs, each of which can identify the connection. Connection IDs are independently selected by endpoints; each endpoint selects the connection IDs that its peer uses.¶ The primary function of a connection ID is to ensure that changes in addressing at lower protocol layers (UDP, IP) do not cause packets for a QUIC connection to be delivered to the wrong endpoint. Each endpoint selects connection IDs using an implementation-specific (and perhaps deployment-specific) method that will allow packets with that connection ID to be routed back to the endpoint and to be identified by the endpoint upon receipt.¶ Multiple connection IDs are used so that endpoints can send packets that cannot be identified by an observer as being for the same connection without cooperation from an endpoint; see Section 9.5.¶ Connection IDs MUST NOT contain any information that can be used by an external observer (that is, one that does not cooperate with the issuer) to correlate them with other connection IDs for the same connection. As a trivial example, this means the same connection ID MUST NOT be issued more than once on the same connection.¶ Packets with long headers include Source Connection ID and Destination Connection ID fields. These fields are used to set the connection IDs for new connections; see Section 7.2 for details.¶ Packets with short headers (Section 17.3) only include the Destination Connection ID and omit the explicit length. The length of the Destination Connection ID field is expected to be known to endpoints. Endpoints using a load balancer that routes based on connection ID could agree with the load balancer on a fixed length for connection IDs or agree on an encoding scheme. A fixed portion could encode an explicit length, which allows the entire connection ID to vary in length and still be used by the load balancer.¶ A Version Negotiation (Section 17.2.1) packet echoes the connection IDs selected by the client, both to ensure correct routing toward the client and to demonstrate that the packet is in response to a packet sent by the client.¶ A zero-length connection ID can be used when a connection ID is not needed to route to the correct endpoint. However, multiplexing connections on the same local IP address and port while using zero-length connection IDs will cause failures in the presence of peer connection migration, NAT rebinding, and client port reuse. An endpoint MUST NOT use the same IP address and port for multiple concurrent connections with zero-length connection IDs, unless it is certain that those protocol features are not in use.¶ When an endpoint uses a non-zero-length connection ID, it needs to ensure that the peer has a supply of connection IDs from which to choose for packets sent to the endpoint. These connection IDs are supplied by the endpoint using the NEW_CONNECTION_ID frame (Section 19.15).¶ 5.1.1. Issuing Connection IDs Each connection ID has an associated sequence number to assist in detecting when NEW_CONNECTION_ID or RETIRE_CONNECTION_ID frames refer to the same value. The initial connection ID issued by an endpoint is sent in the Source Connection ID field of the long packet header (Section 17.2) during the handshake. The sequence number of the initial connection ID is 0. If the preferred_address transport parameter is sent, the sequence number of the supplied connection ID is 1.¶ Additional connection IDs are communicated to the peer using NEW_CONNECTION_ID frames (Section 19.15). The sequence number on each newly issued connection ID MUST increase by 1. The connection ID that a client selects for the first Destination Connection ID field it sends and any connection ID provided by a Retry packet are not assigned sequence numbers.¶ When an endpoint issues a connection ID, it MUST accept packets that carry this connection ID for the duration of the connection or until its peer invalidates the connection ID via a RETIRE_CONNECTION_ID frame (Section 19.16). Connection IDs that are issued and not retired are considered active; any active connection ID is valid for use with the current connection at any time, in any packet type. This includes the connection ID issued by the server via the preferred_address transport parameter.¶ An endpoint SHOULD ensure that its peer has a sufficient number of available and unused connection IDs. Endpoints advertise the number of active connection IDs they are willing to maintain using the active_connection_id_limit transport parameter. An endpoint MUST NOT provide more connection IDs than the peer's limit. An endpoint MAY send connection IDs that temporarily exceed a peer's limit if the NEW_CONNECTION_ID frame also requires the retirement of any excess, by including a sufficiently large value in the Retire Prior To field.¶ A NEW_CONNECTION_ID frame might cause an endpoint to add some active connection IDs and retire others based on the value of the Retire Prior To field. After processing a NEW_CONNECTION_ID frame and adding and retiring active connection IDs, if the number of active connection IDs exceeds the value advertised in its active_connection_id_limit transport parameter, an endpoint MUST close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.¶ An endpoint SHOULD supply a new connection ID when the peer retires a connection ID. If an endpoint provided fewer connection IDs than the peer's active_connection_id_limit, it MAY supply a new connection ID when it receives a packet with a previously unused connection ID. An endpoint MAY limit the total number of connection IDs issued for each connection to avoid the risk of running out of connection IDs; see Section 10.3.2. An endpoint MAY also limit the issuance of connection IDs to reduce the amount of per-path state it maintains, such as path validation status, as its peer might interact with it over as many paths as there are issued connection IDs.¶ An endpoint that initiates migration and requires non-zero-length connection IDs SHOULD ensure that the pool of connection IDs available to its peer allows the peer to use a new connection ID on migration, as the peer will be unable to respond if the pool is exhausted.¶ An endpoint that selects a zero-length connection ID during the handshake cannot issue a new connection ID. A zero-length Destination Connection ID field is used in all packets sent toward such an endpoint over any network path.¶ 5.1.2. Consuming and Retiring Connection IDs An endpoint can change the connection ID it uses for a peer to another available one at any time during the connection. An endpoint consumes connection IDs in response to a migrating peer; see Section 9.5 for more details.¶ An endpoint maintains a set of connection IDs received from its peer, any of which it can use when sending packets. When the endpoint wishes to remove a connection ID from use, it sends a RETIRE_CONNECTION_ID frame to its peer. Sending a RETIRE_CONNECTION_ID frame indicates that the connection ID will not be used again and requests that the peer replace it with a new connection ID using a NEW_CONNECTION_ID frame.¶ As discussed in Section 9.5, endpoints limit the use of a connection ID to packets sent from a single local address to a single destination address. Endpoints SHOULD retire connection IDs when they are no longer actively using either the local or destination address for which the connection ID was used.¶ An endpoint might need to stop accepting previously issued connection IDs in certain circumstances. Such an endpoint can cause its peer to retire connection IDs by sending a NEW_CONNECTION_ID frame with an increased Retire Prior To field. The endpoint SHOULD continue to accept the previously issued connection IDs until they are retired by the peer. If the endpoint can no longer process the indicated connection IDs, it MAY close the connection.¶ Upon receipt of an increased Retire Prior To field, the peer MUST stop using the corresponding connection IDs and retire them with RETIRE_CONNECTION_ID frames before adding the newly provided connection ID to the set of active connection IDs. This ordering allows an endpoint to replace all active connection IDs without the possibility of a peer having no available connection IDs and without exceeding the limit the peer sets in the active_connection_id_limit transport parameter; see Section 18.2. Failure to cease using the connection IDs when requested can result in connection failures, as the issuing endpoint might be unable to continue using the connection IDs with the active connection.¶ An endpoint SHOULD limit the number of connection IDs it has retired locally for which RETIRE_CONNECTION_ID frames have not yet been acknowledged. An endpoint SHOULD allow for sending and tracking a number of RETIRE_CONNECTION_ID frames of at least twice the value of the active_connection_id_limit transport parameter. An endpoint MUST NOT forget a connection ID without retiring it, though it MAY choose to treat having connection IDs in need of retirement that exceed this limit as a connection error of type CONNECTION_ID_LIMIT_ERROR.¶ Endpoints SHOULD NOT issue updates of the Retire Prior To field before receiving RETIRE_CONNECTION_ID frames that retire all connection IDs indicated by the previous Retire Prior To value.¶ 5.2. Matching Packets to Connections Incoming packets are classified on receipt. Packets can either be associated with an existing connection or -- for servers -- potentially create a new connection.¶ Endpoints try to associate a packet with an existing connection. If the packet has a non-zero-length Destination Connection ID corresponding to an existing connection, QUIC processes that packet accordingly. Note that more than one connection ID can be associated with a connection; see Section 5.1.¶ If the Destination Connection ID is zero length and the addressing information in the packet matches the addressing information the endpoint uses to identify a connection with a zero-length connection ID, QUIC processes the packet as part of that connection. An endpoint can use just destination IP and port or both source and destination addresses for identification, though this makes connections fragile as described in Section 5.1.¶ Endpoints can send a Stateless Reset (Section 10.3) for any packets that cannot be attributed to an existing connection. A Stateless Reset allows a peer to more quickly identify when a connection becomes unusable.¶ Packets that are matched to an existing connection are discarded if the packets are inconsistent with the state of that connection. For example, packets are discarded if they indicate a different protocol version than that of the connection or if the removal of packet protection is unsuccessful once the expected keys are available.¶ Invalid packets that lack strong integrity protection, such as Initial, Retry, or Version Negotiation, MAY be discarded. An endpoint MUST generate a connection error if processing the contents of these packets prior to discovering an error, or fully revert any changes made during that processing.¶ 5.2.1. Client Packet Handling Valid packets sent to clients always include a Destination Connection ID that matches a value the client selects. Clients that choose to receive zero-length connection IDs can use the local address and port to identify a connection. Packets that do not match an existing connection -- based on Destination Connection ID or, if this value is zero length, local IP address and port -- are discarded.¶ Due to packet reordering or loss, a client might receive packets for a connection that are encrypted with a key it has not yet computed. The client MAY drop these packets, or it MAY buffer them in anticipation of later packets that allow it to compute the key.¶ If a client receives a packet that uses a different version than it initially selected, it MUST discard that packet.¶ 5.2.2. Server Packet Handling If a server receives a packet that indicates an unsupported version and if the packet is large enough to initiate a new connection for any supported version, the server SHOULD send a Version Negotiation packet as described in Section 6.1. A server MAY limit the number of packets to which it responds with a Version Negotiation packet. Servers MUST drop smaller packets that specify unsupported versions.¶ The first packet for an unsupported version can use different semantics and encodings for any version-specific field. In particular, different packet protection keys might be used for different versions. Servers that do not support a particular version are unlikely to be able to decrypt the payload of the packet or properly interpret the result. Servers SHOULD respond with a Version Negotiation packet, provided that the datagram is sufficiently long.¶ Packets with a supported version, or no Version field, are matched to a connection using the connection ID or -- for packets with zero-length connection IDs -- the local address and port. These packets are processed using the selected connection; otherwise, the server continues as described below.¶ If the packet is an Initial packet fully conforming with the specification, the server proceeds with the handshake (Section 7). This commits the server to the version that the client selected.¶ If a server refuses to accept a new connection, it SHOULD send an Initial packet containing a CONNECTION_CLOSE frame with error code CONNECTION_REFUSED.¶ If the packet is a 0-RTT packet, the server MAY buffer a limited number of these packets in anticipation of a late-arriving Initial packet. Clients are not able to send Handshake packets prior to receiving a server response, so servers SHOULD ignore any such packets.¶ Servers MUST drop incoming packets under all other circumstances.¶ 5.2.3. Considerations for Simple Load Balancers A server deployment could load-balance among servers using only source and destination IP addresses and ports. Changes to the client's IP address or port could result in packets being forwarded to the wrong server. Such a server deployment could use one of the following methods for connection continuity when a client's address changes.¶ Servers could use an out-of-band mechanism to forward packets to the correct server based on connection ID.¶ If servers can use a dedicated server IP address or port, other than the one that the client initially connects to, they could use the preferred_address transport parameter to request that clients move connections to that dedicated address. Note that clients could choose not to use the preferred address.¶ A server in a deployment that does not implement a solution to maintain connection continuity when the client address changes SHOULD indicate that migration is not supported by using the disable_active_migration transport parameter. The disable_active_migration transport parameter does not prohibit connection migration after a client has acted on a preferred_address transport parameter.¶ Server deployments that use this simple form of load balancing MUST avoid the creation of a stateless reset oracle; see Section 21.11.¶ 5.3. Operations on Connections This document does not define an API for QUIC; it instead defines a set of functions for QUIC connections that application protocols can rely upon. An application protocol can assume that an implementation of QUIC provides an interface that includes the operations described in this section. An implementation designed for use with a specific application protocol might provide only those operations that are used by that protocol.¶ When implementing the client role, an application protocol can:¶ open a connection, which begins the exchange described in Section 7;¶ enable Early Data when available; and¶ be informed when Early Data has been accepted or rejected by a server.¶ When implementing the server role, an application protocol can:¶ listen for incoming connections, which prepares for the exchange described in Section 7;¶ if Early Data is supported, embed application-controlled data in the TLS resumption ticket sent to the client; and¶ if Early Data is supported, retrieve application-controlled data from the client's resumption ticket and accept or reject Early Data based on that information.¶ In either role, an application protocol can:¶ configure minimum values for the initial number of permitted streams of each type, as communicated in the transport parameters (Section 7.4);¶ control resource allocation for receive buffers by setting flow control limits both for streams and for the connection;¶ identify whether the handshake has completed successfully or is still ongoing;¶ keep a connection from silently closing, by either generating PING frames (Section 19.2) or requesting that the transport send additional frames before the idle timeout expires (Section 10.1); and¶ immediately close (Section 10.2) the connection.¶ 6. Version Negotiation Version negotiation allows a server to indicate that it does not support the version the client used. A server sends a Version Negotiation packet in response to each packet that might initiate a new connection; see Section 5.2 for details.¶ The size of the first packet sent by a client will determine whether a server sends a Version Negotiation packet. Clients that support multiple QUIC versions SHOULD ensure that the first UDP datagram they send is sized to the largest of the minimum datagram sizes from all versions they support, using PADDING frames (Section 19.1) as necessary. This ensures that the server responds if there is a mutually supported version. A server might not send a Version Negotiation packet if the datagram it receives is smaller than the minimum size specified in a different version; see Section 14.1.¶ 6.1. Sending Version Negotiation Packets If the version selected by the client is not acceptable to the server, the server responds with a Version Negotiation packet; see Section 17.2.1. This includes a list of versions that the server will accept. An endpoint MUST NOT send a Version Negotiation packet in response to receiving a Version Negotiation packet.¶ This system allows a server to process packets with unsupported versions without retaining state. Though either the Initial packet or the Version Negotiation packet that is sent in response could be lost, the client will send new packets until it successfully receives a response or it abandons the connection attempt.¶ A server MAY limit the number of Version Negotiation packets it sends. For instance, a server that is able to recognize packets as 0-RTT might choose not to send Version Negotiation packets in response to 0-RTT packets with the expectation that it will eventually receive an Initial packet.¶ 6.2. Handling Version Negotiation Packets Version Negotiation packets are designed to allow for functionality to be defined in the future that allows QUIC to negotiate the version of QUIC to use for a connection. Future Standards Track specifications might change how implementations that support multiple versions of QUIC react to Version Negotiation packets received in response to an attempt to establish a connection using this version.¶ A client that supports only this version of QUIC MUST abandon the current connection attempt if it receives a Version Negotiation packet, with the following two exceptions. A client MUST discard any Version Negotiation packet if it has received and successfully processed any other packet, including an earlier Version Negotiation packet. A client MUST discard a Version Negotiation packet that lists the QUIC version selected by the client.¶ How to perform version negotiation is left as future work defined by future Standards Track specifications. In particular, that future work will ensure robustness against version downgrade attacks; see Section 21.12.¶ 6.3. Using Reserved Versions For a server to use a new version in the future, clients need to correctly handle unsupported versions. Some version numbers (0x?a?a?a?a, as defined in Section 15) are reserved for inclusion in fields that contain version numbers.¶ Endpoints MAY add reserved versions to any field where unknown or unsupported versions are ignored to test that a peer correctly ignores the value. For instance, an endpoint could include a reserved version in a Version Negotiation packet; see Section 17.2.1. Endpoints MAY send packets with a reserved version to test that a peer correctly discards the packet.¶ 7. Cryptographic and Transport Handshake QUIC relies on a combined cryptographic and transport handshake to minimize connection establishment latency. QUIC uses the CRYPTO frame (Section 19.6) to transmit the cryptographic handshake. The version of QUIC defined in this document is identified as 0x00000001 and uses TLS as described in [QUIC-TLS]; a different QUIC version could indicate that a different cryptographic handshake protocol is in use.¶ QUIC provides reliable, ordered delivery of the cryptographic handshake data. QUIC packet protection is used to encrypt as much of the handshake protocol as possible. The cryptographic handshake MUST provide the following properties:¶ authenticated key exchange, where¶ a server is always authenticated,¶ a client is optionally authenticated,¶ every connection produces distinct and unrelated keys, and¶ keying material is usable for packet protection for both 0-RTT and 1-RTT packets.¶ authenticated exchange of values for transport parameters of both endpoints, and confidentiality protection for server transport parameters (see Section 7.4).¶ authenticated negotiation of an application protocol (TLS uses Application-Layer Protocol Negotiation (ALPN) [ALPN] for this purpose).¶ The CRYPTO frame can be sent in different packet number spaces (Section 12.3). The offsets used by CRYPTO frames to ensure ordered delivery of cryptographic handshake data start from zero in each packet number space.¶ Figure 4 shows a simplified handshake and the exchange of packets and frames that are used to advance the handshake. Exchange of application data during the handshake is enabled where possible, shown with an asterisk (\"*\"). Once the handshake is complete, endpoints are able to exchange application data freely.¶ Client Server Initial (CRYPTO) 0-RTT (*) ----------> Initial (CRYPTO) Handshake (CRYPTO) <---------- 1-RTT (*) Handshake (CRYPTO) 1-RTT (*) ----------> <---------- 1-RTT (HANDSHAKE_DONE) 1-RTT <=========> 1-RTT Figure 4: Simplified QUIC Handshake Endpoints can use packets sent during the handshake to test for Explicit Congestion Notification (ECN) support; see Section 13.4. An endpoint validates support for ECN by observing whether the ACK frames acknowledging the first packets it sends carry ECN counts, as described in Section 13.4.2.¶ Endpoints MUST explicitly negotiate an application protocol. This avoids situations where there is a disagreement about the protocol that is in use.¶ 7.1. Example Handshake Flows Details of how TLS is integrated with QUIC are provided in [QUIC-TLS], but some examples are provided here. An extension of this exchange to support client address validation is shown in Section 8.1.2.¶ Once any address validation exchanges are complete, the cryptographic handshake is used to agree on cryptographic keys. The cryptographic handshake is carried in Initial (Section 17.2.2) and Handshake (Section 17.2.4) packets.¶ Figure 5 provides an overview of the 1-RTT handshake. Each line shows a QUIC packet with the packet type and packet number shown first, followed by the frames that are typically contained in those packets. For instance, the first packet is of type Initial, with packet number 0, and contains a CRYPTO frame carrying the ClientHello.¶ Multiple QUIC packets -- even of different packet types -- can be coalesced into a single UDP datagram; see Section 12.2. As a result, this handshake could consist of as few as four UDP datagrams, or any number more (subject to limits inherent to the protocol, such as congestion control and anti-amplification). For instance, the server's first flight contains Initial packets, Handshake packets, and \"0.5-RTT data\" in 1-RTT packets.¶ Client Server Initial[0]: CRYPTO[CH] -> Initial[0]: CRYPTO[SH] ACK[0] Handshake[0]: CRYPTO[EE, CERT, CV, FIN] <- 1-RTT[0]: STREAM[1, \"...\"] Initial[1]: ACK[0] Handshake[0]: CRYPTO[FIN], ACK[0] 1-RTT[0]: STREAM[0, \"...\"], ACK[0] -> Handshake[1]: ACK[0] <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, \"...\"], ACK[0] Figure 5: Example 1-RTT Handshake Figure 6 shows an example of a connection with a 0-RTT handshake and a single packet of 0-RTT data. Note that as described in Section 12.3, the server acknowledges 0-RTT data in 1-RTT packets, and the client sends 1-RTT packets in the same packet number space.¶ Client Server Initial[0]: CRYPTO[CH] 0-RTT[0]: STREAM[0, \"...\"] -> Initial[0]: CRYPTO[SH] ACK[0] Handshake[0] CRYPTO[EE, FIN] <- 1-RTT[0]: STREAM[1, \"...\"] ACK[0] Initial[1]: ACK[0] Handshake[0]: CRYPTO[FIN], ACK[0] 1-RTT[1]: STREAM[0, \"...\"] ACK[0] -> Handshake[1]: ACK[0] <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, \"...\"], ACK[1] Figure 6: Example 0-RTT Handshake 7.2. Negotiating Connection IDs A connection ID is used to ensure consistent routing of packets, as described in Section 5.1. The long header contains two connection IDs: the Destination Connection ID is chosen by the recipient of the packet and is used to provide consistent routing; the Source Connection ID is used to set the Destination Connection ID used by the peer.¶ During the handshake, packets with the long header (Section 17.2) are used to establish the connection IDs used by both endpoints. Each endpoint uses the Source Connection ID field to specify the connection ID that is used in the Destination Connection ID field of packets being sent to them. After processing the first Initial packet, each endpoint sets the Destination Connection ID field in subsequent packets it sends to the value of the Source Connection ID field that it received.¶ When an Initial packet is sent by a client that has not previously received an Initial or Retry packet from the server, the client populates the Destination Connection ID field with an unpredictable value. This Destination Connection ID MUST be at least 8 bytes in length. Until a packet is received from the server, the client MUST use the same Destination Connection ID value on all packets in this connection.¶ The Destination Connection ID field from the first Initial packet sent by a client is used to determine packet protection keys for Initial packets. These keys change after receiving a Retry packet; see Section 5.2 of [QUIC-TLS].¶ The client populates the Source Connection ID field with a value of its choosing and sets the Source Connection ID Length field to indicate the length.¶ 0-RTT packets in the first flight use the same Destination Connection ID and Source Connection ID values as the client's first Initial packet.¶ Upon first receiving an Initial or Retry packet from the server, the client uses the Source Connection ID supplied by the server as the Destination Connection ID for subsequent packets, including any 0-RTT packets. This means that a client might have to change the connection ID it sets in the Destination Connection ID field twice during connection establishment: once in response to a Retry packet and once in response to an Initial packet from the server. Once a client has received a valid Initial packet from the server, it MUST discard any subsequent packet it receives on that connection with a different Source Connection ID.¶ A client MUST change the Destination Connection ID it uses for sending packets in response to only the first received Initial or Retry packet. A server MUST set the Destination Connection ID it uses for sending packets based on the first received Initial packet. Any further changes to the Destination Connection ID are only permitted if the values are taken from NEW_CONNECTION_ID frames; if subsequent Initial packets include a different Source Connection ID, they MUST be discarded. This avoids unpredictable outcomes that might otherwise result from stateless processing of multiple Initial packets with different Source Connection IDs.¶ The Destination Connection ID that an endpoint sends can change over the lifetime of a connection, especially in response to connection migration (Section 9); see Section 5.1.1 for details.¶ 7.3. Authenticating Connection IDs The choice each endpoint makes about connection IDs during the handshake is authenticated by including all values in transport parameters; see Section 7.4. This ensures that all connection IDs used for the handshake are also authenticated by the cryptographic handshake.¶ Each endpoint includes the value of the Source Connection ID field from the first Initial packet it sent in the initial_source_connection_id transport parameter; see Section 18.2. A server includes the Destination Connection ID field from the first Initial packet it received from the client in the original_destination_connection_id transport parameter; if the server sent a Retry packet, this refers to the first Initial packet received before sending the Retry packet. If it sends a Retry packet, a server also includes the Source Connection ID field from the Retry packet in the retry_source_connection_id transport parameter.¶ The values provided by a peer for these transport parameters MUST match the values that an endpoint used in the Destination and Source Connection ID fields of Initial packets that it sent (and received, for servers). Endpoints MUST validate that received transport parameters match received connection ID values. Including connection ID values in transport parameters and verifying them ensures that an attacker cannot influence the choice of connection ID for a successful connection by injecting packets carrying attacker-chosen connection IDs during the handshake.¶ An endpoint MUST treat the absence of the initial_source_connection_id transport parameter from either endpoint or the absence of the original_destination_connection_id transport parameter from the server as a connection error of type TRANSPORT_PARAMETER_ERROR.¶ An endpoint MUST treat the following as a connection error of type TRANSPORT_PARAMETER_ERROR or PROTOCOL_VIOLATION:¶ absence of the retry_source_connection_id transport parameter from the server after receiving a Retry packet,¶ presence of the retry_source_connection_id transport parameter when no Retry packet was received, or¶ a mismatch between values received from a peer in these transport parameters and the value sent in the corresponding Destination or Source Connection ID fields of Initial packets.¶ If a zero-length connection ID is selected, the corresponding transport parameter is included with a zero-length value.¶ Figure 7 shows the connection IDs (with DCID=Destination Connection ID, SCID=Source Connection ID) that are used in a complete handshake. The exchange of Initial packets is shown, plus the later exchange of 1-RTT packets that includes the connection ID established during the handshake.¶ Client Server Initial: DCID=S1, SCID=C1 -> <- Initial: DCID=C1, SCID=S3 ... 1-RTT: DCID=S3 -> <- 1-RTT: DCID=C1 Figure 7: Use of Connection IDs in a Handshake Figure 8 shows a similar handshake that includes a Retry packet.¶ Client Server Initial: DCID=S1, SCID=C1 -> <- Retry: DCID=C1, SCID=S2 Initial: DCID=S2, SCID=C1 -> <- Initial: DCID=C1, SCID=S3 ... 1-RTT: DCID=S3 -> <- 1-RTT: DCID=C1 Figure 8: Use of Connection IDs in a Handshake with Retry In both cases (Figures 7 and 8), the client sets the value of the initial_source_connection_id transport parameter to C1.¶ When the handshake does not include a Retry (Figure 7), the server sets original_destination_connection_id to S1 (note that this value is chosen by the client) and initial_source_connection_id to S3. In this case, the server does not include a retry_source_connection_id transport parameter.¶ When the handshake includes a Retry (Figure 8), the server sets original_destination_connection_id to S1, retry_source_connection_id to S2, and initial_source_connection_id to S3.¶ 7.4. Transport Parameters During connection establishment, both endpoints make authenticated declarations of their transport parameters. Endpoints are required to comply with the restrictions that each parameter defines; the description of each parameter includes rules for its handling.¶ Transport parameters are declarations that are made unilaterally by each endpoint. Each endpoint can choose values for transport parameters independent of the values chosen by its peer.¶ The encoding of the transport parameters is detailed in Section 18.¶ QUIC includes the encoded transport parameters in the cryptographic handshake. Once the handshake completes, the transport parameters declared by the peer are available. Each endpoint validates the values provided by its peer.¶ Definitions for each of the defined transport parameters are included in Section 18.2.¶ An endpoint MUST treat receipt of a transport parameter with an invalid value as a connection error of type TRANSPORT_PARAMETER_ERROR.¶ An endpoint MUST NOT send a parameter more than once in a given transport parameters extension. An endpoint SHOULD treat receipt of duplicate transport parameters as a connection error of type TRANSPORT_PARAMETER_ERROR.¶ Endpoints use transport parameters to authenticate the negotiation of connection IDs during the handshake; see Section 7.3.¶ ALPN (see [ALPN]) allows clients to offer multiple application protocols during connection establishment. The transport parameters that a client includes during the handshake apply to all application protocols that the client offers. Application protocols can recommend values for transport parameters, such as the initial flow control limits. However, application protocols that set constraints on values for transport parameters could make it impossible for a client to offer multiple application protocols if these constraints conflict.¶ 7.4.1. Values of Transport Parameters for 0-RTT Using 0-RTT depends on both client and server using protocol parameters that were negotiated from a previous connection. To enable 0-RTT, endpoints store the values of the server transport parameters with any session tickets it receives on the connection. Endpoints also store any information required by the application protocol or cryptographic handshake; see Section 4.6 of [QUIC-TLS]. The values of stored transport parameters are used when attempting 0-RTT using the session tickets.¶ Remembered transport parameters apply to the new connection until the handshake completes and the client starts sending 1-RTT packets. Once the handshake completes, the client uses the transport parameters established in the handshake. Not all transport parameters are remembered, as some do not apply to future connections or they have no effect on the use of 0-RTT.¶ The definition of a new transport parameter (Section 7.4.2) MUST specify whether storing the transport parameter for 0-RTT is mandatory, optional, or prohibited. A client need not store a transport parameter it cannot process.¶ A client MUST NOT use remembered values for the following parameters: ack_delay_exponent, max_ack_delay, initial_source_connection_id, original_destination_connection_id, preferred_address, retry_source_connection_id, and stateless_reset_token. The client MUST use the server's new values in the handshake instead; if the server does not provide new values, the default values are used.¶ A client that attempts to send 0-RTT data MUST remember all other transport parameters used by the server that it is able to process. The server can remember these transport parameters or can store an integrity-protected copy of the values in the ticket and recover the information when accepting 0-RTT data. A server uses the transport parameters in determining whether to accept 0-RTT data.¶ If 0-RTT data is accepted by the server, the server MUST NOT reduce any limits or alter any values that might be violated by the client with its 0-RTT data. In particular, a server that accepts 0-RTT data MUST NOT set values for the following parameters (Section 18.2) that are smaller than the remembered values of the parameters.¶ active_connection_id_limit¶ initial_max_data¶ initial_max_stream_data_bidi_local¶ initial_max_stream_data_bidi_remote¶ initial_max_stream_data_uni¶ initial_max_streams_bidi¶ initial_max_streams_uni¶ Omitting or setting a zero value for certain transport parameters can result in 0-RTT data being enabled but not usable. The applicable subset of transport parameters that permit the sending of application data SHOULD be set to non-zero values for 0-RTT. This includes initial_max_data and either (1) initial_max_streams_bidi and initial_max_stream_data_bidi_remote or (2) initial_max_streams_uni and initial_max_stream_data_uni.¶ A server might provide larger initial stream flow control limits for streams than the remembered values that a client applies when sending 0-RTT. Once the handshake completes, the client updates the flow control limits on all sending streams using the updated values of initial_max_stream_data_bidi_remote and initial_max_stream_data_uni.¶ A server MAY store and recover the previously sent values of the max_idle_timeout, max_udp_payload_size, and disable_active_migration parameters and reject 0-RTT if it selects smaller values. Lowering the values of these parameters while also accepting 0-RTT data could degrade the performance of the connection. Specifically, lowering the max_udp_payload_size could result in dropped packets, leading to worse performance compared to rejecting 0-RTT data outright.¶ A server MUST reject 0-RTT data if the restored values for transport parameters cannot be supported.¶ When sending frames in 0-RTT packets, a client MUST only use remembered transport parameters; importantly, it MUST NOT use updated values that it learns from the server's updated transport parameters or from frames received in 1-RTT packets. Updated values of transport parameters from the handshake apply only to 1-RTT packets. For instance, flow control limits from remembered transport parameters apply to all 0-RTT packets even if those values are increased by the handshake or by frames sent in 1-RTT packets. A server MAY treat the use of updated transport parameters in 0-RTT as a connection error of type PROTOCOL_VIOLATION.¶ 7.4.2. New Transport Parameters New transport parameters can be used to negotiate new protocol behavior. An endpoint MUST ignore transport parameters that it does not support. The absence of a transport parameter therefore disables any optional protocol feature that is negotiated using the parameter. As described in Section 18.1, some identifiers are reserved in order to exercise this requirement.¶ A client that does not understand a transport parameter can discard it and attempt 0-RTT on subsequent connections. However, if the client adds support for a discarded transport parameter, it risks violating the constraints that the transport parameter establishes if it attempts 0-RTT. New transport parameters can avoid this problem by setting a default of the most conservative value. Clients can avoid this problem by remembering all parameters, even those not currently supported.¶ New transport parameters can be registered according to the rules in Section 22.3.¶ 7.5. Cryptographic Message Buffering Implementations need to maintain a buffer of CRYPTO data received out of order. Because there is no flow control of CRYPTO frames, an endpoint could potentially force its peer to buffer an unbounded amount of data.¶ Implementations MUST support buffering at least 4096 bytes of data received in out-of-order CRYPTO frames. Endpoints MAY choose to allow more data to be buffered during the handshake. A larger limit during the handshake could allow for larger keys or credentials to be exchanged. An endpoint's buffer size does not need to remain constant during the life of the connection.¶ Being unable to buffer CRYPTO frames during the handshake can lead to a connection failure. If an endpoint's buffer is exceeded during the handshake, it can expand its buffer temporarily to complete the handshake. If an endpoint does not expand its buffer, it MUST close the connection with a CRYPTO_BUFFER_EXCEEDED error code.¶ Once the handshake completes, if an endpoint is unable to buffer all data in a CRYPTO frame, it MAY discard that CRYPTO frame and all CRYPTO frames received in the future, or it MAY close the connection with a CRYPTO_BUFFER_EXCEEDED error code. Packets containing discarded CRYPTO frames MUST be acknowledged because the packet has been received and processed by the transport even though the CRYPTO frame was discarded.¶ 8. Address Validation Address validation ensures that an endpoint cannot be used for a traffic amplification attack. In such an attack, a packet is sent to a server with spoofed source address information that identifies a victim. If a server generates more or larger packets in response to that packet, the attacker can use the server to send more data toward the victim than it would be able to send on its own.¶ The primary defense against amplification attacks is verifying that a peer is able to receive packets at the transport address that it claims. Therefore, after receiving packets from an address that is not yet validated, an endpoint MUST limit the amount of data it sends to the unvalidated address to three times the amount of data received from that address. This limit on the size of responses is known as the anti-amplification limit.¶ Address validation is performed both during connection establishment (see Section 8.1) and during connection migration (see Section 8.2).¶ 8.1. Address Validation during Connection Establishment Connection establishment implicitly provides address validation for both endpoints. In particular, receipt of a packet protected with Handshake keys confirms that the peer successfully processed an Initial packet. Once an endpoint has successfully processed a Handshake packet from the peer, it can consider the peer address to have been validated.¶ Additionally, an endpoint MAY consider the peer address validated if the peer uses a connection ID chosen by the endpoint and the connection ID contains at least 64 bits of entropy.¶ For the client, the value of the Destination Connection ID field in its first Initial packet allows it to validate the server address as a part of successfully processing any packet. Initial packets from the server are protected with keys that are derived from this value (see Section 5.2 of [QUIC-TLS]). Alternatively, the value is echoed by the server in Version Negotiation packets (Section 6) or included in the Integrity Tag in Retry packets (Section 5.8 of [QUIC-TLS]).¶ Prior to validating the client address, servers MUST NOT send more than three times as many bytes as the number of bytes they have received. This limits the magnitude of any amplification attack that can be mounted using spoofed source addresses. For the purposes of avoiding amplification prior to address validation, servers MUST count all of the payload bytes received in datagrams that are uniquely attributed to a single connection. This includes datagrams that contain packets that are successfully processed and datagrams that contain packets that are all discarded.¶ Clients MUST ensure that UDP datagrams containing Initial packets have UDP payloads of at least 1200 bytes, adding PADDING frames as necessary. A client that sends padded datagrams allows the server to send more data prior to completing address validation.¶ Loss of an Initial or Handshake packet from the server can cause a deadlock if the client does not send additional Initial or Handshake packets. A deadlock could occur when the server reaches its anti-amplification limit and the client has received acknowledgments for all the data it has sent. In this case, when the client has no reason to send additional packets, the server will be unable to send more data because it has not validated the client's address. To prevent this deadlock, clients MUST send a packet on a Probe Timeout (PTO); see Section 6.2 of [QUIC-RECOVERY]. Specifically, the client MUST send an Initial packet in a UDP datagram that contains at least 1200 bytes if it does not have Handshake keys, and otherwise send a Handshake packet.¶ A server might wish to validate the client address before starting the cryptographic handshake. QUIC uses a token in the Initial packet to provide address validation prior to completing the handshake. This token is delivered to the client during connection establishment with a Retry packet (see Section 8.1.2) or in a previous connection using the NEW_TOKEN frame (see Section 8.1.3).¶ In addition to sending limits imposed prior to address validation, servers are also constrained in what they can send by the limits set by the congestion controller. Clients are only constrained by the congestion controller.¶ 8.1.1. Token Construction A token sent in a NEW_TOKEN frame or a Retry packet MUST be constructed in a way that allows the server to identify how it was provided to a client. These tokens are carried in the same field but require different handling from servers.¶ 8.1.2. Address Validation Using Retry Packets Upon receiving the client's Initial packet, the server can request address validation by sending a Retry packet (Section 17.2.5) containing a token. This token MUST be repeated by the client in all Initial packets it sends for that connection after it receives the Retry packet.¶ In response to processing an Initial packet containing a token that was provided in a Retry packet, a server cannot send another Retry packet; it can only refuse the connection or permit it to proceed.¶ As long as it is not possible for an attacker to generate a valid token for its own address (see Section 8.1.4) and the client is able to return that token, it proves to the server that it received the token.¶ A server can also use a Retry packet to defer the state and processing costs of connection establishment. Requiring the server to provide a different connection ID, along with the original_destination_connection_id transport parameter defined in Section 18.2, forces the server to demonstrate that it, or an entity it cooperates with, received the original Initial packet from the client. Providing a different connection ID also grants a server some control over how subsequent packets are routed. This can be used to direct connections to a different server instance.¶ If a server receives a client Initial that contains an invalid Retry token but is otherwise valid, it knows the client will not accept another Retry token. The server can discard such a packet and allow the client to time out to detect handshake failure, but that could impose a significant latency penalty on the client. Instead, the server SHOULD immediately close (Section 10.2) the connection with an INVALID_TOKEN error. Note that a server has not established any state for the connection at this point and so does not enter the closing period.¶ A flow showing the use of a Retry packet is shown in Figure 9.¶ Client Server Initial[0]: CRYPTO[CH] -> <- Retry+Token Initial+Token[1]: CRYPTO[CH] -> Initial[0]: CRYPTO[SH] ACK[1] Handshake[0]: CRYPTO[EE, CERT, CV, FIN] <- 1-RTT[0]: STREAM[1, \"...\"] Figure 9: Example Handshake with Retry 8.1.3. Address Validation for Future Connections A server MAY provide clients with an address validation token during one connection that can be used on a subsequent connection. Address validation is especially important with 0-RTT because a server potentially sends a significant amount of data to a client in response to 0-RTT data.¶ The server uses the NEW_TOKEN frame (Section 19.7) to provide the client with an address validation token that can be used to validate future connections. In a future connection, the client includes this token in Initial packets to provide address validation. The client MUST include the token in all Initial packets it sends, unless a Retry replaces the token with a newer one. The client MUST NOT use the token provided in a Retry for future connections. Servers MAY discard any Initial packet that does not carry the expected token.¶ Unlike the token that is created for a Retry packet, which is used immediately, the token sent in the NEW_TOKEN frame can be used after some period of time has passed. Thus, a token SHOULD have an expiration time, which could be either an explicit expiration time or an issued timestamp that can be used to dynamically calculate the expiration time. A server can store the expiration time or include it in an encrypted form in the token.¶ A token issued with NEW_TOKEN MUST NOT include information that would allow values to be linked by an observer to the connection on which it was issued. For example, it cannot include the previous connection ID or addressing information, unless the values are encrypted. A server MUST ensure that every NEW_TOKEN frame it sends is unique across all clients, with the exception of those sent to repair losses of previously sent NEW_TOKEN frames. Information that allows the server to distinguish between tokens from Retry and NEW_TOKEN MAY be accessible to entities other than the server.¶ It is unlikely that the client port number is the same on two different connections; validating the port is therefore unlikely to be successful.¶ A token received in a NEW_TOKEN frame is applicable to any server that the connection is considered authoritative for (e.g., server names included in the certificate). When connecting to a server for which the client retains an applicable and unused token, it SHOULD include that token in the Token field of its Initial packet. Including a token might allow the server to validate the client address without an additional round trip. A client MUST NOT include a token that is not applicable to the server that it is connecting to, unless the client has the knowledge that the server that issued the token and the server the client is connecting to are jointly managing the tokens. A client MAY use a token from any previous connection to that server.¶ A token allows a server to correlate activity between the connection where the token was issued and any connection where it is used. Clients that want to break continuity of identity with a server can discard tokens provided using the NEW_TOKEN frame. In comparison, a token obtained in a Retry packet MUST be used immediately during the connection attempt and cannot be used in subsequent connection attempts.¶ A client SHOULD NOT reuse a token from a NEW_TOKEN frame for different connection attempts. Reusing a token allows connections to be linked by entities on the network path; see Section 9.5.¶ Clients might receive multiple tokens on a single connection. Aside from preventing linkability, any token can be used in any connection attempt. Servers can send additional tokens to either enable address validation for multiple connection attempts or replace older tokens that might become invalid. For a client, this ambiguity means that sending the most recent unused token is most likely to be effective. Though saving and using older tokens have no negative consequences, clients can regard older tokens as being less likely to be useful to the server for address validation.¶ When a server receives an Initial packet with an address validation token, it MUST attempt to validate the token, unless it has already completed address validation. If the token is invalid, then the server SHOULD proceed as if the client did not have a validated address, including potentially sending a Retry packet. Tokens provided with NEW_TOKEN frames and Retry packets can be distinguished by servers (see Section 8.1.1), and the latter can be validated more strictly. If the validation succeeds, the server SHOULD then allow the handshake to proceed.¶ Note: The rationale for treating the client as unvalidated rather than discarding the packet is that the client might have received the token in a previous connection using the NEW_TOKEN frame, and if the server has lost state, it might be unable to validate the token at all, leading to connection failure if the packet is discarded.¶ In a stateless design, a server can use encrypted and authenticated tokens to pass information to clients that the server can later recover and use to validate a client address. Tokens are not integrated into the cryptographic handshake, and so they are not authenticated. For instance, a client might be able to reuse a token. To avoid attacks that exploit this property, a server can limit its use of tokens to only the information needed to validate client addresses.¶ Clients MAY use tokens obtained on one connection for any connection attempt using the same version. When selecting a token to use, clients do not need to consider other properties of the connection that is being attempted, including the choice of possible application protocols, session tickets, or other connection properties.¶ 8.1.4. Address Validation Token Integrity An address validation token MUST be difficult to guess. Including a random value with at least 128 bits of entropy in the token would be sufficient, but this depends on the server remembering the value it sends to clients.¶ A token-based scheme allows the server to offload any state associated with validation to the client. For this design to work, the token MUST be covered by integrity protection against modification or falsification by clients. Without integrity protection, malicious clients could generate or guess values for tokens that would be accepted by the server. Only the server requires access to the integrity protection key for tokens.¶ There is no need for a single well-defined format for the token because the server that generates the token also consumes it. Tokens sent in Retry packets SHOULD include information that allows the server to verify that the source IP address and port in client packets remain constant.¶ Tokens sent in NEW_TOKEN frames MUST include information that allows the server to verify that the client IP address has not changed from when the token was issued. Servers can use tokens from NEW_TOKEN frames in deciding not to send a Retry packet, even if the client address has changed. If the client IP address has changed, the server MUST adhere to the anti-amplification limit; see Section 8. Note that in the presence of NAT, this requirement might be insufficient to protect other hosts that share the NAT from amplification attacks.¶ Attackers could replay tokens to use servers as amplifiers in DDoS attacks. To protect against such attacks, servers MUST ensure that replay of tokens is prevented or limited. Servers SHOULD ensure that tokens sent in Retry packets are only accepted for a short time, as they are returned immediately by clients. Tokens that are provided in NEW_TOKEN frames (Section 19.7) need to be valid for longer but SHOULD NOT be accepted multiple times. Servers are encouraged to allow tokens to be used only once, if possible; tokens MAY include additional information about clients to further narrow applicability or reuse.¶ 8.2. Path Validation Path validation is used by both peers during connection migration (see Section 9) to verify reachability after a change of address. In path validation, endpoints test reachability between a specific local address and a specific peer address, where an address is the 2-tuple of IP address and port.¶ Path validation tests that packets sent on a path to a peer are received by that peer. Path validation is used to ensure that packets received from a migrating peer do not carry a spoofed source address.¶ Path validation does not validate that a peer can send in the return direction. Acknowledgments cannot be used for return path validation because they contain insufficient entropy and might be spoofed. Endpoints independently determine reachability on each direction of a path, and therefore return reachability can only be established by the peer.¶ Path validation can be used at any time by either endpoint. For instance, an endpoint might check that a peer is still in possession of its address after a period of quiescence.¶ Path validation is not designed as a NAT traversal mechanism. Though the mechanism described here might be effective for the creation of NAT bindings that support NAT traversal, the expectation is that one endpoint is able to receive packets without first having sent a packet on that path. Effective NAT traversal needs additional synchronization mechanisms that are not provided here.¶ An endpoint MAY include other frames with the PATH_CHALLENGE and PATH_RESPONSE frames used for path validation. In particular, an endpoint can include PADDING frames with a PATH_CHALLENGE frame for Path Maximum Transmission Unit Discovery (PMTUD); see Section 14.2.1. An endpoint can also include its own PATH_CHALLENGE frame when sending a PATH_RESPONSE frame.¶ An endpoint uses a new connection ID for probes sent from a new local address; see Section 9.5. When probing a new path, an endpoint can ensure that its peer has an unused connection ID available for responses. Sending NEW_CONNECTION_ID and PATH_CHALLENGE frames in the same packet, if the peer's active_connection_id_limit permits, ensures that an unused connection ID will be available to the peer when sending a response.¶ An endpoint can choose to simultaneously probe multiple paths. The number of simultaneous paths used for probes is limited by the number of extra connection IDs its peer has previously supplied, since each new local address used for a probe requires a previously unused connection ID.¶ 8.2.1. Initiating Path Validation To initiate path validation, an endpoint sends a PATH_CHALLENGE frame containing an unpredictable payload on the path to be validated.¶ An endpoint MAY send multiple PATH_CHALLENGE frames to guard against packet loss. However, an endpoint SHOULD NOT send multiple PATH_CHALLENGE frames in a single packet.¶ An endpoint SHOULD NOT probe a new path with packets containing a PATH_CHALLENGE frame more frequently than it would send an Initial packet. This ensures that connection migration is no more load on a new path than establishing a new connection.¶ The endpoint MUST use unpredictable data in every PATH_CHALLENGE frame so that it can associate the peer's response with the corresponding PATH_CHALLENGE.¶ An endpoint MUST expand datagrams that contain a PATH_CHALLENGE frame to at least the smallest allowed maximum datagram size of 1200 bytes, unless the anti-amplification limit for the path does not permit sending a datagram of this size. Sending UDP datagrams of this size ensures that the network path from the endpoint to the peer can be used for QUIC; see Section 14.¶ When an endpoint is unable to expand the datagram size to 1200 bytes due to the anti-amplification limit, the path MTU will not be validated. To ensure that the path MTU is large enough, the endpoint MUST perform a second path validation by sending a PATH_CHALLENGE frame in a datagram of at least 1200 bytes. This additional validation can be performed after a PATH_RESPONSE is successfully received or when enough bytes have been received on the path that sending the larger datagram will not result in exceeding the anti-amplification limit.¶ Unlike other cases where datagrams are expanded, endpoints MUST NOT discard datagrams that appear to be too small when they contain PATH_CHALLENGE or PATH_RESPONSE.¶ 8.2.2. Path Validation Responses On receiving a PATH_CHALLENGE frame, an endpoint MUST respond by echoing the data contained in the PATH_CHALLENGE frame in a PATH_RESPONSE frame. An endpoint MUST NOT delay transmission of a packet containing a PATH_RESPONSE frame unless constrained by congestion control.¶ A PATH_RESPONSE frame MUST be sent on the network path where the PATH_CHALLENGE frame was received. This ensures that path validation by a peer only succeeds if the path is functional in both directions. This requirement MUST NOT be enforced by the endpoint that initiates path validation, as that would enable an attack on migration; see Section 9.3.3.¶ An endpoint MUST expand datagrams that contain a PATH_RESPONSE frame to at least the smallest allowed maximum datagram size of 1200 bytes. This verifies that the path is able to carry datagrams of this size in both directions. However, an endpoint MUST NOT expand the datagram containing the PATH_RESPONSE if the resulting data exceeds the anti-amplification limit. This is expected to only occur if the received PATH_CHALLENGE was not sent in an expanded datagram.¶ An endpoint MUST NOT send more than one PATH_RESPONSE frame in response to one PATH_CHALLENGE frame; see Section 13.3. The peer is expected to send more PATH_CHALLENGE frames as necessary to evoke additional PATH_RESPONSE frames.¶ 8.2.3. Successful Path Validation Path validation succeeds when a PATH_RESPONSE frame is received that contains the data that was sent in a previous PATH_CHALLENGE frame. A PATH_RESPONSE frame received on any network path validates the path on which the PATH_CHALLENGE was sent.¶ If an endpoint sends a PATH_CHALLENGE frame in a datagram that is not expanded to at least 1200 bytes and if the response to it validates the peer address, the path is validated but not the path MTU. As a result, the endpoint can now send more than three times the amount of data that has been received. However, the endpoint MUST initiate another path validation with an expanded datagram to verify that the path supports the required MTU.¶ Receipt of an acknowledgment for a packet containing a PATH_CHALLENGE frame is not adequate validation, since the acknowledgment can be spoofed by a malicious peer.¶ 8.2.4. Failed Path Validation Path validation only fails when the endpoint attempting to validate the path abandons its attempt to validate the path.¶ Endpoints SHOULD abandon path validation based on a timer. When setting this timer, implementations are cautioned that the new path could have a longer round-trip time than the original. A value of three times the larger of the current PTO or the PTO for the new path (using kInitialRtt, as defined in [QUIC-RECOVERY]) is RECOMMENDED.¶ This timeout allows for multiple PTOs to expire prior to failing path validation, so that loss of a single PATH_CHALLENGE or PATH_RESPONSE frame does not cause path validation failure.¶ Note that the endpoint might receive packets containing other frames on the new path, but a PATH_RESPONSE frame with appropriate data is required for path validation to succeed.¶ When an endpoint abandons path validation, it determines that the path is unusable. This does not necessarily imply a failure of the connection -- endpoints can continue sending packets over other paths as appropriate. If no paths are available, an endpoint can wait for a new path to become available or close the connection. An endpoint that has no valid network path to its peer MAY signal this using the NO_VIABLE_PATH connection error, noting that this is only possible if the network path exists but does not support the required MTU (Section 14).¶ A path validation might be abandoned for other reasons besides failure. Primarily, this happens if a connection migration to a new path is initiated while a path validation on the old path is in progress.¶ 9. Connection Migration The use of a connection ID allows connections to survive changes to endpoint addresses (IP address and port), such as those caused by an endpoint migrating to a new network. This section describes the process by which an endpoint migrates to a new address.¶ The design of QUIC relies on endpoints retaining a stable address for the duration of the handshake. An endpoint MUST NOT initiate connection migration before the handshake is confirmed, as defined in Section 4.1.2 of [QUIC-TLS].¶ If the peer sent the disable_active_migration transport parameter, an endpoint also MUST NOT send packets (including probing packets; see Section 9.1) from a different local address to the address the peer used during the handshake, unless the endpoint has acted on a preferred_address transport parameter from the peer. If the peer violates this requirement, the endpoint MUST either drop the incoming packets on that path without generating a Stateless Reset or proceed with path validation and allow the peer to migrate. Generating a Stateless Reset or closing the connection would allow third parties in the network to cause connections to close by spoofing or otherwise manipulating observed traffic.¶ Not all changes of peer address are intentional, or active, migrations. The peer could experience NAT rebinding: a change of address due to a middlebox, usually a NAT, allocating a new outgoing port or even a new outgoing IP address for a flow. An endpoint MUST perform path validation (Section 8.2) if it detects any change to a peer's address, unless it has previously validated that address.¶ When an endpoint has no validated path on which to send packets, it MAY discard connection state. An endpoint capable of connection migration MAY wait for a new path to become available before discarding connection state.¶ This document limits migration of connections to new client addresses, except as described in Section 9.6. Clients are responsible for initiating all migrations. Servers do not send non-probing packets (see Section 9.1) toward a client address until they see a non-probing packet from that address. If a client receives packets from an unknown server address, the client MUST discard these packets.¶ 9.1. Probing a New Path An endpoint MAY probe for peer reachability from a new local address using path validation (Section 8.2) prior to migrating the connection to the new local address. Failure of path validation simply means that the new path is not usable for this connection. Failure to validate a path does not cause the connection to end unless there are no valid alternative paths available.¶ PATH_CHALLENGE, PATH_RESPONSE, NEW_CONNECTION_ID, and PADDING frames are \"probing frames\", and all other frames are \"non-probing frames\". A packet containing only probing frames is a \"probing packet\", and a packet containing any other frame is a \"non-probing packet\".¶ 9.2. Initiating Connection Migration An endpoint can migrate a connection to a new local address by sending packets containing non-probing frames from that address.¶ Each endpoint validates its peer's address during connection establishment. Therefore, a migrating endpoint can send to its peer knowing that the peer is willing to receive at the peer's current address. Thus, an endpoint can migrate to a new local address without first validating the peer's address.¶ To establish reachability on the new path, an endpoint initiates path validation (Section 8.2) on the new path. An endpoint MAY defer path validation until after a peer sends the next non-probing frame to its new address.¶ When migrating, the new path might not support the endpoint's current sending rate. Therefore, the endpoint resets its congestion controller and RTT estimate, as described in Section 9.4.¶ The new path might not have the same ECN capability. Therefore, the endpoint validates ECN capability as described in Section 13.4.¶ 9.3. Responding to Connection Migration Receiving a packet from a new peer address containing a non-probing frame indicates that the peer has migrated to that address.¶ If the recipient permits the migration, it MUST send subsequent packets to the new peer address and MUST initiate path validation (Section 8.2) to verify the peer's ownership of the address if validation is not already underway. If the recipient has no unused connection IDs from the peer, it will not be able to send anything on the new path until the peer provides one; see Section 9.5.¶ An endpoint only changes the address to which it sends packets in response to the highest-numbered non-probing packet. This ensures that an endpoint does not send packets to an old peer address in the case that it receives reordered packets.¶ An endpoint MAY send data to an unvalidated peer address, but it MUST protect against potential attacks as described in Sections 9.3.1 and 9.3.2. An endpoint MAY skip validation of a peer address if that address has been seen recently. In particular, if an endpoint returns to a previously validated path after detecting some form of spurious migration, skipping address validation and restoring loss detection and congestion state can reduce the performance impact of the attack.¶ After changing the address to which it sends non-probing packets, an endpoint can abandon any path validation for other addresses.¶ Receiving a packet from a new peer address could be the result of a NAT rebinding at the peer.¶ After verifying a new client address, the server SHOULD send new address validation tokens (Section 8) to the client.¶ 9.3.1. Peer Address Spoofing It is possible that a peer is spoofing its source address to cause an endpoint to send excessive amounts of data to an unwilling host. If the endpoint sends significantly more data than the spoofing peer, connection migration might be used to amplify the volume of data that an attacker can generate toward a victim.¶ As described in Section 9.3, an endpoint is required to validate a peer's new address to confirm the peer's possession of the new address. Until a peer's address is deemed valid, an endpoint limits the amount of data it sends to that address; see Section 8. In the absence of this limit, an endpoint risks being used for a denial-of-service attack against an unsuspecting victim.¶ If an endpoint skips validation of a peer address as described above, it does not need to limit its sending rate.¶ 9.3.2. On-Path Address Spoofing An on-path attacker could cause a spurious connection migration by copying and forwarding a packet with a spoofed address such that it arrives before the original packet. The packet with the spoofed address will be seen to come from a migrating connection, and the original packet will be seen as a duplicate and dropped. After a spurious migration, validation of the source address will fail because the entity at the source address does not have the necessary cryptographic keys to read or respond to the PATH_CHALLENGE frame that is sent to it even if it wanted to.¶ To protect the connection from failing due to such a spurious migration, an endpoint MUST revert to using the last validated peer address when validation of a new peer address fails. Additionally, receipt of packets with higher packet numbers from the legitimate peer address will trigger another connection migration. This will cause the validation of the address of the spurious migration to be abandoned, thus containing migrations initiated by the attacker injecting a single packet.¶ If an endpoint has no state about the last validated peer address, it MUST close the connection silently by discarding all connection state. This results in new packets on the connection being handled generically. For instance, an endpoint MAY send a Stateless Reset in response to any further incoming packets.¶ 9.3.3. Off-Path Packet Forwarding An off-path attacker that can observe packets might forward copies of genuine packets to endpoints. If the copied packet arrives before the genuine packet, this will appear as a NAT rebinding. Any genuine packet will be discarded as a duplicate. If the attacker is able to continue forwarding packets, it might be able to cause migration to a path via the attacker. This places the attacker on-path, giving it the ability to observe or drop all subsequent packets.¶ This style of attack relies on the attacker using a path that has approximately the same characteristics as the direct path between endpoints. The attack is more reliable if relatively few packets are sent or if packet loss coincides with the attempted attack.¶ A non-probing packet received on the original path that increases the maximum received packet number will cause the endpoint to move back to that path. Eliciting packets on this path increases the likelihood that the attack is unsuccessful. Therefore, mitigation of this attack relies on triggering the exchange of packets.¶ In response to an apparent migration, endpoints MUST validate the previously active path using a PATH_CHALLENGE frame. This induces the sending of new packets on that path. If the path is no longer viable, the validation attempt will time out and fail; if the path is viable but no longer desired, the validation will succeed but only results in probing packets being sent on the path.¶ An endpoint that receives a PATH_CHALLENGE on an active path SHOULD send a non-probing packet in response. If the non-probing packet arrives before any copy made by an attacker, this results in the connection being migrated back to the original path. Any subsequent migration to another path restarts this entire process.¶ This defense is imperfect, but this is not considered a serious problem. If the path via the attack is reliably faster than the original path despite multiple attempts to use that original path, it is not possible to distinguish between an attack and an improvement in routing.¶ An endpoint could also use heuristics to improve detection of this style of attack. For instance, NAT rebinding is improbable if packets were recently received on the old path; similarly, rebinding is rare on IPv6 paths. Endpoints can also look for duplicated packets. Conversely, a change in connection ID is more likely to indicate an intentional migration rather than an attack.¶ 9.4. Loss Detection and Congestion Control The capacity available on the new path might not be the same as the old path. Packets sent on the old path MUST NOT contribute to congestion control or RTT estimation for the new path.¶ On confirming a peer's ownership of its new address, an endpoint MUST immediately reset the congestion controller and round-trip time estimator for the new path to initial values (see Appendices A.3 and B.3 of [QUIC-RECOVERY]) unless the only change in the peer's address is its port number. Because port-only changes are commonly the result of NAT rebinding or other middlebox activity, the endpoint MAY instead retain its congestion control state and round-trip estimate in those cases instead of reverting to initial values. In cases where congestion control state retained from an old path is used on a new path with substantially different characteristics, a sender could transmit too aggressively until the congestion controller and the RTT estimator have adapted. Generally, implementations are advised to be cautious when using previous values on a new path.¶ There could be apparent reordering at the receiver when an endpoint sends data and probes from/to multiple addresses during the migration period, since the two resulting paths could have different round-trip times. A receiver of packets on multiple paths will still send ACK frames covering all received packets.¶ While multiple paths might be used during connection migration, a single congestion control context and a single loss recovery context (as described in [QUIC-RECOVERY]) could be adequate. For instance, an endpoint might delay switching to a new congestion control context until it is confirmed that an old path is no longer needed (such as the case described in Section 9.3.3).¶ A sender can make exceptions for probe packets so that their loss detection is independent and does not unduly cause the congestion controller to reduce its sending rate. An endpoint might set a separate timer when a PATH_CHALLENGE is sent, which is canceled if the corresponding PATH_RESPONSE is received. If the timer fires before the PATH_RESPONSE is received, the endpoint might send a new PATH_CHALLENGE and restart the timer for a longer period of time. This timer SHOULD be set as described in Section 6.2.1 of [QUIC-RECOVERY] and MUST NOT be more aggressive.¶ 9.5. Privacy Implications of Connection Migration Using a stable connection ID on multiple network paths would allow a passive observer to correlate activity between those paths. An endpoint that moves between networks might not wish to have their activity correlated by any entity other than their peer, so different connection IDs are used when sending from different local addresses, as discussed in Section 5.1. For this to be effective, endpoints need to ensure that connection IDs they provide cannot be linked by any other entity.¶ At any time, endpoints MAY change the Destination Connection ID they transmit with to a value that has not been used on another path.¶ An endpoint MUST NOT reuse a connection ID when sending from more than one local address -- for example, when initiating connection migration as described in Section 9.2 or when probing a new network path as described in Section 9.1.¶ Similarly, an endpoint MUST NOT reuse a connection ID when sending to more than one destination address. Due to network changes outside the control of its peer, an endpoint might receive packets from a new source address with the same Destination Connection ID field value, in which case it MAY continue to use the current connection ID with the new remote address while still sending from the same local address.¶ These requirements regarding connection ID reuse apply only to the sending of packets, as unintentional changes in path without a change in connection ID are possible. For example, after a period of network inactivity, NAT rebinding might cause packets to be sent on a new path when the client resumes sending. An endpoint responds to such an event as described in Section 9.3.¶ Using different connection IDs for packets sent in both directions on each new network path eliminates the use of the connection ID for linking packets from the same connection across different network paths. Header protection ensures that packet numbers cannot be used to correlate activity. This does not prevent other properties of packets, such as timing and size, from being used to correlate activity.¶ An endpoint SHOULD NOT initiate migration with a peer that has requested a zero-length connection ID, because traffic over the new path might be trivially linkable to traffic over the old one. If the server is able to associate packets with a zero-length connection ID to the right connection, it means that the server is using other information to demultiplex packets. For example, a server might provide a unique address to every client -- for instance, using HTTP alternative services [ALTSVC]. Information that might allow correct routing of packets across multiple network paths will also allow activity on those paths to be linked by entities other than the peer.¶ A client might wish to reduce linkability by switching to a new connection ID, source UDP port, or IP address (see [RFC8981]) when sending traffic after a period of inactivity. Changing the address from which it sends packets at the same time might cause the server to detect a connection migration. This ensures that the mechanisms that support migration are exercised even for clients that do not experience NAT rebindings or genuine migrations. Changing address can cause a peer to reset its congestion control state (see Section 9.4), so addresses SHOULD only be changed infrequently.¶ An endpoint that exhausts available connection IDs cannot probe new paths or initiate migration, nor can it respond to probes or attempts by its peer to migrate. To ensure that migration is possible and packets sent on different paths cannot be correlated, endpoints SHOULD provide new connection IDs before peers migrate; see Section 5.1.1. If a peer might have exhausted available connection IDs, a migrating endpoint could include a NEW_CONNECTION_ID frame in all packets sent on a new network path.¶ 9.6. Server's Preferred Address QUIC allows servers to accept connections on one IP address and attempt to transfer these connections to a more preferred address shortly after the handshake. This is particularly useful when clients initially connect to an address shared by multiple servers but would prefer to use a unicast address to ensure connection stability. This section describes the protocol for migrating a connection to a preferred server address.¶ Migrating a connection to a new server address mid-connection is not supported by the version of QUIC specified in this document. If a client receives packets from a new server address when the client has not initiated a migration to that address, the client SHOULD discard these packets.¶ 9.6.1. Communicating a Preferred Address A server conveys a preferred address by including the preferred_address transport parameter in the TLS handshake.¶ Servers MAY communicate a preferred address of each address family (IPv4 and IPv6) to allow clients to pick the one most suited to their network attachment.¶ Once the handshake is confirmed, the client SHOULD select one of the two addresses provided by the server and initiate path validation (see Section 8.2). A client constructs packets using any previously unused active connection ID, taken from either the preferred_address transport parameter or a NEW_CONNECTION_ID frame.¶ As soon as path validation succeeds, the client SHOULD begin sending all future packets to the new server address using the new connection ID and discontinue use of the old server address. If path validation fails, the client MUST continue sending all future packets to the server's original IP address.¶ 9.6.2. Migration to a Preferred Address A client that migrates to a preferred address MUST validate the address it chooses before migrating; see Section 21.5.3.¶ A server might receive a packet addressed to its preferred IP address at any time after it accepts a connection. If this packet contains a PATH_CHALLENGE frame, the server sends a packet containing a PATH_RESPONSE frame as per Section 8.2. The server MUST send non-probing packets from its original address until it receives a non-probing packet from the client at its preferred address and until the server has validated the new path.¶ The server MUST probe on the path toward the client from its preferred address. This helps to guard against spurious migration initiated by an attacker.¶ Once the server has completed its path validation and has received a non-probing packet with a new largest packet number on its preferred address, the server begins sending non-probing packets to the client exclusively from its preferred IP address. The server SHOULD drop newer packets for this connection that are received on the old IP address. The server MAY continue to process delayed packets that are received on the old IP address.¶ The addresses that a server provides in the preferred_address transport parameter are only valid for the connection in which they are provided. A client MUST NOT use these for other connections, including connections that are resumed from the current connection.¶ 9.6.3. Interaction of Client Migration and Preferred Address A client might need to perform a connection migration before it has migrated to the server's preferred address. In this case, the client SHOULD perform path validation to both the original and preferred server address from the client's new address concurrently.¶ If path validation of the server's preferred address succeeds, the client MUST abandon validation of the original address and migrate to using the server's preferred address. If path validation of the server's preferred address fails but validation of the server's original address succeeds, the client MAY migrate to its new address and continue sending to the server's original address.¶ If packets received at the server's preferred address have a different source address than observed from the client during the handshake, the server MUST protect against potential attacks as described in Sections 9.3.1 and 9.3.2. In addition to intentional simultaneous migration, this might also occur because the client's access network used a different NAT binding for the server's preferred address.¶ Servers SHOULD initiate path validation to the client's new address upon receiving a probe packet from a different address; see Section 8.¶ A client that migrates to a new address SHOULD use a preferred address from the same address family for the server.¶ The connection ID provided in the preferred_address transport parameter is not specific to the addresses that are provided. This connection ID is provided to ensure that the client has a connection ID available for migration, but the client MAY use this connection ID on any path.¶ 9.7. Use of IPv6 Flow Label and Migration Endpoints that send data using IPv6 SHOULD apply an IPv6 flow label in compliance with [RFC6437], unless the local API does not allow setting IPv6 flow labels.¶ The flow label generation MUST be designed to minimize the chances of linkability with a previously used flow label, as a stable flow label would enable correlating activity on multiple paths; see Section 9.5.¶ [RFC6437] suggests deriving values using a pseudorandom function to generate flow labels. Including the Destination Connection ID field in addition to source and destination addresses when generating flow labels ensures that changes are synchronized with changes in other observable identifiers. A cryptographic hash function that combines these inputs with a local secret is one way this might be implemented.¶ 10. Connection Termination An established QUIC connection can be terminated in one of three ways:¶ idle timeout (Section 10.1)¶ immediate close (Section 10.2)¶ stateless reset (Section 10.3)¶ An endpoint MAY discard connection state if it does not have a validated path on which it can send packets; see Section 8.2.¶ 10.1. Idle Timeout If a max_idle_timeout is specified by either endpoint in its transport parameters (Section 18.2), the connection is silently closed and its state is discarded when it remains idle for longer than the minimum of the max_idle_timeout value advertised by both endpoints.¶ Each endpoint advertises a max_idle_timeout, but the effective value at an endpoint is computed as the minimum of the two advertised values (or the sole advertised value, if only one endpoint advertises a non-zero value). By announcing a max_idle_timeout, an endpoint commits to initiating an immediate close (Section 10.2) if it abandons the connection prior to the effective value.¶ An endpoint restarts its idle timer when a packet from its peer is received and processed successfully. An endpoint also restarts its idle timer when sending an ack-eliciting packet if no other ack-eliciting packets have been sent since last receiving and processing a packet. Restarting this timer when sending a packet ensures that connections are not closed after new activity is initiated.¶ To avoid excessively small idle timeout periods, endpoints MUST increase the idle timeout period to be at least three times the current Probe Timeout (PTO). This allows for multiple PTOs to expire, and therefore multiple probes to be sent and lost, prior to idle timeout.¶ 10.1.1. Liveness Testing An endpoint that sends packets close to the effective timeout risks having them be discarded at the peer, since the idle timeout period might have expired at the peer before these packets arrive.¶ An endpoint can send a PING or another ack-eliciting frame to test the connection for liveness if the peer could time out soon, such as within a PTO; see Section 6.2 of [QUIC-RECOVERY]. This is especially useful if any available application data cannot be safely retried. Note that the application determines what data is safe to retry.¶ 10.1.2. Deferring Idle Timeout An endpoint might need to send ack-eliciting packets to avoid an idle timeout if it is expecting response data but does not have or is unable to send application data.¶ An implementation of QUIC might provide applications with an option to defer an idle timeout. This facility could be used when the application wishes to avoid losing state that has been associated with an open connection but does not expect to exchange application data for some time. With this option, an endpoint could send a PING frame (Section 19.2) periodically, which will cause the peer to restart its idle timeout period. Sending a packet containing a PING frame restarts the idle timeout for this endpoint also if this is the first ack-eliciting packet sent since receiving a packet. Sending a PING frame causes the peer to respond with an acknowledgment, which also restarts the idle timeout for the endpoint.¶ Application protocols that use QUIC SHOULD provide guidance on when deferring an idle timeout is appropriate. Unnecessary sending of PING frames could have a detrimental effect on performance.¶ A connection will time out if no packets are sent or received for a period longer than the time negotiated using the max_idle_timeout transport parameter; see Section 10. However, state in middleboxes might time out earlier than that. Though REQ-5 in [RFC4787] recommends a 2-minute timeout interval, experience shows that sending packets every 30 seconds is necessary to prevent the majority of middleboxes from losing state for UDP flows [GATEWAY].¶ 10.2. Immediate Close An endpoint sends a CONNECTION_CLOSE frame (Section 19.19) to terminate the connection immediately. A CONNECTION_CLOSE frame causes all streams to immediately become closed; open streams can be assumed to be implicitly reset.¶ After sending a CONNECTION_CLOSE frame, an endpoint immediately enters the closing state; see Section 10.2.1. After receiving a CONNECTION_CLOSE frame, endpoints enter the draining state; see Section 10.2.2.¶ Violations of the protocol lead to an immediate close.¶ An immediate close can be used after an application protocol has arranged to close a connection. This might be after the application protocol negotiates a graceful shutdown. The application protocol can exchange messages that are needed for both application endpoints to agree that the connection can be closed, after which the application requests that QUIC close the connection. When QUIC consequently closes the connection, a CONNECTION_CLOSE frame with an application-supplied error code will be used to signal closure to the peer.¶ The closing and draining connection states exist to ensure that connections close cleanly and that delayed or reordered packets are properly discarded. These states SHOULD persist for at least three times the current PTO interval as defined in [QUIC-RECOVERY].¶ Disposing of connection state prior to exiting the closing or draining state could result in an endpoint generating a Stateless Reset unnecessarily when it receives a late-arriving packet. Endpoints that have some alternative means to ensure that late-arriving packets do not induce a response, such as those that are able to close the UDP socket, MAY end these states earlier to allow for faster resource recovery. Servers that retain an open socket for accepting new connections SHOULD NOT end the closing or draining state early.¶ Once its closing or draining state ends, an endpoint SHOULD discard all connection state. The endpoint MAY send a Stateless Reset in response to any further incoming packets belonging to this connection.¶ 10.2.1. Closing Connection State An endpoint enters the closing state after initiating an immediate close.¶ In the closing state, an endpoint retains only enough information to generate a packet containing a CONNECTION_CLOSE frame and to identify packets as belonging to the connection. An endpoint in the closing state sends a packet containing a CONNECTION_CLOSE frame in response to any incoming packet that it attributes to the connection.¶ An endpoint SHOULD limit the rate at which it generates packets in the closing state. For instance, an endpoint could wait for a progressively increasing number of received packets or amount of time before responding to received packets.¶ An endpoint's selected connection ID and the QUIC version are sufficient information to identify packets for a closing connection; the endpoint MAY discard all other connection state. An endpoint that is closing is not required to process any received frame. An endpoint MAY retain packet protection keys for incoming packets to allow it to read and process a CONNECTION_CLOSE frame.¶ An endpoint MAY drop packet protection keys when entering the closing state and send a packet containing a CONNECTION_CLOSE frame in response to any UDP datagram that is received. However, an endpoint that discards packet protection keys cannot identify and discard invalid packets. To avoid being used for an amplification attack, such endpoints MUST limit the cumulative size of packets it sends to three times the cumulative size of the packets that are received and attributed to the connection. To minimize the state that an endpoint maintains for a closing connection, endpoints MAY send the exact same packet in response to any received packet.¶ Note: Allowing retransmission of a closing packet is an exception to the requirement that a new packet number be used for each packet; see Section 12.3. Sending new packet numbers is primarily of advantage to loss recovery and congestion control, which are not expected to be relevant for a closed connection. Retransmitting the final packet requires less state.¶ While in the closing state, an endpoint could receive packets from a new source address, possibly indicating a connection migration; see Section 9. An endpoint in the closing state MUST either discard packets received from an unvalidated address or limit the cumulative size of packets it sends to an unvalidated address to three times the size of packets it receives from that address.¶ An endpoint is not expected to handle key updates when it is closing (Section 6 of [QUIC-TLS]). A key update might prevent the endpoint from moving from the closing state to the draining state, as the endpoint will not be able to process subsequently received packets, but it otherwise has no impact.¶ 10.2.2. Draining Connection State The draining state is entered once an endpoint receives a CONNECTION_CLOSE frame, which indicates that its peer is closing or draining. While otherwise identical to the closing state, an endpoint in the draining state MUST NOT send any packets. Retaining packet protection keys is unnecessary once a connection is in the draining state.¶ An endpoint that receives a CONNECTION_CLOSE frame MAY send a single packet containing a CONNECTION_CLOSE frame before entering the draining state, using a NO_ERROR code if appropriate. An endpoint MUST NOT send further packets. Doing so could result in a constant exchange of CONNECTION_CLOSE frames until one of the endpoints exits the closing state.¶ An endpoint MAY enter the draining state from the closing state if it receives a CONNECTION_CLOSE frame, which indicates that the peer is also closing or draining. In this case, the draining state ends when the closing state would have ended. In other words, the endpoint uses the same end time but ceases transmission of any packets on this connection.¶ 10.2.3. Immediate Close during the Handshake When sending a CONNECTION_CLOSE frame, the goal is to ensure that the peer will process the frame. Generally, this means sending the frame in a packet with the highest level of packet protection to avoid the packet being discarded. After the handshake is confirmed (see Section 4.1.2 of [QUIC-TLS]), an endpoint MUST send any CONNECTION_CLOSE frames in a 1-RTT packet. However, prior to confirming the handshake, it is possible that more advanced packet protection keys are not available to the peer, so another CONNECTION_CLOSE frame MAY be sent in a packet that uses a lower packet protection level. More specifically:¶ A client will always know whether the server has Handshake keys (see Section 17.2.2.1), but it is possible that a server does not know whether the client has Handshake keys. Under these circumstances, a server SHOULD send a CONNECTION_CLOSE frame in both Handshake and Initial packets to ensure that at least one of them is processable by the client.¶ A client that sends a CONNECTION_CLOSE frame in a 0-RTT packet cannot be assured that the server has accepted 0-RTT. Sending a CONNECTION_CLOSE frame in an Initial packet makes it more likely that the server can receive the close signal, even if the application error code might not be received.¶ Prior to confirming the handshake, a peer might be unable to process 1-RTT packets, so an endpoint SHOULD send a CONNECTION_CLOSE frame in both Handshake and 1-RTT packets. A server SHOULD also send a CONNECTION_CLOSE frame in an Initial packet.¶ Sending a CONNECTION_CLOSE of type 0x1d in an Initial or Handshake packet could expose application state or be used to alter application state. A CONNECTION_CLOSE of type 0x1d MUST be replaced by a CONNECTION_CLOSE of type 0x1c when sending the frame in Initial or Handshake packets. Otherwise, information about the application state might be revealed. Endpoints MUST clear the value of the Reason Phrase field and SHOULD use the APPLICATION_ERROR code when converting to a CONNECTION_CLOSE of type 0x1c.¶ CONNECTION_CLOSE frames sent in multiple packet types can be coalesced into a single UDP datagram; see Section 12.2.¶ An endpoint can send a CONNECTION_CLOSE frame in an Initial packet. This might be in response to unauthenticated information received in Initial or Handshake packets. Such an immediate close might expose legitimate connections to a denial of service. QUIC does not include defensive measures for on-path attacks during the handshake; see Section 21.2. However, at the cost of reducing feedback about errors for legitimate peers, some forms of denial of service can be made more difficult for an attacker if endpoints discard illegal packets rather than terminating a connection with CONNECTION_CLOSE. For this reason, endpoints MAY discard packets rather than immediately close if errors are detected in packets that lack authentication.¶ An endpoint that has not established state, such as a server that detects an error in an Initial packet, does not enter the closing state. An endpoint that has no state for the connection does not enter a closing or draining period on sending a CONNECTION_CLOSE frame.¶ 10.3. Stateless Reset A stateless reset is provided as an option of last resort for an endpoint that does not have access to the state of a connection. A crash or outage might result in peers continuing to send data to an endpoint that is unable to properly continue the connection. An endpoint MAY send a Stateless Reset in response to receiving a packet that it cannot associate with an active connection.¶ A stateless reset is not appropriate for indicating errors in active connections. An endpoint that wishes to communicate a fatal connection error MUST use a CONNECTION_CLOSE frame if it is able.¶ To support this process, an endpoint issues a stateless reset token, which is a 16-byte value that is hard to guess. If the peer subsequently receives a Stateless Reset, which is a UDP datagram that ends in that stateless reset token, the peer will immediately end the connection.¶ A stateless reset token is specific to a connection ID. An endpoint issues a stateless reset token by including the value in the Stateless Reset Token field of a NEW_CONNECTION_ID frame. Servers can also issue a stateless_reset_token transport parameter during the handshake that applies to the connection ID that it selected during the handshake. These exchanges are protected by encryption, so only client and server know their value. Note that clients cannot use the stateless_reset_token transport parameter because their transport parameters do not have confidentiality protection.¶ Tokens are invalidated when their associated connection ID is retired via a RETIRE_CONNECTION_ID frame (Section 19.16).¶ An endpoint that receives packets that it cannot process sends a packet in the following layout (see Section 1.3):¶ Stateless Reset { Fixed Bits (2) = 1, Unpredictable Bits (38..), Stateless Reset Token (128), } Figure 10: Stateless Reset This design ensures that a Stateless Reset is -- to the extent possible -- indistinguishable from a regular packet with a short header.¶ A Stateless Reset uses an entire UDP datagram, starting with the first two bits of the packet header. The remainder of the first byte and an arbitrary number of bytes following it are set to values that SHOULD be indistinguishable from random. The last 16 bytes of the datagram contain a stateless reset token.¶ To entities other than its intended recipient, a Stateless Reset will appear to be a packet with a short header. For the Stateless Reset to appear as a valid QUIC packet, the Unpredictable Bits field needs to include at least 38 bits of data (or 5 bytes, less the two fixed bits).¶ The resulting minimum size of 21 bytes does not guarantee that a Stateless Reset is difficult to distinguish from other packets if the recipient requires the use of a connection ID. To achieve that end, the endpoint SHOULD ensure that all packets it sends are at least 22 bytes longer than the minimum connection ID length that it requests the peer to include in its packets, adding PADDING frames as necessary. This ensures that any Stateless Reset sent by the peer is indistinguishable from a valid packet sent to the endpoint. An endpoint that sends a Stateless Reset in response to a packet that is 43 bytes or shorter SHOULD send a Stateless Reset that is one byte shorter than the packet it responds to.¶ These values assume that the stateless reset token is the same length as the minimum expansion of the packet protection AEAD. Additional unpredictable bytes are necessary if the endpoint could have negotiated a packet protection scheme with a larger minimum expansion.¶ An endpoint MUST NOT send a Stateless Reset that is three times or more larger than the packet it receives to avoid being used for amplification. Section 10.3.3 describes additional limits on Stateless Reset size.¶ Endpoints MUST discard packets that are too small to be valid QUIC packets. To give an example, with the set of AEAD functions defined in [QUIC-TLS], short header packets that are smaller than 21 bytes are never valid.¶ Endpoints MUST send Stateless Resets formatted as a packet with a short header. However, endpoints MUST treat any packet ending in a valid stateless reset token as a Stateless Reset, as other QUIC versions might allow the use of a long header.¶ An endpoint MAY send a Stateless Reset in response to a packet with a long header. Sending a Stateless Reset is not effective prior to the stateless reset token being available to a peer. In this QUIC version, packets with a long header are only used during connection establishment. Because the stateless reset token is not available until connection establishment is complete or near completion, ignoring an unknown packet with a long header might be as effective as sending a Stateless Reset.¶ An endpoint cannot determine the Source Connection ID from a packet with a short header; therefore, it cannot set the Destination Connection ID in the Stateless Reset. The Destination Connection ID will therefore differ from the value used in previous packets. A random Destination Connection ID makes the connection ID appear to be the result of moving to a new connection ID that was provided using a NEW_CONNECTION_ID frame; see Section 19.15.¶ Using a randomized connection ID results in two problems:¶ The packet might not reach the peer. If the Destination Connection ID is critical for routing toward the peer, then this packet could be incorrectly routed. This might also trigger another Stateless Reset in response; see Section 10.3.3. A Stateless Reset that is not correctly routed is an ineffective error detection and recovery mechanism. In this case, endpoints will need to rely on other methods -- such as timers -- to detect that the connection has failed.¶ The randomly generated connection ID can be used by entities other than the peer to identify this as a potential Stateless Reset. An endpoint that occasionally uses different connection IDs might introduce some uncertainty about this.¶ This stateless reset design is specific to QUIC version 1. An endpoint that supports multiple versions of QUIC needs to generate a Stateless Reset that will be accepted by peers that support any version that the endpoint might support (or might have supported prior to losing state). Designers of new versions of QUIC need to be aware of this and either (1) reuse this design or (2) use a portion of the packet other than the last 16 bytes for carrying data.¶ 10.3.1. Detecting a Stateless Reset An endpoint detects a potential Stateless Reset using the trailing 16 bytes of the UDP datagram. An endpoint remembers all stateless reset tokens associated with the connection IDs and remote addresses for datagrams it has recently sent. This includes Stateless Reset Token field values from NEW_CONNECTION_ID frames and the server's transport parameters but excludes stateless reset tokens associated with connection IDs that are either unused or retired. The endpoint identifies a received datagram as a Stateless Reset by comparing the last 16 bytes of the datagram with all stateless reset tokens associated with the remote address on which the datagram was received.¶ This comparison can be performed for every inbound datagram. Endpoints MAY skip this check if any packet from a datagram is successfully processed. However, the comparison MUST be performed when the first packet in an incoming datagram either cannot be associated with a connection or cannot be decrypted.¶ An endpoint MUST NOT check for any stateless reset tokens associated with connection IDs it has not used or for connection IDs that have been retired.¶ When comparing a datagram to stateless reset token values, endpoints MUST perform the comparison without leaking information about the value of the token. For example, performing this comparison in constant time protects the value of individual stateless reset tokens from information leakage through timing side channels. Another approach would be to store and compare the transformed values of stateless reset tokens instead of the raw token values, where the transformation is defined as a cryptographically secure pseudorandom function using a secret key (e.g., block cipher, Hashed Message Authentication Code (HMAC) [RFC2104]). An endpoint is not expected to protect information about whether a packet was successfully decrypted or the number of valid stateless reset tokens.¶ If the last 16 bytes of the datagram are identical in value to a stateless reset token, the endpoint MUST enter the draining period and not send any further packets on this connection.¶ 10.3.2. Calculating a Stateless Reset Token The stateless reset token MUST be difficult to guess. In order to create a stateless reset token, an endpoint could randomly generate [RANDOM] a secret for every connection that it creates. However, this presents a coordination problem when there are multiple instances in a cluster or a storage problem for an endpoint that might lose state. Stateless reset specifically exists to handle the case where state is lost, so this approach is suboptimal.¶ A single static key can be used across all connections to the same endpoint by generating the proof using a pseudorandom function that takes a static key and the connection ID chosen by the endpoint (see Section 5.1) as input. An endpoint could use HMAC [RFC2104] (for example, HMAC(static_key, connection_id)) or the HMAC-based Key Derivation Function (HKDF) [RFC5869] (for example, using the static key as input keying material, with the connection ID as salt). The output of this function is truncated to 16 bytes to produce the stateless reset token for that connection.¶ An endpoint that loses state can use the same method to generate a valid stateless reset token. The connection ID comes from the packet that the endpoint receives.¶ This design relies on the peer always sending a connection ID in its packets so that the endpoint can use the connection ID from a packet to reset the connection. An endpoint that uses this design MUST either use the same connection ID length for all connections or encode the length of the connection ID such that it can be recovered without state. In addition, it cannot provide a zero-length connection ID.¶ Revealing the stateless reset token allows any entity to terminate the connection, so a value can only be used once. This method for choosing the stateless reset token means that the combination of connection ID and static key MUST NOT be used for another connection. A denial-of-service attack is possible if the same connection ID is used by instances that share a static key or if an attacker can cause a packet to be routed to an instance that has no state but the same static key; see Section 21.11. A connection ID from a connection that is reset by revealing the stateless reset token MUST NOT be reused for new connections at nodes that share a static key.¶ The same stateless reset token MUST NOT be used for multiple connection IDs. Endpoints are not required to compare new values against all previous values, but a duplicate value MAY be treated as a connection error of type PROTOCOL_VIOLATION.¶ Note that Stateless Resets do not have any cryptographic protection.¶ 10.3.3. Looping The design of a Stateless Reset is such that without knowing the stateless reset token it is indistinguishable from a valid packet. For instance, if a server sends a Stateless Reset to another server, it might receive another Stateless Reset in response, which could lead to an infinite exchange.¶ An endpoint MUST ensure that every Stateless Reset that it sends is smaller than the packet that triggered it, unless it maintains state sufficient to prevent looping. In the event of a loop, this results in packets eventually being too small to trigger a response.¶ An endpoint can remember the number of Stateless Resets that it has sent and stop generating new Stateless Resets once a limit is reached. Using separate limits for different remote addresses will ensure that Stateless Resets can be used to close connections when other peers or connections have exhausted limits.¶ A Stateless Reset that is smaller than 41 bytes might be identifiable as a Stateless Reset by an observer, depending upon the length of the peer's connection IDs. Conversely, not sending a Stateless Reset in response to a small packet might result in Stateless Resets not being useful in detecting cases of broken connections where only very small packets are sent; such failures might only be detected by other means, such as timers.¶ 11. Error Handling An endpoint that detects an error SHOULD signal the existence of that error to its peer. Both transport-level and application-level errors can affect an entire connection; see Section 11.1. Only application-level errors can be isolated to a single stream; see Section 11.2.¶ The most appropriate error code (Section 20) SHOULD be included in the frame that signals the error. Where this specification identifies error conditions, it also identifies the error code that is used; though these are worded as requirements, different implementation strategies might lead to different errors being reported. In particular, an endpoint MAY use any applicable error code when it detects an error condition; a generic error code (such as PROTOCOL_VIOLATION or INTERNAL_ERROR) can always be used in place of specific error codes.¶ A stateless reset (Section 10.3) is not suitable for any error that can be signaled with a CONNECTION_CLOSE or RESET_STREAM frame. A stateless reset MUST NOT be used by an endpoint that has the state necessary to send a frame on the connection.¶ 11.1. Connection Errors Errors that result in the connection being unusable, such as an obvious violation of protocol semantics or corruption of state that affects an entire connection, MUST be signaled using a CONNECTION_CLOSE frame (Section 19.19).¶ Application-specific protocol errors are signaled using the CONNECTION_CLOSE frame with a frame type of 0x1d. Errors that are specific to the transport, including all those described in this document, are carried in the CONNECTION_CLOSE frame with a frame type of 0x1c.¶ A CONNECTION_CLOSE frame could be sent in a packet that is lost. An endpoint SHOULD be prepared to retransmit a packet containing a CONNECTION_CLOSE frame if it receives more packets on a terminated connection. Limiting the number of retransmissions and the time over which this final packet is sent limits the effort expended on terminated connections.¶ An endpoint that chooses not to retransmit packets containing a CONNECTION_CLOSE frame risks a peer missing the first such packet. The only mechanism available to an endpoint that continues to receive data for a terminated connection is to attempt the stateless reset process (Section 10.3).¶ As the AEAD for Initial packets does not provide strong authentication, an endpoint MAY discard an invalid Initial packet. Discarding an Initial packet is permitted even where this specification otherwise mandates a connection error. An endpoint can only discard a packet if it does not process the frames in the packet or reverts the effects of any processing. Discarding invalid Initial packets might be used to reduce exposure to denial of service; see Section 21.2.¶ 11.2. Stream Errors If an application-level error affects a single stream but otherwise leaves the connection in a recoverable state, the endpoint can send a RESET_STREAM frame (Section 19.4) with an appropriate error code to terminate just the affected stream.¶ Resetting a stream without the involvement of the application protocol could cause the application protocol to enter an unrecoverable state. RESET_STREAM MUST only be instigated by the application protocol that uses QUIC.¶ The semantics of the application error code carried in RESET_STREAM are defined by the application protocol. Only the application protocol is able to cause a stream to be terminated. A local instance of the application protocol uses a direct API call, and a remote instance uses the STOP_SENDING frame, which triggers an automatic RESET_STREAM.¶ Application protocols SHOULD define rules for handling streams that are prematurely canceled by either endpoint.¶ 12. Packets and Frames QUIC endpoints communicate by exchanging packets. Packets have confidentiality and integrity protection; see Section 12.1. Packets are carried in UDP datagrams; see Section 12.2.¶ This version of QUIC uses the long packet header during connection establishment; see Section 17.2. Packets with the long header are Initial (Section 17.2.2), 0-RTT (Section 17.2.3), Handshake (Section 17.2.4), and Retry (Section 17.2.5). Version negotiation uses a version-independent packet with a long header; see Section 17.2.1.¶ Packets with the short header are designed for minimal overhead and are used after a connection is established and 1-RTT keys are available; see Section 17.3.¶ 12.1. Protected Packets QUIC packets have different levels of cryptographic protection based on the type of packet. Details of packet protection are found in [QUIC-TLS]; this section includes an overview of the protections that are provided.¶ Version Negotiation packets have no cryptographic protection; see [QUIC-INVARIANTS].¶ Retry packets use an AEAD function [AEAD] to protect against accidental modification.¶ Initial packets use an AEAD function, the keys for which are derived using a value that is visible on the wire. Initial packets therefore do not have effective confidentiality protection. Initial protection exists to ensure that the sender of the packet is on the network path. Any entity that receives an Initial packet from a client can recover the keys that will allow them to both read the contents of the packet and generate Initial packets that will be successfully authenticated at either endpoint. The AEAD also protects Initial packets against accidental modification.¶ All other packets are protected with keys derived from the cryptographic handshake. The cryptographic handshake ensures that only the communicating endpoints receive the corresponding keys for Handshake, 0-RTT, and 1-RTT packets. Packets protected with 0-RTT and 1-RTT keys have strong confidentiality and integrity protection.¶ The Packet Number field that appears in some packet types has alternative confidentiality protection that is applied as part of header protection; see Section 5.4 of [QUIC-TLS] for details. The underlying packet number increases with each packet sent in a given packet number space; see Section 12.3 for details.¶ 12.2. Coalescing Packets Initial (Section 17.2.2), 0-RTT (Section 17.2.3), and Handshake (Section 17.2.4) packets contain a Length field that determines the end of the packet. The length includes both the Packet Number and Payload fields, both of which are confidentiality protected and initially of unknown length. The length of the Payload field is learned once header protection is removed.¶ Using the Length field, a sender can coalesce multiple QUIC packets into one UDP datagram. This can reduce the number of UDP datagrams needed to complete the cryptographic handshake and start sending data. This can also be used to construct Path Maximum Transmission Unit (PMTU) probes; see Section 14.4.1. Receivers MUST be able to process coalesced packets.¶ Coalescing packets in order of increasing encryption levels (Initial, 0-RTT, Handshake, 1-RTT; see Section 4.1.4 of [QUIC-TLS]) makes it more likely that the receiver will be able to process all the packets in a single pass. A packet with a short header does not include a length, so it can only be the last packet included in a UDP datagram. An endpoint SHOULD include multiple frames in a single packet if they are to be sent at the same encryption level, instead of coalescing multiple packets at the same encryption level.¶ Receivers MAY route based on the information in the first packet contained in a UDP datagram. Senders MUST NOT coalesce QUIC packets with different connection IDs into a single UDP datagram. Receivers SHOULD ignore any subsequent packets with a different Destination Connection ID than the first packet in the datagram.¶ Every QUIC packet that is coalesced into a single UDP datagram is separate and complete. The receiver of coalesced QUIC packets MUST individually process each QUIC packet and separately acknowledge them, as if they were received as the payload of different UDP datagrams. For example, if decryption fails (because the keys are not available or for any other reason), the receiver MAY either discard or buffer the packet for later processing and MUST attempt to process the remaining packets.¶ Retry packets (Section 17.2.5), Version Negotiation packets (Section 17.2.1), and packets with a short header (Section 17.3) do not contain a Length field and so cannot be followed by other packets in the same UDP datagram. Note also that there is no situation where a Retry or Version Negotiation packet is coalesced with another packet.¶ 12.3. Packet Numbers The packet number is an integer in the range 0 to 262-1. This number is used in determining the cryptographic nonce for packet protection. Each endpoint maintains a separate packet number for sending and receiving.¶ Packet numbers are limited to this range because they need to be representable in whole in the Largest Acknowledged field of an ACK frame (Section 19.3). When present in a long or short header, however, packet numbers are reduced and encoded in 1 to 4 bytes; see Section 17.1.¶ Version Negotiation (Section 17.2.1) and Retry (Section 17.2.5) packets do not include a packet number.¶ Packet numbers are divided into three spaces in QUIC:¶ Initial space: All Initial packets (Section 17.2.2) are in this space.¶ Handshake space: All Handshake packets (Section 17.2.4) are in this space.¶ Application data space: All 0-RTT (Section 17.2.3) and 1-RTT (Section 17.3.1) packets are in this space.¶ As described in [QUIC-TLS], each packet type uses different protection keys.¶ Conceptually, a packet number space is the context in which a packet can be processed and acknowledged. Initial packets can only be sent with Initial packet protection keys and acknowledged in packets that are also Initial packets. Similarly, Handshake packets are sent at the Handshake encryption level and can only be acknowledged in Handshake packets.¶ This enforces cryptographic separation between the data sent in the different packet number spaces. Packet numbers in each space start at packet number 0. Subsequent packets sent in the same packet number space MUST increase the packet number by at least one.¶ 0-RTT and 1-RTT data exist in the same packet number space to make loss recovery algorithms easier to implement between the two packet types.¶ A QUIC endpoint MUST NOT reuse a packet number within the same packet number space in one connection. If the packet number for sending reaches 262-1, the sender MUST close the connection without sending a CONNECTION_CLOSE frame or any further packets; an endpoint MAY send a Stateless Reset (Section 10.3) in response to further packets that it receives.¶ A receiver MUST discard a newly unprotected packet unless it is certain that it has not processed another packet with the same packet number from the same packet number space. Duplicate suppression MUST happen after removing packet protection for the reasons described in Section 9.5 of [QUIC-TLS].¶ Endpoints that track all individual packets for the purposes of detecting duplicates are at risk of accumulating excessive state. The data required for detecting duplicates can be limited by maintaining a minimum packet number below which all packets are immediately dropped. Any minimum needs to account for large variations in round-trip time, which includes the possibility that a peer might probe network paths with much larger round-trip times; see Section 9.¶ Packet number encoding at a sender and decoding at a receiver are described in Section 17.1.¶ 12.4. Frames and Frame Types The payload of QUIC packets, after removing packet protection, consists of a sequence of complete frames, as shown in Figure 11. Version Negotiation, Stateless Reset, and Retry packets do not contain frames.¶ Packet Payload { Frame (8..) ..., } Figure 11: QUIC Payload The payload of a packet that contains frames MUST contain at least one frame, and MAY contain multiple frames and multiple frame types. An endpoint MUST treat receipt of a packet containing no frames as a connection error of type PROTOCOL_VIOLATION. Frames always fit within a single QUIC packet and cannot span multiple packets.¶ Each frame begins with a Frame Type, indicating its type, followed by additional type-dependent fields:¶ Frame { Frame Type (i), Type-Dependent Fields (..), } Figure 12: Generic Frame Layout Table 3 lists and summarizes information about each frame type that is defined in this specification. A description of this summary is included after the table.¶ Table 3: Frame Types Type Value Frame Type Name Definition Pkts Spec 0x00 PADDING Section 19.1 IH01 NP 0x01 PING Section 19.2 IH01 0x02-0x03 ACK Section 19.3 IH_1 NC 0x04 RESET_STREAM Section 19.4 __01 0x05 STOP_SENDING Section 19.5 __01 0x06 CRYPTO Section 19.6 IH_1 0x07 NEW_TOKEN Section 19.7 ___1 0x08-0x0f STREAM Section 19.8 __01 F 0x10 MAX_DATA Section 19.9 __01 0x11 MAX_STREAM_DATA Section 19.10 __01 0x12-0x13 MAX_STREAMS Section 19.11 __01 0x14 DATA_BLOCKED Section 19.12 __01 0x15 STREAM_DATA_BLOCKED Section 19.13 __01 0x16-0x17 STREAMS_BLOCKED Section 19.14 __01 0x18 NEW_CONNECTION_ID Section 19.15 __01 P 0x19 RETIRE_CONNECTION_ID Section 19.16 __01 0x1a PATH_CHALLENGE Section 19.17 __01 P 0x1b PATH_RESPONSE Section 19.18 ___1 P 0x1c-0x1d CONNECTION_CLOSE Section 19.19 ih01 N 0x1e HANDSHAKE_DONE Section 19.20 ___1 The format and semantics of each frame type are explained in more detail in Section 19. The remainder of this section provides a summary of important and general information.¶ The Frame Type in ACK, STREAM, MAX_STREAMS, STREAMS_BLOCKED, and CONNECTION_CLOSE frames is used to carry other frame-specific flags. For all other frames, the Frame Type field simply identifies the frame.¶ The \"Pkts\" column in Table 3 lists the types of packets that each frame type could appear in, indicated by the following characters:¶ I: Initial (Section 17.2.2)¶ H: Handshake (Section 17.2.4)¶ 0: 0-RTT (Section 17.2.3)¶ 1: 1-RTT (Section 17.3.1)¶ ih: Only a CONNECTION_CLOSE frame of type 0x1c can appear in Initial or Handshake packets.¶ For more details about these restrictions, see Section 12.5. Note that all frames can appear in 1-RTT packets. An endpoint MUST treat receipt of a frame in a packet type that is not permitted as a connection error of type PROTOCOL_VIOLATION.¶ The \"Spec\" column in Table 3 summarizes any special rules governing the processing or generation of the frame type, as indicated by the following characters:¶ N: Packets containing only frames with this marking are not ack-eliciting; see Section 13.2.¶ C: Packets containing only frames with this marking do not count toward bytes in flight for congestion control purposes; see [QUIC-RECOVERY].¶ P: Packets containing only frames with this marking can be used to probe new network paths during connection migration; see Section 9.1.¶ F: The contents of frames with this marking are flow controlled; see Section 4.¶ The \"Pkts\" and \"Spec\" columns in Table 3 do not form part of the IANA registry; see Section 22.4.¶ An endpoint MUST treat the receipt of a frame of unknown type as a connection error of type FRAME_ENCODING_ERROR.¶ All frames are idempotent in this version of QUIC. That is, a valid frame does not cause undesirable side effects or errors when received more than once.¶ The Frame Type field uses a variable-length integer encoding (see Section 16), with one exception. To ensure simple and efficient implementations of frame parsing, a frame type MUST use the shortest possible encoding. For frame types defined in this document, this means a single-byte encoding, even though it is possible to encode these values as a two-, four-, or eight-byte variable-length integer. For instance, though 0x4001 is a legitimate two-byte encoding for a variable-length integer with a value of 1, PING frames are always encoded as a single byte with the value 0x01. This rule applies to all current and future QUIC frame types. An endpoint MAY treat the receipt of a frame type that uses a longer encoding than necessary as a connection error of type PROTOCOL_VIOLATION.¶ 12.5. Frames and Number Spaces Some frames are prohibited in different packet number spaces. The rules here generalize those of TLS, in that frames associated with establishing the connection can usually appear in packets in any packet number space, whereas those associated with transferring data can only appear in the application data packet number space:¶ PADDING, PING, and CRYPTO frames MAY appear in any packet number space.¶ CONNECTION_CLOSE frames signaling errors at the QUIC layer (type 0x1c) MAY appear in any packet number space. CONNECTION_CLOSE frames signaling application errors (type 0x1d) MUST only appear in the application data packet number space.¶ ACK frames MAY appear in any packet number space but can only acknowledge packets that appeared in that packet number space. However, as noted below, 0-RTT packets cannot contain ACK frames.¶ All other frame types MUST only be sent in the application data packet number space.¶ Note that it is not possible to send the following frames in 0-RTT packets for various reasons: ACK, CRYPTO, HANDSHAKE_DONE, NEW_TOKEN, PATH_RESPONSE, and RETIRE_CONNECTION_ID. A server MAY treat receipt of these frames in 0-RTT packets as a connection error of type PROTOCOL_VIOLATION.¶ 13. Packetization and Reliability A sender sends one or more frames in a QUIC packet; see Section 12.4.¶ A sender can minimize per-packet bandwidth and computational costs by including as many frames as possible in each QUIC packet. A sender MAY wait for a short period of time to collect multiple frames before sending a packet that is not maximally packed, to avoid sending out large numbers of small packets. An implementation MAY use knowledge about application sending behavior or heuristics to determine whether and for how long to wait. This waiting period is an implementation decision, and an implementation should be careful to delay conservatively, since any delay is likely to increase application-visible latency.¶ Stream multiplexing is achieved by interleaving STREAM frames from multiple streams into one or more QUIC packets. A single QUIC packet can include multiple STREAM frames from one or more streams.¶ One of the benefits of QUIC is avoidance of head-of-line blocking across multiple streams. When a packet loss occurs, only streams with data in that packet are blocked waiting for a retransmission to be received, while other streams can continue making progress. Note that when data from multiple streams is included in a single QUIC packet, loss of that packet blocks all those streams from making progress. Implementations are advised to include as few streams as necessary in outgoing packets without losing transmission efficiency to underfilled packets.¶ 13.1. Packet Processing A packet MUST NOT be acknowledged until packet protection has been successfully removed and all frames contained in the packet have been processed. For STREAM frames, this means the data has been enqueued in preparation to be received by the application protocol, but it does not require that data be delivered and consumed.¶ Once the packet has been fully processed, a receiver acknowledges receipt by sending one or more ACK frames containing the packet number of the received packet.¶ An endpoint SHOULD treat receipt of an acknowledgment for a packet it did not send as a connection error of type PROTOCOL_VIOLATION, if it is able to detect the condition. For further discussion of how this might be achieved, see Section 21.4.¶ 13.2. Generating Acknowledgments Endpoints acknowledge all packets they receive and process. However, only ack-eliciting packets cause an ACK frame to be sent within the maximum ack delay. Packets that are not ack-eliciting are only acknowledged when an ACK frame is sent for other reasons.¶ When sending a packet for any reason, an endpoint SHOULD attempt to include an ACK frame if one has not been sent recently. Doing so helps with timely loss detection at the peer.¶ In general, frequent feedback from a receiver improves loss and congestion response, but this has to be balanced against excessive load generated by a receiver that sends an ACK frame in response to every ack-eliciting packet. The guidance offered below seeks to strike this balance.¶ 13.2.1. Sending ACK Frames Every packet SHOULD be acknowledged at least once, and ack-eliciting packets MUST be acknowledged at least once within the maximum delay an endpoint communicated using the max_ack_delay transport parameter; see Section 18.2. max_ack_delay declares an explicit contract: an endpoint promises to never intentionally delay acknowledgments of an ack-eliciting packet by more than the indicated value. If it does, any excess accrues to the RTT estimate and could result in spurious or delayed retransmissions from the peer. A sender uses the receiver's max_ack_delay value in determining timeouts for timer-based retransmission, as detailed in Section 6.2 of [QUIC-RECOVERY].¶ An endpoint MUST acknowledge all ack-eliciting Initial and Handshake packets immediately and all ack-eliciting 0-RTT and 1-RTT packets within its advertised max_ack_delay, with the following exception. Prior to handshake confirmation, an endpoint might not have packet protection keys for decrypting Handshake, 0-RTT, or 1-RTT packets when they are received. It might therefore buffer them and acknowledge them when the requisite keys become available.¶ Since packets containing only ACK frames are not congestion controlled, an endpoint MUST NOT send more than one such packet in response to receiving an ack-eliciting packet.¶ An endpoint MUST NOT send a non-ack-eliciting packet in response to a non-ack-eliciting packet, even if there are packet gaps that precede the received packet. This avoids an infinite feedback loop of acknowledgments, which could prevent the connection from ever becoming idle. Non-ack-eliciting packets are eventually acknowledged when the endpoint sends an ACK frame in response to other events.¶ An endpoint that is only sending ACK frames will not receive acknowledgments from its peer unless those acknowledgments are included in packets with ack-eliciting frames. An endpoint SHOULD send an ACK frame with other frames when there are new ack-eliciting packets to acknowledge. When only non-ack-eliciting packets need to be acknowledged, an endpoint MAY choose not to send an ACK frame with outgoing frames until an ack-eliciting packet has been received.¶ An endpoint that is only sending non-ack-eliciting packets might choose to occasionally add an ack-eliciting frame to those packets to ensure that it receives an acknowledgment; see Section 13.2.4. In that case, an endpoint MUST NOT send an ack-eliciting frame in all packets that would otherwise be non-ack-eliciting, to avoid an infinite feedback loop of acknowledgments.¶ In order to assist loss detection at the sender, an endpoint SHOULD generate and send an ACK frame without delay when it receives an ack-eliciting packet either:¶ when the received packet has a packet number less than another ack-eliciting packet that has been received, or¶ when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet.¶ Similarly, packets marked with the ECN Congestion Experienced (CE) codepoint in the IP header SHOULD be acknowledged immediately, to reduce the peer's response time to congestion events.¶ The algorithms in [QUIC-RECOVERY] are expected to be resilient to receivers that do not follow the guidance offered above. However, an implementation should only deviate from these requirements after careful consideration of the performance implications of a change, for connections made by the endpoint and for other users of the network.¶ 13.2.2. Acknowledgment Frequency A receiver determines how frequently to send acknowledgments in response to ack-eliciting packets. This determination involves a trade-off.¶ Endpoints rely on timely acknowledgment to detect loss; see Section 6 of [QUIC-RECOVERY]. Window-based congestion controllers, such as the one described in Section 7 of [QUIC-RECOVERY], rely on acknowledgments to manage their congestion window. In both cases, delaying acknowledgments can adversely affect performance.¶ On the other hand, reducing the frequency of packets that carry only acknowledgments reduces packet transmission and processing cost at both endpoints. It can improve connection throughput on severely asymmetric links and reduce the volume of acknowledgment traffic using return path capacity; see Section 3 of [RFC3449].¶ A receiver SHOULD send an ACK frame after receiving at least two ack-eliciting packets. This recommendation is general in nature and consistent with recommendations for TCP endpoint behavior [RFC5681]. Knowledge of network conditions, knowledge of the peer's congestion controller, or further research and experimentation might suggest alternative acknowledgment strategies with better performance characteristics.¶ A receiver MAY process multiple available packets before determining whether to send an ACK frame in response.¶ 13.2.3. Managing ACK Ranges When an ACK frame is sent, one or more ranges of acknowledged packets are included. Including acknowledgments for older packets reduces the chance of spurious retransmissions caused by losing previously sent ACK frames, at the cost of larger ACK frames.¶ ACK frames SHOULD always acknowledge the most recently received packets, and the more out of order the packets are, the more important it is to send an updated ACK frame quickly, to prevent the peer from declaring a packet as lost and spuriously retransmitting the frames it contains. An ACK frame is expected to fit within a single QUIC packet. If it does not, then older ranges (those with the smallest packet numbers) are omitted.¶ A receiver limits the number of ACK Ranges (Section 19.3.1) it remembers and sends in ACK frames, both to limit the size of ACK frames and to avoid resource exhaustion. After receiving acknowledgments for an ACK frame, the receiver SHOULD stop tracking those acknowledged ACK Ranges. Senders can expect acknowledgments for most packets, but QUIC does not guarantee receipt of an acknowledgment for every packet that the receiver processes.¶ It is possible that retaining many ACK Ranges could cause an ACK frame to become too large. A receiver can discard unacknowledged ACK Ranges to limit ACK frame size, at the cost of increased retransmissions from the sender. This is necessary if an ACK frame would be too large to fit in a packet. Receivers MAY also limit ACK frame size further to preserve space for other frames or to limit the capacity that acknowledgments consume.¶ A receiver MUST retain an ACK Range unless it can ensure that it will not subsequently accept packets with numbers in that range. Maintaining a minimum packet number that increases as ranges are discarded is one way to achieve this with minimal state.¶ Receivers can discard all ACK Ranges, but they MUST retain the largest packet number that has been successfully processed, as that is used to recover packet numbers from subsequent packets; see Section 17.1.¶ A receiver SHOULD include an ACK Range containing the largest received packet number in every ACK frame. The Largest Acknowledged field is used in ECN validation at a sender, and including a lower value than what was included in a previous ACK frame could cause ECN to be unnecessarily disabled; see Section 13.4.2.¶ Section 13.2.4 describes an exemplary approach for determining what packets to acknowledge in each ACK frame. Though the goal of this algorithm is to generate an acknowledgment for every packet that is processed, it is still possible for acknowledgments to be lost.¶ 13.2.4. Limiting Ranges by Tracking ACK Frames When a packet containing an ACK frame is sent, the Largest Acknowledged field in that frame can be saved. When a packet containing an ACK frame is acknowledged, the receiver can stop acknowledging packets less than or equal to the Largest Acknowledged field in the sent ACK frame.¶ A receiver that sends only non-ack-eliciting packets, such as ACK frames, might not receive an acknowledgment for a long period of time. This could cause the receiver to maintain state for a large number of ACK frames for a long period of time, and ACK frames it sends could be unnecessarily large. In such a case, a receiver could send a PING or other small ack-eliciting frame occasionally, such as once per round trip, to elicit an ACK from the peer.¶ In cases without ACK frame loss, this algorithm allows for a minimum of 1 RTT of reordering. In cases with ACK frame loss and reordering, this approach does not guarantee that every acknowledgment is seen by the sender before it is no longer included in the ACK frame. Packets could be received out of order, and all subsequent ACK frames containing them could be lost. In this case, the loss recovery algorithm could cause spurious retransmissions, but the sender will continue making forward progress.¶ 13.2.5. Measuring and Reporting Host Delay An endpoint measures the delays intentionally introduced between the time the packet with the largest packet number is received and the time an acknowledgment is sent. The endpoint encodes this acknowledgment delay in the ACK Delay field of an ACK frame; see Section 19.3. This allows the receiver of the ACK frame to adjust for any intentional delays, which is important for getting a better estimate of the path RTT when acknowledgments are delayed.¶ A packet might be held in the OS kernel or elsewhere on the host before being processed. An endpoint MUST NOT include delays that it does not control when populating the ACK Delay field in an ACK frame. However, endpoints SHOULD include buffering delays caused by unavailability of decryption keys, since these delays can be large and are likely to be non-repeating.¶ When the measured acknowledgment delay is larger than its max_ack_delay, an endpoint SHOULD report the measured delay. This information is especially useful during the handshake when delays might be large; see Section 13.2.1.¶ 13.2.6. ACK Frames and Packet Protection ACK frames MUST only be carried in a packet that has the same packet number space as the packet being acknowledged; see Section 12.1. For instance, packets that are protected with 1-RTT keys MUST be acknowledged in packets that are also protected with 1-RTT keys.¶ Packets that a client sends with 0-RTT packet protection MUST be acknowledged by the server in packets protected by 1-RTT keys. This can mean that the client is unable to use these acknowledgments if the server cryptographic handshake messages are delayed or lost. Note that the same limitation applies to other data sent by the server protected by the 1-RTT keys.¶ 13.2.7. PADDING Frames Consume Congestion Window Packets containing PADDING frames are considered to be in flight for congestion control purposes [QUIC-RECOVERY]. Packets containing only PADDING frames therefore consume congestion window but do not generate acknowledgments that will open the congestion window. To avoid a deadlock, a sender SHOULD ensure that other frames are sent periodically in addition to PADDING frames to elicit acknowledgments from the receiver.¶ 13.3. Retransmission of Information QUIC packets that are determined to be lost are not retransmitted whole. The same applies to the frames that are contained within lost packets. Instead, the information that might be carried in frames is sent again in new frames as needed.¶ New frames and packets are used to carry information that is determined to have been lost. In general, information is sent again when a packet containing that information is determined to be lost, and sending ceases when a packet containing that information is acknowledged.¶ Data sent in CRYPTO frames is retransmitted according to the rules in [QUIC-RECOVERY], until all data has been acknowledged. Data in CRYPTO frames for Initial and Handshake packets is discarded when keys for the corresponding packet number space are discarded.¶ Application data sent in STREAM frames is retransmitted in new STREAM frames unless the endpoint has sent a RESET_STREAM for that stream. Once an endpoint sends a RESET_STREAM frame, no further STREAM frames are needed.¶ ACK frames carry the most recent set of acknowledgments and the acknowledgment delay from the largest acknowledged packet, as described in Section 13.2.1. Delaying the transmission of packets containing ACK frames or resending old ACK frames can cause the peer to generate an inflated RTT sample or unnecessarily disable ECN.¶ Cancellation of stream transmission, as carried in a RESET_STREAM frame, is sent until acknowledged or until all stream data is acknowledged by the peer (that is, either the \"Reset Recvd\" or \"Data Recvd\" state is reached on the sending part of the stream). The content of a RESET_STREAM frame MUST NOT change when it is sent again.¶ Similarly, a request to cancel stream transmission, as encoded in a STOP_SENDING frame, is sent until the receiving part of the stream enters either a \"Data Recvd\" or \"Reset Recvd\" state; see Section 3.5.¶ Connection close signals, including packets that contain CONNECTION_CLOSE frames, are not sent again when packet loss is detected. Resending these signals is described in Section 10.¶ The current connection maximum data is sent in MAX_DATA frames. An updated value is sent in a MAX_DATA frame if the packet containing the most recently sent MAX_DATA frame is declared lost or when the endpoint decides to update the limit. Care is necessary to avoid sending this frame too often, as the limit can increase frequently and cause an unnecessarily large number of MAX_DATA frames to be sent; see Section 4.2.¶ The current maximum stream data offset is sent in MAX_STREAM_DATA frames. Like MAX_DATA, an updated value is sent when the packet containing the most recent MAX_STREAM_DATA frame for a stream is lost or when the limit is updated, with care taken to prevent the frame from being sent too often. An endpoint SHOULD stop sending MAX_STREAM_DATA frames when the receiving part of the stream enters a \"Size Known\" or \"Reset Recvd\" state.¶ The limit on streams of a given type is sent in MAX_STREAMS frames. Like MAX_DATA, an updated value is sent when a packet containing the most recent MAX_STREAMS for a stream type frame is declared lost or when the limit is updated, with care taken to prevent the frame from being sent too often.¶ Blocked signals are carried in DATA_BLOCKED, STREAM_DATA_BLOCKED, and STREAMS_BLOCKED frames. DATA_BLOCKED frames have connection scope, STREAM_DATA_BLOCKED frames have stream scope, and STREAMS_BLOCKED frames are scoped to a specific stream type. A new frame is sent if a packet containing the most recent frame for a scope is lost, but only while the endpoint is blocked on the corresponding limit. These frames always include the limit that is causing blocking at the time that they are transmitted.¶ A liveness or path validation check using PATH_CHALLENGE frames is sent periodically until a matching PATH_RESPONSE frame is received or until there is no remaining need for liveness or path validation checking. PATH_CHALLENGE frames include a different payload each time they are sent.¶ Responses to path validation using PATH_RESPONSE frames are sent just once. The peer is expected to send more PATH_CHALLENGE frames as necessary to evoke additional PATH_RESPONSE frames.¶ New connection IDs are sent in NEW_CONNECTION_ID frames and retransmitted if the packet containing them is lost. Retransmissions of this frame carry the same sequence number value. Likewise, retired connection IDs are sent in RETIRE_CONNECTION_ID frames and retransmitted if the packet containing them is lost.¶ NEW_TOKEN frames are retransmitted if the packet containing them is lost. No special support is made for detecting reordered and duplicated NEW_TOKEN frames other than a direct comparison of the frame contents.¶ PING and PADDING frames contain no information, so lost PING or PADDING frames do not require repair.¶ The HANDSHAKE_DONE frame MUST be retransmitted until it is acknowledged.¶ Endpoints SHOULD prioritize retransmission of data over sending new data, unless priorities specified by the application indicate otherwise; see Section 2.3.¶ Even though a sender is encouraged to assemble frames containing up-to-date information every time it sends a packet, it is not forbidden to retransmit copies of frames from lost packets. A sender that retransmits copies of frames needs to handle decreases in available payload size due to changes in packet number length, connection ID length, and path MTU. A receiver MUST accept packets containing an outdated frame, such as a MAX_DATA frame carrying a smaller maximum data value than one found in an older packet.¶ A sender SHOULD avoid retransmitting information from packets once they are acknowledged. This includes packets that are acknowledged after being declared lost, which can happen in the presence of network reordering. Doing so requires senders to retain information about packets after they are declared lost. A sender can discard this information after a period of time elapses that adequately allows for reordering, such as a PTO (Section 6.2 of [QUIC-RECOVERY]), or based on other events, such as reaching a memory limit.¶ Upon detecting losses, a sender MUST take appropriate congestion control action. The details of loss detection and congestion control are described in [QUIC-RECOVERY].¶ 13.4. Explicit Congestion Notification QUIC endpoints can use ECN [RFC3168] to detect and respond to network congestion. ECN allows an endpoint to set an ECN-Capable Transport (ECT) codepoint in the ECN field of an IP packet. A network node can then indicate congestion by setting the ECN-CE codepoint in the ECN field instead of dropping the packet [RFC8087]. Endpoints react to reported congestion by reducing their sending rate in response, as described in [QUIC-RECOVERY].¶ To enable ECN, a sending QUIC endpoint first determines whether a path supports ECN marking and whether the peer reports the ECN values in received IP headers; see Section 13.4.2.¶ 13.4.1. Reporting ECN Counts The use of ECN requires the receiving endpoint to read the ECN field from an IP packet, which is not possible on all platforms. If an endpoint does not implement ECN support or does not have access to received ECN fields, it does not report ECN counts for packets it receives.¶ Even if an endpoint does not set an ECT field in packets it sends, the endpoint MUST provide feedback about ECN markings it receives, if these are accessible. Failing to report the ECN counts will cause the sender to disable the use of ECN for this connection.¶ On receiving an IP packet with an ECT(0), ECT(1), or ECN-CE codepoint, an ECN-enabled endpoint accesses the ECN field and increases the corresponding ECT(0), ECT(1), or ECN-CE count. These ECN counts are included in subsequent ACK frames; see Sections 13.2 and 19.3.¶ Each packet number space maintains separate acknowledgment state and separate ECN counts. Coalesced QUIC packets (see Section 12.2) share the same IP header so the ECN counts are incremented once for each coalesced QUIC packet.¶ For example, if one each of an Initial, Handshake, and 1-RTT QUIC packet are coalesced into a single UDP datagram, the ECN counts for all three packet number spaces will be incremented by one each, based on the ECN field of the single IP header.¶ ECN counts are only incremented when QUIC packets from the received IP packet are processed. As such, duplicate QUIC packets are not processed and do not increase ECN counts; see Section 21.10 for relevant security concerns.¶ 13.4.2. ECN Validation It is possible for faulty network devices to corrupt or erroneously drop packets that carry a non-zero ECN codepoint. To ensure connectivity in the presence of such devices, an endpoint validates the ECN counts for each network path and disables the use of ECN on that path if errors are detected.¶ To perform ECN validation for a new path:¶ The endpoint sets an ECT(0) codepoint in the IP header of early outgoing packets sent on a new path to the peer [RFC8311].¶ The endpoint monitors whether all packets sent with an ECT codepoint are eventually deemed lost (Section 6 of [QUIC-RECOVERY]), indicating that ECN validation has failed.¶ If an endpoint has cause to expect that IP packets with an ECT codepoint might be dropped by a faulty network element, the endpoint could set an ECT codepoint for only the first ten outgoing packets on a path, or for a period of three PTOs (see Section 6.2 of [QUIC-RECOVERY]). If all packets marked with non-zero ECN codepoints are subsequently lost, it can disable marking on the assumption that the marking caused the loss.¶ An endpoint thus attempts to use ECN and validates this for each new connection, when switching to a server's preferred address, and on active connection migration to a new path. Appendix A.4 describes one possible algorithm.¶ Other methods of probing paths for ECN support are possible, as are different marking strategies. Implementations MAY use other methods defined in RFCs; see [RFC8311]. Implementations that use the ECT(1) codepoint need to perform ECN validation using the reported ECT(1) counts.¶ 13.4.2.1. Receiving ACK Frames with ECN Counts Erroneous application of ECN-CE markings by the network can result in degraded connection performance. An endpoint that receives an ACK frame with ECN counts therefore validates the counts before using them. It performs this validation by comparing newly received counts against those from the last successfully processed ACK frame. Any increase in the ECN counts is validated based on the ECN markings that were applied to packets that are newly acknowledged in the ACK frame.¶ If an ACK frame newly acknowledges a packet that the endpoint sent with either the ECT(0) or ECT(1) codepoint set, ECN validation fails if the corresponding ECN counts are not present in the ACK frame. This check detects a network element that zeroes the ECN field or a peer that does not report ECN markings.¶ ECN validation also fails if the sum of the increase in ECT(0) and ECN-CE counts is less than the number of newly acknowledged packets that were originally sent with an ECT(0) marking. Similarly, ECN validation fails if the sum of the increases to ECT(1) and ECN-CE counts is less than the number of newly acknowledged packets sent with an ECT(1) marking. These checks can detect remarking of ECN-CE markings by the network.¶ An endpoint could miss acknowledgments for a packet when ACK frames are lost. It is therefore possible for the total increase in ECT(0), ECT(1), and ECN-CE counts to be greater than the number of packets that are newly acknowledged by an ACK frame. This is why ECN counts are permitted to be larger than the total number of packets that are acknowledged.¶ Validating ECN counts from reordered ACK frames can result in failure. An endpoint MUST NOT fail ECN validation as a result of processing an ACK frame that does not increase the largest acknowledged packet number.¶ ECN validation can fail if the received total count for either ECT(0) or ECT(1) exceeds the total number of packets sent with each corresponding ECT codepoint. In particular, validation will fail when an endpoint receives a non-zero ECN count corresponding to an ECT codepoint that it never applied. This check detects when packets are remarked to ECT(0) or ECT(1) in the network.¶ 13.4.2.2. ECN Validation Outcomes If validation fails, then the endpoint MUST disable ECN. It stops setting the ECT codepoint in IP packets that it sends, assuming that either the network path or the peer does not support ECN.¶ Even if validation fails, an endpoint MAY revalidate ECN for the same path at any later time in the connection. An endpoint could continue to periodically attempt validation.¶ Upon successful validation, an endpoint MAY continue to set an ECT codepoint in subsequent packets it sends, with the expectation that the path is ECN capable. Network routing and path elements can change mid-connection; an endpoint MUST disable ECN if validation later fails.¶ 14. Datagram Size A UDP datagram can include one or more QUIC packets. The datagram size refers to the total UDP payload size of a single UDP datagram carrying QUIC packets. The datagram size includes one or more QUIC packet headers and protected payloads, but not the UDP or IP headers.¶ The maximum datagram size is defined as the largest size of UDP payload that can be sent across a network path using a single UDP datagram. QUIC MUST NOT be used if the network path cannot support a maximum datagram size of at least 1200 bytes.¶ QUIC assumes a minimum IP packet size of at least 1280 bytes. This is the IPv6 minimum size [IPv6] and is also supported by most modern IPv4 networks. Assuming the minimum IP header size of 40 bytes for IPv6 and 20 bytes for IPv4 and a UDP header size of 8 bytes, this results in a maximum datagram size of 1232 bytes for IPv6 and 1252 bytes for IPv4. Thus, modern IPv4 and all IPv6 network paths are expected to be able to support QUIC.¶ Note: This requirement to support a UDP payload of 1200 bytes limits the space available for IPv6 extension headers to 32 bytes or IPv4 options to 52 bytes if the path only supports the IPv6 minimum MTU of 1280 bytes. This affects Initial packets and path validation.¶ Any maximum datagram size larger than 1200 bytes can be discovered using Path Maximum Transmission Unit Discovery (PMTUD) (see Section 14.2.1) or Datagram Packetization Layer PMTU Discovery (DPLPMTUD) (see Section 14.3).¶ Enforcement of the max_udp_payload_size transport parameter (Section 18.2) might act as an additional limit on the maximum datagram size. A sender can avoid exceeding this limit, once the value is known. However, prior to learning the value of the transport parameter, endpoints risk datagrams being lost if they send datagrams larger than the smallest allowed maximum datagram size of 1200 bytes.¶ UDP datagrams MUST NOT be fragmented at the IP layer. In IPv4 [IPv4], the Don't Fragment (DF) bit MUST be set if possible, to prevent fragmentation on the path.¶ QUIC sometimes requires datagrams to be no smaller than a certain size; see Section 8.1 as an example. However, the size of a datagram is not authenticated. That is, if an endpoint receives a datagram of a certain size, it cannot know that the sender sent the datagram at the same size. Therefore, an endpoint MUST NOT close a connection when it receives a datagram that does not meet size constraints; the endpoint MAY discard such datagrams.¶ 14.1. Initial Datagram Size A client MUST expand the payload of all UDP datagrams carrying Initial packets to at least the smallest allowed maximum datagram size of 1200 bytes by adding PADDING frames to the Initial packet or by coalescing the Initial packet; see Section 12.2. Initial packets can even be coalesced with invalid packets, which a receiver will discard. Similarly, a server MUST expand the payload of all UDP datagrams carrying ack-eliciting Initial packets to at least the smallest allowed maximum datagram size of 1200 bytes.¶ Sending UDP datagrams of this size ensures that the network path supports a reasonable Path Maximum Transmission Unit (PMTU), in both directions. Additionally, a client that expands Initial packets helps reduce the amplitude of amplification attacks caused by server responses toward an unverified client address; see Section 8.¶ Datagrams containing Initial packets MAY exceed 1200 bytes if the sender believes that the network path and peer both support the size that it chooses.¶ A server MUST discard an Initial packet that is carried in a UDP datagram with a payload that is smaller than the smallest allowed maximum datagram size of 1200 bytes. A server MAY also immediately close the connection by sending a CONNECTION_CLOSE frame with an error code of PROTOCOL_VIOLATION; see Section 10.2.3.¶ The server MUST also limit the number of bytes it sends before validating the address of the client; see Section 8.¶ 14.2. Path Maximum Transmission Unit The PMTU is the maximum size of the entire IP packet, including the IP header, UDP header, and UDP payload. The UDP payload includes one or more QUIC packet headers and protected payloads. The PMTU can depend on path characteristics and can therefore change over time. The largest UDP payload an endpoint sends at any given time is referred to as the endpoint's maximum datagram size.¶ An endpoint SHOULD use DPLPMTUD (Section 14.3) or PMTUD (Section 14.2.1) to determine whether the path to a destination will support a desired maximum datagram size without fragmentation. In the absence of these mechanisms, QUIC endpoints SHOULD NOT send datagrams larger than the smallest allowed maximum datagram size.¶ Both DPLPMTUD and PMTUD send datagrams that are larger than the current maximum datagram size, referred to as PMTU probes. All QUIC packets that are not sent in a PMTU probe SHOULD be sized to fit within the maximum datagram size to avoid the datagram being fragmented or dropped [RFC8085].¶ If a QUIC endpoint determines that the PMTU between any pair of local and remote IP addresses cannot support the smallest allowed maximum datagram size of 1200 bytes, it MUST immediately cease sending QUIC packets, except for those in PMTU probes or those containing CONNECTION_CLOSE frames, on the affected path. An endpoint MAY terminate the connection if an alternative path cannot be found.¶ Each pair of local and remote addresses could have a different PMTU. QUIC implementations that implement any kind of PMTU discovery therefore SHOULD maintain a maximum datagram size for each combination of local and remote IP addresses.¶ A QUIC implementation MAY be more conservative in computing the maximum datagram size to allow for unknown tunnel overheads or IP header options/extensions.¶ 14.2.1. Handling of ICMP Messages by PMTUD PMTUD [RFC1191] [RFC8201] relies on reception of ICMP messages (that is, IPv6 Packet Too Big (PTB) messages) that indicate when an IP packet is dropped because it is larger than the local router MTU. DPLPMTUD can also optionally use these messages. This use of ICMP messages is potentially vulnerable to attacks by entities that cannot observe packets but might successfully guess the addresses used on the path. These attacks could reduce the PMTU to a bandwidth-inefficient value.¶ An endpoint MUST ignore an ICMP message that claims the PMTU has decreased below QUIC's smallest allowed maximum datagram size.¶ The requirements for generating ICMP [RFC1812] [RFC4443] state that the quoted packet should contain as much of the original packet as possible without exceeding the minimum MTU for the IP version. The size of the quoted packet can actually be smaller, or the information unintelligible, as described in Section 1.1 of [DPLPMTUD].¶ QUIC endpoints using PMTUD SHOULD validate ICMP messages to protect from packet injection as specified in [RFC8201] and Section 5.2 of [RFC8085]. This validation SHOULD use the quoted packet supplied in the payload of an ICMP message to associate the message with a corresponding transport connection (see Section 4.6.1 of [DPLPMTUD]). ICMP message validation MUST include matching IP addresses and UDP ports [RFC8085] and, when possible, connection IDs to an active QUIC session. The endpoint SHOULD ignore all ICMP messages that fail validation.¶ An endpoint MUST NOT increase the PMTU based on ICMP messages; see Item 6 in Section 3 of [DPLPMTUD]. Any reduction in QUIC's maximum datagram size in response to ICMP messages MAY be provisional until QUIC's loss detection algorithm determines that the quoted packet has actually been lost.¶ 14.3. Datagram Packetization Layer PMTU Discovery DPLPMTUD [DPLPMTUD] relies on tracking loss or acknowledgment of QUIC packets that are carried in PMTU probes. PMTU probes for DPLPMTUD that use the PADDING frame implement \"Probing using padding data\", as defined in Section 4.1 of [DPLPMTUD].¶ Endpoints SHOULD set the initial value of BASE_PLPMTU (Section 5.1 of [DPLPMTUD]) to be consistent with QUIC's smallest allowed maximum datagram size. The MIN_PLPMTU is the same as the BASE_PLPMTU.¶ QUIC endpoints implementing DPLPMTUD maintain a DPLPMTUD Maximum Packet Size (MPS) (Section 4.4 of [DPLPMTUD]) for each combination of local and remote IP addresses. This corresponds to the maximum datagram size.¶ 14.3.1. DPLPMTUD and Initial Connectivity From the perspective of DPLPMTUD, QUIC is an acknowledged Packetization Layer (PL). A QUIC sender can therefore enter the DPLPMTUD BASE state (Section 5.2 of [DPLPMTUD]) when the QUIC connection handshake has been completed.¶ 14.3.2. Validating the Network Path with DPLPMTUD QUIC is an acknowledged PL; therefore, a QUIC sender does not implement a DPLPMTUD CONFIRMATION_TIMER while in the SEARCH_COMPLETE state; see Section 5.2 of [DPLPMTUD].¶ 14.3.3. Handling of ICMP Messages by DPLPMTUD An endpoint using DPLPMTUD requires the validation of any received ICMP PTB message before using the PTB information, as defined in Section 4.6 of [DPLPMTUD]. In addition to UDP port validation, QUIC validates an ICMP message by using other PL information (e.g., validation of connection IDs in the quoted packet of any received ICMP message).¶ The considerations for processing ICMP messages described in Section 14.2.1 also apply if these messages are used by DPLPMTUD.¶ 14.4. Sending QUIC PMTU Probes PMTU probes are ack-eliciting packets.¶ Endpoints could limit the content of PMTU probes to PING and PADDING frames, since packets that are larger than the current maximum datagram size are more likely to be dropped by the network. Loss of a QUIC packet that is carried in a PMTU probe is therefore not a reliable indication of congestion and SHOULD NOT trigger a congestion control reaction; see Item 7 in Section 3 of [DPLPMTUD]. However, PMTU probes consume congestion window, which could delay subsequent transmission by an application.¶ 14.4.1. PMTU Probes Containing Source Connection ID Endpoints that rely on the Destination Connection ID field for routing incoming QUIC packets are likely to require that the connection ID be included in PMTU probes to route any resulting ICMP messages (Section 14.2.1) back to the correct endpoint. However, only long header packets (Section 17.2) contain the Source Connection ID field, and long header packets are not decrypted or acknowledged by the peer once the handshake is complete.¶ One way to construct a PMTU probe is to coalesce (see Section 12.2) a packet with a long header, such as a Handshake or 0-RTT packet (Section 17.2), with a short header packet in a single UDP datagram. If the resulting PMTU probe reaches the endpoint, the packet with the long header will be ignored, but the short header packet will be acknowledged. If the PMTU probe causes an ICMP message to be sent, the first part of the probe will be quoted in that message. If the Source Connection ID field is within the quoted portion of the probe, that could be used for routing or validation of the ICMP message.¶ Note: The purpose of using a packet with a long header is only to ensure that the quoted packet contained in the ICMP message contains a Source Connection ID field. This packet does not need to be a valid packet, and it can be sent even if there is no current use for packets of that type.¶ 15. Versions QUIC versions are identified using a 32-bit unsigned number.¶ The version 0x00000000 is reserved to represent version negotiation. This version of the specification is identified by the number 0x00000001.¶ Other versions of QUIC might have different properties from this version. The properties of QUIC that are guaranteed to be consistent across all versions of the protocol are described in [QUIC-INVARIANTS].¶ Version 0x00000001 of QUIC uses TLS as a cryptographic handshake protocol, as described in [QUIC-TLS].¶ Versions with the most significant 16 bits of the version number cleared are reserved for use in future IETF consensus documents.¶ Versions that follow the pattern 0x?a?a?a?a are reserved for use in forcing version negotiation to be exercised -- that is, any version number where the low four bits of all bytes is 1010 (in binary). A client or server MAY advertise support for any of these reserved versions.¶ Reserved version numbers will never represent a real protocol; a client MAY use one of these version numbers with the expectation that the server will initiate version negotiation; a server MAY advertise support for one of these versions and can expect that clients ignore the value.¶ 16. Variable-Length Integer Encoding QUIC packets and frames commonly use a variable-length encoding for non-negative integer values. This encoding ensures that smaller integer values need fewer bytes to encode.¶ The QUIC variable-length integer encoding reserves the two most significant bits of the first byte to encode the base-2 logarithm of the integer encoding length in bytes. The integer value is encoded on the remaining bits, in network byte order.¶ This means that integers are encoded on 1, 2, 4, or 8 bytes and can encode 6-, 14-, 30-, or 62-bit values, respectively. Table 4 summarizes the encoding properties.¶ Table 4: Summary of Integer Encodings 2MSB Length Usable Bits Range 00 1 6 0-63 01 2 14 0-16383 10 4 30 0-1073741823 11 8 62 0-4611686018427387903 An example of a decoding algorithm and sample encodings are shown in Appendix A.1.¶ Values do not need to be encoded on the minimum number of bytes necessary, with the sole exception of the Frame Type field; see Section 12.4.¶ Versions (Section 15), packet numbers sent in the header (Section 17.1), and the length of connection IDs in long header packets (Section 17.2) are described using integers but do not use this encoding.¶ 17. Packet Formats All numeric values are encoded in network byte order (that is, big endian), and all field sizes are in bits. Hexadecimal notation is used for describing the value of fields.¶ 17.1. Packet Number Encoding and Decoding Packet numbers are integers in the range 0 to 262-1 (Section 12.3). When present in long or short packet headers, they are encoded in 1 to 4 bytes. The number of bits required to represent the packet number is reduced by including only the least significant bits of the packet number.¶ The encoded packet number is protected as described in Section 5.4 of [QUIC-TLS].¶ Prior to receiving an acknowledgment for a packet number space, the full packet number MUST be included; it is not to be truncated, as described below.¶ After an acknowledgment is received for a packet number space, the sender MUST use a packet number size able to represent more than twice as large a range as the difference between the largest acknowledged packet number and the packet number being sent. A peer receiving the packet will then correctly decode the packet number, unless the packet is delayed in transit such that it arrives after many higher-numbered packets have been received. An endpoint SHOULD use a large enough packet number encoding to allow the packet number to be recovered even if the packet arrives after packets that are sent afterwards.¶ As a result, the size of the packet number encoding is at least one bit more than the base-2 logarithm of the number of contiguous unacknowledged packet numbers, including the new packet. Pseudocode and an example for packet number encoding can be found in Appendix A.2.¶ At a receiver, protection of the packet number is removed prior to recovering the full packet number. The full packet number is then reconstructed based on the number of significant bits present, the value of those bits, and the largest packet number received in a successfully authenticated packet. Recovering the full packet number is necessary to successfully complete the removal of packet protection.¶ Once header protection is removed, the packet number is decoded by finding the packet number value that is closest to the next expected packet. The next expected packet is the highest received packet number plus one. Pseudocode and an example for packet number decoding can be found in Appendix A.3.¶ 17.2. Long Header Packets Long Header Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2), Type-Specific Bits (4), Version (32), Destination Connection ID Length (8), Destination Connection ID (0..160), Source Connection ID Length (8), Source Connection ID (0..160), Type-Specific Payload (..), } Figure 13: Long Header Packet Format Long headers are used for packets that are sent prior to the establishment of 1-RTT keys. Once 1-RTT keys are available, a sender switches to sending packets using the short header (Section 17.3). The long form allows for special packets -- such as the Version Negotiation packet -- to be represented in this uniform fixed-length packet format. Packets that use the long header contain the following fields:¶ Header Form: The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.¶ Fixed Bit: The next bit (0x40) of byte 0 is set to 1, unless the packet is a Version Negotiation packet. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded. A value of 1 for this bit allows QUIC to coexist with other protocols; see [RFC7983].¶ Long Packet Type: The next two bits (those with a mask of 0x30) of byte 0 contain a packet type. Packet types are listed in Table 5.¶ Type-Specific Bits: The semantics of the lower four bits (those with a mask of 0x0f) of byte 0 are determined by the packet type.¶ Version: The QUIC Version is a 32-bit field that follows the first byte. This field indicates the version of QUIC that is in use and determines how the rest of the protocol fields are interpreted.¶ Destination Connection ID Length: The byte following the version contains the length in bytes of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. In order to properly form a Version Negotiation packet, servers SHOULD be able to read longer connection IDs from other QUIC versions.¶ Destination Connection ID: The Destination Connection ID field follows the Destination Connection ID Length field, which indicates the length of this field. Section 7.2 describes the use of this field in more detail.¶ Source Connection ID Length: The byte following the Destination Connection ID contains the length in bytes of the Source Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. In order to properly form a Version Negotiation packet, servers SHOULD be able to read longer connection IDs from other QUIC versions.¶ Source Connection ID: The Source Connection ID field follows the Source Connection ID Length field, which indicates the length of this field. Section 7.2 describes the use of this field in more detail.¶ Type-Specific Payload: The remainder of the packet, if any, is type specific.¶ In this version of QUIC, the following packet types with the long header are defined:¶ Table 5: Long Header Packet Types Type Name Section 0x00 Initial Section 17.2.2 0x01 0-RTT Section 17.2.3 0x02 Handshake Section 17.2.4 0x03 Retry Section 17.2.5 The header form bit, Destination and Source Connection ID lengths, Destination and Source Connection ID fields, and Version fields of a long header packet are version independent. The other fields in the first byte are version specific. See [QUIC-INVARIANTS] for details on how packets from different versions of QUIC are interpreted.¶ The interpretation of the fields and the payload are specific to a version and packet type. While type-specific semantics for this version are described in the following sections, several long header packets in this version of QUIC contain these additional fields:¶ Reserved Bits: Two bits (those with a mask of 0x0c) of byte 0 are reserved across multiple packet types. These bits are protected using header protection; see Section 5.4 of [QUIC-TLS]. The value included prior to protection MUST be set to 0. An endpoint MUST treat receipt of a packet that has a non-zero value for these bits after removing both packet and header protection as a connection error of type PROTOCOL_VIOLATION. Discarding such a packet after only removing header protection can expose the endpoint to attacks; see Section 9.5 of [QUIC-TLS].¶ Packet Number Length: In packet types that contain a Packet Number field, the least significant two bits (those with a mask of 0x03) of byte 0 contain the length of the Packet Number field, encoded as an unsigned two-bit integer that is one less than the length of the Packet Number field in bytes. That is, the length of the Packet Number field is the value of this field plus one. These bits are protected using header protection; see Section 5.4 of [QUIC-TLS].¶ Length: This is the length of the remainder of the packet (that is, the Packet Number and Payload fields) in bytes, encoded as a variable-length integer (Section 16).¶ Packet Number: This field is 1 to 4 bytes long. The packet number is protected using header protection; see Section 5.4 of [QUIC-TLS]. The length of the Packet Number field is encoded in the Packet Number Length bits of byte 0; see above.¶ Packet Payload: This is the payload of the packet -- containing a sequence of frames -- that is protected using packet protection.¶ 17.2.1. Version Negotiation Packet A Version Negotiation packet is inherently not version specific. Upon receipt by a client, it will be identified as a Version Negotiation packet based on the Version field having a value of 0.¶ The Version Negotiation packet is a response to a client packet that contains a version that is not supported by the server. It is only sent by servers.¶ The layout of a Version Negotiation packet is:¶ Version Negotiation Packet { Header Form (1) = 1, Unused (7), Version (32) = 0, Destination Connection ID Length (8), Destination Connection ID (0..2040), Source Connection ID Length (8), Source Connection ID (0..2040), Supported Version (32) ..., } Figure 14: Version Negotiation Packet The value in the Unused field is set to an arbitrary value by the server. Clients MUST ignore the value of this field. Where QUIC might be multiplexed with other protocols (see [RFC7983]), servers SHOULD set the most significant bit of this field (0x40) to 1 so that Version Negotiation packets appear to have the Fixed Bit field. Note that other versions of QUIC might not make a similar recommendation.¶ The Version field of a Version Negotiation packet MUST be set to 0x00000000.¶ The server MUST include the value from the Source Connection ID field of the packet it receives in the Destination Connection ID field. The value for Source Connection ID MUST be copied from the Destination Connection ID of the received packet, which is initially randomly selected by a client. Echoing both connection IDs gives clients some assurance that the server received the packet and that the Version Negotiation packet was not generated by an entity that did not observe the Initial packet.¶ Future versions of QUIC could have different requirements for the lengths of connection IDs. In particular, connection IDs might have a smaller minimum length or a greater maximum length. Version-specific rules for the connection ID therefore MUST NOT influence a decision about whether to send a Version Negotiation packet.¶ The remainder of the Version Negotiation packet is a list of 32-bit versions that the server supports.¶ A Version Negotiation packet is not acknowledged. It is only sent in response to a packet that indicates an unsupported version; see Section 5.2.2.¶ The Version Negotiation packet does not include the Packet Number and Length fields present in other packets that use the long header form. Consequently, a Version Negotiation packet consumes an entire UDP datagram.¶ A server MUST NOT send more than one Version Negotiation packet in response to a single UDP datagram.¶ See Section 6 for a description of the version negotiation process.¶ 17.2.2. Initial Packet An Initial packet uses long headers with a type value of 0x00. It carries the first CRYPTO frames sent by the client and server to perform key exchange, and it carries ACK frames in either direction.¶ Initial Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 0, Reserved Bits (2), Packet Number Length (2), Version (32), Destination Connection ID Length (8), Destination Connection ID (0..160), Source Connection ID Length (8), Source Connection ID (0..160), Token Length (i), Token (..), Length (i), Packet Number (8..32), Packet Payload (8..), } Figure 15: Initial Packet The Initial packet contains a long header as well as the Length and Packet Number fields; see Section 17.2. The first byte contains the Reserved and Packet Number Length bits; see also Section 17.2. Between the Source Connection ID and Length fields, there are two additional fields specific to the Initial packet.¶ Token Length: A variable-length integer specifying the length of the Token field, in bytes. This value is 0 if no token is present. Initial packets sent by the server MUST set the Token Length field to 0; clients that receive an Initial packet with a non-zero Token Length field MUST either discard the packet or generate a connection error of type PROTOCOL_VIOLATION.¶ Token: The value of the token that was previously provided in a Retry packet or NEW_TOKEN frame; see Section 8.1.¶ In order to prevent tampering by version-unaware middleboxes, Initial packets are protected with connection- and version-specific keys (Initial keys) as described in [QUIC-TLS]. This protection does not provide confidentiality or integrity against attackers that can observe packets, but it does prevent attackers that cannot observe packets from spoofing Initial packets.¶ The client and server use the Initial packet type for any packet that contains an initial cryptographic handshake message. This includes all cases where a new packet containing the initial cryptographic message needs to be created, such as the packets sent after receiving a Retry packet; see Section 17.2.5.¶ A server sends its first Initial packet in response to a client Initial. A server MAY send multiple Initial packets. The cryptographic key exchange could require multiple round trips or retransmissions of this data.¶ The payload of an Initial packet includes a CRYPTO frame (or frames) containing a cryptographic handshake message, ACK frames, or both. PING, PADDING, and CONNECTION_CLOSE frames of type 0x1c are also permitted. An endpoint that receives an Initial packet containing other frames can either discard the packet as spurious or treat it as a connection error.¶ The first packet sent by a client always includes a CRYPTO frame that contains the start or all of the first cryptographic handshake message. The first CRYPTO frame sent always begins at an offset of 0; see Section 7.¶ Note that if the server sends a TLS HelloRetryRequest (see Section 4.7 of [QUIC-TLS]), the client will send another series of Initial packets. These Initial packets will continue the cryptographic handshake and will contain CRYPTO frames starting at an offset matching the size of the CRYPTO frames sent in the first flight of Initial packets.¶ 17.2.2.1. Abandoning Initial Packets A client stops both sending and processing Initial packets when it sends its first Handshake packet. A server stops sending and processing Initial packets when it receives its first Handshake packet. Though packets might still be in flight or awaiting acknowledgment, no further Initial packets need to be exchanged beyond this point. Initial packet protection keys are discarded (see Section 4.9.1 of [QUIC-TLS]) along with any loss recovery and congestion control state; see Section 6.4 of [QUIC-RECOVERY].¶ Any data in CRYPTO frames is discarded -- and no longer retransmitted -- when Initial keys are discarded.¶ 17.2.3. 0-RTT A 0-RTT packet uses long headers with a type value of 0x01, followed by the Length and Packet Number fields; see Section 17.2. The first byte contains the Reserved and Packet Number Length bits; see Section 17.2. A 0-RTT packet is used to carry \"early\" data from the client to the server as part of the first flight, prior to handshake completion. As part of the TLS handshake, the server can accept or reject this early data.¶ See Section 2.3 of [TLS13] for a discussion of 0-RTT data and its limitations.¶ 0-RTT Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 1, Reserved Bits (2), Packet Number Length (2), Version (32), Destination Connection ID Length (8), Destination Connection ID (0..160), Source Connection ID Length (8), Source Connection ID (0..160), Length (i), Packet Number (8..32), Packet Payload (8..), } Figure 16: 0-RTT Packet Packet numbers for 0-RTT protected packets use the same space as 1-RTT protected packets.¶ After a client receives a Retry packet, 0-RTT packets are likely to have been lost or discarded by the server. A client SHOULD attempt to resend data in 0-RTT packets after it sends a new Initial packet. New packet numbers MUST be used for any new packets that are sent; as described in Section 17.2.5.3, reusing packet numbers could compromise packet protection.¶ A client only receives acknowledgments for its 0-RTT packets once the handshake is complete, as defined in Section 4.1.1 of [QUIC-TLS].¶ A client MUST NOT send 0-RTT packets once it starts processing 1-RTT packets from the server. This means that 0-RTT packets cannot contain any response to frames from 1-RTT packets. For instance, a client cannot send an ACK frame in a 0-RTT packet, because that can only acknowledge a 1-RTT packet. An acknowledgment for a 1-RTT packet MUST be carried in a 1-RTT packet.¶ A server SHOULD treat a violation of remembered limits (Section 7.4.1) as a connection error of an appropriate type (for instance, a FLOW_CONTROL_ERROR for exceeding stream data limits).¶ 17.2.4. Handshake Packet A Handshake packet uses long headers with a type value of 0x02, followed by the Length and Packet Number fields; see Section 17.2. The first byte contains the Reserved and Packet Number Length bits; see Section 17.2. It is used to carry cryptographic handshake messages and acknowledgments from the server and client.¶ Handshake Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 2, Reserved Bits (2), Packet Number Length (2), Version (32), Destination Connection ID Length (8), Destination Connection ID (0..160), Source Connection ID Length (8), Source Connection ID (0..160), Length (i), Packet Number (8..32), Packet Payload (8..), } Figure 17: Handshake Protected Packet Once a client has received a Handshake packet from a server, it uses Handshake packets to send subsequent cryptographic handshake messages and acknowledgments to the server.¶ The Destination Connection ID field in a Handshake packet contains a connection ID that is chosen by the recipient of the packet; the Source Connection ID includes the connection ID that the sender of the packet wishes to use; see Section 7.2.¶ Handshake packets have their own packet number space, and thus the first Handshake packet sent by a server contains a packet number of 0.¶ The payload of this packet contains CRYPTO frames and could contain PING, PADDING, or ACK frames. Handshake packets MAY contain CONNECTION_CLOSE frames of type 0x1c. Endpoints MUST treat receipt of Handshake packets with other frames as a connection error of type PROTOCOL_VIOLATION.¶ Like Initial packets (see Section 17.2.2.1), data in CRYPTO frames for Handshake packets is discarded -- and no longer retransmitted -- when Handshake protection keys are discarded.¶ 17.2.5. Retry Packet As shown in Figure 18, a Retry packet uses a long packet header with a type value of 0x03. It carries an address validation token created by the server. It is used by a server that wishes to perform a retry; see Section 8.1.¶ Retry Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 3, Unused (4), Version (32), Destination Connection ID Length (8), Destination Connection ID (0..160), Source Connection ID Length (8), Source Connection ID (0..160), Retry Token (..), Retry Integrity Tag (128), } Figure 18: Retry Packet A Retry packet does not contain any protected fields. The value in the Unused field is set to an arbitrary value by the server; a client MUST ignore these bits. In addition to the fields from the long header, it contains these additional fields:¶ Retry Token: An opaque token that the server can use to validate the client's address.¶ Retry Integrity Tag: Defined in Section 5.8 (\"Retry Packet Integrity\") of [QUIC-TLS].¶ 17.2.5.1. Sending a Retry Packet The server populates the Destination Connection ID with the connection ID that the client included in the Source Connection ID of the Initial packet.¶ The server includes a connection ID of its choice in the Source Connection ID field. This value MUST NOT be equal to the Destination Connection ID field of the packet sent by the client. A client MUST discard a Retry packet that contains a Source Connection ID field that is identical to the Destination Connection ID field of its Initial packet. The client MUST use the value from the Source Connection ID field of the Retry packet in the Destination Connection ID field of subsequent packets that it sends.¶ A server MAY send Retry packets in response to Initial and 0-RTT packets. A server can either discard or buffer 0-RTT packets that it receives. A server can send multiple Retry packets as it receives Initial or 0-RTT packets. A server MUST NOT send more than one Retry packet in response to a single UDP datagram.¶ 17.2.5.2. Handling a Retry Packet A client MUST accept and process at most one Retry packet for each connection attempt. After the client has received and processed an Initial or Retry packet from the server, it MUST discard any subsequent Retry packets that it receives.¶ Clients MUST discard Retry packets that have a Retry Integrity Tag that cannot be validated; see Section 5.8 of [QUIC-TLS]. This diminishes an attacker's ability to inject a Retry packet and protects against accidental corruption of Retry packets. A client MUST discard a Retry packet with a zero-length Retry Token field.¶ The client responds to a Retry packet with an Initial packet that includes the provided Retry token to continue connection establishment.¶ A client sets the Destination Connection ID field of this Initial packet to the value from the Source Connection ID field in the Retry packet. Changing the Destination Connection ID field also results in a change to the keys used to protect the Initial packet. It also sets the Token field to the token provided in the Retry packet. The client MUST NOT change the Source Connection ID because the server could include the connection ID as part of its token validation logic; see Section 8.1.4.¶ A Retry packet does not include a packet number and cannot be explicitly acknowledged by a client.¶ 17.2.5.3. Continuing a Handshake after Retry Subsequent Initial packets from the client include the connection ID and token values from the Retry packet. The client copies the Source Connection ID field from the Retry packet to the Destination Connection ID field and uses this value until an Initial packet with an updated value is received; see Section 7.2. The value of the Token field is copied to all subsequent Initial packets; see Section 8.1.2.¶ Other than updating the Destination Connection ID and Token fields, the Initial packet sent by the client is subject to the same restrictions as the first Initial packet. A client MUST use the same cryptographic handshake message it included in this packet. A server MAY treat a packet that contains a different cryptographic handshake message as a connection error or discard it. Note that including a Token field reduces the available space for the cryptographic handshake message, which might result in the client needing to send multiple Initial packets.¶ A client MAY attempt 0-RTT after receiving a Retry packet by sending 0-RTT packets to the connection ID provided by the server.¶ A client MUST NOT reset the packet number for any packet number space after processing a Retry packet. In particular, 0-RTT packets contain confidential information that will most likely be retransmitted on receiving a Retry packet. The keys used to protect these new 0-RTT packets will not change as a result of responding to a Retry packet. However, the data sent in these packets could be different than what was sent earlier. Sending these new packets with the same packet number is likely to compromise the packet protection for those packets because the same key and nonce could be used to protect different content. A server MAY abort the connection if it detects that the client reset the packet number.¶ The connection IDs used in Initial and Retry packets exchanged between client and server are copied to the transport parameters and validated as described in Section 7.3.¶ 17.3. Short Header Packets This version of QUIC defines a single packet type that uses the short packet header.¶ 17.3.1. 1-RTT Packet A 1-RTT packet uses a short packet header. It is used after the version and 1-RTT keys are negotiated.¶ 1-RTT Packet { Header Form (1) = 0, Fixed Bit (1) = 1, Spin Bit (1), Reserved Bits (2), Key Phase (1), Packet Number Length (2), Destination Connection ID (0..160), Packet Number (8..32), Packet Payload (8..), } Figure 19: 1-RTT Packet 1-RTT packets contain the following fields:¶ Header Form: The most significant bit (0x80) of byte 0 is set to 0 for the short header.¶ Fixed Bit: The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded. A value of 1 for this bit allows QUIC to coexist with other protocols; see [RFC7983].¶ Spin Bit: The third most significant bit (0x20) of byte 0 is the latency spin bit, set as described in Section 17.4.¶ Reserved Bits: The next two bits (those with a mask of 0x18) of byte 0 are reserved. These bits are protected using header protection; see Section 5.4 of [QUIC-TLS]. The value included prior to protection MUST be set to 0. An endpoint MUST treat receipt of a packet that has a non-zero value for these bits, after removing both packet and header protection, as a connection error of type PROTOCOL_VIOLATION. Discarding such a packet after only removing header protection can expose the endpoint to attacks; see Section 9.5 of [QUIC-TLS].¶ Key Phase: The next bit (0x04) of byte 0 indicates the key phase, which allows a recipient of a packet to identify the packet protection keys that are used to protect the packet. See [QUIC-TLS] for details. This bit is protected using header protection; see Section 5.4 of [QUIC-TLS].¶ Packet Number Length: The least significant two bits (those with a mask of 0x03) of byte 0 contain the length of the Packet Number field, encoded as an unsigned two-bit integer that is one less than the length of the Packet Number field in bytes. That is, the length of the Packet Number field is the value of this field plus one. These bits are protected using header protection; see Section 5.4 of [QUIC-TLS].¶ Destination Connection ID: The Destination Connection ID is a connection ID that is chosen by the intended recipient of the packet. See Section 5.1 for more details.¶ Packet Number: The Packet Number field is 1 to 4 bytes long. The packet number is protected using header protection; see Section 5.4 of [QUIC-TLS]. The length of the Packet Number field is encoded in Packet Number Length field. See Section 17.1 for details.¶ Packet Payload: 1-RTT packets always include a 1-RTT protected payload.¶ The header form bit and the Destination Connection ID field of a short header packet are version independent. The remaining fields are specific to the selected QUIC version. See [QUIC-INVARIANTS] for details on how packets from different versions of QUIC are interpreted.¶ 17.4. Latency Spin Bit The latency spin bit, which is defined for 1-RTT packets (Section 17.3.1), enables passive latency monitoring from observation points on the network path throughout the duration of a connection. The server reflects the spin value received, while the client \"spins\" it after one RTT. On-path observers can measure the time between two spin bit toggle events to estimate the end-to-end RTT of a connection.¶ The spin bit is only present in 1-RTT packets, since it is possible to measure the initial RTT of a connection by observing the handshake. Therefore, the spin bit is available after version negotiation and connection establishment are completed. On-path measurement and use of the latency spin bit are further discussed in [QUIC-MANAGEABILITY].¶ The spin bit is an OPTIONAL feature of this version of QUIC. An endpoint that does not support this feature MUST disable it, as defined below.¶ Each endpoint unilaterally decides if the spin bit is enabled or disabled for a connection. Implementations MUST allow administrators of clients and servers to disable the spin bit either globally or on a per-connection basis. Even when the spin bit is not disabled by the administrator, endpoints MUST disable their use of the spin bit for a random selection of at least one in every 16 network paths, or for one in every 16 connection IDs, in order to ensure that QUIC connections that disable the spin bit are commonly observed on the network. As each endpoint disables the spin bit independently, this ensures that the spin bit signal is disabled on approximately one in eight network paths.¶ When the spin bit is disabled, endpoints MAY set the spin bit to any value and MUST ignore any incoming value. It is RECOMMENDED that endpoints set the spin bit to a random value either chosen independently for each packet or chosen independently for each connection ID.¶ If the spin bit is enabled for the connection, the endpoint maintains a spin value for each network path and sets the spin bit in the packet header to the currently stored value when a 1-RTT packet is sent on that path. The spin value is initialized to 0 in the endpoint for each network path. Each endpoint also remembers the highest packet number seen from its peer on each path.¶ When a server receives a 1-RTT packet that increases the highest packet number seen by the server from the client on a given network path, it sets the spin value for that path to be equal to the spin bit in the received packet.¶ When a client receives a 1-RTT packet that increases the highest packet number seen by the client from the server on a given network path, it sets the spin value for that path to the inverse of the spin bit in the received packet.¶ An endpoint resets the spin value for a network path to 0 when changing the connection ID being used on that network path.¶ 18. Transport Parameter Encoding The extension_data field of the quic_transport_parameters extension defined in [QUIC-TLS] contains the QUIC transport parameters. They are encoded as a sequence of transport parameters, as shown in Figure 20:¶ Transport Parameters { Transport Parameter (..) ..., } Figure 20: Sequence of Transport Parameters Each transport parameter is encoded as an (identifier, length, value) tuple, as shown in Figure 21:¶ Transport Parameter { Transport Parameter ID (i), Transport Parameter Length (i), Transport Parameter Value (..), } Figure 21: Transport Parameter Encoding The Transport Parameter Length field contains the length of the Transport Parameter Value field in bytes.¶ QUIC encodes transport parameters into a sequence of bytes, which is then included in the cryptographic handshake.¶ 18.1. Reserved Transport Parameters Transport parameters with an identifier of the form 31 * N + 27 for integer values of N are reserved to exercise the requirement that unknown transport parameters be ignored. These transport parameters have no semantics and can carry arbitrary values.¶ 18.2. Transport Parameter Definitions This section details the transport parameters defined in this document.¶ Many transport parameters listed here have integer values. Those transport parameters that are identified as integers use a variable-length integer encoding; see Section 16. Transport parameters have a default value of 0 if the transport parameter is absent, unless otherwise stated.¶ The following transport parameters are defined:¶ original_destination_connection_id (0x00): This parameter is the value of the Destination Connection ID field from the first Initial packet sent by the client; see Section 7.3. This transport parameter is only sent by a server.¶ max_idle_timeout (0x01): The maximum idle timeout is a value in milliseconds that is encoded as an integer; see (Section 10.1). Idle timeout is disabled when both endpoints omit this transport parameter or specify a value of 0.¶ stateless_reset_token (0x02): A stateless reset token is used in verifying a stateless reset; see Section 10.3. This parameter is a sequence of 16 bytes. This transport parameter MUST NOT be sent by a client but MAY be sent by a server. A server that does not send this transport parameter cannot use stateless reset (Section 10.3) for the connection ID negotiated during the handshake.¶ max_udp_payload_size (0x03): The maximum UDP payload size parameter is an integer value that limits the size of UDP payloads that the endpoint is willing to receive. UDP datagrams with payloads larger than this limit are not likely to be processed by the receiver.¶ The default for this parameter is the maximum permitted UDP payload of 65527. Values below 1200 are invalid.¶ This limit does act as an additional constraint on datagram size in the same way as the path MTU, but it is a property of the endpoint and not the path; see Section 14. It is expected that this is the space an endpoint dedicates to holding incoming packets.¶ initial_max_data (0x04): The initial maximum data parameter is an integer value that contains the initial value for the maximum amount of data that can be sent on the connection. This is equivalent to sending a MAX_DATA (Section 19.9) for the connection immediately after completing the handshake.¶ initial_max_stream_data_bidi_local (0x05): This parameter is an integer value specifying the initial flow control limit for locally initiated bidirectional streams. This limit applies to newly created bidirectional streams opened by the endpoint that sends the transport parameter. In client transport parameters, this applies to streams with an identifier with the least significant two bits set to 0x00; in server transport parameters, this applies to streams with the least significant two bits set to 0x01.¶ initial_max_stream_data_bidi_remote (0x06): This parameter is an integer value specifying the initial flow control limit for peer-initiated bidirectional streams. This limit applies to newly created bidirectional streams opened by the endpoint that receives the transport parameter. In client transport parameters, this applies to streams with an identifier with the least significant two bits set to 0x01; in server transport parameters, this applies to streams with the least significant two bits set to 0x00.¶ initial_max_stream_data_uni (0x07): This parameter is an integer value specifying the initial flow control limit for unidirectional streams. This limit applies to newly created unidirectional streams opened by the endpoint that receives the transport parameter. In client transport parameters, this applies to streams with an identifier with the least significant two bits set to 0x03; in server transport parameters, this applies to streams with the least significant two bits set to 0x02.¶ initial_max_streams_bidi (0x08): The initial maximum bidirectional streams parameter is an integer value that contains the initial maximum number of bidirectional streams the endpoint that receives this transport parameter is permitted to initiate. If this parameter is absent or zero, the peer cannot open bidirectional streams until a MAX_STREAMS frame is sent. Setting this parameter is equivalent to sending a MAX_STREAMS (Section 19.11) of the corresponding type with the same value.¶ initial_max_streams_uni (0x09): The initial maximum unidirectional streams parameter is an integer value that contains the initial maximum number of unidirectional streams the endpoint that receives this transport parameter is permitted to initiate. If this parameter is absent or zero, the peer cannot open unidirectional streams until a MAX_STREAMS frame is sent. Setting this parameter is equivalent to sending a MAX_STREAMS (Section 19.11) of the corresponding type with the same value.¶ ack_delay_exponent (0x0a): The acknowledgment delay exponent is an integer value indicating an exponent used to decode the ACK Delay field in the ACK frame (Section 19.3). If this value is absent, a default value of 3 is assumed (indicating a multiplier of 8). Values above 20 are invalid.¶ max_ack_delay (0x0b): The maximum acknowledgment delay is an integer value indicating the maximum amount of time in milliseconds by which the endpoint will delay sending acknowledgments. This value SHOULD include the receiver's expected delays in alarms firing. For example, if a receiver sets a timer for 5ms and alarms commonly fire up to 1ms late, then it should send a max_ack_delay of 6ms. If this value is absent, a default of 25 milliseconds is assumed. Values of 214 or greater are invalid.¶ disable_active_migration (0x0c): The disable active migration transport parameter is included if the endpoint does not support active connection migration (Section 9) on the address being used during the handshake. An endpoint that receives this transport parameter MUST NOT use a new local address when sending to the address that the peer used during the handshake. This transport parameter does not prohibit connection migration after a client has acted on a preferred_address transport parameter. This parameter is a zero-length value.¶ preferred_address (0x0d): The server's preferred address is used to effect a change in server address at the end of the handshake, as described in Section 9.6. This transport parameter is only sent by a server. Servers MAY choose to only send a preferred address of one address family by sending an all-zero address and port (0.0.0.0:0 or [::]:0) for the other family. IP addresses are encoded in network byte order.¶ The preferred_address transport parameter contains an address and port for both IPv4 and IPv6. The four-byte IPv4 Address field is followed by the associated two-byte IPv4 Port field. This is followed by a 16-byte IPv6 Address field and two-byte IPv6 Port field. After address and port pairs, a Connection ID Length field describes the length of the following Connection ID field. Finally, a 16-byte Stateless Reset Token field includes the stateless reset token associated with the connection ID. The format of this transport parameter is shown in Figure 22 below.¶ The Connection ID field and the Stateless Reset Token field contain an alternative connection ID that has a sequence number of 1; see Section 5.1.1. Having these values sent alongside the preferred address ensures that there will be at least one unused active connection ID when the client initiates migration to the preferred address.¶ The Connection ID and Stateless Reset Token fields of a preferred address are identical in syntax and semantics to the corresponding fields of a NEW_CONNECTION_ID frame (Section 19.15). A server that chooses a zero-length connection ID MUST NOT provide a preferred address. Similarly, a server MUST NOT include a zero-length connection ID in this transport parameter. A client MUST treat a violation of these requirements as a connection error of type TRANSPORT_PARAMETER_ERROR.¶ Preferred Address { IPv4 Address (32), IPv4 Port (16), IPv6 Address (128), IPv6 Port (16), Connection ID Length (8), Connection ID (..), Stateless Reset Token (128), } Figure 22: Preferred Address Format active_connection_id_limit (0x0e): This is an integer value specifying the maximum number of connection IDs from the peer that an endpoint is willing to store. This value includes the connection ID received during the handshake, that received in the preferred_address transport parameter, and those received in NEW_CONNECTION_ID frames. The value of the active_connection_id_limit parameter MUST be at least 2. An endpoint that receives a value less than 2 MUST close the connection with an error of type TRANSPORT_PARAMETER_ERROR. If this transport parameter is absent, a default of 2 is assumed. If an endpoint issues a zero-length connection ID, it will never send a NEW_CONNECTION_ID frame and therefore ignores the active_connection_id_limit value received from its peer.¶ initial_source_connection_id (0x0f): This is the value that the endpoint included in the Source Connection ID field of the first Initial packet it sends for the connection; see Section 7.3.¶ retry_source_connection_id (0x10): This is the value that the server included in the Source Connection ID field of a Retry packet; see Section 7.3. This transport parameter is only sent by a server.¶ If present, transport parameters that set initial per-stream flow control limits (initial_max_stream_data_bidi_local, initial_max_stream_data_bidi_remote, and initial_max_stream_data_uni) are equivalent to sending a MAX_STREAM_DATA frame (Section 19.10) on every stream of the corresponding type immediately after opening. If the transport parameter is absent, streams of that type start with a flow control limit of 0.¶ A client MUST NOT include any server-only transport parameter: original_destination_connection_id, preferred_address, retry_source_connection_id, or stateless_reset_token. A server MUST treat receipt of any of these transport parameters as a connection error of type TRANSPORT_PARAMETER_ERROR.¶ 19. Frame Types and Formats As described in Section 12.4, packets contain one or more frames. This section describes the format and semantics of the core QUIC frame types.¶ 19.1. PADDING Frames A PADDING frame (type=0x00) has no semantic value. PADDING frames can be used to increase the size of a packet. Padding can be used to increase an Initial packet to the minimum required size or to provide protection against traffic analysis for protected packets.¶ PADDING frames are formatted as shown in Figure 23, which shows that PADDING frames have no content. That is, a PADDING frame consists of the single byte that identifies the frame as a PADDING frame.¶ PADDING Frame { Type (i) = 0x00, } Figure 23: PADDING Frame Format 19.2. PING Frames Endpoints can use PING frames (type=0x01) to verify that their peers are still alive or to check reachability to the peer.¶ PING frames are formatted as shown in Figure 24, which shows that PING frames have no content.¶ PING Frame { Type (i) = 0x01, } Figure 24: PING Frame Format The receiver of a PING frame simply needs to acknowledge the packet containing this frame.¶ The PING frame can be used to keep a connection alive when an application or application protocol wishes to prevent the connection from timing out; see Section 10.1.2.¶ 19.3. ACK Frames Receivers send ACK frames (types 0x02 and 0x03) to inform senders of packets they have received and processed. The ACK frame contains one or more ACK Ranges. ACK Ranges identify acknowledged packets. If the frame type is 0x03, ACK frames also contain the cumulative count of QUIC packets with associated ECN marks received on the connection up until this point. QUIC implementations MUST properly handle both types, and, if they have enabled ECN for packets they send, they SHOULD use the information in the ECN section to manage their congestion state.¶ QUIC acknowledgments are irrevocable. Once acknowledged, a packet remains acknowledged, even if it does not appear in a future ACK frame. This is unlike reneging for TCP Selective Acknowledgments (SACKs) [RFC2018].¶ Packets from different packet number spaces can be identified using the same numeric value. An acknowledgment for a packet needs to indicate both a packet number and a packet number space. This is accomplished by having each ACK frame only acknowledge packet numbers in the same space as the packet in which the ACK frame is contained.¶ Version Negotiation and Retry packets cannot be acknowledged because they do not contain a packet number. Rather than relying on ACK frames, these packets are implicitly acknowledged by the next Initial packet sent by the client.¶ ACK frames are formatted as shown in Figure 25.¶ ACK Frame { Type (i) = 0x02..0x03, Largest Acknowledged (i), ACK Delay (i), ACK Range Count (i), First ACK Range (i), ACK Range (..) ..., [ECN Counts (..)], } Figure 25: ACK Frame Format ACK frames contain the following fields:¶ Largest Acknowledged: A variable-length integer representing the largest packet number the peer is acknowledging; this is usually the largest packet number that the peer has received prior to generating the ACK frame. Unlike the packet number in the QUIC long or short header, the value in an ACK frame is not truncated.¶ ACK Delay: A variable-length integer encoding the acknowledgment delay in microseconds; see Section 13.2.5. It is decoded by multiplying the value in the field by 2 to the power of the ack_delay_exponent transport parameter sent by the sender of the ACK frame; see Section 18.2. Compared to simply expressing the delay as an integer, this encoding allows for a larger range of values within the same number of bytes, at the cost of lower resolution.¶ ACK Range Count: A variable-length integer specifying the number of ACK Range fields in the frame.¶ First ACK Range: A variable-length integer indicating the number of contiguous packets preceding the Largest Acknowledged that are being acknowledged. That is, the smallest packet acknowledged in the range is determined by subtracting the First ACK Range value from the Largest Acknowledged field.¶ ACK Ranges: Contains additional ranges of packets that are alternately not acknowledged (Gap) and acknowledged (ACK Range); see Section 19.3.1.¶ ECN Counts: The three ECN counts; see Section 19.3.2.¶ 19.3.1. ACK Ranges Each ACK Range consists of alternating Gap and ACK Range Length values in descending packet number order. ACK Ranges can be repeated. The number of Gap and ACK Range Length values is determined by the ACK Range Count field; one of each value is present for each value in the ACK Range Count field.¶ ACK Ranges are structured as shown in Figure 26.¶ ACK Range { Gap (i), ACK Range Length (i), } Figure 26: ACK Ranges The fields that form each ACK Range are:¶ Gap: A variable-length integer indicating the number of contiguous unacknowledged packets preceding the packet number one lower than the smallest in the preceding ACK Range.¶ ACK Range Length: A variable-length integer indicating the number of contiguous acknowledged packets preceding the largest packet number, as determined by the preceding Gap.¶ Gap and ACK Range Length values use a relative integer encoding for efficiency. Though each encoded value is positive, the values are subtracted, so that each ACK Range describes progressively lower-numbered packets.¶ Each ACK Range acknowledges a contiguous range of packets by indicating the number of acknowledged packets that precede the largest packet number in that range. A value of 0 indicates that only the largest packet number is acknowledged. Larger ACK Range values indicate a larger range, with corresponding lower values for the smallest packet number in the range. Thus, given a largest packet number for the range, the smallest value is determined by the following formula:¶ smallest = largest - ack_range ¶ An ACK Range acknowledges all packets between the smallest packet number and the largest, inclusive.¶ The largest value for an ACK Range is determined by cumulatively subtracting the size of all preceding ACK Range Lengths and Gaps.¶ Each Gap indicates a range of packets that are not being acknowledged. The number of packets in the gap is one higher than the encoded value of the Gap field.¶ The value of the Gap field establishes the largest packet number value for the subsequent ACK Range using the following formula:¶ largest = previous_smallest - gap - 2 ¶ If any computed packet number is negative, an endpoint MUST generate a connection error of type FRAME_ENCODING_ERROR.¶ 19.3.2. ECN Counts The ACK frame uses the least significant bit of the type value (that is, type 0x03) to indicate ECN feedback and report receipt of QUIC packets with associated ECN codepoints of ECT(0), ECT(1), or ECN-CE in the packet's IP header. ECN counts are only present when the ACK frame type is 0x03.¶ When present, there are three ECN counts, as shown in Figure 27.¶ ECN Counts { ECT0 Count (i), ECT1 Count (i), ECN-CE Count (i), } Figure 27: ECN Count Format The ECN count fields are:¶ ECT0 Count: A variable-length integer representing the total number of packets received with the ECT(0) codepoint in the packet number space of the ACK frame.¶ ECT1 Count: A variable-length integer representing the total number of packets received with the ECT(1) codepoint in the packet number space of the ACK frame.¶ ECN-CE Count: A variable-length integer representing the total number of packets received with the ECN-CE codepoint in the packet number space of the ACK frame.¶ ECN counts are maintained separately for each packet number space.¶ 19.4. RESET_STREAM Frames An endpoint uses a RESET_STREAM frame (type=0x04) to abruptly terminate the sending part of a stream.¶ After sending a RESET_STREAM, an endpoint ceases transmission and retransmission of STREAM frames on the identified stream. A receiver of RESET_STREAM can discard any data that it already received on that stream.¶ An endpoint that receives a RESET_STREAM frame for a send-only stream MUST terminate the connection with error STREAM_STATE_ERROR.¶ RESET_STREAM frames are formatted as shown in Figure 28.¶ RESET_STREAM Frame { Type (i) = 0x04, Stream ID (i), Application Protocol Error Code (i), Final Size (i), } Figure 28: RESET_STREAM Frame Format RESET_STREAM frames contain the following fields:¶ Stream ID: A variable-length integer encoding of the stream ID of the stream being terminated.¶ Application Protocol Error Code: A variable-length integer containing the application protocol error code (see Section 20.2) that indicates why the stream is being closed.¶ Final Size: A variable-length integer indicating the final size of the stream by the RESET_STREAM sender, in units of bytes; see Section 4.5.¶ 19.5. STOP_SENDING Frames An endpoint uses a STOP_SENDING frame (type=0x05) to communicate that incoming data is being discarded on receipt per application request. STOP_SENDING requests that a peer cease transmission on a stream.¶ A STOP_SENDING frame can be sent for streams in the \"Recv\" or \"Size Known\" states; see Section 3.2. Receiving a STOP_SENDING frame for a locally initiated stream that has not yet been created MUST be treated as a connection error of type STREAM_STATE_ERROR. An endpoint that receives a STOP_SENDING frame for a receive-only stream MUST terminate the connection with error STREAM_STATE_ERROR.¶ STOP_SENDING frames are formatted as shown in Figure 29.¶ STOP_SENDING Frame { Type (i) = 0x05, Stream ID (i), Application Protocol Error Code (i), } Figure 29: STOP_SENDING Frame Format STOP_SENDING frames contain the following fields:¶ Stream ID: A variable-length integer carrying the stream ID of the stream being ignored.¶ Application Protocol Error Code: A variable-length integer containing the application-specified reason the sender is ignoring the stream; see Section 20.2.¶ 19.6. CRYPTO Frames A CRYPTO frame (type=0x06) is used to transmit cryptographic handshake messages. It can be sent in all packet types except 0-RTT. The CRYPTO frame offers the cryptographic protocol an in-order stream of bytes. CRYPTO frames are functionally identical to STREAM frames, except that they do not bear a stream identifier; they are not flow controlled; and they do not carry markers for optional offset, optional length, and the end of the stream.¶ CRYPTO frames are formatted as shown in Figure 30.¶ CRYPTO Frame { Type (i) = 0x06, Offset (i), Length (i), Crypto Data (..), } Figure 30: CRYPTO Frame Format CRYPTO frames contain the following fields:¶ Offset: A variable-length integer specifying the byte offset in the stream for the data in this CRYPTO frame.¶ Length: A variable-length integer specifying the length of the Crypto Data field in this CRYPTO frame.¶ Crypto Data: The cryptographic message data.¶ There is a separate flow of cryptographic handshake data in each encryption level, each of which starts at an offset of 0. This implies that each encryption level is treated as a separate CRYPTO stream of data.¶ The largest offset delivered on a stream -- the sum of the offset and data length -- cannot exceed 262-1. Receipt of a frame that exceeds this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR or CRYPTO_BUFFER_EXCEEDED.¶ Unlike STREAM frames, which include a stream ID indicating to which stream the data belongs, the CRYPTO frame carries data for a single stream per encryption level. The stream does not have an explicit end, so CRYPTO frames do not have a FIN bit.¶ 19.7. NEW_TOKEN Frames A server sends a NEW_TOKEN frame (type=0x07) to provide the client with a token to send in the header of an Initial packet for a future connection.¶ NEW_TOKEN frames are formatted as shown in Figure 31.¶ NEW_TOKEN Frame { Type (i) = 0x07, Token Length (i), Token (..), } Figure 31: NEW_TOKEN Frame Format NEW_TOKEN frames contain the following fields:¶ Token Length: A variable-length integer specifying the length of the token in bytes.¶ Token: An opaque blob that the client can use with a future Initial packet. The token MUST NOT be empty. A client MUST treat receipt of a NEW_TOKEN frame with an empty Token field as a connection error of type FRAME_ENCODING_ERROR.¶ A client might receive multiple NEW_TOKEN frames that contain the same token value if packets containing the frame are incorrectly determined to be lost. Clients are responsible for discarding duplicate values, which might be used to link connection attempts; see Section 8.1.3.¶ Clients MUST NOT send NEW_TOKEN frames. A server MUST treat receipt of a NEW_TOKEN frame as a connection error of type PROTOCOL_VIOLATION.¶ 19.8. STREAM Frames STREAM frames implicitly create a stream and carry stream data. The Type field in the STREAM frame takes the form 0b00001XXX (or the set of values from 0x08 to 0x0f). The three low-order bits of the frame type determine the fields that are present in the frame:¶ The OFF bit (0x04) in the frame type is set to indicate that there is an Offset field present. When set to 1, the Offset field is present. When set to 0, the Offset field is absent and the Stream Data starts at an offset of 0 (that is, the frame contains the first bytes of the stream, or the end of a stream that includes no data).¶ The LEN bit (0x02) in the frame type is set to indicate that there is a Length field present. If this bit is set to 0, the Length field is absent and the Stream Data field extends to the end of the packet. If this bit is set to 1, the Length field is present.¶ The FIN bit (0x01) indicates that the frame marks the end of the stream. The final size of the stream is the sum of the offset and the length of this frame.¶ An endpoint MUST terminate the connection with error STREAM_STATE_ERROR if it receives a STREAM frame for a locally initiated stream that has not yet been created, or for a send-only stream.¶ STREAM frames are formatted as shown in Figure 32.¶ STREAM Frame { Type (i) = 0x08..0x0f, Stream ID (i), [Offset (i)], [Length (i)], Stream Data (..), } Figure 32: STREAM Frame Format STREAM frames contain the following fields:¶ Stream ID: A variable-length integer indicating the stream ID of the stream; see Section 2.1.¶ Offset: A variable-length integer specifying the byte offset in the stream for the data in this STREAM frame. This field is present when the OFF bit is set to 1. When the Offset field is absent, the offset is 0.¶ Length: A variable-length integer specifying the length of the Stream Data field in this STREAM frame. This field is present when the LEN bit is set to 1. When the LEN bit is set to 0, the Stream Data field consumes all the remaining bytes in the packet.¶ Stream Data: The bytes from the designated stream to be delivered.¶ When a Stream Data field has a length of 0, the offset in the STREAM frame is the offset of the next byte that would be sent.¶ The first byte in the stream has an offset of 0. The largest offset delivered on a stream -- the sum of the offset and data length -- cannot exceed 262-1, as it is not possible to provide flow control credit for that data. Receipt of a frame that exceeds this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR or FLOW_CONTROL_ERROR.¶ 19.9. MAX_DATA Frames A MAX_DATA frame (type=0x10) is used in flow control to inform the peer of the maximum amount of data that can be sent on the connection as a whole.¶ MAX_DATA frames are formatted as shown in Figure 33.¶ MAX_DATA Frame { Type (i) = 0x10, Maximum Data (i), } Figure 33: MAX_DATA Frame Format MAX_DATA frames contain the following field:¶ Maximum Data: A variable-length integer indicating the maximum amount of data that can be sent on the entire connection, in units of bytes.¶ All data sent in STREAM frames counts toward this limit. The sum of the final sizes on all streams -- including streams in terminal states -- MUST NOT exceed the value advertised by a receiver. An endpoint MUST terminate a connection with an error of type FLOW_CONTROL_ERROR if it receives more data than the maximum data value that it has sent. This includes violations of remembered limits in Early Data; see Section 7.4.1.¶ 19.10. MAX_STREAM_DATA Frames A MAX_STREAM_DATA frame (type=0x11) is used in flow control to inform a peer of the maximum amount of data that can be sent on a stream.¶ A MAX_STREAM_DATA frame can be sent for streams in the \"Recv\" state; see Section 3.2. Receiving a MAX_STREAM_DATA frame for a locally initiated stream that has not yet been created MUST be treated as a connection error of type STREAM_STATE_ERROR. An endpoint that receives a MAX_STREAM_DATA frame for a receive-only stream MUST terminate the connection with error STREAM_STATE_ERROR.¶ MAX_STREAM_DATA frames are formatted as shown in Figure 34.¶ MAX_STREAM_DATA Frame { Type (i) = 0x11, Stream ID (i), Maximum Stream Data (i), } Figure 34: MAX_STREAM_DATA Frame Format MAX_STREAM_DATA frames contain the following fields:¶ Stream ID: The stream ID of the affected stream, encoded as a variable-length integer.¶ Maximum Stream Data: A variable-length integer indicating the maximum amount of data that can be sent on the identified stream, in units of bytes.¶ When counting data toward this limit, an endpoint accounts for the largest received offset of data that is sent or received on the stream. Loss or reordering can mean that the largest received offset on a stream can be greater than the total size of data received on that stream. Receiving STREAM frames might not increase the largest received offset.¶ The data sent on a stream MUST NOT exceed the largest maximum stream data value advertised by the receiver. An endpoint MUST terminate a connection with an error of type FLOW_CONTROL_ERROR if it receives more data than the largest maximum stream data that it has sent for the affected stream. This includes violations of remembered limits in Early Data; see Section 7.4.1.¶ 19.11. MAX_STREAMS Frames A MAX_STREAMS frame (type=0x12 or 0x13) informs the peer of the cumulative number of streams of a given type it is permitted to open. A MAX_STREAMS frame with a type of 0x12 applies to bidirectional streams, and a MAX_STREAMS frame with a type of 0x13 applies to unidirectional streams.¶ MAX_STREAMS frames are formatted as shown in Figure 35.¶ MAX_STREAMS Frame { Type (i) = 0x12..0x13, Maximum Streams (i), } Figure 35: MAX_STREAMS Frame Format MAX_STREAMS frames contain the following field:¶ Maximum Streams: A count of the cumulative number of streams of the corresponding type that can be opened over the lifetime of the connection. This value cannot exceed 260, as it is not possible to encode stream IDs larger than 262-1. Receipt of a frame that permits opening of a stream larger than this limit MUST be treated as a connection error of type FRAME_ENCODING_ERROR.¶ Loss or reordering can cause an endpoint to receive a MAX_STREAMS frame with a lower stream limit than was previously received. MAX_STREAMS frames that do not increase the stream limit MUST be ignored.¶ An endpoint MUST NOT open more streams than permitted by the current stream limit set by its peer. For instance, a server that receives a unidirectional stream limit of 3 is permitted to open streams 3, 7, and 11, but not stream 15. An endpoint MUST terminate a connection with an error of type STREAM_LIMIT_ERROR if a peer opens more streams than was permitted. This includes violations of remembered limits in Early Data; see Section 7.4.1.¶ Note that these frames (and the corresponding transport parameters) do not describe the number of streams that can be opened concurrently. The limit includes streams that have been closed as well as those that are open.¶ 19.12. DATA_BLOCKED Frames A sender SHOULD send a DATA_BLOCKED frame (type=0x14) when it wishes to send data but is unable to do so due to connection-level flow control; see Section 4. DATA_BLOCKED frames can be used as input to tuning of flow control algorithms; see Section 4.2.¶ DATA_BLOCKED frames are formatted as shown in Figure 36.¶ DATA_BLOCKED Frame { Type (i) = 0x14, Maximum Data (i), } Figure 36: DATA_BLOCKED Frame Format DATA_BLOCKED frames contain the following field:¶ Maximum Data: A variable-length integer indicating the connection-level limit at which blocking occurred.¶ 19.13. STREAM_DATA_BLOCKED Frames A sender SHOULD send a STREAM_DATA_BLOCKED frame (type=0x15) when it wishes to send data but is unable to do so due to stream-level flow control. This frame is analogous to DATA_BLOCKED (Section 19.12).¶ An endpoint that receives a STREAM_DATA_BLOCKED frame for a send-only stream MUST terminate the connection with error STREAM_STATE_ERROR.¶ STREAM_DATA_BLOCKED frames are formatted as shown in Figure 37.¶ STREAM_DATA_BLOCKED Frame { Type (i) = 0x15, Stream ID (i), Maximum Stream Data (i), } Figure 37: STREAM_DATA_BLOCKED Frame Format STREAM_DATA_BLOCKED frames contain the following fields:¶ Stream ID: A variable-length integer indicating the stream that is blocked due to flow control.¶ Maximum Stream Data: A variable-length integer indicating the offset of the stream at which the blocking occurred.¶ 19.14. STREAMS_BLOCKED Frames A sender SHOULD send a STREAMS_BLOCKED frame (type=0x16 or 0x17) when it wishes to open a stream but is unable to do so due to the maximum stream limit set by its peer; see Section 19.11. A STREAMS_BLOCKED frame of type 0x16 is used to indicate reaching the bidirectional stream limit, and a STREAMS_BLOCKED frame of type 0x17 is used to indicate reaching the unidirectional stream limit.¶ A STREAMS_BLOCKED frame does not open the stream, but informs the peer that a new stream was needed and the stream limit prevented the creation of the stream.¶ STREAMS_BLOCKED frames are formatted as shown in Figure 38.¶ STREAMS_BLOCKED Frame { Type (i) = 0x16..0x17, Maximum Streams (i), } Figure 38: STREAMS_BLOCKED Frame Format STREAMS_BLOCKED frames contain the following field:¶ Maximum Streams: A variable-length integer indicating the maximum number of streams allowed at the time the frame was sent. This value cannot exceed 260, as it is not possible to encode stream IDs larger than 262-1. Receipt of a frame that encodes a larger stream ID MUST be treated as a connection error of type STREAM_LIMIT_ERROR or FRAME_ENCODING_ERROR.¶ 19.15. NEW_CONNECTION_ID Frames An endpoint sends a NEW_CONNECTION_ID frame (type=0x18) to provide its peer with alternative connection IDs that can be used to break linkability when migrating connections; see Section 9.5.¶ NEW_CONNECTION_ID frames are formatted as shown in Figure 39.¶ NEW_CONNECTION_ID Frame { Type (i) = 0x18, Sequence Number (i), Retire Prior To (i), Length (8), Connection ID (8..160), Stateless Reset Token (128), } Figure 39: NEW_CONNECTION_ID Frame Format NEW_CONNECTION_ID frames contain the following fields:¶ Sequence Number: The sequence number assigned to the connection ID by the sender, encoded as a variable-length integer; see Section 5.1.1.¶ Retire Prior To: A variable-length integer indicating which connection IDs should be retired; see Section 5.1.2.¶ Length: An 8-bit unsigned integer containing the length of the connection ID. Values less than 1 and greater than 20 are invalid and MUST be treated as a connection error of type FRAME_ENCODING_ERROR.¶ Connection ID: A connection ID of the specified length.¶ Stateless Reset Token: A 128-bit value that will be used for a stateless reset when the associated connection ID is used; see Section 10.3.¶ An endpoint MUST NOT send this frame if it currently requires that its peer send packets with a zero-length Destination Connection ID. Changing the length of a connection ID to or from zero length makes it difficult to identify when the value of the connection ID changed. An endpoint that is sending packets with a zero-length Destination Connection ID MUST treat receipt of a NEW_CONNECTION_ID frame as a connection error of type PROTOCOL_VIOLATION.¶ Transmission errors, timeouts, and retransmissions might cause the same NEW_CONNECTION_ID frame to be received multiple times. Receipt of the same frame multiple times MUST NOT be treated as a connection error. A receiver can use the sequence number supplied in the NEW_CONNECTION_ID frame to handle receiving the same NEW_CONNECTION_ID frame multiple times.¶ If an endpoint receives a NEW_CONNECTION_ID frame that repeats a previously issued connection ID with a different Stateless Reset Token field value or a different Sequence Number field value, or if a sequence number is used for different connection IDs, the endpoint MAY treat that receipt as a connection error of type PROTOCOL_VIOLATION.¶ The Retire Prior To field applies to connection IDs established during connection setup and the preferred_address transport parameter; see Section 5.1.2. The value in the Retire Prior To field MUST be less than or equal to the value in the Sequence Number field. Receiving a value in the Retire Prior To field that is greater than that in the Sequence Number field MUST be treated as a connection error of type FRAME_ENCODING_ERROR.¶ Once a sender indicates a Retire Prior To value, smaller values sent in subsequent NEW_CONNECTION_ID frames have no effect. A receiver MUST ignore any Retire Prior To fields that do not increase the largest received Retire Prior To value.¶ An endpoint that receives a NEW_CONNECTION_ID frame with a sequence number smaller than the Retire Prior To field of a previously received NEW_CONNECTION_ID frame MUST send a corresponding RETIRE_CONNECTION_ID frame that retires the newly received connection ID, unless it has already done so for that sequence number.¶ 19.16. RETIRE_CONNECTION_ID Frames An endpoint sends a RETIRE_CONNECTION_ID frame (type=0x19) to indicate that it will no longer use a connection ID that was issued by its peer. This includes the connection ID provided during the handshake. Sending a RETIRE_CONNECTION_ID frame also serves as a request to the peer to send additional connection IDs for future use; see Section 5.1. New connection IDs can be delivered to a peer using the NEW_CONNECTION_ID frame (Section 19.15).¶ Retiring a connection ID invalidates the stateless reset token associated with that connection ID.¶ RETIRE_CONNECTION_ID frames are formatted as shown in Figure 40.¶ RETIRE_CONNECTION_ID Frame { Type (i) = 0x19, Sequence Number (i), } Figure 40: RETIRE_CONNECTION_ID Frame Format RETIRE_CONNECTION_ID frames contain the following field:¶ Sequence Number: The sequence number of the connection ID being retired; see Section 5.1.2.¶ Receipt of a RETIRE_CONNECTION_ID frame containing a sequence number greater than any previously sent to the peer MUST be treated as a connection error of type PROTOCOL_VIOLATION.¶ The sequence number specified in a RETIRE_CONNECTION_ID frame MUST NOT refer to the Destination Connection ID field of the packet in which the frame is contained. The peer MAY treat this as a connection error of type PROTOCOL_VIOLATION.¶ An endpoint cannot send this frame if it was provided with a zero-length connection ID by its peer. An endpoint that provides a zero-length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID frame as a connection error of type PROTOCOL_VIOLATION.¶ 19.17. PATH_CHALLENGE Frames Endpoints can use PATH_CHALLENGE frames (type=0x1a) to check reachability to the peer and for path validation during connection migration.¶ PATH_CHALLENGE frames are formatted as shown in Figure 41.¶ PATH_CHALLENGE Frame { Type (i) = 0x1a, Data (64), } Figure 41: PATH_CHALLENGE Frame Format PATH_CHALLENGE frames contain the following field:¶ Data: This 8-byte field contains arbitrary data.¶ Including 64 bits of entropy in a PATH_CHALLENGE frame ensures that it is easier to receive the packet than it is to guess the value correctly.¶ The recipient of this frame MUST generate a PATH_RESPONSE frame (Section 19.18) containing the same Data value.¶ 19.18. PATH_RESPONSE Frames A PATH_RESPONSE frame (type=0x1b) is sent in response to a PATH_CHALLENGE frame.¶ PATH_RESPONSE frames are formatted as shown in Figure 42. The format of a PATH_RESPONSE frame is identical to that of the PATH_CHALLENGE frame; see Section 19.17.¶ PATH_RESPONSE Frame { Type (i) = 0x1b, Data (64), } Figure 42: PATH_RESPONSE Frame Format If the content of a PATH_RESPONSE frame does not match the content of a PATH_CHALLENGE frame previously sent by the endpoint, the endpoint MAY generate a connection error of type PROTOCOL_VIOLATION.¶ 19.19. CONNECTION_CLOSE Frames An endpoint sends a CONNECTION_CLOSE frame (type=0x1c or 0x1d) to notify its peer that the connection is being closed. The CONNECTION_CLOSE frame with a type of 0x1c is used to signal errors at only the QUIC layer, or the absence of errors (with the NO_ERROR code). The CONNECTION_CLOSE frame with a type of 0x1d is used to signal an error with the application that uses QUIC.¶ If there are open streams that have not been explicitly closed, they are implicitly closed when the connection is closed.¶ CONNECTION_CLOSE frames are formatted as shown in Figure 43.¶ CONNECTION_CLOSE Frame { Type (i) = 0x1c..0x1d, Error Code (i), [Frame Type (i)], Reason Phrase Length (i), Reason Phrase (..), } Figure 43: CONNECTION_CLOSE Frame Format CONNECTION_CLOSE frames contain the following fields:¶ Error Code: A variable-length integer that indicates the reason for closing this connection. A CONNECTION_CLOSE frame of type 0x1c uses codes from the space defined in Section 20.1. A CONNECTION_CLOSE frame of type 0x1d uses codes defined by the application protocol; see Section 20.2.¶ Frame Type: A variable-length integer encoding the type of frame that triggered the error. A value of 0 (equivalent to the mention of the PADDING frame) is used when the frame type is unknown. The application-specific variant of CONNECTION_CLOSE (type 0x1d) does not include this field.¶ Reason Phrase Length: A variable-length integer specifying the length of the reason phrase in bytes. Because a CONNECTION_CLOSE frame cannot be split between packets, any limits on packet size will also limit the space available for a reason phrase.¶ Reason Phrase: Additional diagnostic information for the closure. This can be zero length if the sender chooses not to give details beyond the Error Code value. This SHOULD be a UTF-8 encoded string [RFC3629], though the frame does not carry information, such as language tags, that would aid comprehension by any entity other than the one that created the text.¶ The application-specific variant of CONNECTION_CLOSE (type 0x1d) can only be sent using 0-RTT or 1-RTT packets; see Section 12.5. When an application wishes to abandon a connection during the handshake, an endpoint can send a CONNECTION_CLOSE frame (type 0x1c) with an error code of APPLICATION_ERROR in an Initial or Handshake packet.¶ 19.20. HANDSHAKE_DONE Frames The server uses a HANDSHAKE_DONE frame (type=0x1e) to signal confirmation of the handshake to the client.¶ HANDSHAKE_DONE frames are formatted as shown in Figure 44, which shows that HANDSHAKE_DONE frames have no content.¶ HANDSHAKE_DONE Frame { Type (i) = 0x1e, } Figure 44: HANDSHAKE_DONE Frame Format A HANDSHAKE_DONE frame can only be sent by the server. Servers MUST NOT send a HANDSHAKE_DONE frame before completing the handshake. A server MUST treat receipt of a HANDSHAKE_DONE frame as a connection error of type PROTOCOL_VIOLATION.¶ 19.21. Extension Frames QUIC frames do not use a self-describing encoding. An endpoint therefore needs to understand the syntax of all frames before it can successfully process a packet. This allows for efficient encoding of frames, but it means that an endpoint cannot send a frame of a type that is unknown to its peer.¶ An extension to QUIC that wishes to use a new type of frame MUST first ensure that a peer is able to understand the frame. An endpoint can use a transport parameter to signal its willingness to receive extension frame types. One transport parameter can indicate support for one or more extension frame types.¶ Extensions that modify or replace core protocol functionality (including frame types) will be difficult to combine with other extensions that modify or replace the same functionality unless the behavior of the combination is explicitly defined. Such extensions SHOULD define their interaction with previously defined extensions modifying the same protocol components.¶ Extension frames MUST be congestion controlled and MUST cause an ACK frame to be sent. The exception is extension frames that replace or supplement the ACK frame. Extension frames are not included in flow control unless specified in the extension.¶ An IANA registry is used to manage the assignment of frame types; see Section 22.4.¶ 20. Error Codes QUIC transport error codes and application error codes are 62-bit unsigned integers.¶ 20.1. Transport Error Codes This section lists the defined QUIC transport error codes that can be used in a CONNECTION_CLOSE frame with a type of 0x1c. These errors apply to the entire connection.¶ NO_ERROR (0x00): An endpoint uses this with CONNECTION_CLOSE to signal that the connection is being closed abruptly in the absence of any error.¶ INTERNAL_ERROR (0x01): The endpoint encountered an internal error and cannot continue with the connection.¶ CONNECTION_REFUSED (0x02): The server refused to accept a new connection.¶ FLOW_CONTROL_ERROR (0x03): An endpoint received more data than it permitted in its advertised data limits; see Section 4.¶ STREAM_LIMIT_ERROR (0x04): An endpoint received a frame for a stream identifier that exceeded its advertised stream limit for the corresponding stream type.¶ STREAM_STATE_ERROR (0x05): An endpoint received a frame for a stream that was not in a state that permitted that frame; see Section 3.¶ FINAL_SIZE_ERROR (0x06): (1) An endpoint received a STREAM frame containing data that exceeded the previously established final size, (2) an endpoint received a STREAM frame or a RESET_STREAM frame containing a final size that was lower than the size of stream data that was already received, or (3) an endpoint received a STREAM frame or a RESET_STREAM frame containing a different final size to the one already established.¶ FRAME_ENCODING_ERROR (0x07): An endpoint received a frame that was badly formatted -- for instance, a frame of an unknown type or an ACK frame that has more acknowledgment ranges than the remainder of the packet could carry.¶ TRANSPORT_PARAMETER_ERROR (0x08): An endpoint received transport parameters that were badly formatted, included an invalid value, omitted a mandatory transport parameter, included a forbidden transport parameter, or were otherwise in error.¶ CONNECTION_ID_LIMIT_ERROR (0x09): The number of connection IDs provided by the peer exceeds the advertised active_connection_id_limit.¶ PROTOCOL_VIOLATION (0x0a): An endpoint detected an error with protocol compliance that was not covered by more specific error codes.¶ INVALID_TOKEN (0x0b): A server received a client Initial that contained an invalid Token field.¶ APPLICATION_ERROR (0x0c): The application or application protocol caused the connection to be closed.¶ CRYPTO_BUFFER_EXCEEDED (0x0d): An endpoint has received more data in CRYPTO frames than it can buffer.¶ KEY_UPDATE_ERROR (0x0e): An endpoint detected errors in performing key updates; see Section 6 of [QUIC-TLS].¶ AEAD_LIMIT_REACHED (0x0f): An endpoint has reached the confidentiality or integrity limit for the AEAD algorithm used by the given connection.¶ NO_VIABLE_PATH (0x10): An endpoint has determined that the network path is incapable of supporting QUIC. An endpoint is unlikely to receive a CONNECTION_CLOSE frame carrying this code except when the path does not support a large enough MTU.¶ CRYPTO_ERROR (0x0100-0x01ff): The cryptographic handshake failed. A range of 256 values is reserved for carrying error codes specific to the cryptographic handshake that is used. Codes for errors occurring when TLS is used for the cryptographic handshake are described in Section 4.8 of [QUIC-TLS].¶ See Section 22.5 for details on registering new error codes.¶ In defining these error codes, several principles are applied. Error conditions that might require specific action on the part of a recipient are given unique codes. Errors that represent common conditions are given specific codes. Absent either of these conditions, error codes are used to identify a general function of the stack, like flow control or transport parameter handling. Finally, generic errors are provided for conditions where implementations are unable or unwilling to use more specific codes.¶ 20.2. Application Protocol Error Codes The management of application error codes is left to application protocols. Application protocol error codes are used for the RESET_STREAM frame (Section 19.4), the STOP_SENDING frame (Section 19.5), and the CONNECTION_CLOSE frame with a type of 0x1d (Section 19.19).¶ 21. Security Considerations The goal of QUIC is to provide a secure transport connection. Section 21.1 provides an overview of those properties; subsequent sections discuss constraints and caveats regarding these properties, including descriptions of known attacks and countermeasures.¶ 21.1. Overview of Security Properties A complete security analysis of QUIC is outside the scope of this document. This section provides an informal description of the desired security properties as an aid to implementers and to help guide protocol analysis.¶ QUIC assumes the threat model described in [SEC-CONS] and provides protections against many of the attacks that arise from that model.¶ For this purpose, attacks are divided into passive and active attacks. Passive attackers have the ability to read packets from the network, while active attackers also have the ability to write packets into the network. However, a passive attack could involve an attacker with the ability to cause a routing change or other modification in the path taken by packets that comprise a connection.¶ Attackers are additionally categorized as either on-path attackers or off-path attackers. An on-path attacker can read, modify, or remove any packet it observes such that the packet no longer reaches its destination, while an off-path attacker observes the packets but cannot prevent the original packet from reaching its intended destination. Both types of attackers can also transmit arbitrary packets. This definition differs from that of Section 3.5 of [SEC-CONS] in that an off-path attacker is able to observe packets.¶ Properties of the handshake, protected packets, and connection migration are considered separately.¶ 21.1.1. Handshake The QUIC handshake incorporates the TLS 1.3 handshake and inherits the cryptographic properties described in Appendix E.1 of [TLS13]. Many of the security properties of QUIC depend on the TLS handshake providing these properties. Any attack on the TLS handshake could affect QUIC.¶ Any attack on the TLS handshake that compromises the secrecy or uniqueness of session keys, or the authentication of the participating peers, affects other security guarantees provided by QUIC that depend on those keys. For instance, migration (Section 9) depends on the efficacy of confidentiality protections, both for the negotiation of keys using the TLS handshake and for QUIC packet protection, to avoid linkability across network paths.¶ An attack on the integrity of the TLS handshake might allow an attacker to affect the selection of application protocol or QUIC version.¶ In addition to the properties provided by TLS, the QUIC handshake provides some defense against DoS attacks on the handshake.¶ 21.1.1.1. Anti-Amplification Address validation (Section 8) is used to verify that an entity that claims a given address is able to receive packets at that address. Address validation limits amplification attack targets to addresses for which an attacker can observe packets.¶ Prior to address validation, endpoints are limited in what they are able to send. Endpoints cannot send data toward an unvalidated address in excess of three times the data received from that address.¶ Note: The anti-amplification limit only applies when an endpoint responds to packets received from an unvalidated address. The anti-amplification limit does not apply to clients when establishing a new connection or when initiating connection migration.¶ 21.1.1.2. Server-Side DoS Computing the server's first flight for a full handshake is potentially expensive, requiring both a signature and a key exchange computation. In order to prevent computational DoS attacks, the Retry packet provides a cheap token exchange mechanism that allows servers to validate a client's IP address prior to doing any expensive computations at the cost of a single round trip. After a successful handshake, servers can issue new tokens to a client, which will allow new connection establishment without incurring this cost.¶ 21.1.1.3. On-Path Handshake Termination An on-path or off-path attacker can force a handshake to fail by replacing or racing Initial packets. Once valid Initial packets have been exchanged, subsequent Handshake packets are protected with the Handshake keys, and an on-path attacker cannot force handshake failure other than by dropping packets to cause endpoints to abandon the attempt.¶ An on-path attacker can also replace the addresses of packets on either side and therefore cause the client or server to have an incorrect view of the remote addresses. Such an attack is indistinguishable from the functions performed by a NAT.¶ 21.1.1.4. Parameter Negotiation The entire handshake is cryptographically protected, with the Initial packets being encrypted with per-version keys and the Handshake and later packets being encrypted with keys derived from the TLS key exchange. Further, parameter negotiation is folded into the TLS transcript and thus provides the same integrity guarantees as ordinary TLS negotiation. An attacker can observe the client's transport parameters (as long as it knows the version-specific salt) but cannot observe the server's transport parameters and cannot influence parameter negotiation.¶ Connection IDs are unencrypted but integrity protected in all packets.¶ This version of QUIC does not incorporate a version negotiation mechanism; implementations of incompatible versions will simply fail to establish a connection.¶ 21.1.2. Protected Packets Packet protection (Section 12.1) applies authenticated encryption to all packets except Version Negotiation packets, though Initial and Retry packets have limited protection due to the use of version-specific keying material; see [QUIC-TLS] for more details. This section considers passive and active attacks against protected packets.¶ Both on-path and off-path attackers can mount a passive attack in which they save observed packets for an offline attack against packet protection at a future time; this is true for any observer of any packet on any network.¶ An attacker that injects packets without being able to observe valid packets for a connection is unlikely to be successful, since packet protection ensures that valid packets are only generated by endpoints that possess the key material established during the handshake; see Sections 7 and 21.1.1. Similarly, any active attacker that observes packets and attempts to insert new data or modify existing data in those packets should not be able to generate packets deemed valid by the receiving endpoint, other than Initial packets.¶ A spoofing attack, in which an active attacker rewrites unprotected parts of a packet that it forwards or injects, such as the source or destination address, is only effective if the attacker can forward packets to the original endpoint. Packet protection ensures that the packet payloads can only be processed by the endpoints that completed the handshake, and invalid packets are ignored by those endpoints.¶ An attacker can also modify the boundaries between packets and UDP datagrams, causing multiple packets to be coalesced into a single datagram or splitting coalesced packets into multiple datagrams. Aside from datagrams containing Initial packets, which require padding, modification of how packets are arranged in datagrams has no functional effect on a connection, although it might change some performance characteristics.¶ 21.1.3. Connection Migration Connection migration (Section 9) provides endpoints with the ability to transition between IP addresses and ports on multiple paths, using one path at a time for transmission and receipt of non-probing frames. Path validation (Section 8.2) establishes that a peer is both willing and able to receive packets sent on a particular path. This helps reduce the effects of address spoofing by limiting the number of packets sent to a spoofed address.¶ This section describes the intended security properties of connection migration under various types of DoS attacks.¶ 21.1.3.1. On-Path Active Attacks An attacker that can cause a packet it observes to no longer reach its intended destination is considered an on-path attacker. When an attacker is present between a client and server, endpoints are required to send packets through the attacker to establish connectivity on a given path.¶ An on-path attacker can:¶ Inspect packets¶ Modify IP and UDP packet headers¶ Inject new packets¶ Delay packets¶ Reorder packets¶ Drop packets¶ Split and merge datagrams along packet boundaries¶ An on-path attacker cannot:¶ Modify an authenticated portion of a packet and cause the recipient to accept that packet¶ An on-path attacker has the opportunity to modify the packets that it observes; however, any modifications to an authenticated portion of a packet will cause it to be dropped by the receiving endpoint as invalid, as packet payloads are both authenticated and encrypted.¶ QUIC aims to constrain the capabilities of an on-path attacker as follows:¶ An on-path attacker can prevent the use of a path for a connection, causing the connection to fail if it cannot use a different path that does not contain the attacker. This can be achieved by dropping all packets, modifying them so that they fail to decrypt, or other methods.¶ An on-path attacker can prevent migration to a new path for which the attacker is also on-path by causing path validation to fail on the new path.¶ An on-path attacker cannot prevent a client from migrating to a path for which the attacker is not on-path.¶ An on-path attacker can reduce the throughput of a connection by delaying packets or dropping them.¶ An on-path attacker cannot cause an endpoint to accept a packet for which it has modified an authenticated portion of that packet.¶ 21.1.3.2. Off-Path Active Attacks An off-path attacker is not directly on the path between a client and server but could be able to obtain copies of some or all packets sent between the client and the server. It is also able to send copies of those packets to either endpoint.¶ An off-path attacker can:¶ Inspect packets¶ Inject new packets¶ Reorder injected packets¶ An off-path attacker cannot:¶ Modify packets sent by endpoints¶ Delay packets¶ Drop packets¶ Reorder original packets¶ An off-path attacker can create modified copies of packets that it has observed and inject those copies into the network, potentially with spoofed source and destination addresses.¶ For the purposes of this discussion, it is assumed that an off-path attacker has the ability to inject a modified copy of a packet into the network that will reach the destination endpoint prior to the arrival of the original packet observed by the attacker. In other words, an attacker has the ability to consistently \"win\" a race with the legitimate packets between the endpoints, potentially causing the original packet to be ignored by the recipient.¶ It is also assumed that an attacker has the resources necessary to affect NAT state. In particular, an attacker can cause an endpoint to lose its NAT binding and then obtain the same port for use with its own traffic.¶ QUIC aims to constrain the capabilities of an off-path attacker as follows:¶ An off-path attacker can race packets and attempt to become a \"limited\" on-path attacker.¶ An off-path attacker can cause path validation to succeed for forwarded packets with the source address listed as the off-path attacker as long as it can provide improved connectivity between the client and the server.¶ An off-path attacker cannot cause a connection to close once the handshake has completed.¶ An off-path attacker cannot cause migration to a new path to fail if it cannot observe the new path.¶ An off-path attacker can become a limited on-path attacker during migration to a new path for which it is also an off-path attacker.¶ An off-path attacker can become a limited on-path attacker by affecting shared NAT state such that it sends packets to the server from the same IP address and port that the client originally used.¶ 21.1.3.3. Limited On-Path Active Attacks A limited on-path attacker is an off-path attacker that has offered improved routing of packets by duplicating and forwarding original packets between the server and the client, causing those packets to arrive before the original copies such that the original packets are dropped by the destination endpoint.¶ A limited on-path attacker differs from an on-path attacker in that it is not on the original path between endpoints, and therefore the original packets sent by an endpoint are still reaching their destination. This means that a future failure to route copied packets to the destination faster than their original path will not prevent the original packets from reaching the destination.¶ A limited on-path attacker can:¶ Inspect packets¶ Inject new packets¶ Modify unencrypted packet headers¶ Reorder packets¶ A limited on-path attacker cannot:¶ Delay packets so that they arrive later than packets sent on the original path¶ Drop packets¶ Modify the authenticated and encrypted portion of a packet and cause the recipient to accept that packet¶ A limited on-path attacker can only delay packets up to the point that the original packets arrive before the duplicate packets, meaning that it cannot offer routing with worse latency than the original path. If a limited on-path attacker drops packets, the original copy will still arrive at the destination endpoint.¶ QUIC aims to constrain the capabilities of a limited off-path attacker as follows:¶ A limited on-path attacker cannot cause a connection to close once the handshake has completed.¶ A limited on-path attacker cannot cause an idle connection to close if the client is first to resume activity.¶ A limited on-path attacker can cause an idle connection to be deemed lost if the server is the first to resume activity.¶ Note that these guarantees are the same guarantees provided for any NAT, for the same reasons.¶ 21.2. Handshake Denial of Service As an encrypted and authenticated transport, QUIC provides a range of protections against denial of service. Once the cryptographic handshake is complete, QUIC endpoints discard most packets that are not authenticated, greatly limiting the ability of an attacker to interfere with existing connections.¶ Once a connection is established, QUIC endpoints might accept some unauthenticated ICMP packets (see Section 14.2.1), but the use of these packets is extremely limited. The only other type of packet that an endpoint might accept is a stateless reset (Section 10.3), which relies on the token being kept secret until it is used.¶ During the creation of a connection, QUIC only provides protection against attacks from off the network path. All QUIC packets contain proof that the recipient saw a preceding packet from its peer.¶ Addresses cannot change during the handshake, so endpoints can discard packets that are received on a different network path.¶ The Source and Destination Connection ID fields are the primary means of protection against an off-path attack during the handshake; see Section 8.1. These are required to match those set by a peer. Except for Initial and Stateless Resets, an endpoint only accepts packets that include a Destination Connection ID field that matches a value the endpoint previously chose. This is the only protection offered for Version Negotiation packets.¶ The Destination Connection ID field in an Initial packet is selected by a client to be unpredictable, which serves an additional purpose. The packets that carry the cryptographic handshake are protected with a key that is derived from this connection ID and a salt specific to the QUIC version. This allows endpoints to use the same process for authenticating packets that they receive as they use after the cryptographic handshake completes. Packets that cannot be authenticated are discarded. Protecting packets in this fashion provides a strong assurance that the sender of the packet saw the Initial packet and understood it.¶ These protections are not intended to be effective against an attacker that is able to receive QUIC packets prior to the connection being established. Such an attacker can potentially send packets that will be accepted by QUIC endpoints. This version of QUIC attempts to detect this sort of attack, but it expects that endpoints will fail to establish a connection rather than recovering. For the most part, the cryptographic handshake protocol [QUIC-TLS] is responsible for detecting tampering during the handshake.¶ Endpoints are permitted to use other methods to detect and attempt to recover from interference with the handshake. Invalid packets can be identified and discarded using other methods, but no specific method is mandated in this document.¶ 21.3. Amplification Attack An attacker might be able to receive an address validation token (Section 8) from a server and then release the IP address it used to acquire that token. At a later time, the attacker can initiate a 0-RTT connection with a server by spoofing this same address, which might now address a different (victim) endpoint. The attacker can thus potentially cause the server to send an initial congestion window's worth of data towards the victim.¶ Servers SHOULD provide mitigations for this attack by limiting the usage and lifetime of address validation tokens; see Section 8.1.3.¶ 21.4. Optimistic ACK Attack An endpoint that acknowledges packets it has not received might cause a congestion controller to permit sending at rates beyond what the network supports. An endpoint MAY skip packet numbers when sending packets to detect this behavior. An endpoint can then immediately close the connection with a connection error of type PROTOCOL_VIOLATION; see Section 10.2.¶ 21.5. Request Forgery Attacks A request forgery attack occurs where an endpoint causes its peer to issue a request towards a victim, with the request controlled by the endpoint. Request forgery attacks aim to provide an attacker with access to capabilities of its peer that might otherwise be unavailable to the attacker. For a networking protocol, a request forgery attack is often used to exploit any implicit authorization conferred on the peer by the victim due to the peer's location in the network.¶ For request forgery to be effective, an attacker needs to be able to influence what packets the peer sends and where these packets are sent. If an attacker can target a vulnerable service with a controlled payload, that service might perform actions that are attributed to the attacker's peer but are decided by the attacker.¶ For example, cross-site request forgery [CSRF] exploits on the Web cause a client to issue requests that include authorization cookies [COOKIE], allowing one site access to information and actions that are intended to be restricted to a different site.¶ As QUIC runs over UDP, the primary attack modality of concern is one where an attacker can select the address to which its peer sends UDP datagrams and can control some of the unprotected content of those packets. As much of the data sent by QUIC endpoints is protected, this includes control over ciphertext. An attack is successful if an attacker can cause a peer to send a UDP datagram to a host that will perform some action based on content in the datagram.¶ This section discusses ways in which QUIC might be used for request forgery attacks.¶ This section also describes limited countermeasures that can be implemented by QUIC endpoints. These mitigations can be employed unilaterally by a QUIC implementation or deployment, without potential targets for request forgery attacks taking action. However, these countermeasures could be insufficient if UDP-based services do not properly authorize requests.¶ Because the migration attack described in Section 21.5.4 is quite powerful and does not have adequate countermeasures, QUIC server implementations should assume that attackers can cause them to generate arbitrary UDP payloads to arbitrary destinations. QUIC servers SHOULD NOT be deployed in networks that do not deploy ingress filtering [BCP38] and also have inadequately secured UDP endpoints.¶ Although it is not generally possible to ensure that clients are not co-located with vulnerable endpoints, this version of QUIC does not allow servers to migrate, thus preventing spoofed migration attacks on clients. Any future extension that allows server migration MUST also define countermeasures for forgery attacks.¶ 21.5.1. Control Options for Endpoints QUIC offers some opportunities for an attacker to influence or control where its peer sends UDP datagrams:¶ initial connection establishment (Section 7), where a server is able to choose where a client sends datagrams -- for example, by populating DNS records;¶ preferred addresses (Section 9.6), where a server is able to choose where a client sends datagrams;¶ spoofed connection migrations (Section 9.3.1), where a client is able to use source address spoofing to select where a server sends subsequent datagrams; and¶ spoofed packets that cause a server to send a Version Negotiation packet (Section 21.5.5).¶ In all cases, the attacker can cause its peer to send datagrams to a victim that might not understand QUIC. That is, these packets are sent by the peer prior to address validation; see Section 8.¶ Outside of the encrypted portion of packets, QUIC offers an endpoint several options for controlling the content of UDP datagrams that its peer sends. The Destination Connection ID field offers direct control over bytes that appear early in packets sent by the peer; see Section 5.1. The Token field in Initial packets offers a server control over other bytes of Initial packets; see Section 17.2.2.¶ There are no measures in this version of QUIC to prevent indirect control over the encrypted portions of packets. It is necessary to assume that endpoints are able to control the contents of frames that a peer sends, especially those frames that convey application data, such as STREAM frames. Though this depends to some degree on details of the application protocol, some control is possible in many protocol usage contexts. As the attacker has access to packet protection keys, they are likely to be capable of predicting how a peer will encrypt future packets. Successful control over datagram content then only requires that the attacker be able to predict the packet number and placement of frames in packets with some amount of reliability.¶ This section assumes that limiting control over datagram content is not feasible. The focus of the mitigations in subsequent sections is on limiting the ways in which datagrams that are sent prior to address validation can be used for request forgery.¶ 21.5.2. Request Forgery with Client Initial Packets An attacker acting as a server can choose the IP address and port on which it advertises its availability, so Initial packets from clients are assumed to be available for use in this sort of attack. The address validation implicit in the handshake ensures that -- for a new connection -- a client will not send other types of packets to a destination that does not understand QUIC or is not willing to accept a QUIC connection.¶ Initial packet protection (Section 5.2 of [QUIC-TLS]) makes it difficult for servers to control the content of Initial packets sent by clients. A client choosing an unpredictable Destination Connection ID ensures that servers are unable to control any of the encrypted portion of Initial packets from clients.¶ However, the Token field is open to server control and does allow a server to use clients to mount request forgery attacks. The use of tokens provided with the NEW_TOKEN frame (Section 8.1.3) offers the only option for request forgery during connection establishment.¶ Clients, however, are not obligated to use the NEW_TOKEN frame. Request forgery attacks that rely on the Token field can be avoided if clients send an empty Token field when the server address has changed from when the NEW_TOKEN frame was received.¶ Clients could avoid using NEW_TOKEN if the server address changes. However, not including a Token field could adversely affect performance. Servers could rely on NEW_TOKEN to enable the sending of data in excess of the three-times limit on sending data; see Section 8.1. In particular, this affects cases where clients use 0-RTT to request data from servers.¶ Sending a Retry packet (Section 17.2.5) offers a server the option to change the Token field. After sending a Retry, the server can also control the Destination Connection ID field of subsequent Initial packets from the client. This also might allow indirect control over the encrypted content of Initial packets. However, the exchange of a Retry packet validates the server's address, thereby preventing the use of subsequent Initial packets for request forgery.¶ 21.5.3. Request Forgery with Preferred Addresses Servers can specify a preferred address, which clients then migrate to after confirming the handshake; see Section 9.6. The Destination Connection ID field of packets that the client sends to a preferred address can be used for request forgery.¶ A client MUST NOT send non-probing frames to a preferred address prior to validating that address; see Section 8. This greatly reduces the options that a server has to control the encrypted portion of datagrams.¶ This document does not offer any additional countermeasures that are specific to the use of preferred addresses and can be implemented by endpoints. The generic measures described in Section 21.5.6 could be used as further mitigation.¶ 21.5.4. Request Forgery with Spoofed Migration Clients are able to present a spoofed source address as part of an apparent connection migration to cause a server to send datagrams to that address.¶ The Destination Connection ID field in any packets that a server subsequently sends to this spoofed address can be used for request forgery. A client might also be able to influence the ciphertext.¶ A server that only sends probing packets (Section 9.1) to an address prior to address validation provides an attacker with only limited control over the encrypted portion of datagrams. However, particularly for NAT rebinding, this can adversely affect performance. If the server sends frames carrying application data, an attacker might be able to control most of the content of datagrams.¶ This document does not offer specific countermeasures that can be implemented by endpoints, aside from the generic measures described in Section 21.5.6. However, countermeasures for address spoofing at the network level -- in particular, ingress filtering [BCP38] -- are especially effective against attacks that use spoofing and originate from an external network.¶ 21.5.5. Request Forgery with Version Negotiation Clients that are able to present a spoofed source address on a packet can cause a server to send a Version Negotiation packet (Section 17.2.1) to that address.¶ The absence of size restrictions on the connection ID fields for packets of an unknown version increases the amount of data that the client controls from the resulting datagram. The first byte of this packet is not under client control and the next four bytes are zero, but the client is able to control up to 512 bytes starting from the fifth byte.¶ No specific countermeasures are provided for this attack, though generic protections (Section 21.5.6) could apply. In this case, ingress filtering [BCP38] is also effective.¶ 21.5.6. Generic Request Forgery Countermeasures The most effective defense against request forgery attacks is to modify vulnerable services to use strong authentication. However, this is not always something that is within the control of a QUIC deployment. This section outlines some other steps that QUIC endpoints could take unilaterally. These additional steps are all discretionary because, depending on circumstances, they could interfere with or prevent legitimate uses.¶ Services offered over loopback interfaces often lack proper authentication. Endpoints MAY prevent connection attempts or migration to a loopback address. Endpoints SHOULD NOT allow connections or migration to a loopback address if the same service was previously available at a different interface or if the address was provided by a service at a non-loopback address. Endpoints that depend on these capabilities could offer an option to disable these protections.¶ Similarly, endpoints could regard a change in address to a link-local address [RFC4291] or an address in a private-use range [RFC1918] from a global, unique-local [RFC4193], or non-private address as a potential attempt at request forgery. Endpoints could refuse to use these addresses entirely, but that carries a significant risk of interfering with legitimate uses. Endpoints SHOULD NOT refuse to use an address unless they have specific knowledge about the network indicating that sending datagrams to unvalidated addresses in a given range is not safe.¶ Endpoints MAY choose to reduce the risk of request forgery by not including values from NEW_TOKEN frames in Initial packets or by only sending probing frames in packets prior to completing address validation. Note that this does not prevent an attacker from using the Destination Connection ID field for an attack.¶ Endpoints are not expected to have specific information about the location of servers that could be vulnerable targets of a request forgery attack. However, it might be possible over time to identify specific UDP ports that are common targets of attacks or particular patterns in datagrams that are used for attacks. Endpoints MAY choose to avoid sending datagrams to these ports or not send datagrams that match these patterns prior to validating the destination address. Endpoints MAY retire connection IDs containing patterns known to be problematic without using them.¶ Note: Modifying endpoints to apply these protections is more efficient than deploying network-based protections, as endpoints do not need to perform any additional processing when sending to an address that has been validated.¶ 21.6. Slowloris Attacks The attacks commonly known as Slowloris [SLOWLORIS] try to keep many connections to the target endpoint open and hold them open as long as possible. These attacks can be executed against a QUIC endpoint by generating the minimum amount of activity necessary to avoid being closed for inactivity. This might involve sending small amounts of data, gradually opening flow control windows in order to control the sender rate, or manufacturing ACK frames that simulate a high loss rate.¶ QUIC deployments SHOULD provide mitigations for the Slowloris attacks, such as increasing the maximum number of clients the server will allow, limiting the number of connections a single IP address is allowed to make, imposing restrictions on the minimum transfer speed a connection is allowed to have, and restricting the length of time an endpoint is allowed to stay connected.¶ 21.7. Stream Fragmentation and Reassembly Attacks An adversarial sender might intentionally not send portions of the stream data, causing the receiver to commit resources for the unsent data. This could cause a disproportionate receive buffer memory commitment and/or the creation of a large and inefficient data structure at the receiver.¶ An adversarial receiver might intentionally not acknowledge packets containing stream data in an attempt to force the sender to store the unacknowledged stream data for retransmission.¶ The attack on receivers is mitigated if flow control windows correspond to available memory. However, some receivers will overcommit memory and advertise flow control offsets in the aggregate that exceed actual available memory. The overcommitment strategy can lead to better performance when endpoints are well behaved, but renders endpoints vulnerable to the stream fragmentation attack.¶ QUIC deployments SHOULD provide mitigations for stream fragmentation attacks. Mitigations could consist of avoiding overcommitting memory, limiting the size of tracking data structures, delaying reassembly of STREAM frames, implementing heuristics based on the age and duration of reassembly holes, or some combination of these.¶ 21.8. Stream Commitment Attack An adversarial endpoint can open a large number of streams, exhausting state on an endpoint. The adversarial endpoint could repeat the process on a large number of connections, in a manner similar to SYN flooding attacks in TCP.¶ Normally, clients will open streams sequentially, as explained in Section 2.1. However, when several streams are initiated at short intervals, loss or reordering can cause STREAM frames that open streams to be received out of sequence. On receiving a higher-numbered stream ID, a receiver is required to open all intervening streams of the same type; see Section 3.2. Thus, on a new connection, opening stream 4000000 opens 1 million and 1 client-initiated bidirectional streams.¶ The number of active streams is limited by the initial_max_streams_bidi and initial_max_streams_uni transport parameters as updated by any received MAX_STREAMS frames, as explained in Section 4.6. If chosen judiciously, these limits mitigate the effect of the stream commitment attack. However, setting the limit too low could affect performance when applications expect to open a large number of streams.¶ 21.9. Peer Denial of Service QUIC and TLS both contain frames or messages that have legitimate uses in some contexts, but these frames or messages can be abused to cause a peer to expend processing resources without having any observable impact on the state of the connection.¶ Messages can also be used to change and revert state in small or inconsequential ways, such as by sending small increments to flow control limits.¶ If processing costs are disproportionately large in comparison to bandwidth consumption or effect on state, then this could allow a malicious peer to exhaust processing capacity.¶ While there are legitimate uses for all messages, implementations SHOULD track cost of processing relative to progress and treat excessive quantities of any non-productive packets as indicative of an attack. Endpoints MAY respond to this condition with a connection error or by dropping packets.¶ 21.10. Explicit Congestion Notification Attacks An on-path attacker could manipulate the value of ECN fields in the IP header to influence the sender's rate. [RFC3168] discusses manipulations and their effects in more detail.¶ A limited on-path attacker can duplicate and send packets with modified ECN fields to affect the sender's rate. If duplicate packets are discarded by a receiver, an attacker will need to race the duplicate packet against the original to be successful in this attack. Therefore, QUIC endpoints ignore the ECN field in an IP packet unless at least one QUIC packet in that IP packet is successfully processed; see Section 13.4.¶ 21.11. Stateless Reset Oracle Stateless resets create a possible denial-of-service attack analogous to a TCP reset injection. This attack is possible if an attacker is able to cause a stateless reset token to be generated for a connection with a selected connection ID. An attacker that can cause this token to be generated can reset an active connection with the same connection ID.¶ If a packet can be routed to different instances that share a static key -- for example, by changing an IP address or port -- then an attacker can cause the server to send a stateless reset. To defend against this style of denial of service, endpoints that share a static key for stateless resets (see Section 10.3.2) MUST be arranged so that packets with a given connection ID always arrive at an instance that has connection state, unless that connection is no longer active.¶ More generally, servers MUST NOT generate a stateless reset if a connection with the corresponding connection ID could be active on any endpoint using the same static key.¶ In the case of a cluster that uses dynamic load balancing, it is possible that a change in load-balancer configuration could occur while an active instance retains connection state. Even if an instance retains connection state, the change in routing and resulting stateless reset will result in the connection being terminated. If there is no chance of the packet being routed to the correct instance, it is better to send a stateless reset than wait for the connection to time out. However, this is acceptable only if the routing cannot be influenced by an attacker.¶ 21.12. Version Downgrade This document defines QUIC Version Negotiation packets (Section 6), which can be used to negotiate the QUIC version used between two endpoints. However, this document does not specify how this negotiation will be performed between this version and subsequent future versions. In particular, Version Negotiation packets do not contain any mechanism to prevent version downgrade attacks. Future versions of QUIC that use Version Negotiation packets MUST define a mechanism that is robust against version downgrade attacks.¶ 21.13. Targeted Attacks by Routing Deployments should limit the ability of an attacker to target a new connection to a particular server instance. Ideally, routing decisions are made independently of client-selected values, including addresses. Once an instance is selected, a connection ID can be selected so that later packets are routed to the same instance.¶ 21.14. Traffic Analysis The length of QUIC packets can reveal information about the length of the content of those packets. The PADDING frame is provided so that endpoints have some ability to obscure the length of packet content; see Section 19.1.¶ Defeating traffic analysis is challenging and the subject of active research. Length is not the only way that information might leak. Endpoints might also reveal sensitive information through other side channels, such as the timing of packets.¶ 22. IANA Considerations This document establishes several registries for the management of codepoints in QUIC. These registries operate on a common set of policies as defined in Section 22.1.¶ 22.1. Registration Policies for QUIC Registries All QUIC registries allow for both provisional and permanent registration of codepoints. This section documents policies that are common to these registries.¶ 22.1.1. Provisional Registrations Provisional registrations of codepoints are intended to allow for private use and experimentation with extensions to QUIC. Provisional registrations only require the inclusion of the codepoint value and contact information. However, provisional registrations could be reclaimed and reassigned for another purpose.¶ Provisional registrations require Expert Review, as defined in Section 4.5 of [RFC8126]. The designated expert or experts are advised that only registrations for an excessive proportion of remaining codepoint space or the very first unassigned value (see Section 22.1.2) can be rejected.¶ Provisional registrations will include a Date field that indicates when the registration was last updated. A request to update the date on any provisional registration can be made without review from the designated expert(s).¶ All QUIC registries include the following fields to support provisional registration:¶ Value: The assigned codepoint.¶ Status: \"permanent\" or \"provisional\".¶ Specification: A reference to a publicly available specification for the value.¶ Date: The date of the last update to the registration.¶ Change Controller: The entity that is responsible for the definition of the registration.¶ Contact: Contact details for the registrant.¶ Notes: Supplementary notes about the registration.¶ Provisional registrations MAY omit the Specification and Notes fields, plus any additional fields that might be required for a permanent registration. The Date field is not required as part of requesting a registration, as it is set to the date the registration is created or updated.¶ 22.1.2. Selecting Codepoints New requests for codepoints from QUIC registries SHOULD use a randomly selected codepoint that excludes both existing allocations and the first unallocated codepoint in the selected space. Requests for multiple codepoints MAY use a contiguous range. This minimizes the risk that differing semantics are attributed to the same codepoint by different implementations.¶ The use of the first unassigned codepoint is reserved for allocation using the Standards Action policy; see Section 4.9 of [RFC8126]. The early codepoint assignment process [EARLY-ASSIGN] can be used for these values.¶ For codepoints that are encoded in variable-length integers (Section 16), such as frame types, codepoints that encode to four or eight bytes (that is, values 214 and above) SHOULD be used unless the usage is especially sensitive to having a longer encoding.¶ Applications to register codepoints in QUIC registries MAY include a requested codepoint as part of the registration. IANA MUST allocate the selected codepoint if the codepoint is unassigned and the requirements of the registration policy are met.¶ 22.1.3. Reclaiming Provisional Codepoints A request might be made to remove an unused provisional registration from the registry to reclaim space in a registry, or a portion of the registry (such as the 64-16383 range for codepoints that use variable-length encodings). This SHOULD be done only for the codepoints with the earliest recorded date, and entries that have been updated less than a year prior SHOULD NOT be reclaimed.¶ A request to remove a codepoint MUST be reviewed by the designated experts. The experts MUST attempt to determine whether the codepoint is still in use. Experts are advised to contact the listed contacts for the registration, plus as wide a set of protocol implementers as possible in order to determine whether any use of the codepoint is known. The experts are also advised to allow at least four weeks for responses.¶ If any use of the codepoints is identified by this search or a request to update the registration is made, the codepoint MUST NOT be reclaimed. Instead, the date on the registration is updated. A note might be added for the registration recording relevant information that was learned.¶ If no use of the codepoint was identified and no request was made to update the registration, the codepoint MAY be removed from the registry.¶ This review and consultation process also applies to requests to change a provisional registration into a permanent registration, except that the goal is not to determine whether there is no use of the codepoint but to determine that the registration is an accurate representation of any deployed usage.¶ 22.1.4. Permanent Registrations Permanent registrations in QUIC registries use the Specification Required policy (Section 4.6 of [RFC8126]), unless otherwise specified. The designated expert or experts verify that a specification exists and is readily accessible. Experts are encouraged to be biased towards approving registrations unless they are abusive, frivolous, or actively harmful (not merely aesthetically displeasing or architecturally dubious). The creation of a registry MAY specify additional constraints on permanent registrations.¶ The creation of a registry MAY identify a range of codepoints where registrations are governed by a different registration policy. For instance, the \"QUIC Frame Types\" registry (Section 22.4) has a stricter policy for codepoints in the range from 0 to 63.¶ Any stricter requirements for permanent registrations do not prevent provisional registrations for affected codepoints. For instance, a provisional registration for a frame type of 61 could be requested.¶ All registrations made by Standards Track publications MUST be permanent.¶ All registrations in this document are assigned a permanent status and list a change controller of the IETF and a contact of the QUIC Working Group (quic@ietf.org).¶ 22.2. QUIC Versions Registry IANA has added a registry for \"QUIC Versions\" under a \"QUIC\" heading.¶ The \"QUIC Versions\" registry governs a 32-bit space; see Section 15. This registry follows the registration policy from Section 22.1. Permanent registrations in this registry are assigned using the Specification Required policy (Section 4.6 of [RFC8126]).¶ The codepoint of 0x00000001 for the protocol is assigned with permanent status to the protocol defined in this document. The codepoint of 0x00000000 is permanently reserved; the note for this codepoint indicates that this version is reserved for version negotiation.¶ All codepoints that follow the pattern 0x?a?a?a?a are reserved, MUST NOT be assigned by IANA, and MUST NOT appear in the listing of assigned values.¶ 22.3. QUIC Transport Parameters Registry IANA has added a registry for \"QUIC Transport Parameters\" under a \"QUIC\" heading.¶ The \"QUIC Transport Parameters\" registry governs a 62-bit space. This registry follows the registration policy from Section 22.1. Permanent registrations in this registry are assigned using the Specification Required policy (Section 4.6 of [RFC8126]), except for values between 0x00 and 0x3f (in hexadecimal), inclusive, which are assigned using Standards Action or IESG Approval as defined in Sections 4.9 and 4.10 of [RFC8126].¶ In addition to the fields listed in Section 22.1.1, permanent registrations in this registry MUST include the following field:¶ Parameter Name: A short mnemonic for the parameter.¶ The initial contents of this registry are shown in Table 6.¶ Table 6: Initial QUIC Transport Parameters Registry Entries Value Parameter Name Specification 0x00 original_destination_connection_id Section 18.2 0x01 max_idle_timeout Section 18.2 0x02 stateless_reset_token Section 18.2 0x03 max_udp_payload_size Section 18.2 0x04 initial_max_data Section 18.2 0x05 initial_max_stream_data_bidi_local Section 18.2 0x06 initial_max_stream_data_bidi_remote Section 18.2 0x07 initial_max_stream_data_uni Section 18.2 0x08 initial_max_streams_bidi Section 18.2 0x09 initial_max_streams_uni Section 18.2 0x0a ack_delay_exponent Section 18.2 0x0b max_ack_delay Section 18.2 0x0c disable_active_migration Section 18.2 0x0d preferred_address Section 18.2 0x0e active_connection_id_limit Section 18.2 0x0f initial_source_connection_id Section 18.2 0x10 retry_source_connection_id Section 18.2 Each value of the form 31 * N + 27 for integer values of N (that is, 27, 58, 89, ...) are reserved; these values MUST NOT be assigned by IANA and MUST NOT appear in the listing of assigned values.¶ 22.4. QUIC Frame Types Registry IANA has added a registry for \"QUIC Frame Types\" under a \"QUIC\" heading.¶ The \"QUIC Frame Types\" registry governs a 62-bit space. This registry follows the registration policy from Section 22.1. Permanent registrations in this registry are assigned using the Specification Required policy (Section 4.6 of [RFC8126]), except for values between 0x00 and 0x3f (in hexadecimal), inclusive, which are assigned using Standards Action or IESG Approval as defined in Sections 4.9 and 4.10 of [RFC8126].¶ In addition to the fields listed in Section 22.1.1, permanent registrations in this registry MUST include the following field:¶ Frame Type Name: A short mnemonic for the frame type.¶ In addition to the advice in Section 22.1, specifications for new permanent registrations SHOULD describe the means by which an endpoint might determine that it can send the identified type of frame. An accompanying transport parameter registration is expected for most registrations; see Section 22.3. Specifications for permanent registrations also need to describe the format and assigned semantics of any fields in the frame.¶ The initial contents of this registry are tabulated in Table 3. Note that the registry does not include the \"Pkts\" and \"Spec\" columns from Table 3.¶ 22.5. QUIC Transport Error Codes Registry IANA has added a registry for \"QUIC Transport Error Codes\" under a \"QUIC\" heading.¶ The \"QUIC Transport Error Codes\" registry governs a 62-bit space. This space is split into three ranges that are governed by different policies. Permanent registrations in this registry are assigned using the Specification Required policy (Section 4.6 of [RFC8126]), except for values between 0x00 and 0x3f (in hexadecimal), inclusive, which are assigned using Standards Action or IESG Approval as defined in Sections 4.9 and 4.10 of [RFC8126].¶ In addition to the fields listed in Section 22.1.1, permanent registrations in this registry MUST include the following fields:¶ Code: A short mnemonic for the parameter.¶ Description: A brief description of the error code semantics, which MAY be a summary if a specification reference is provided.¶ The initial contents of this registry are shown in Table 7.¶ Table 7: Initial QUIC Transport Error Codes Registry Entries Value Code Description Specification 0x00 NO_ERROR No error Section 20 0x01 INTERNAL_ERROR Implementation error Section 20 0x02 CONNECTION_REFUSED Server refuses a connection Section 20 0x03 FLOW_CONTROL_ERROR Flow control error Section 20 0x04 STREAM_LIMIT_ERROR Too many streams opened Section 20 0x05 STREAM_STATE_ERROR Frame received in invalid stream state Section 20 0x06 FINAL_SIZE_ERROR Change to final size Section 20 0x07 FRAME_ENCODING_ERROR Frame encoding error Section 20 0x08 TRANSPORT_PARAMETER_ERROR Error in transport parameters Section 20 0x09 CONNECTION_ID_LIMIT_ERROR Too many connection IDs received Section 20 0x0a PROTOCOL_VIOLATION Generic protocol violation Section 20 0x0b INVALID_TOKEN Invalid Token received Section 20 0x0c APPLICATION_ERROR Application error Section 20 0x0d CRYPTO_BUFFER_EXCEEDED CRYPTO data buffer overflowed Section 20 0x0e KEY_UPDATE_ERROR Invalid packet protection update Section 20 0x0f AEAD_LIMIT_REACHED Excessive use of packet protection keys Section 20 0x10 NO_VIABLE_PATH No viable network path exists Section 20 0x0100-​0x01ff CRYPTO_ERROR TLS alert code Section 20 23. References 23.1. Normative References [BCP38] Ferguson, P. and D. Senie, \"Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing\", BCP 38, RFC 2827, May 2000. <https://www.rfc-editor.org/info/bcp38> [DPLPMTUD] Fairhurst, G., Jones, T., Tüxen, M., Rüngeler, I., and T. Völker, \"Packetization Layer Path MTU Discovery for Datagram Transports\", RFC 8899, DOI 10.17487/RFC8899, September 2020, <https://www.rfc-editor.org/info/rfc8899>. [EARLY-ASSIGN] Cotton, M., \"Early IANA Allocation of Standards Track Code Points\", BCP 100, RFC 7120, DOI 10.17487/RFC7120, January 2014, <https://www.rfc-editor.org/info/rfc7120>. [IPv4] Postel, J., \"Internet Protocol\", STD 5, RFC 791, DOI 10.17487/RFC0791, September 1981, <https://www.rfc-editor.org/info/rfc791>. [QUIC-INVARIANTS] Thomson, M., \"Version-Independent Properties of QUIC\", RFC 8999, DOI 10.17487/RFC8999, May 2021, <https://www.rfc-editor.org/info/rfc8999>. [QUIC-RECOVERY] Iyengar, J., Ed. and I. Swett, Ed., \"QUIC Loss Detection and Congestion Control\", RFC 9002, DOI 10.17487/RFC9002, May 2021, <https://www.rfc-editor.org/info/rfc9002>. [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., \"Using TLS to Secure QUIC\", RFC 9001, DOI 10.17487/RFC9001, May 2021, <https://www.rfc-editor.org/info/rfc9001>. [RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191, DOI 10.17487/RFC1191, November 1990, <https://www.rfc-editor.org/info/rfc1191>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, DOI 10.17487/RFC3168, September 2001, <https://www.rfc-editor.org/info/rfc3168>. [RFC3629] Yergeau, F., \"UTF-8, a transformation format of ISO 10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November 2003, <https://www.rfc-editor.org/info/rfc3629>. [RFC6437] Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme, \"IPv6 Flow Label Specification\", RFC 6437, DOI 10.17487/RFC6437, November 2011, <https://www.rfc-editor.org/info/rfc6437>. [RFC8085] Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085, March 2017, <https://www.rfc-editor.org/info/rfc8085>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8201] McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed., \"Path MTU Discovery for IP version 6\", STD 87, RFC 8201, DOI 10.17487/RFC8201, July 2017, <https://www.rfc-editor.org/info/rfc8201>. [RFC8311] Black, D., \"Relaxing Restrictions on Explicit Congestion Notification (ECN) Experimentation\", RFC 8311, DOI 10.17487/RFC8311, January 2018, <https://www.rfc-editor.org/info/rfc8311>. [TLS13] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>. [UDP] Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, DOI 10.17487/RFC0768, August 1980, <https://www.rfc-editor.org/info/rfc768>. 23.2. Informative References [AEAD] McGrew, D., \"An Interface and Algorithms for Authenticated Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008, <https://www.rfc-editor.org/info/rfc5116>. [ALPN] Friedl, S., Popov, A., Langley, A., and E. Stephan, \"Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension\", RFC 7301, DOI 10.17487/RFC7301, July 2014, <https://www.rfc-editor.org/info/rfc7301>. [ALTSVC] Nottingham, M., McManus, P., and J. Reschke, \"HTTP Alternative Services\", RFC 7838, DOI 10.17487/RFC7838, April 2016, <https://www.rfc-editor.org/info/rfc7838>. [COOKIE] Barth, A., \"HTTP State Management Mechanism\", RFC 6265, DOI 10.17487/RFC6265, April 2011, <https://www.rfc-editor.org/info/rfc6265>. [CSRF] Barth, A., Jackson, C., and J. Mitchell, \"Robust defenses for cross-site request forgery\", Proceedings of the 15th ACM conference on Computer and communications security - CCS '08, DOI 10.1145/1455770.1455782, 2008, <https://doi.org/10.1145/1455770.1455782>. [EARLY-DESIGN] Roskind, J., \"QUIC: Multiplexed Stream Transport Over UDP\", 2 December 2013, <https://docs.google.com/document/d/1RNHkx_VvKWyWg6Lr8SZ-saqsQx7rFV-ev2jRFUoVD34/edit?usp=sharing>. [GATEWAY] Hätönen, S., Nyrhinen, A., Eggert, L., Strowes, S., Sarolahti, P., and M. Kojo, \"An experimental study of home gateway characteristics\", Proceedings of the 10th ACM SIGCOMM conference on Internet measurement - IMC '10, DOI 10.1145/1879141.1879174, November 2010, <https://doi.org/10.1145/1879141.1879174>. [HTTP2] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>. [IPv6] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>. [QUIC-MANAGEABILITY] Kuehlewind, M. and B. Trammell, \"Manageability of the QUIC Transport Protocol\", Work in Progress, Internet-Draft, draft-ietf-quic-manageability-11, 21 April 2021, <https://tools.ietf.org/html/draft-ietf-quic-manageability-11>. [RANDOM] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <https://www.rfc-editor.org/info/rfc4086>. [RFC1812] Baker, F., Ed., \"Requirements for IP Version 4 Routers\", RFC 1812, DOI 10.17487/RFC1812, June 1995, <https://www.rfc-editor.org/info/rfc1812>. [RFC1918] Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G. J., and E. Lear, \"Address Allocation for Private Internets\", BCP 5, RFC 1918, DOI 10.17487/RFC1918, February 1996, <https://www.rfc-editor.org/info/rfc1918>. [RFC2018] Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP Selective Acknowledgment Options\", RFC 2018, DOI 10.17487/RFC2018, October 1996, <https://www.rfc-editor.org/info/rfc2018>. [RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, DOI 10.17487/RFC2104, February 1997, <https://www.rfc-editor.org/info/rfc2104>. [RFC3449] Balakrishnan, H., Padmanabhan, V., Fairhurst, G., and M. Sooriyabandara, \"TCP Performance Implications of Network Path Asymmetry\", BCP 69, RFC 3449, DOI 10.17487/RFC3449, December 2002, <https://www.rfc-editor.org/info/rfc3449>. [RFC4193] Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast Addresses\", RFC 4193, DOI 10.17487/RFC4193, October 2005, <https://www.rfc-editor.org/info/rfc4193>. [RFC4291] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 4291, DOI 10.17487/RFC4291, February 2006, <https://www.rfc-editor.org/info/rfc4291>. [RFC4443] Conta, A., Deering, S., and M. Gupta, Ed., \"Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification\", STD 89, RFC 4443, DOI 10.17487/RFC4443, March 2006, <https://www.rfc-editor.org/info/rfc4443>. [RFC4787] Audet, F., Ed. and C. Jennings, \"Network Address Translation (NAT) Behavioral Requirements for Unicast UDP\", BCP 127, RFC 4787, DOI 10.17487/RFC4787, January 2007, <https://www.rfc-editor.org/info/rfc4787>. [RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>. [RFC5869] Krawczyk, H. and P. Eronen, \"HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\", RFC 5869, DOI 10.17487/RFC5869, May 2010, <https://www.rfc-editor.org/info/rfc5869>. [RFC7983] Petit-Huguenin, M. and G. Salgueiro, \"Multiplexing Scheme Updates for Secure Real-time Transport Protocol (SRTP) Extension for Datagram Transport Layer Security (DTLS)\", RFC 7983, DOI 10.17487/RFC7983, September 2016, <https://www.rfc-editor.org/info/rfc7983>. [RFC8087] Fairhurst, G. and M. Welzl, \"The Benefits of Using Explicit Congestion Notification (ECN)\", RFC 8087, DOI 10.17487/RFC8087, March 2017, <https://www.rfc-editor.org/info/rfc8087>. [RFC8981] Gont, F., Krishnan, S., Narten, T., and R. Draves, \"Temporary Address Extensions for Stateless Address Autoconfiguration in IPv6\", RFC 8981, DOI 10.17487/RFC8981, February 2021, <https://www.rfc-editor.org/info/rfc8981>. [SEC-CONS] Rescorla, E. and B. Korver, \"Guidelines for Writing RFC Text on Security Considerations\", BCP 72, RFC 3552, DOI 10.17487/RFC3552, July 2003, <https://www.rfc-editor.org/info/rfc3552>. [SLOWLORIS] \"RSnake\" Hansen, R., \"Welcome to Slowloris - the low bandwidth, yet greedy and poisonous HTTP client!\", June 2009, <https://web.archive.org/web/20150315054838/http://ha.ckers.org/slowloris/>. Appendix A. Pseudocode The pseudocode in this section describes sample algorithms. These algorithms are intended to be correct and clear, rather than being optimally performant.¶ The pseudocode segments in this section are licensed as Code Components; see the Copyright Notice.¶ A.1. Sample Variable-Length Integer Decoding The pseudocode in Figure 45 shows how a variable-length integer can be read from a stream of bytes. The function ReadVarint takes a single argument -- a sequence of bytes, which can be read in network byte order.¶ ReadVarint(data): // The length of variable-length integers is encoded in the // first two bits of the first byte. v = data.next_byte() prefix = v >> 6 length = 1 << prefix // Once the length is known, remove these bits and read any // remaining bytes. v = v & 0x3f repeat length-1 times: v = (v << 8) + data.next_byte() return v Figure 45: Sample Variable-Length Integer Decoding Algorithm For example, the eight-byte sequence 0xc2197c5eff14e88c decodes to the decimal value 151,288,809,941,952,652; the four-byte sequence 0x9d7f3e7d decodes to 494,878,333; the two-byte sequence 0x7bbd decodes to 15,293; and the single byte 0x25 decodes to 37 (as does the two-byte sequence 0x4025).¶ A.2. Sample Packet Number Encoding Algorithm The pseudocode in Figure 46 shows how an implementation can select an appropriate size for packet number encodings.¶ The EncodePacketNumber function takes two arguments:¶ full_pn is the full packet number of the packet being sent.¶ largest_acked is the largest packet number that has been acknowledged by the peer in the current packet number space, if any.¶ EncodePacketNumber(full_pn, largest_acked): // The number of bits must be at least one more // than the base-2 logarithm of the number of contiguous // unacknowledged packet numbers, including the new packet. if largest_acked is None: num_unacked = full_pn + 1 else: num_unacked = full_pn - largest_acked min_bits = log(num_unacked, 2) + 1 num_bytes = ceil(min_bits / 8) // Encode the integer value and truncate to // the num_bytes least significant bytes. return encode(full_pn, num_bytes) Figure 46: Sample Packet Number Encoding Algorithm For example, if an endpoint has received an acknowledgment for packet 0xabe8b3 and is sending a packet with a number of 0xac5c02, there are 29,519 (0x734f) outstanding packet numbers. In order to represent at least twice this range (59,038 packets, or 0xe69e), 16 bits are required.¶ In the same state, sending a packet with a number of 0xace8fe uses the 24-bit encoding, because at least 18 bits are required to represent twice the range (131,222 packets, or 0x020096).¶ A.3. Sample Packet Number Decoding Algorithm The pseudocode in Figure 47 includes an example algorithm for decoding packet numbers after header protection has been removed.¶ The DecodePacketNumber function takes three arguments:¶ largest_pn is the largest packet number that has been successfully processed in the current packet number space.¶ truncated_pn is the value of the Packet Number field.¶ pn_nbits is the number of bits in the Packet Number field (8, 16, 24, or 32).¶ DecodePacketNumber(largest_pn, truncated_pn, pn_nbits): expected_pn = largest_pn + 1 pn_win = 1 << pn_nbits pn_hwin = pn_win / 2 pn_mask = pn_win - 1 // The incoming packet number should be greater than // expected_pn - pn_hwin and less than or equal to // expected_pn + pn_hwin // // This means we cannot just strip the trailing bits from // expected_pn and add the truncated_pn because that might // yield a value outside the window. // // The following code calculates a candidate value and // makes sure it's within the packet number window. // Note the extra checks to prevent overflow and underflow. candidate_pn = (expected_pn & ~pn_mask) | truncated_pn if candidate_pn <= expected_pn - pn_hwin and candidate_pn < (1 << 62) - pn_win: return candidate_pn + pn_win if candidate_pn > expected_pn + pn_hwin and candidate_pn >= pn_win: return candidate_pn - pn_win return candidate_pn Figure 47: Sample Packet Number Decoding Algorithm For example, if the highest successfully authenticated packet had a packet number of 0xa82f30ea, then a packet containing a 16-bit value of 0x9b32 will be decoded as 0xa82f9b32.¶ A.4. Sample ECN Validation Algorithm Each time an endpoint commences sending on a new network path, it determines whether the path supports ECN; see Section 13.4. If the path supports ECN, the goal is to use ECN. Endpoints might also periodically reassess a path that was determined to not support ECN.¶ This section describes one method for testing new paths. This algorithm is intended to show how a path might be tested for ECN support. Endpoints can implement different methods.¶ The path is assigned an ECN state that is one of \"testing\", \"unknown\", \"failed\", or \"capable\". On paths with a \"testing\" or \"capable\" state, the endpoint sends packets with an ECT marking -- ECT(0) by default; otherwise, the endpoint sends unmarked packets.¶ To start testing a path, the ECN state is set to \"testing\", and existing ECN counts are remembered as a baseline.¶ The testing period runs for a number of packets or a limited time, as determined by the endpoint. The goal is not to limit the duration of the testing period but to ensure that enough marked packets are sent for received ECN counts to provide a clear indication of how the path treats marked packets. Section 13.4.2 suggests limiting this to ten packets or three times the PTO.¶ After the testing period ends, the ECN state for the path becomes \"unknown\". From the \"unknown\" state, successful validation of the ECN counts in an ACK frame (see Section 13.4.2.1) causes the ECN state for the path to become \"capable\", unless no marked packet has been acknowledged.¶ If validation of ECN counts fails at any time, the ECN state for the affected path becomes \"failed\". An endpoint can also mark the ECN state for a path as \"failed\" if marked packets are all declared lost or if they are all ECN-CE marked.¶ Following this algorithm ensures that ECN is rarely disabled for paths that properly support ECN. Any path that incorrectly modifies markings will cause ECN to be disabled. For those rare cases where marked packets are discarded by the path, the short duration of the testing period limits the number of losses incurred.¶ Contributors The original design and rationale behind this protocol draw significantly from work by Jim Roskind [EARLY-DESIGN].¶ The IETF QUIC Working Group received an enormous amount of support from many people. The following people provided substantive contributions to this document:¶ Alessandro Ghedini¶ Alyssa Wilk¶ Antoine Delignat-Lavaud¶ Brian Trammell¶ Christian Huitema¶ Colin Perkins¶ David Schinazi¶ Dmitri Tikhonov¶ Eric Kinnear¶ Eric Rescorla¶ Gorry Fairhurst¶ Ian Swett¶ Igor Lubashev¶ 奥 一穂 (Kazuho Oku)¶ Lars Eggert¶ Lucas Pardue¶ Magnus Westerlund¶ Marten Seemann¶ Martin Duke¶ Mike Bishop¶ Mikkel Fahnøe Jørgensen¶ Mirja Kühlewind¶ Nick Banks¶ Nick Harper¶ Patrick McManus¶ Roberto Peon¶ Ryan Hamilton¶ Subodh Iyengar¶ Tatsuhiro Tsujikawa¶ Ted Hardie¶ Tom Jones¶ Victor Vasiliev¶ Authors' Addresses Jana Iyengar (editor) Fastly Email: jri.ietf@gmail.com Martin Thomson (editor) Mozilla Email: mt@lowentropy.net"
    },
    {
        "Number": "9006",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "TCP Usage Guidance in the Internet of Things (IoT)",
        "Authors": [
            "C. Gomez",
            "J. Crowcroft",
            "M. Scharf"
        ],
        "Date": "2021-03",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document provides guidance on how to implement and use the Transmission Control Protocol (TCP) in Constrained-Node Networks (CNNs), which are a characteristic of the Internet of Things (IoT). Such environments require a lightweight TCP implementation and may not make use of optional functionality. This document explains a number of known and deployed techniques to simplify a TCP stack as well as corresponding trade-offs. The objective is to help embedded developers with decisions on which TCP features to use.",
        "Keywords": [
            "constrained node networks",
            "CNNs",
            "HTTP",
            "CoAP",
            "MQTT",
            "6LoWPAN",
            "6Lo",
            "IEEE 802.15.4",
            "Bluetooth Low Energy",
            "Contiki",
            "uIP"
        ],
        "Content": "RFC 9006: TCP Usage Guidance in the Internet of Things (IoT) RFC 9006 TCP in IoT March 2021 Gomez, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9006 Category: Informational Published: March 2021 ISSN: 2070-1721 Authors: C. Gomez UPC J. Crowcroft University of Cambridge M. Scharf Hochschule Esslingen RFC 9006 TCP Usage Guidance in the Internet of Things (IoT) Abstract This document provides guidance on how to implement and use the Transmission Control Protocol (TCP) in Constrained-Node Networks (CNNs), which are a characteristic of the Internet of Things (IoT). Such environments require a lightweight TCP implementation and may not make use of optional functionality. This document explains a number of known and deployed techniques to simplify a TCP stack as well as corresponding trade-offs. The objective is to help embedded developers with decisions on which TCP features to use.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9006.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Characteristics of CNNs Relevant for TCP 2.1.  Network and Link Properties 2.2.  Usage Scenarios 2.3.  Communication and Traffic Patterns 3.  TCP Implementation and Configuration in CNNs 3.1.  Addressing Path Properties 3.1.1.  Maximum Segment Size (MSS) 3.1.2.  Explicit Congestion Notification (ECN) 3.1.3.  Explicit Loss Notifications 3.2.  TCP Guidance for Single-MSS Stacks 3.2.1.  Single-MSS Stacks -- Benefits and Issues 3.2.2.  TCP Options for Single-MSS Stacks 3.2.3.  Delayed Acknowledgments for Single-MSS Stacks 3.2.4.  RTO Calculation for Single-MSS Stacks 3.3.  General Recommendations for TCP in CNNs 3.3.1.  Loss Recovery and Congestion/Flow Control 3.3.1.1.  Selective Acknowledgments (SACKs) 3.3.2.  Delayed Acknowledgments 3.3.3.  Initial Window 4.  TCP Usage Recommendations in CNNs 4.1.  TCP Connection Initiation 4.2.  Number of Concurrent Connections 4.3.  TCP Connection Lifetime 5.  Security Considerations 6.  IANA Considerations 7.  References 7.1.  Normative References 7.2.  Informative References Appendix A.  TCP Implementations for Constrained Devices A.1.  uIP A.2.  lwIP A.3.  RIOT A.4.  TinyOS A.5.  FreeRTOS A.6.  uC/OS A.7.  Summary Acknowledgments Authors' Addresses 1. Introduction The Internet Protocol suite is being used for connecting Constrained-Node Networks (CNNs) to the Internet, enabling the so-called Internet of Things (IoT) [RFC7228]. In order to meet the requirements that stem from CNNs, the IETF has produced a suite of new protocols specifically designed for such environments (see, e.g., [RFC8352]). New IETF protocol stack components include the IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) adaptation layer [RFC4944][RFC6282][RFC6775], the IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL) [RFC6550], and the Constrained Application Protocol (CoAP) [RFC7252].¶ As of this writing, the main transport-layer protocols in IP-based IoT scenarios are UDP and TCP. TCP has been criticized, often unfairly, as a protocol that is unsuitable for the IoT. It is true that some TCP features, such as relatively long header size, unsuitability for multicast, and always-confirmed data delivery, are not optimal for IoT scenarios. However, many typical claims on TCP unsuitability for IoT (e.g., a high complexity, connection-oriented approach incompatibility with radio duty-cycling and spurious congestion control activation in wireless links) are not valid, can be solved, or are also found in well-accepted IoT end-to-end reliability mechanisms (see a detailed analysis in [IntComp]).¶ At the application layer, CoAP was developed over UDP [RFC7252]. However, the integration of some CoAP deployments with existing infrastructure is being challenged by middleboxes such as firewalls, which may limit and even block UDP-based communications. This is the main reason why a CoAP over TCP specification has been developed [RFC8323].¶ Other application-layer protocols not specifically designed for CNNs are also being considered for the IoT space. Some examples include HTTP/2 and even HTTP/1.1, both of which run over TCP by default [RFC7230] [RFC7540], and the Extensible Messaging and Presence Protocol (XMPP) [RFC6120]. TCP is also used by non-IETF application-layer protocols in the IoT space such as the Message Queuing Telemetry Transport (MQTT) [MQTT] and its lightweight variants.¶ TCP is a sophisticated transport protocol that includes optional functionality (e.g., TCP options) that may improve performance in some environments. However, many optional TCP extensions require complex logic inside the TCP stack and increase the code size and the memory requirements. Many TCP extensions are not required for interoperability with other standard-compliant TCP endpoints. Given the limited resources on constrained devices, careful selection of optional TCP features can make an implementation more lightweight.¶ This document provides guidance on how to implement and configure TCP and guidance on how applications should use TCP in CNNs. The overarching goal is to offer simple measures to allow for lightweight TCP implementation and suitable operation in such environments. A TCP implementation following the guidance in this document is intended to be compatible with a TCP endpoint that is compliant to the TCP standards, albeit possibly with a lower performance. This implies that such a TCP client would always be able to connect with a standard-compliant TCP server, and a corresponding TCP server would always be able to connect with a standard-compliant TCP client.¶ This document assumes that the reader is familiar with TCP. A comprehensive survey of the TCP standards can be found in RFC 7414 [RFC7414]. Similar guidance regarding the use of TCP in special environments has been published before, e.g., for cellular wireless networks [RFC3481].¶ 2. Characteristics of CNNs Relevant for TCP 2.1. Network and Link Properties CNNs are defined in [RFC7228] as networks whose characteristics are influenced by being composed of a significant portion of constrained nodes. The latter are characterized by significant limitations on processing, memory, and energy resources, among others [RFC7228]. The first two dimensions pose constraints on the complexity and memory footprint of the protocols that constrained nodes can support. The latter requires techniques to save energy, such as radio duty-cycling in wireless devices [RFC8352] and the minimization of the number of messages transmitted/received (and their size).¶ [RFC7228] lists typical network constraints in CNNs, including low achievable bitrate/throughput, high packet loss and high variability of packet loss, highly asymmetric link characteristics, severe penalties for using larger packets, limits on reachability over time, etc. CNNs may use wireless or wired technologies (e.g., Power Line Communication), and the transmission rates are typically low (e.g., below 1 Mbps).¶ For use of TCP, one challenge is that not all technologies in a CNN may be aligned with typical Internet subnetwork design principles [RFC3819]. For instance, constrained nodes often use physical- / link-layer technologies that have been characterized as 'lossy', i.e., exhibit a relatively high bit error rate. Dealing with corruption loss is one of the open issues in the Internet [RFC6077].¶ 2.2. Usage Scenarios There are different deployment and usage scenarios for CNNs. Some CNNs follow the star topology, whereby one or several hosts are linked to a central device that acts as a router connecting the CNN to the Internet. Alternatively, CNNs may also follow the multihop topology [RFC6606].¶ In constrained environments, there can be different types of devices [RFC7228]. For example, there can be devices with a single combined send/receive buffer, a separate send and receive buffer, or a pool of multiple send/receive buffers. In the latter case, it is possible that buffers are also shared for other protocols.¶ One key use case for TCP in CNNs is a model where constrained devices connect to unconstrained servers in the Internet. But it is also possible that both TCP endpoints run on constrained devices. In the first case, communication will possibly traverse a middlebox (e.g., a firewall, NAT, etc.). Figure 1 illustrates such a scenario. Note that the scenario is asymmetric, as the unconstrained device will typically not suffer the severe constraints of the constrained device. The unconstrained device is expected to be mains-powered, have a high amount of memory and processing power, and be connected to a resource-rich network.¶ Assuming that a majority of constrained devices will correspond to sensor nodes, the amount of data traffic sent by constrained devices (e.g., sensor node measurements) is expected to be higher than the amount of data traffic in the opposite direction. Nevertheless, constrained devices may receive requests (to which they may respond), commands (for configuration purposes and for constrained devices including actuators), and relatively infrequent firmware/software updates.¶ +---------------+ o o <-------- TCP communication -----> | | o o | | o o | Unconstrained | o o +-----------+ | device | o o o ------ | Middlebox | ------- | | o o +-----------+ | (e.g., cloud) | o o o | | +---------------+ Constrained devices Figure 1: TCP Communication between a Constrained Device and an Unconstrained Device, Traversing a Middlebox 2.3. Communication and Traffic Patterns IoT applications are characterized by a number of different communication patterns. The following non-comprehensive list explains some typical examples:¶ Unidirectional transfers: An IoT device (e.g., a sensor) can (repeatedly) send updates to the other endpoint. There is not always a need for an application response back to the IoT device.¶ Request-response patterns: An IoT device receiving a request from the other endpoint, which triggers a response from the IoT device.¶ Bulk data transfers: A typical example for a long file transfer would be an IoT device firmware update.¶ A typical communication pattern is that a constrained device communicates with an unconstrained device (cf. Figure 1). But it is also possible that constrained devices communicate amongst themselves.¶ 3. TCP Implementation and Configuration in CNNs This section explains how a TCP stack can deal with typical constraints in CNN. The guidance in this section relates to the TCP implementation and its configuration.¶ 3.1. Addressing Path Properties 3.1.1. Maximum Segment Size (MSS) Assuming that IPv6 is used, and for the sake of lightweight implementation and operation, unless applications require handling large data units (i.e., leading to an IPv6 datagram size greater than 1280 bytes), it may be desirable to limit the IP datagram size to 1280 bytes in order to avoid the need to support Path MTU Discovery [RFC8201]. In addition, an IP datagram size of 1280 bytes avoids incurring IPv6-layer fragmentation [RFC8900].¶ An IPv6 datagram size exceeding 1280 bytes can be avoided by setting the TCP MSS to 1220 bytes or less. Note that it is already a requirement for TCP implementations to consume payload space instead of increasing datagram size when including IP or TCP options in an IP packet to be sent [RFC6691]. Therefore, it is not required to advertise an MSS smaller than 1220 bytes in order to accommodate TCP options.¶ Note that setting the MTU to 1280 bytes is possible for link-layer technologies in the CNN space, even if some of them are characterized by a short data unit payload size, e.g., up to a few tens or hundreds of bytes. For example, the maximum frame size in IEEE 802.15.4 is 127 bytes. 6LoWPAN defined an adaptation layer to support IPv6 over IEEE 802.15.4 networks. The adaptation layer includes a fragmentation mechanism, since IPv6 requires the layer below to support an MTU of 1280 bytes [RFC8200], while IEEE 802.15.4 lacks fragmentation mechanisms. 6LoWPAN defines an IEEE 802.15.4 link MTU of 1280 bytes [RFC4944]. Other technologies, such as Bluetooth low energy [RFC7668], ITU-T G.9959 [RFC7428], or Digital Enhanced Cordless Telecommunications (DECT) Ultra Low Energy (ULE) [RFC8105], also use 6LoWPAN-based adaptation layers in order to enable IPv6 support. These technologies do support link-layer fragmentation. By exploiting this functionality, the adaptation layers that enable IPv6 over such technologies also define an MTU of 1280 bytes.¶ On the other hand, there exist technologies also used in the CNN space, such as Master Slave (MS) / Token Passing (TP) [RFC8163], Narrowband IoT (NB-IoT) [RFC8376], or IEEE 802.11ah [6LO-WLANAH], that do not suffer the same degree of frame size limitations as the technologies mentioned above. It is recommended that the MTU for MS/TP be 1500 bytes [RFC8163]; the MTU in NB-IoT is 1600 bytes, and the maximum frame payload size for IEEE 802.11ah is 7991 bytes.¶ Using a larger MSS (to a suitable extent) may be beneficial in some scenarios, especially when transferring large payloads, as it reduces the number of packets (and packet headers) required for a given payload. However, the characteristics of the constrained network need to be considered. In particular, in a lossy network where unreliable fragment delivery is used, the amount of data that TCP unnecessarily retransmits due to fragment loss increases (and throughput decreases) quickly with the MSS. This happens because the loss of a fragment leads to the loss of the whole fragmented packet being transmitted. Unnecessary data retransmission is particularly harmful in CNNs due to the resource constraints of such environments. Note that, while the original 6LoWPAN fragmentation mechanism [RFC4944] does not offer reliable fragment delivery, fragment recovery functionality for 6LoWPAN or 6Lo environments has been standardized [RFC8931].¶ 3.1.2. Explicit Congestion Notification (ECN) ECN [RFC3168] allows a router to signal in the IP header of a packet that congestion is rising, for example, when a queue size reaches a certain threshold. An ECN-enabled TCP receiver will echo back the congestion signal to the TCP sender by setting a flag in its next TCP Acknowledgment (ACK). The sender triggers congestion control measures as if a packet loss had happened.¶ RFC 8087 [RFC8087] outlines the principal gains in terms of increased throughput, reduced delay, and other benefits when ECN is used over a network path that includes equipment that supports Congestion Experienced (CE) marking. In the context of CNNs, a remarkable feature of ECN is that congestion can be signaled without incurring packet drops (which will lead to retransmissions and consumption of limited resources such as energy and bandwidth).¶ ECN can further reduce packet losses since congestion control measures can be applied earlier [RFC2884]. Fewer lost packets implies that the number of retransmitted segments decreases, which is particularly beneficial in CNNs, where energy and bandwidth resources are typically limited. Also, it makes sense to try to avoid packet drops for transactional workloads with small data sizes, which are typical for CNNs. In such traffic patterns, it is more difficult and often impossible to detect packet loss without retransmission timeouts (e.g., as there may not be three duplicate ACKs). Any retransmission timeout slows down the data transfer significantly. In addition, if the constrained device uses power-saving techniques, a retransmission timeout will incur a wake-up action, in contrast to ACK clock-triggered sending. When the congestion window of a TCP sender has a size of one segment and a TCP ACK with an ECN signal (ECN-Echo (ECE) flag) arrives at the TCP sender, the TCP sender resets the retransmit timer, and the sender will only be able to send a new packet when the retransmit timer expires. Effectively, at that moment, the TCP sender reduces its sending rate from 1 segment per Round-Trip Time (RTT) to 1 segment per Retransmission Timeout (RTO) and reduces the sending rate further on each ECN signal received in subsequent TCP ACKs. Otherwise, if an ECN signal is not present in a subsequent TCP ACK, the TCP sender resumes the normal ACK-clocked transmission of segments [RFC3168].¶ ECN can be incrementally deployed in the Internet. Guidance on configuration and usage of ECN is provided in RFC 7567 [RFC7567]. Given the benefits, more and more TCP stacks in the Internet support ECN, and it makes sense to specifically leverage ECN in controlled environments such as CNNs. As of this writing, there is ongoing work to extend the types of TCP packets that are ECN capable, including pure ACKs [TCPM-ECN]. Such a feature may further increase the benefits of ECN in CNN environments. Note, however, that supporting ECN increases implementation complexity.¶ 3.1.3. Explicit Loss Notifications There has been a significant body of research on solutions capable of explicitly indicating whether a TCP segment loss is due to corruption, in order to avoid activation of congestion control mechanisms [ETEN] [RFC2757]. While such solutions may provide significant improvement, they have not been widely deployed and remain as experimental work. In fact, as of today, the IETF has not standardized any such solution.¶ 3.2. TCP Guidance for Single-MSS Stacks This section discusses TCP stacks that allow transferring a single MSS. More general guidance is provided in Section 3.3.¶ 3.2.1. Single-MSS Stacks -- Benefits and Issues A TCP stack can reduce the memory requirements by advertising a TCP window size of 1 MSS and also transmit, at most, 1 MSS of unacknowledged data. In that case, both congestion and flow control implementation are quite simple. Such a small receive and send window may be sufficient for simple message exchanges in the CNN space. However, only using a window of 1 MSS can significantly affect performance. A stop-and-wait operation results in low throughput for transfers that exceed the length of 1 MSS, e.g., a firmware download. Furthermore, a single-MSS solution relies solely on timer-based loss recovery, therefore missing the performance gain of Fast Retransmit and Fast Recovery (which requires a larger window size; see Section 3.3.1).¶ If CoAP is used over TCP with the default setting for NSTART in RFC 7252 [RFC7252], a CoAP endpoint is not allowed to send a new message to a destination until a response for the previous message sent to that destination has been received. This is equivalent to an application-layer window size of 1 data unit. For this use of CoAP, a maximum TCP window of 1 MSS may be sufficient, as long as the CoAP message size does not exceed 1 MSS. An exception in CoAP over TCP, though, is the Capabilities and Settings Message (CSM) that must be sent at the start of the TCP connection. The first application message carrying user data is allowed to be sent immediately after the CSM message. If the sum of the CSM size plus the application message size exceeds the MSS, a sender using a single-MSS stack will need to wait for the ACK confirming the CSM before sending the application message.¶ 3.2.2. TCP Options for Single-MSS Stacks A TCP implementation needs to support, at a minimum, TCP options 2, 1, and 0. These are, respectively, the MSS option, the No-Operation option, and the End Of Option List marker [RFC0793]. None of these are a substantial burden to support. These options are sufficient for interoperability with a standard-compliant TCP endpoint, albeit many TCP stacks support additional options and can negotiate their use. A TCP implementation is permitted to silently ignore all other TCP options.¶ A TCP implementation for a constrained device that uses a single-MSS TCP receive or transmit window size may not benefit from supporting the following TCP options: Window Scale [RFC7323], TCP Timestamps [RFC7323], Selective Acknowledgment (SACK) [RFC2018], and SACK-Permitted [RFC2018]. Also, other TCP options may not be required on a constrained device with a very lightweight implementation. With regard to the Window Scale option, note that it is only useful if a window size greater than 64 kB is needed.¶ Note that a TCP sender can benefit from the TCP Timestamps option [RFC7323] in detecting spurious RTOs. The latter are quite likely to occur in CNN scenarios due to a number of reasons (e.g., route changes in a multihop scenario, link-layer retries, etc.). The header overhead incurred by the Timestamps option (of up to 12 bytes) needs to be taken into account.¶ 3.2.3. Delayed Acknowledgments for Single-MSS Stacks TCP Delayed Acknowledgments are meant to reduce the number of ACKs sent within a TCP connection, thus reducing network overhead, but they may increase the time until a sender may receive an ACK. In general, usefulness of Delayed ACKs depends heavily on the usage scenario (see Section 3.3.2). There can be interactions with single-MSS stacks.¶ When traffic is unidirectional, if the sender can send at most 1 MSS of data or the receiver advertises a receive window not greater than the MSS, Delayed ACKs may unnecessarily contribute delay (up to 500 ms) to the RTT [RFC5681], which limits the throughput and can increase data delivery time. Note that, in some cases, it may not be possible to disable Delayed ACKs. One known workaround is to split the data to be sent into two segments of smaller size. A standard-compliant TCP receiver may immediately acknowledge the second MSS of data, which can improve throughput. However, this \"split hack\" may not always work since a TCP receiver is required to acknowledge every second full-sized segment, but not two consecutive small segments. The overhead of sending two IP packets instead of one is another downside of the \"split hack\".¶ Similar issues may happen when the sender uses the Nagle algorithm, since the sender may need to wait for an unnecessarily Delayed ACK to send a new segment. Disabling the algorithm will not have impact if the sender can only handle stop-and-wait operation at the TCP level.¶ For request-response traffic, when the receiver uses Delayed ACKs, a response to a data message can piggyback an ACK, as long as the latter is sent before the Delayed ACK timer expires, thus avoiding unnecessary ACKs without payload. Disabling Delayed ACKs at the request sender allows an immediate ACK for the data segment carrying the response.¶ 3.2.4. RTO Calculation for Single-MSS Stacks The RTO calculation is one of the fundamental TCP algorithms [RFC6298]. There is a fundamental trade-off: a short, aggressive RTO behavior reduces wait time before retransmissions, but it also increases the probability of spurious timeouts. The latter leads to unnecessary waste of potentially scarce resources in CNNs such as energy and bandwidth. In contrast, a conservative timeout can result in long error recovery times and, thus, needlessly delay data delivery.¶ If a TCP sender uses a very small window size, and it cannot benefit from Fast Retransmit and Fast Recovery or SACK, the RTO algorithm has a large impact on performance. In that case, RTO algorithm tuning may be considered, although careful assessment of possible drawbacks is recommended [RFC8961].¶ As an example, adaptive RTO algorithms defined for CoAP over UDP have been found to perform well in CNN scenarios [Commag] [CORE-FASOR].¶ 3.3. General Recommendations for TCP in CNNs This section summarizes some widely used techniques to improve TCP, with a focus on their use in CNNs. The TCP extensions discussed here are useful in a wide range of network scenarios, including CNNs. This section is not comprehensive. A comprehensive survey of TCP extensions is published in RFC 7414 [RFC7414].¶ 3.3.1. Loss Recovery and Congestion/Flow Control Devices that have enough memory to allow a larger (i.e., more than 3 MSS of data) TCP window size can leverage a more efficient loss recovery than the timer-based approach used for a smaller TCP window size (see Section 3.2.1) by using Fast Retransmit and Fast Recovery [RFC5681], at the expense of slightly greater complexity and Transmission Control Block (TCB) size. Assuming that Delayed ACKs are used by the receiver, a window size of up to 5 MSS is required for Fast Retransmit and Fast Recovery to work efficiently: in a given TCP transmission of full-sized segments 1, 2, 3, 4, and 5, if segment 2 gets lost, and the ACK for segment 1 is held by the Delayed ACK timer, then the sender should get an ACK for segment 1 when 3 arrives and duplicate ACKs when segments 4, 5, and 6 arrive. It will retransmit segment 2 when the third duplicate ACK arrives. In order to have segments 2, 3, 4, 5, and 6 sent, the window has to be of at least 5 MSS. With an MSS of 1220 bytes, a buffer of a size of 5 MSS would require 6100 bytes.¶ The example in the previous paragraph did not use a further TCP improvement such as Limited Transmit [RFC3042]. The latter may also be useful for any transfer that has more than one segment in flight. Small transfers tend to benefit more from Limited Transmit, because they are more likely to not receive enough duplicate ACKs. Assuming the example in the previous paragraph, Limited Transmit allows sending 5 MSS with a congestion window (cwnd) of three segments, plus two additional segments for the first two duplicate ACKs. With Limited Transmit, even a cwnd of two segments allows sending 5 MSS, at the expense of additional delay contributed by the Delayed ACK timer for the ACK that confirms segment 1.¶ When a multiple-segment window is used, the receiver will need to manage the reception of possible out-of-order received segments, requiring sufficient buffer space. Note that even when a window of 1 MSS is used, out-of-order arrival should also be managed, as the sender may send multiple sub-MSS packets that fit in the window. (On the other hand, the receiver is free to simply drop out-of-order segments, thus forcing retransmissions.)¶ 3.3.1.1. Selective Acknowledgments (SACKs) If a device with less severe memory and processing constraints can afford advertising a TCP window size of several MSSs, it makes sense to support the SACK option to improve performance. SACK allows a data receiver to inform the data sender of non-contiguous data blocks received, thus a sender (having previously sent the SACK-Permitted option) can avoid performing unnecessary retransmissions, saving energy and bandwidth, as well as reducing latency. In addition, SACK often allows for faster loss recovery when there is more than one lost segment in a window of data, since SACK recovery may complete with less RTTs. SACK is particularly useful for bulk data transfers. A receiver supporting SACK will need to keep track of the data blocks that need to be received. The sender will also need to keep track of which data segments need to be resent after learning which data blocks are missing at the receiver. SACK adds 8*n+2 bytes to the TCP header, where n denotes the number of data blocks received, up to four blocks. For a low number of out-of-order segments, the header overhead penalty of SACK is compensated by avoiding unnecessary retransmissions. When the sender discovers the data blocks that have already been received, it needs to also store the necessary state to avoid unnecessary retransmission of data segments that have already been received.¶ 3.3.2. Delayed Acknowledgments For certain traffic patterns, Delayed ACKs may have a detrimental effect, as already noted in Section 3.2.3. Advanced TCP stacks may use heuristics to determine the maximum delay for an ACK. For CNNs, the recommendation depends on the expected communication patterns.¶ When traffic over a CNN is expected mostly to be unidirectional messages with a size typically up to 1 MSS, and the time between two consecutive message transmissions is greater than the Delayed ACK timeout, it may make sense to use a smaller timeout or disable Delayed ACKs at the receiver. This avoids incurring additional delay, as well as the energy consumption of the sender (which might, e.g., keep its radio interface in receive mode) during that time. Note that disabling Delayed ACKs may only be possible if the peer device is administered by the same entity managing the constrained device. For request-response traffic, enabling Delayed ACKs is recommended at the server end, in order to allow combining a response with the ACK into a single segment, thus increasing efficiency. In addition, if a client issues requests infrequently, disabling Delayed ACKs at the client allows an immediate ACK for the data segment carrying the response.¶ In contrast, Delayed ACKs allow for a reduced number of ACKs in bulk transfer types of traffic, e.g., for firmware/software updates or for transferring larger data units containing a batch of sensor readings.¶ Note that, in many scenarios, the peer that a constrained device communicates with will be a general purpose system that communicates with both constrained and unconstrained devices. Since Delayed ACKs are often configured through system-wide parameters, the behavior of Delayed ACKs at the peer will be the same regardless of the nature of the endpoints it talks to. Such a peer will typically have Delayed ACKs enabled.¶ 3.3.3. Initial Window [RFC5681] specifies a TCP Initial Window (IW) of roughly 4 kB. Subsequently, RFC 6928 [RFC6928] defines an experimental new value for the IW, which in practice will result in an IW of 10 MSS. Nowadays, the latter is used in many TCP implementations.¶ Note that a 10-MSS IW was recommended for resource-rich environments (e.g., broadband environments), which are significantly different from CNNs. In CNNs, many application-layer data units are relatively small (e.g., below 1 MSS). However, larger objects (e.g., large files containing sensor readings, firmware updates, etc.) may also need to be transferred in CNNs. If such a large object is transferred in CNNs, with an IW setting of 10 MSS, there is significant buffer overflow risk, since many CNN devices support network or radio buffers of a size smaller than 10 MSS. In order to avoid such a problem, the IW needs to be carefully set in CNNs, based on device and network resource constraints. In many cases, a safe IW setting will be smaller than 10 MSS.¶ 4. TCP Usage Recommendations in CNNs This section discusses how TCP can be used by applications that are developed for CNN scenarios. These remarks are by and large independent of how TCP is exactly implemented.¶ 4.1. TCP Connection Initiation In the scenario of a constrained device to an unconstrained device illustrated above, a TCP connection is typically initiated by the constrained device, in order for the device to support possible sleep periods to save energy.¶ 4.2. Number of Concurrent Connections TCP endpoints with a small amount of memory may only support a small number of connections. Each TCP connection requires storing a number of variables in the TCB. Depending on the internal TCP implementation, each connection may result in further memory overhead, and connections may compete for scarce resources (e.g., further memory overhead for send and receive buffers, etc.).¶ A careful application design may try to keep the number of concurrent connections as small as possible. A client can, for instance, limit the number of simultaneous open connections that it maintains to a given server. Multiple connections could, for instance, be used to avoid the \"head-of-line blocking\" problem in an application transfer. However, in addition to consuming resources, using multiple connections can also cause undesirable side effects in congested networks. For example, the HTTP/1.1 specification encourages clients to be conservative when opening multiple connections [RFC7230]. Furthermore, each new connection will start with a three-way handshake, therefore increasing message overhead.¶ Being conservative when opening multiple TCP connections is of particular importance in Constrained-Node Networks.¶ 4.3. TCP Connection Lifetime In order to minimize message overhead, it makes sense to keep a TCP connection open as long as the two TCP endpoints have more data to send. If applications exchange data rather infrequently, i.e., if TCP connections would stay idle for a long time, the idle time can result in problems. For instance, certain middleboxes such as firewalls or NAT devices are known to delete state records after an inactivity interval. RFC 5382 [RFC5382] specifies a minimum value for such an interval of 124 minutes. Measurement studies have reported that TCP NAT binding timeouts are highly variable across devices, with the median being around 60 minutes, the shortest timeout being around 2 minutes, and more than 50% of the devices with a timeout shorter than the aforementioned minimum timeout of 124 minutes [HomeGateway]. The timeout duration used by a middlebox implementation may not be known to the TCP endpoints.¶ In CNNs, such middleboxes may, e.g., be present at the boundary between the CNN and other networks. If the middlebox can be optimized for CNN use cases, it makes sense to increase the initial value for filter state inactivity timers to avoid problems with idle connections. Apart from that, this problem can be dealt with by different connection-handling strategies, each having pros and cons.¶ One approach for infrequent data transfer is to use short-lived TCP connections. Instead of trying to maintain a TCP connection for a long time, it is possible that short-lived connections can be opened between two endpoints, which are closed if no more data needs to be exchanged. For use cases that can cope with the additional messages and the latency resulting from starting new connections, it is recommended to use a sequence of short-lived connections instead of maintaining a single long-lived connection.¶ The message and latency overhead that stems from using a sequence of short-lived connections could be reduced by TCP Fast Open (TFO) [RFC7413], which is an experimental TCP extension, at the expense of increased implementation complexity and increased TCB size. TFO allows data to be carried in SYN (and SYN-ACK) segments and to be consumed immediately by the receiving endpoint. This reduces the message and latency overhead compared to the traditional three-way handshake to establish a TCP connection. For security reasons, the connection initiator has to request a TFO cookie from the other endpoint. The cookie, with a size of 4 or 16 bytes, is then included in SYN packets of subsequent connections. The cookie needs to be refreshed (and obtained by the client) after a certain amount of time. While a given cookie is used for multiple connections between the same two endpoints, the latter may become vulnerable to privacy threats. In addition, a valid cookie may be stolen from a compromised host and may be used to perform SYN flood attacks, as well as amplified reflection attacks to victim hosts (see Section 5 of [RFC7413]). Nevertheless, TFO is more efficient than frequently opening new TCP connections with the traditional three-way handshake, as long as the cookie can be reused in subsequent connections. However, as stated in [RFC7413], TFO deviates from the standard TCP semantics, since the data in the SYN could be replayed to an application in some rare circumstances. Applications should not use TFO unless they can tolerate this issue, e.g., by using TLS [RFC7413]. A comprehensive discussion on TFO can be found in RFC 7413 [RFC7413].¶ Another approach is to use long-lived TCP connections with application-layer heartbeat messages. Various application protocols support such heartbeat messages (e.g., CoAP over TCP [RFC8323]). Periodic application-layer heartbeats can prevent early filter state record deletion in middleboxes. If the TCP binding timeout for a middlebox to be traversed by a given connection is known, middlebox filter state deletion will be avoided if the heartbeat period is lower than the middlebox TCP binding timeout. Otherwise, the implementer needs to take into account that middlebox TCP binding timeouts fall in a wide range of possible values [HomeGateway], and it may be hard to find a proper heartbeat period for application-layer heartbeat messages.¶ One specific advantage of heartbeat messages is that they also allow liveness checks at the application level. In general, it makes sense to realize liveness checks at the highest protocol layer possible that is meaningful to the application, in order to maximize the depth of the liveness check. In addition, timely detection of a dead peer may allow savings in terms of TCB memory use. However, the transmission of heartbeat messages consumes resources. This aspect needs to be assessed carefully, considering the characteristics of each specific CNN.¶ A TCP implementation may also be able to send \"keep-alive\" segments to test a TCP connection. According to [RFC1122], keep-alives are an optional TCP mechanism that is turned off by default, i.e., an application must explicitly enable it for a TCP connection. The interval between keep-alive messages must be configurable, and it must default to no less than two hours. With this large timeout, TCP keep-alive messages might not always be useful to avoid deletion of filter state records in some middleboxes. However, sending TCP keep-alive probes more frequently risks draining power on energy- constrained devices.¶ 5. Security Considerations Best current practices for securing TCP and TCP-based communication also applies to CNN. As an example, use of TLS [RFC8446] is strongly recommended if it is applicable. However, note that TLS protects only the contents of the data segments.¶ There are TCP options that can actually protect the transport layer. One example is the TCP Authentication Option (TCP-AO) [RFC5925]. However, this option adds overhead and complexity. TCP-AO typically has a size of 16-20 bytes. An implementer needs to asses the trade-off between security and performance when using TCP-AO, considering the characteristics (in terms of energy, bandwidth, and computational power) of the environment where TCP will be used.¶ For the mechanisms discussed in this document, the corresponding considerations apply. For instance, if TFO is used, the security considerations of RFC 7413 [RFC7413] apply.¶ Constrained devices are expected to support smaller TCP window sizes than less-limited devices. In such conditions, segment retransmission triggered by RTO expiration is expected to be relatively frequent, due to lack of (enough) duplicate ACKs, especially when a constrained device uses a single-MSS implementation. For this reason, constrained devices running TCP may appear as particularly appealing victims of the so-called \"shrew\" Denial-of-Service (DoS) attack [SHREW], whereby one or more sources generate a packet spike targeted to coincide with consecutive RTO-expiration-triggered retry attempts of a victim node. Note that the attack may be performed by Internet-connected devices, including constrained devices in the same CNN as the victim, as well as remote ones. Mitigation techniques include RTO randomization and attack blocking by routers able to detect shrew attacks based on their traffic pattern.¶ 6. IANA Considerations This document has no IANA actions.¶ 7. References 7.1. Normative References [RFC0793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, DOI 10.17487/RFC0793, September 1981, <https://www.rfc-editor.org/info/rfc793>. [RFC1122] Braden, R., Ed., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, DOI 10.17487/RFC1122, October 1989, <https://www.rfc-editor.org/info/rfc1122>. [RFC2018] Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP Selective Acknowledgment Options\", RFC 2018, DOI 10.17487/RFC2018, October 1996, <https://www.rfc-editor.org/info/rfc2018>. [RFC3042] Allman, M., Balakrishnan, H., and S. Floyd, \"Enhancing TCP's Loss Recovery Using Limited Transmit\", RFC 3042, DOI 10.17487/RFC3042, January 2001, <https://www.rfc-editor.org/info/rfc3042>. [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, DOI 10.17487/RFC3168, September 2001, <https://www.rfc-editor.org/info/rfc3168>. [RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>. [RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, DOI 10.17487/RFC6298, June 2011, <https://www.rfc-editor.org/info/rfc6298>. [RFC6691] Borman, D., \"TCP Options and Maximum Segment Size (MSS)\", RFC 6691, DOI 10.17487/RFC6691, July 2012, <https://www.rfc-editor.org/info/rfc6691>. [RFC6928] Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis, \"Increasing TCP's Initial Window\", RFC 6928, DOI 10.17487/RFC6928, April 2013, <https://www.rfc-editor.org/info/rfc6928>. [RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>. [RFC7323] Borman, D., Braden, B., Jacobson, V., and R. Scheffenegger, Ed., \"TCP Extensions for High Performance\", RFC 7323, DOI 10.17487/RFC7323, September 2014, <https://www.rfc-editor.org/info/rfc7323>. [RFC7413] Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014, <https://www.rfc-editor.org/info/rfc7413>. [RFC7567] Baker, F., Ed. and G. Fairhurst, Ed., \"IETF Recommendations Regarding Active Queue Management\", BCP 197, RFC 7567, DOI 10.17487/RFC7567, July 2015, <https://www.rfc-editor.org/info/rfc7567>. [RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>. 7.2. Informative References [6LO-WLANAH] Del Carpio Vega, L., Robles, M., and R. Morabito, \"IPv6 over 802.11ah\", Work in Progress, Internet-Draft, draft-delcarpio-6lo-wlanah-01, 19 October 2015, <https://tools.ietf.org/html/draft-delcarpio-6lo-wlanah-01>. [Commag] Betzler, A., Gomez, C., Demirkol, I., and J. Paradells, \"CoAP Congestion Control for the Internet of Things\", IEEE Communications Magazine, Vol. 54, Issue 7, pp. 154-160, DOI 10.1109/MCOM.2016.7509394, July 2016, <https://doi.org/10.1109/MCOM.2016.7509394>. [CORE-FASOR] Jarvinen, I., Kojo, M., Raitahila, I., and Z. Cao, \"Fast-Slow Retransmission Timeout and Congestion Control Algorithm for CoAP\", Work in Progress, Internet-Draft, draft-ietf-core-fasor-01, 19 October 2020, <https://tools.ietf.org/html/draft-ietf-core-fasor-01>. [Dunk] Dunkels, A., \"Full TCP/IP for 8-Bit Architectures\", MobiSys '03, pp. 85-98, DOI 10.1145/1066116.106611, May 2003, <https://doi.org/10.1145/1066116.106611>. [ETEN] Krishnan, R., Sterbenz, J., Eddy, W., and C. Partridge, \"Explicit transport error notification (ETEN) for error-prone wireless and satellite networks\", Computer Networks, DOI 10.1016/j.comnet.2004.06.012, June 2004, <https://doi.org/10.1016/j.comnet.2004.06.012>. [GNRC] Lenders, M., Kietzmann, P., Hahm, O., Petersen, H., Gündoğa, C., Baccelli, E., Schleiser, K., Schmidt, T., and M. Wählisch, \"Connecting the World of Embedded Mobiles: The RIOT Approach to Ubiquitous Networking for the IoT\", arXiv:1801.02833v1 [cs.NI], January 2018. [HomeGateway] Haetoenen, S., Nyrhinen, A., Eggert, L., Strowes, S., Sarolahti, P., and M. Kojo, \"An Experimental Study of Home Gateway Characteristics\", Proceedings of the 10th ACM SIGCOMM conference on Internet measurement, pp. 260-266, DOI 10.1145/1879141.1879174, November 2010, <https://doi.org/10.1145/1879141.1879174>. [IntComp] Gomez, C., Arcia-Moret, A., and J. Crowcroft, \"TCP in the Internet of Things: from Ostracism to Prominence\", IEEE Internet Computing, Vol. 22, Issue 1, pp. 29-41, DOI 10.1109/MIC.2018.112102200, January 2018, <https://doi.org/10.1109/MIC.2018.112102200>. [MQTT] ISO/IEC, \"Information technology -- Message Queuing Telemetry Transport (MQTT) v3.1.1\", ISO/IEC 20922:2016, June 2016. [RFC2757] Montenegro, G., Dawkins, S., Kojo, M., Magret, V., and N. Vaidya, \"Long Thin Networks\", RFC 2757, DOI 10.17487/RFC2757, January 2000, <https://www.rfc-editor.org/info/rfc2757>. [RFC2884] Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of Explicit Congestion Notification (ECN) in IP Networks\", RFC 2884, DOI 10.17487/RFC2884, July 2000, <https://www.rfc-editor.org/info/rfc2884>. [RFC3481] Inamura, H., Ed., Montenegro, G., Ed., Ludwig, R., Gurtov, A., and F. Khafizov, \"TCP over Second (2.5G) and Third (3G) Generation Wireless Networks\", BCP 71, RFC 3481, DOI 10.17487/RFC3481, February 2003, <https://www.rfc-editor.org/info/rfc3481>. [RFC3819] Karn, P., Ed., Bormann, C., Fairhurst, G., Grossman, D., Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L. Wood, \"Advice for Internet Subnetwork Designers\", BCP 89, RFC 3819, DOI 10.17487/RFC3819, July 2004, <https://www.rfc-editor.org/info/rfc3819>. [RFC4944] Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler, \"Transmission of IPv6 Packets over IEEE 802.15.4 Networks\", RFC 4944, DOI 10.17487/RFC4944, September 2007, <https://www.rfc-editor.org/info/rfc4944>. [RFC5382] Guha, S., Ed., Biswas, K., Ford, B., Sivakumar, S., and P. Srisuresh, \"NAT Behavioral Requirements for TCP\", BCP 142, RFC 5382, DOI 10.17487/RFC5382, October 2008, <https://www.rfc-editor.org/info/rfc5382>. [RFC5925] Touch, J., Mankin, A., and R. Bonica, \"The TCP Authentication Option\", RFC 5925, DOI 10.17487/RFC5925, June 2010, <https://www.rfc-editor.org/info/rfc5925>. [RFC6077] Papadimitriou, D., Ed., Welzl, M., Scharf, M., and B. Briscoe, \"Open Research Issues in Internet Congestion Control\", RFC 6077, DOI 10.17487/RFC6077, February 2011, <https://www.rfc-editor.org/info/rfc6077>. [RFC6120] Saint-Andre, P., \"Extensible Messaging and Presence Protocol (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120, March 2011, <https://www.rfc-editor.org/info/rfc6120>. [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6606] Kim, E., Kaspar, D., Gomez, C., and C. Bormann, \"Problem Statement and Requirements for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing\", RFC 6606, DOI 10.17487/RFC6606, May 2012, <https://www.rfc-editor.org/info/rfc6606>. [RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. Bormann, \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 6775, DOI 10.17487/RFC6775, November 2012, <https://www.rfc-editor.org/info/rfc6775>. [RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>. [RFC7252] Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained Application Protocol (CoAP)\", RFC 7252, DOI 10.17487/RFC7252, June 2014, <https://www.rfc-editor.org/info/rfc7252>. [RFC7414] Duke, M., Braden, R., Eddy, W., Blanton, E., and A. Zimmermann, \"A Roadmap for Transmission Control Protocol (TCP) Specification Documents\", RFC 7414, DOI 10.17487/RFC7414, February 2015, <https://www.rfc-editor.org/info/rfc7414>. [RFC7428] Brandt, A. and J. Buron, \"Transmission of IPv6 Packets over ITU-T G.9959 Networks\", RFC 7428, DOI 10.17487/RFC7428, February 2015, <https://www.rfc-editor.org/info/rfc7428>. [RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>. [RFC7668] Nieminen, J., Savolainen, T., Isomaki, M., Patil, B., Shelby, Z., and C. Gomez, \"IPv6 over BLUETOOTH(R) Low Energy\", RFC 7668, DOI 10.17487/RFC7668, October 2015, <https://www.rfc-editor.org/info/rfc7668>. [RFC8087] Fairhurst, G. and M. Welzl, \"The Benefits of Using Explicit Congestion Notification (ECN)\", RFC 8087, DOI 10.17487/RFC8087, March 2017, <https://www.rfc-editor.org/info/rfc8087>. [RFC8105] Mariager, P., Petersen, J., Ed., Shelby, Z., Van de Logt, M., and D. Barthel, \"Transmission of IPv6 Packets over Digital Enhanced Cordless Telecommunications (DECT) Ultra Low Energy (ULE)\", RFC 8105, DOI 10.17487/RFC8105, May 2017, <https://www.rfc-editor.org/info/rfc8105>. [RFC8163] Lynn, K., Ed., Martocci, J., Neilson, C., and S. Donaldson, \"Transmission of IPv6 over Master-Slave/Token-Passing (MS/TP) Networks\", RFC 8163, DOI 10.17487/RFC8163, May 2017, <https://www.rfc-editor.org/info/rfc8163>. [RFC8201] McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed., \"Path MTU Discovery for IP version 6\", STD 87, RFC 8201, DOI 10.17487/RFC8201, July 2017, <https://www.rfc-editor.org/info/rfc8201>. [RFC8323] Bormann, C., Lemay, S., Tschofenig, H., Hartke, K., Silverajan, B., and B. Raymor, Ed., \"CoAP (Constrained Application Protocol) over TCP, TLS, and WebSockets\", RFC 8323, DOI 10.17487/RFC8323, February 2018, <https://www.rfc-editor.org/info/rfc8323>. [RFC8352] Gomez, C., Kovatsch, M., Tian, H., and Z. Cao, Ed., \"Energy-Efficient Features of Internet of Things Protocols\", RFC 8352, DOI 10.17487/RFC8352, April 2018, <https://www.rfc-editor.org/info/rfc8352>. [RFC8376] Farrell, S., Ed., \"Low-Power Wide Area Network (LPWAN) Overview\", RFC 8376, DOI 10.17487/RFC8376, May 2018, <https://www.rfc-editor.org/info/rfc8376>. [RFC8446] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>. [RFC8900] Bonica, R., Baker, F., Huston, G., Hinden, R., Troan, O., and F. Gont, \"IP Fragmentation Considered Fragile\", BCP 230, RFC 8900, DOI 10.17487/RFC8900, September 2020, <https://www.rfc-editor.org/info/rfc8900>. [RFC8931] Thubert, P., Ed., \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Selective Fragment Recovery\", RFC 8931, DOI 10.17487/RFC8931, November 2020, <https://www.rfc-editor.org/info/rfc8931>. [RFC8961] Allman, M., \"Requirements for Time-Based Loss Detection\", BCP 233, RFC 8961, DOI 10.17487/RFC8961, November 2020, <https://www.rfc-editor.org/info/rfc8961>. [RIOT] Baccelli, E., Gündoğa, C., Hahm, O., Kietzmann, P., Lenders, M., Petersen, H., Schleiser, K., Schmidt, T., and M. Wählisch, \"RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT\", IEEE Internet of Things Journal, Vol. 5, Issue 6, DOI 10.1109/JIOT.2018.2815038, March 2018, <https://doi.org/10.1109/JIOT.2018.2815038>. [SHREW] Nyrhinen, A. and E. Knightly, \"Low-Rate TCP-Targeted Denial of Service Attacks (The Shrew vs. the Mice and Elephants)\", SIGCOMM'03, DOI 10.1145/863955.863966, August 2003, <https://doi.org/10.1145/863955.863966>. [TCPM-ECN] Bagnulo, M. and B. Briscoe, \"ECN++: Adding Explicit Congestion Notification (ECN) to TCP Control Packets\", Work in Progress, Internet-Draft, draft-ietf-tcpm-generalized-ecn-07, 16 February 2021, <https://tools.ietf.org/html/draft-ietf-tcpm-generalized-ecn-07>. Appendix A. TCP Implementations for Constrained Devices This section overviews the main features of TCP implementations for constrained devices. The survey is limited to open-source stacks with a small footprint. It is not meant to be all-encompassing. For more powerful embedded systems (e.g., with 32-bit processors), there are further stacks that comprehensively implement TCP. On the other hand, please be aware that this Annex is based on information available as of the writing.¶ A.1. uIP uIP is a TCP/IP stack, targeted for 8- and 16-bit microcontrollers, which pioneered TCP/IP implementations for constrained devices. uIP has been deployed with Contiki and the Arduino Ethernet shield. A code size of ~5 kB (which comprises checksumming, IPv4, ICMP, and TCP) has been reported for uIP [Dunk]. Later versions of uIP implement IPv6 as well.¶ uIP uses the same global buffer for both incoming and outgoing traffic, which has a size of a single packet. In case of a retransmission, an application must be able to reproduce the same user data that had been transmitted. Multiple connections are supported but need to share the global buffer.¶ The MSS is announced via the MSS option on connection establishment, and the receive window size (of 1 MSS) is not modified during a connection. Stop-and-wait operation is used for sending data. Among other optimizations, this allows for the avoidance of sliding window operations, which use 32-bit arithmetic extensively and are expensive on 8-bit CPUs.¶ Contiki uses the \"split hack\" technique (see Section 3.2.3) to avoid Delayed ACKs for senders using a single segment.¶ The code size of the TCP implementation in Contiki-NG has been measured to be 3.2 kB on CC2538DK, cross-compiling on Linux.¶ A.2. lwIP lwIP is a TCP/IP stack, targeted for 8- and 16-bit microcontrollers. lwIP has a total code size of ~14 kB to ~22 kB (which comprises memory management, checksumming, network interfaces, IPv4, ICMP, and TCP) and a TCP code size of ~9 kB to ~14 kB [Dunk]. Both IPv4 and IPv6 are supported in lwIP since v2.0.0.¶ In contrast with uIP, lwIP decouples applications from the network stack. lwIP supports a TCP transmission window greater than a single segment, as well as the buffering of incoming and outgoing data. Other implemented mechanisms comprise slow start, congestion avoidance, fast retransmit, and fast recovery. SACK and Window Scale support has been recently added to lwIP.¶ A.3. RIOT The RIOT TCP implementation (called \"GNRC TCP\") has been designed for Class 1 devices [RFC7228]. The main target platforms are 8- and 16-bit microcontrollers, with 32-bit platforms also supported. GNRC TCP offers a similar function set as uIP, but it provides and maintains an independent receive buffer for each connection. In contrast to uIP, retransmission is also handled by GNRC TCP. For simplicity, GNRC TCP uses a single-MSS implementation. The application programmer does not need to know anything about the TCP internals; therefore, GNRC TCP can be seen as a user-friendly uIP TCP implementation.¶ The MSS is set on connections establishment and cannot be changed during connection lifetime. GNRC TCP allows multiple connections in parallel, but each TCB must be allocated somewhere in the system. By default, there is only enough memory allocated for a single TCP connection, but it can be increased at compile time if the user needs multiple parallel connections.¶ The RIOT TCP implementation offers an optional Portable Operating System Interface (POSIX) socket wrapper that enables POSIX compliance, if needed.¶ Further details on RIOT and GNRC can be found in [RIOT] and [GNRC].¶ A.4. TinyOS TinyOS was important as a platform for early constrained devices. TinyOS has an experimental TCP stack that uses a simple non-blocking library-based implementation of TCP, which provides a subset of the socket interface primitives. The application is responsible for buffering. The TCP library does not do any receive-side buffering. Instead, it will immediately dispatch new, in-order data to the application or otherwise drop the segment. A send buffer is provided by the application. Multiple TCP connections are possible. Recently, there has been little work on the stack.¶ A.5. FreeRTOS FreeRTOS is a real-time operating system kernel for embedded devices that is supported by 16- and 32-bit microprocessors. Its TCP implementation is based on multiple-segment window size, although a \"Tiny-TCP\" option, which is a single-MSS variant, can be enabled. Delayed ACKs are supported, with a 20 ms Delayed ACK timer as a technique intended \"to gain performance\".¶ A.6. uC/OS uC/OS is a real-time operating system kernel for embedded devices, which is maintained by Micrium.  uC/OS is intended for 8-, 16-, and 32-bit microprocessors. The uC/OS TCP implementation supports a multiple-segment window size.¶ A.7. Summary None of the implementations considered in this Annex support ECN or TFO.¶ Table 1: Summary of TCP Features for Different Lightweight TCP Implementations uIP lwIP orig lwIP 2.1 RIOT TinyOS FreeRTOS uC/OS Code Size (kB) <5 ~9 to ~14 38 <7 N/A <9.2 N/A Memory (a) (T1) (T4) (T3) N/A (T2) N/A TCP Features Single-Segm. Yes No No Yes No No No Slow start No Yes Yes No Yes No Yes Fast rec/retx No Yes Yes No Yes No Yes Keep-alive No No Yes No No Yes Yes Win. Scale No No Yes No No Yes No TCP timest. No No Yes No No Yes No SACK No No Yes No No Yes No Del. ACKs No Yes Yes No No Yes Yes Socket No No Optional (I) Subset Yes Yes Concur. Conn. Yes Yes Yes Yes Yes Yes Yes TLS supported No No Yes Yes Yes Yes Yes Legend:¶ (T1): TCP-only, on x86 and AVR platforms¶ (T2): TCP-only, on ARM Cortex-M platform¶ (T3): TCP-only, on ARM Cortex-M0+ platform (NOTE: RAM usage for the same platform is ~2.5 kB for one TCP connection plus ~1.2 kB for each additional connection)¶ (T4): TCP-only, on CC2538DK, cross-compiling on Linux¶ (a): Includes IP, ICMP, and TCP on x86 and AVR platforms. The Contiki-NG TCP implementation has a code size of 3.2 kB on CC2538DK, cross-compiling on Linux¶ (I): Optional POSIX socket wrapper that enables POSIX compliance if needed¶ Mult.: Multiple¶ N/A: Not Available¶ Acknowledgments The work of Carles Gomez has been funded in part by the Spanish Government (Ministerio de Educacion, Cultura y Deporte) through Jose Castillejo grants CAS15/00336 and CAS18/00170; the European Regional Development Fund (ERDF); the Spanish Government through projects TEC2016-79988-P, PID2019-106808RA-I00, AEI/FEDER, and UE; and the Generalitat de Catalunya Grant 2017 SGR 376. Part of his contribution to this work has been carried out during his stays as a visiting scholar at the Computer Laboratory of the University of Cambridge.¶ The authors appreciate the feedback received for this document. The following folks provided comments that helped improve the document: Carsten Bormann, Zhen Cao, Wei Genyu, Ari Keränen, Abhijan Bhattacharyya, Andres Arcia-Moret, Yoshifumi Nishida, Joe Touch, Fred Baker, Nik Sultana, Kerry Lynn, Erik Nordmark, Markku Kojo, Hannes Tschofenig, David Black, Ilpo Jarvinen, Emmanuel Baccelli, Stuart Cheshire, Gorry Fairhurst, Ingemar Johansson, Ted Lemon, and Michael Tüxen. Simon Brummer provided details and kindly performed Random Access Memory (RAM) and Read-Only Memory (ROM) usage measurements on the RIOT TCP implementation. Xavi Vilajosana provided details on the OpenWSN TCP implementation. Rahul Jadhav kindly performed code size measurements on the Contiki-NG and lwIP 2.1.2 TCP implementations. He also provided details on the uIP TCP implementation.¶ Authors' Addresses Carles Gomez UPC C/Esteve Terradas, 7 08860 Castelldefels Spain Email: carlesgo@entel.upc.edu Jon Crowcroft University of Cambridge JJ Thomson Avenue Cambridge CB3 0FD United Kingdom Email: jon.crowcroft@cl.cam.ac.uk Michael Scharf Hochschule Esslingen University of Applied SciencesFlandernstr. 101 73732 Esslingen am Neckar Germany Email: michael.scharf@hs-esslingen.de"
    },
    {
        "Number": "9002",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "QUIC Loss Detection and Congestion Control",
        "Authors": [
            "J. Iyengar",
            "Ed.",
            "I. Swett",
            "Ed."
        ],
        "Date": "2021-05",
        "More Info": "Errata",
        "Status": "Proposed Standard",
        "Abstract": "This document describes loss detection and congestion control mechanisms for QUIC.",
        "Keywords": [
            "bbr",
            "delay-sensitive congestion control",
            "fec",
            "loss-tolerant congestion control",
            "next generation"
        ],
        "Content": "RFC 9002: QUIC Loss Detection and Congestion Control RFC 9002 QUIC Loss Detection May 2021 Iyengar & Swett Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9002 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: J. Iyengar, Ed. Fastly I. Swett, Ed. Google RFC 9002 QUIC Loss Detection and Congestion Control Abstract This document describes loss detection and congestion control mechanisms for QUIC.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9002.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions and Definitions 3.  Design of the QUIC Transmission Machinery 4.  Relevant Differences between QUIC and TCP 4.1.  Separate Packet Number Spaces 4.2.  Monotonically Increasing Packet Numbers 4.3.  Clearer Loss Epoch 4.4.  No Reneging 4.5.  More ACK Ranges 4.6.  Explicit Correction for Delayed Acknowledgments 4.7.  Probe Timeout Replaces RTO and TLP 4.8.  The Minimum Congestion Window Is Two Packets 4.9.  Handshake Packets Are Not Special 5.  Estimating the Round-Trip Time 5.1.  Generating RTT Samples 5.2.  Estimating min_rtt 5.3.  Estimating smoothed_rtt and rttvar 6.  Loss Detection 6.1.  Acknowledgment-Based Detection 6.1.1.  Packet Threshold 6.1.2.  Time Threshold 6.2.  Probe Timeout 6.2.1.  Computing PTO 6.2.2.  Handshakes and New Paths 6.2.3.  Speeding up Handshake Completion 6.2.4.  Sending Probe Packets 6.3.  Handling Retry Packets 6.4.  Discarding Keys and Packet State 7.  Congestion Control 7.1.  Explicit Congestion Notification 7.2.  Initial and Minimum Congestion Window 7.3.  Congestion Control States 7.3.1.  Slow Start 7.3.2.  Recovery 7.3.3.  Congestion Avoidance 7.4.  Ignoring Loss of Undecryptable Packets 7.5.  Probe Timeout 7.6.  Persistent Congestion 7.6.1.  Duration 7.6.2.  Establishing Persistent Congestion 7.6.3.  Example 7.7.  Pacing 7.8.  Underutilizing the Congestion Window 8.  Security Considerations 8.1.  Loss and Congestion Signals 8.2.  Traffic Analysis 8.3.  Misreporting ECN Markings 9.  References 9.1.  Normative References 9.2.  Informative References Appendix A.  Loss Recovery Pseudocode A.1.  Tracking Sent Packets A.1.1.  Sent Packet Fields A.2.  Constants of Interest A.3.  Variables of Interest A.4.  Initialization A.5.  On Sending a Packet A.6.  On Receiving a Datagram A.7.  On Receiving an Acknowledgment A.8.  Setting the Loss Detection Timer A.9.  On Timeout A.10. Detecting Lost Packets A.11. Upon Dropping Initial or Handshake Keys Appendix B.  Congestion Control Pseudocode B.1.  Constants of Interest B.2.  Variables of Interest B.3.  Initialization B.4.  On Packet Sent B.5.  On Packet Acknowledgment B.6.  On New Congestion Event B.7.  Process ECN Information B.8.  On Packets Lost B.9.  Removing Discarded Packets from Bytes in Flight Contributors Authors' Addresses 1. Introduction QUIC is a secure, general-purpose transport protocol, described in [QUIC-TRANSPORT]. This document describes loss detection and congestion control mechanisms for QUIC.¶ 2. Conventions and Definitions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ Definitions of terms that are used in this document:¶ Ack-eliciting frames: All frames other than ACK, PADDING, and CONNECTION_CLOSE are considered ack-eliciting.¶ Ack-eliciting packets: Packets that contain ack-eliciting frames elicit an ACK from the receiver within the maximum acknowledgment delay and are called ack-eliciting packets.¶ In-flight packets: Packets are considered in flight when they are ack-eliciting or contain a PADDING frame, and they have been sent but are not acknowledged, declared lost, or discarded along with old keys.¶ 3. Design of the QUIC Transmission Machinery All transmissions in QUIC are sent with a packet-level header, which indicates the encryption level and includes a packet sequence number (referred to below as a packet number). The encryption level indicates the packet number space, as described in Section 12.3 of [QUIC-TRANSPORT]. Packet numbers never repeat within a packet number space for the lifetime of a connection. Packet numbers are sent in monotonically increasing order within a space, preventing ambiguity. It is permitted for some packet numbers to never be used, leaving intentional gaps.¶ This design obviates the need for disambiguating between transmissions and retransmissions; this eliminates significant complexity from QUIC's interpretation of TCP loss detection mechanisms.¶ QUIC packets can contain multiple frames of different types. The recovery mechanisms ensure that data and frames that need reliable delivery are acknowledged or declared lost and sent in new packets as necessary. The types of frames contained in a packet affect recovery and congestion control logic:¶ All packets are acknowledged, though packets that contain no ack-eliciting frames are only acknowledged along with ack-eliciting packets.¶ Long header packets that contain CRYPTO frames are critical to the performance of the QUIC handshake and use shorter timers for acknowledgment.¶ Packets containing frames besides ACK or CONNECTION_CLOSE frames count toward congestion control limits and are considered to be in flight.¶ PADDING frames cause packets to contribute toward bytes in flight without directly causing an acknowledgment to be sent.¶ 4. Relevant Differences between QUIC and TCP Readers familiar with TCP's loss detection and congestion control will find algorithms here that parallel well-known TCP ones. However, protocol differences between QUIC and TCP contribute to algorithmic differences. These protocol differences are briefly described below.¶ 4.1. Separate Packet Number Spaces QUIC uses separate packet number spaces for each encryption level, except 0-RTT and all generations of 1-RTT keys use the same packet number space. Separate packet number spaces ensures that the acknowledgment of packets sent with one level of encryption will not cause spurious retransmission of packets sent with a different encryption level. Congestion control and round-trip time (RTT) measurement are unified across packet number spaces.¶ 4.2. Monotonically Increasing Packet Numbers TCP conflates transmission order at the sender with delivery order at the receiver, resulting in the retransmission ambiguity problem [RETRANSMISSION]. QUIC separates transmission order from delivery order: packet numbers indicate transmission order, and delivery order is determined by the stream offsets in STREAM frames.¶ QUIC's packet number is strictly increasing within a packet number space and directly encodes transmission order. A higher packet number signifies that the packet was sent later, and a lower packet number signifies that the packet was sent earlier. When a packet containing ack-eliciting frames is detected lost, QUIC includes necessary frames in a new packet with a new packet number, removing ambiguity about which packet is acknowledged when an ACK is received. Consequently, more accurate RTT measurements can be made, spurious retransmissions are trivially detected, and mechanisms such as Fast Retransmit can be applied universally, based only on packet number.¶ This design point significantly simplifies loss detection mechanisms for QUIC. Most TCP mechanisms implicitly attempt to infer transmission ordering based on TCP sequence numbers -- a nontrivial task, especially when TCP timestamps are not available.¶ 4.3. Clearer Loss Epoch QUIC starts a loss epoch when a packet is lost. The loss epoch ends when any packet sent after the start of the epoch is acknowledged. TCP waits for the gap in the sequence number space to be filled, and so if a segment is lost multiple times in a row, the loss epoch may not end for several round trips. Because both should reduce their congestion windows only once per epoch, QUIC will do it once for every round trip that experiences loss, while TCP may only do it once across multiple round trips.¶ 4.4. No Reneging QUIC ACK frames contain information similar to that in TCP Selective Acknowledgments (SACKs) [RFC2018]. However, QUIC does not allow a packet acknowledgment to be reneged, greatly simplifying implementations on both sides and reducing memory pressure on the sender.¶ 4.5. More ACK Ranges QUIC supports many ACK ranges, as opposed to TCP's three SACK ranges. In high-loss environments, this speeds recovery, reduces spurious retransmits, and ensures forward progress without relying on timeouts.¶ 4.6. Explicit Correction for Delayed Acknowledgments QUIC endpoints measure the delay incurred between when a packet is received and when the corresponding acknowledgment is sent, allowing a peer to maintain a more accurate RTT estimate; see Section 13.2 of [QUIC-TRANSPORT].¶ 4.7. Probe Timeout Replaces RTO and TLP QUIC uses a probe timeout (PTO; see Section 6.2), with a timer based on TCP's retransmission timeout (RTO) computation; see [RFC6298]. QUIC's PTO includes the peer's maximum expected acknowledgment delay instead of using a fixed minimum timeout.¶ Similar to the RACK-TLP loss detection algorithm for TCP [RFC8985], QUIC does not collapse the congestion window when the PTO expires, since a single packet loss at the tail does not indicate persistent congestion. Instead, QUIC collapses the congestion window when persistent congestion is declared; see Section 7.6. In doing this, QUIC avoids unnecessary congestion window reductions, obviating the need for correcting mechanisms such as Forward RTO-Recovery (F-RTO) [RFC5682]. Since QUIC does not collapse the congestion window on a PTO expiration, a QUIC sender is not limited from sending more in-flight packets after a PTO expiration if it still has available congestion window. This occurs when a sender is application limited and the PTO timer expires. This is more aggressive than TCP's RTO mechanism when application limited, but identical when not application limited.¶ QUIC allows probe packets to temporarily exceed the congestion window whenever the timer expires.¶ 4.8. The Minimum Congestion Window Is Two Packets TCP uses a minimum congestion window of one packet. However, loss of that single packet means that the sender needs to wait for a PTO to recover (Section 6.2), which can be much longer than an RTT. Sending a single ack-eliciting packet also increases the chances of incurring additional latency when a receiver delays its acknowledgment.¶ QUIC therefore recommends that the minimum congestion window be two packets. While this increases network load, it is considered safe since the sender will still reduce its sending rate exponentially under persistent congestion (Section 6.2).¶ 4.9. Handshake Packets Are Not Special TCP treats the loss of SYN or SYN-ACK packet as persistent congestion and reduces the congestion window to one packet; see [RFC5681]. QUIC treats loss of a packet containing handshake data the same as other losses.¶ 5. Estimating the Round-Trip Time At a high level, an endpoint measures the time from when a packet was sent to when it is acknowledged as an RTT sample. The endpoint uses RTT samples and peer-reported host delays (see Section 13.2 of [QUIC-TRANSPORT]) to generate a statistical description of the network path's RTT. An endpoint computes the following three values for each path: the minimum value over a period of time (min_rtt), an exponentially weighted moving average (smoothed_rtt), and the mean deviation (referred to as \"variation\" in the rest of this document) in the observed RTT samples (rttvar).¶ 5.1. Generating RTT Samples An endpoint generates an RTT sample on receiving an ACK frame that meets the following two conditions:¶ the largest acknowledged packet number is newly acknowledged, and¶ at least one of the newly acknowledged packets was ack-eliciting.¶ The RTT sample, latest_rtt, is generated as the time elapsed since the largest acknowledged packet was sent:¶ latest_rtt = ack_time - send_time_of_largest_acked ¶ An RTT sample is generated using only the largest acknowledged packet in the received ACK frame. This is because a peer reports acknowledgment delays for only the largest acknowledged packet in an ACK frame. While the reported acknowledgment delay is not used by the RTT sample measurement, it is used to adjust the RTT sample in subsequent computations of smoothed_rtt and rttvar (Section 5.3).¶ To avoid generating multiple RTT samples for a single packet, an ACK frame SHOULD NOT be used to update RTT estimates if it does not newly acknowledge the largest acknowledged packet.¶ An RTT sample MUST NOT be generated on receiving an ACK frame that does not newly acknowledge at least one ack-eliciting packet. A peer usually does not send an ACK frame when only non-ack-eliciting packets are received. Therefore, an ACK frame that contains acknowledgments for only non-ack-eliciting packets could include an arbitrarily large ACK Delay value. Ignoring such ACK frames avoids complications in subsequent smoothed_rtt and rttvar computations.¶ A sender might generate multiple RTT samples per RTT when multiple ACK frames are received within an RTT. As suggested in [RFC6298], doing so might result in inadequate history in smoothed_rtt and rttvar. Ensuring that RTT estimates retain sufficient history is an open research question.¶ 5.2. Estimating min_rtt min_rtt is the sender's estimate of the minimum RTT observed for a given network path over a period of time. In this document, min_rtt is used by loss detection to reject implausibly small RTT samples.¶ min_rtt MUST be set to the latest_rtt on the first RTT sample. min_rtt MUST be set to the lesser of min_rtt and latest_rtt (Section 5.1) on all other samples.¶ An endpoint uses only locally observed times in computing the min_rtt and does not adjust for acknowledgment delays reported by the peer. Doing so allows the endpoint to set a lower bound for the smoothed_rtt based entirely on what it observes (see Section 5.3) and limits potential underestimation due to erroneously reported delays by the peer.¶ The RTT for a network path may change over time. If a path's actual RTT decreases, the min_rtt will adapt immediately on the first low sample. If the path's actual RTT increases, however, the min_rtt will not adapt to it, allowing future RTT samples that are smaller than the new RTT to be included in smoothed_rtt.¶ Endpoints SHOULD set the min_rtt to the newest RTT sample after persistent congestion is established. This avoids repeatedly declaring persistent congestion when the RTT increases. This also allows a connection to reset its estimate of min_rtt and smoothed_rtt after a disruptive network event; see Section 5.3.¶ Endpoints MAY reestablish the min_rtt at other times in the connection, such as when traffic volume is low and an acknowledgment is received with a low acknowledgment delay. Implementations SHOULD NOT refresh the min_rtt value too often since the actual minimum RTT of the path is not frequently observable.¶ 5.3. Estimating smoothed_rtt and rttvar smoothed_rtt is an exponentially weighted moving average of an endpoint's RTT samples, and rttvar estimates the variation in the RTT samples using a mean variation.¶ The calculation of smoothed_rtt uses RTT samples after adjusting them for acknowledgment delays. These delays are decoded from the ACK Delay field of ACK frames as described in Section 19.3 of [QUIC-TRANSPORT].¶ The peer might report acknowledgment delays that are larger than the peer's max_ack_delay during the handshake (Section 13.2.1 of [QUIC-TRANSPORT]). To account for this, the endpoint SHOULD ignore max_ack_delay until the handshake is confirmed, as defined in Section 4.1.2 of [QUIC-TLS]. When they occur, these large acknowledgment delays are likely to be non-repeating and limited to the handshake. The endpoint can therefore use them without limiting them to the max_ack_delay, avoiding unnecessary inflation of the RTT estimate.¶ Note that a large acknowledgment delay can result in a substantially inflated smoothed_rtt if there is an error either in the peer's reporting of the acknowledgment delay or in the endpoint's min_rtt estimate. Therefore, prior to handshake confirmation, an endpoint MAY ignore RTT samples if adjusting the RTT sample for acknowledgment delay causes the sample to be less than the min_rtt.¶ After the handshake is confirmed, any acknowledgment delays reported by the peer that are greater than the peer's max_ack_delay are attributed to unintentional but potentially repeating delays, such as scheduler latency at the peer or loss of previous acknowledgments. Excess delays could also be due to a noncompliant receiver. Therefore, these extra delays are considered effectively part of path delay and incorporated into the RTT estimate.¶ Therefore, when adjusting an RTT sample using peer-reported acknowledgment delays, an endpoint:¶ MAY ignore the acknowledgment delay for Initial packets, since these acknowledgments are not delayed by the peer (Section 13.2.1 of [QUIC-TRANSPORT]);¶ SHOULD ignore the peer's max_ack_delay until the handshake is confirmed;¶ MUST use the lesser of the acknowledgment delay and the peer's max_ack_delay after the handshake is confirmed; and¶ MUST NOT subtract the acknowledgment delay from the RTT sample if the resulting value is smaller than the min_rtt. This limits the underestimation of the smoothed_rtt due to a misreporting peer.¶ Additionally, an endpoint might postpone the processing of acknowledgments when the corresponding decryption keys are not immediately available. For example, a client might receive an acknowledgment for a 0-RTT packet that it cannot decrypt because 1-RTT packet protection keys are not yet available to it. In such cases, an endpoint SHOULD subtract such local delays from its RTT sample until the handshake is confirmed.¶ Similar to [RFC6298], smoothed_rtt and rttvar are computed as follows.¶ An endpoint initializes the RTT estimator during connection establishment and when the estimator is reset during connection migration; see Section 9.4 of [QUIC-TRANSPORT]. Before any RTT samples are available for a new path or when the estimator is reset, the estimator is initialized using the initial RTT; see Section 6.2.2.¶ smoothed_rtt and rttvar are initialized as follows, where kInitialRtt contains the initial RTT value:¶ smoothed_rtt = kInitialRtt rttvar = kInitialRtt / 2 ¶ RTT samples for the network path are recorded in latest_rtt; see Section 5.1. On the first RTT sample after initialization, the estimator is reset using that sample. This ensures that the estimator retains no history of past samples. Packets sent on other paths do not contribute RTT samples to the current path, as described in Section 9.4 of [QUIC-TRANSPORT].¶ On the first RTT sample after initialization, smoothed_rtt and rttvar are set as follows:¶ smoothed_rtt = latest_rtt rttvar = latest_rtt / 2 ¶ On subsequent RTT samples, smoothed_rtt and rttvar evolve as follows:¶ ack_delay = decoded acknowledgment delay from ACK frame if (handshake confirmed): ack_delay = min(ack_delay, max_ack_delay) adjusted_rtt = latest_rtt if (latest_rtt >= min_rtt + ack_delay): adjusted_rtt = latest_rtt - ack_delay smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * adjusted_rtt rttvar_sample = abs(smoothed_rtt - adjusted_rtt) rttvar = 3/4 * rttvar + 1/4 * rttvar_sample ¶ 6. Loss Detection QUIC senders use acknowledgments to detect lost packets and a PTO to ensure acknowledgments are received; see Section 6.2. This section provides a description of these algorithms.¶ If a packet is lost, the QUIC transport needs to recover from that loss, such as by retransmitting the data, sending an updated frame, or discarding the frame. For more information, see Section 13.3 of [QUIC-TRANSPORT].¶ Loss detection is separate per packet number space, unlike RTT measurement and congestion control, because RTT and congestion control are properties of the path, whereas loss detection also relies upon key availability.¶ 6.1. Acknowledgment-Based Detection Acknowledgment-based loss detection implements the spirit of TCP's Fast Retransmit [RFC5681], Early Retransmit [RFC5827], Forward Acknowledgment [FACK], SACK loss recovery [RFC6675], and RACK-TLP [RFC8985]. This section provides an overview of how these algorithms are implemented in QUIC.¶ A packet is declared lost if it meets all of the following conditions:¶ The packet is unacknowledged, in flight, and was sent prior to an acknowledged packet.¶ The packet was sent kPacketThreshold packets before an acknowledged packet (Section 6.1.1), or it was sent long enough in the past (Section 6.1.2).¶ The acknowledgment indicates that a packet sent later was delivered, and the packet and time thresholds provide some tolerance for packet reordering.¶ Spuriously declaring packets as lost leads to unnecessary retransmissions and may result in degraded performance due to the actions of the congestion controller upon detecting loss. Implementations can detect spurious retransmissions and increase the packet or time reordering threshold to reduce future spurious retransmissions and loss events. Implementations with adaptive time thresholds MAY choose to start with smaller initial reordering thresholds to minimize recovery latency.¶ 6.1.1. Packet Threshold The RECOMMENDED initial value for the packet reordering threshold (kPacketThreshold) is 3, based on best practices for TCP loss detection [RFC5681] [RFC6675]. In order to remain similar to TCP, implementations SHOULD NOT use a packet threshold less than 3; see [RFC5681].¶ Some networks may exhibit higher degrees of packet reordering, causing a sender to detect spurious losses. Additionally, packet reordering could be more common with QUIC than TCP because network elements that could observe and reorder TCP packets cannot do that for QUIC and also because QUIC packet numbers are encrypted. Algorithms that increase the reordering threshold after spuriously detecting losses, such as RACK [RFC8985], have proven to be useful in TCP and are expected to be at least as useful in QUIC.¶ 6.1.2. Time Threshold Once a later packet within the same packet number space has been acknowledged, an endpoint SHOULD declare an earlier packet lost if it was sent a threshold amount of time in the past. To avoid declaring packets as lost too early, this time threshold MUST be set to at least the local timer granularity, as indicated by the kGranularity constant. The time threshold is:¶ max(kTimeThreshold * max(smoothed_rtt, latest_rtt), kGranularity) ¶ If packets sent prior to the largest acknowledged packet cannot yet be declared lost, then a timer SHOULD be set for the remaining time.¶ Using max(smoothed_rtt, latest_rtt) protects from the two following cases:¶ the latest RTT sample is lower than the smoothed RTT, perhaps due to reordering where the acknowledgment encountered a shorter path;¶ the latest RTT sample is higher than the smoothed RTT, perhaps due to a sustained increase in the actual RTT, but the smoothed RTT has not yet caught up.¶ The RECOMMENDED time threshold (kTimeThreshold), expressed as an RTT multiplier, is 9/8. The RECOMMENDED value of the timer granularity (kGranularity) is 1 millisecond.¶ Note: TCP's RACK [RFC8985] specifies a slightly larger threshold, equivalent to 5/4, for a similar purpose. Experience with QUIC shows that 9/8 works well.¶ Implementations MAY experiment with absolute thresholds, thresholds from previous connections, adaptive thresholds, or the including of RTT variation. Smaller thresholds reduce reordering resilience and increase spurious retransmissions, and larger thresholds increase loss detection delay.¶ 6.2. Probe Timeout A Probe Timeout (PTO) triggers the sending of one or two probe datagrams when ack-eliciting packets are not acknowledged within the expected period of time or the server may not have validated the client's address. A PTO enables a connection to recover from loss of tail packets or acknowledgments.¶ As with loss detection, the PTO is per packet number space. That is, a PTO value is computed per packet number space.¶ A PTO timer expiration event does not indicate packet loss and MUST NOT cause prior unacknowledged packets to be marked as lost. When an acknowledgment is received that newly acknowledges packets, loss detection proceeds as dictated by the packet and time threshold mechanisms; see Section 6.1.¶ The PTO algorithm used in QUIC implements the reliability functions of Tail Loss Probe [RFC8985], RTO [RFC5681], and F-RTO algorithms for TCP [RFC5682]. The timeout computation is based on TCP's RTO period [RFC6298].¶ 6.2.1. Computing PTO When an ack-eliciting packet is transmitted, the sender schedules a timer for the PTO period as follows:¶ PTO = smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay ¶ The PTO period is the amount of time that a sender ought to wait for an acknowledgment of a sent packet. This time period includes the estimated network RTT (smoothed_rtt), the variation in the estimate (4*rttvar), and max_ack_delay, to account for the maximum time by which a receiver might delay sending an acknowledgment.¶ When the PTO is armed for Initial or Handshake packet number spaces, the max_ack_delay in the PTO period computation is set to 0, since the peer is expected to not delay these packets intentionally; see Section 13.2.1 of [QUIC-TRANSPORT].¶ The PTO period MUST be at least kGranularity to avoid the timer expiring immediately.¶ When ack-eliciting packets in multiple packet number spaces are in flight, the timer MUST be set to the earlier value of the Initial and Handshake packet number spaces.¶ An endpoint MUST NOT set its PTO timer for the Application Data packet number space until the handshake is confirmed. Doing so prevents the endpoint from retransmitting information in packets when either the peer does not yet have the keys to process them or the endpoint does not yet have the keys to process their acknowledgments. For example, this can happen when a client sends 0-RTT packets to the server; it does so without knowing whether the server will be able to decrypt them. Similarly, this can happen when a server sends 1-RTT packets before confirming that the client has verified the server's certificate and can therefore read these 1-RTT packets.¶ A sender SHOULD restart its PTO timer every time an ack-eliciting packet is sent or acknowledged, or when Initial or Handshake keys are discarded (Section 4.9 of [QUIC-TLS]). This ensures the PTO is always set based on the latest estimate of the RTT and for the correct packet across packet number spaces.¶ When a PTO timer expires, the PTO backoff MUST be increased, resulting in the PTO period being set to twice its current value. The PTO backoff factor is reset when an acknowledgment is received, except in the following case. A server might take longer to respond to packets during the handshake than otherwise. To protect such a server from repeated client probes, the PTO backoff is not reset at a client that is not yet certain that the server has finished validating the client's address. That is, a client does not reset the PTO backoff factor on receiving acknowledgments in Initial packets.¶ This exponential reduction in the sender's rate is important because consecutive PTOs might be caused by loss of packets or acknowledgments due to severe congestion. Even when there are ack-eliciting packets in flight in multiple packet number spaces, the exponential increase in PTO occurs across all spaces to prevent excess load on the network. For example, a timeout in the Initial packet number space doubles the length of the timeout in the Handshake packet number space.¶ The total length of time over which consecutive PTOs expire is limited by the idle timeout.¶ The PTO timer MUST NOT be set if a timer is set for time threshold loss detection; see Section 6.1.2. A timer that is set for time threshold loss detection will expire earlier than the PTO timer in most cases and is less likely to spuriously retransmit data.¶ 6.2.2. Handshakes and New Paths Resumed connections over the same network MAY use the previous connection's final smoothed RTT value as the resumed connection's initial RTT. When no previous RTT is available, the initial RTT SHOULD be set to 333 milliseconds. This results in handshakes starting with a PTO of 1 second, as recommended for TCP's initial RTO; see Section 2 of [RFC6298].¶ A connection MAY use the delay between sending a PATH_CHALLENGE and receiving a PATH_RESPONSE to set the initial RTT (see kInitialRtt in Appendix A.2) for a new path, but the delay SHOULD NOT be considered an RTT sample.¶ When the Initial keys and Handshake keys are discarded (see Section 6.4), any Initial packets and Handshake packets can no longer be acknowledged, so they are removed from bytes in flight. When Initial or Handshake keys are discarded, the PTO and loss detection timers MUST be reset, because discarding keys indicates forward progress and the loss detection timer might have been set for a now-discarded packet number space.¶ 6.2.2.1. Before Address Validation Until the server has validated the client's address on the path, the amount of data it can send is limited to three times the amount of data received, as specified in Section 8.1 of [QUIC-TRANSPORT]. If no additional data can be sent, the server's PTO timer MUST NOT be armed until datagrams have been received from the client because packets sent on PTO count against the anti-amplification limit.¶ When the server receives a datagram from the client, the amplification limit is increased and the server resets the PTO timer. If the PTO timer is then set to a time in the past, it is executed immediately. Doing so avoids sending new 1-RTT packets prior to packets critical to the completion of the handshake. In particular, this can happen when 0-RTT is accepted but the server fails to validate the client's address.¶ Since the server could be blocked until more datagrams are received from the client, it is the client's responsibility to send packets to unblock the server until it is certain that the server has finished its address validation (see Section 8 of [QUIC-TRANSPORT]). That is, the client MUST set the PTO timer if the client has not received an acknowledgment for any of its Handshake packets and the handshake is not confirmed (see Section 4.1.2 of [QUIC-TLS]), even if there are no packets in flight. When the PTO fires, the client MUST send a Handshake packet if it has Handshake keys, otherwise it MUST send an Initial packet in a UDP datagram with a payload of at least 1200 bytes.¶ 6.2.3. Speeding up Handshake Completion When a server receives an Initial packet containing duplicate CRYPTO data, it can assume the client did not receive all of the server's CRYPTO data sent in Initial packets, or the client's estimated RTT is too small. When a client receives Handshake or 1-RTT packets prior to obtaining Handshake keys, it may assume some or all of the server's Initial packets were lost.¶ To speed up handshake completion under these conditions, an endpoint MAY, for a limited number of times per connection, send a packet containing unacknowledged CRYPTO data earlier than the PTO expiry, subject to the address validation limits in Section 8.1 of [QUIC-TRANSPORT]. Doing so at most once for each connection is adequate to quickly recover from a single packet loss. An endpoint that always retransmits packets in response to receiving packets that it cannot process risks creating an infinite exchange of packets.¶ Endpoints can also use coalesced packets (see Section 12.2 of [QUIC-TRANSPORT]) to ensure that each datagram elicits at least one acknowledgment. For example, a client can coalesce an Initial packet containing PING and PADDING frames with a 0-RTT data packet, and a server can coalesce an Initial packet containing a PING frame with one or more packets in its first flight.¶ 6.2.4. Sending Probe Packets When a PTO timer expires, a sender MUST send at least one ack-eliciting packet in the packet number space as a probe. An endpoint MAY send up to two full-sized datagrams containing ack-eliciting packets to avoid an expensive consecutive PTO expiration due to a single lost datagram or to transmit data from multiple packet number spaces. All probe packets sent on a PTO MUST be ack-eliciting.¶ In addition to sending data in the packet number space for which the timer expired, the sender SHOULD send ack-eliciting packets from other packet number spaces with in-flight data, coalescing packets if possible. This is particularly valuable when the server has both Initial and Handshake data in flight or when the client has both Handshake and Application Data in flight because the peer might only have receive keys for one of the two packet number spaces.¶ If the sender wants to elicit a faster acknowledgment on PTO, it can skip a packet number to eliminate the acknowledgment delay.¶ An endpoint SHOULD include new data in packets that are sent on PTO expiration. Previously sent data MAY be sent if no new data can be sent. Implementations MAY use alternative strategies for determining the content of probe packets, including sending new or retransmitted data based on the application's priorities.¶ It is possible the sender has no new or previously sent data to send. As an example, consider the following sequence of events: new application data is sent in a STREAM frame, deemed lost, then retransmitted in a new packet, and then the original transmission is acknowledged. When there is no data to send, the sender SHOULD send a PING or other ack-eliciting frame in a single packet, rearming the PTO timer.¶ Alternatively, instead of sending an ack-eliciting packet, the sender MAY mark any packets still in flight as lost. Doing so avoids sending an additional packet but increases the risk that loss is declared too aggressively, resulting in an unnecessary rate reduction by the congestion controller.¶ Consecutive PTO periods increase exponentially, and as a result, connection recovery latency increases exponentially as packets continue to be dropped in the network. Sending two packets on PTO expiration increases resilience to packet drops, thus reducing the probability of consecutive PTO events.¶ When the PTO timer expires multiple times and new data cannot be sent, implementations must choose between sending the same payload every time or sending different payloads. Sending the same payload may be simpler and ensures the highest priority frames arrive first. Sending different payloads each time reduces the chances of spurious retransmission.¶ 6.3. Handling Retry Packets A Retry packet causes a client to send another Initial packet, effectively restarting the connection process. A Retry packet indicates that the Initial packet was received but not processed. A Retry packet cannot be treated as an acknowledgment because it does not indicate that a packet was processed or specify the packet number.¶ Clients that receive a Retry packet reset congestion control and loss recovery state, including resetting any pending timers. Other connection state, in particular cryptographic handshake messages, is retained; see Section 17.2.5 of [QUIC-TRANSPORT].¶ The client MAY compute an RTT estimate to the server as the time period from when the first Initial packet was sent to when a Retry or a Version Negotiation packet is received. The client MAY use this value in place of its default for the initial RTT estimate.¶ 6.4. Discarding Keys and Packet State When Initial and Handshake packet protection keys are discarded (see Section 4.9 of [QUIC-TLS]), all packets that were sent with those keys can no longer be acknowledged because their acknowledgments cannot be processed. The sender MUST discard all recovery state associated with those packets and MUST remove them from the count of bytes in flight.¶ Endpoints stop sending and receiving Initial packets once they start exchanging Handshake packets; see Section 17.2.2.1 of [QUIC-TRANSPORT]. At this point, recovery state for all in-flight Initial packets is discarded.¶ When 0-RTT is rejected, recovery state for all in-flight 0-RTT packets is discarded.¶ If a server accepts 0-RTT, but does not buffer 0-RTT packets that arrive before Initial packets, early 0-RTT packets will be declared lost, but that is expected to be infrequent.¶ It is expected that keys are discarded at some time after the packets encrypted with them are either acknowledged or declared lost. However, Initial and Handshake secrets are discarded as soon as Handshake and 1-RTT keys are proven to be available to both client and server; see Section 4.9.1 of [QUIC-TLS].¶ 7. Congestion Control This document specifies a sender-side congestion controller for QUIC similar to TCP NewReno [RFC6582].¶ The signals QUIC provides for congestion control are generic and are designed to support different sender-side algorithms. A sender can unilaterally choose a different algorithm to use, such as CUBIC [RFC8312].¶ If a sender uses a different controller than that specified in this document, the chosen controller MUST conform to the congestion control guidelines specified in Section 3.1 of [RFC8085].¶ Similar to TCP, packets containing only ACK frames do not count toward bytes in flight and are not congestion controlled. Unlike TCP, QUIC can detect the loss of these packets and MAY use that information to adjust the congestion controller or the rate of ACK-only packets being sent, but this document does not describe a mechanism for doing so.¶ The congestion controller is per path, so packets sent on other paths do not alter the current path's congestion controller, as described in Section 9.4 of [QUIC-TRANSPORT].¶ The algorithm in this document specifies and uses the controller's congestion window in bytes.¶ An endpoint MUST NOT send a packet if it would cause bytes_in_flight (see Appendix B.2) to be larger than the congestion window, unless the packet is sent on a PTO timer expiration (see Section 6.2) or when entering recovery (see Section 7.3.2).¶ 7.1. Explicit Congestion Notification If a path has been validated to support Explicit Congestion Notification (ECN) [RFC3168] [RFC8311], QUIC treats a Congestion Experienced (CE) codepoint in the IP header as a signal of congestion. This document specifies an endpoint's response when the peer-reported ECN-CE count increases; see Section 13.4.2 of [QUIC-TRANSPORT].¶ 7.2. Initial and Minimum Congestion Window QUIC begins every connection in slow start with the congestion window set to an initial value. Endpoints SHOULD use an initial congestion window of ten times the maximum datagram size (max_datagram_size), while limiting the window to the larger of 14,720 bytes or twice the maximum datagram size. This follows the analysis and recommendations in [RFC6928], increasing the byte limit to account for the smaller 8-byte overhead of UDP compared to the 20-byte overhead for TCP.¶ If the maximum datagram size changes during the connection, the initial congestion window SHOULD be recalculated with the new size. If the maximum datagram size is decreased in order to complete the handshake, the congestion window SHOULD be set to the new initial congestion window.¶ Prior to validating the client's address, the server can be further limited by the anti-amplification limit as specified in Section 8.1 of [QUIC-TRANSPORT]. Though the anti-amplification limit can prevent the congestion window from being fully utilized and therefore slow down the increase in congestion window, it does not directly affect the congestion window.¶ The minimum congestion window is the smallest value the congestion window can attain in response to loss, an increase in the peer-reported ECN-CE count, or persistent congestion. The RECOMMENDED value is 2 * max_datagram_size.¶ 7.3. Congestion Control States The NewReno congestion controller described in this document has three distinct states, as shown in Figure 1.¶ New path or +------------+ persistent congestion | Slow | (O)---------------------->| Start | +------------+ | Loss or | ECN-CE increase | v +------------+ Loss or +------------+ | Congestion | ECN-CE increase | Recovery | | Avoidance |------------------>| Period | +------------+ +------------+ ^ | | | +----------------------------+ Acknowledgment of packet sent during recovery Figure 1: Congestion Control States and Transitions These states and the transitions between them are described in subsequent sections.¶ 7.3.1. Slow Start A NewReno sender is in slow start any time the congestion window is below the slow start threshold. A sender begins in slow start because the slow start threshold is initialized to an infinite value.¶ While a sender is in slow start, the congestion window increases by the number of bytes acknowledged when each acknowledgment is processed. This results in exponential growth of the congestion window.¶ The sender MUST exit slow start and enter a recovery period when a packet is lost or when the ECN-CE count reported by its peer increases.¶ A sender reenters slow start any time the congestion window is less than the slow start threshold, which only occurs after persistent congestion is declared.¶ 7.3.2. Recovery A NewReno sender enters a recovery period when it detects the loss of a packet or when the ECN-CE count reported by its peer increases. A sender that is already in a recovery period stays in it and does not reenter it.¶ On entering a recovery period, a sender MUST set the slow start threshold to half the value of the congestion window when loss is detected. The congestion window MUST be set to the reduced value of the slow start threshold before exiting the recovery period.¶ Implementations MAY reduce the congestion window immediately upon entering a recovery period or use other mechanisms, such as Proportional Rate Reduction [PRR], to reduce the congestion window more gradually. If the congestion window is reduced immediately, a single packet can be sent prior to reduction. This speeds up loss recovery if the data in the lost packet is retransmitted and is similar to TCP as described in Section 5 of [RFC6675].¶ The recovery period aims to limit congestion window reduction to once per round trip. Therefore, during a recovery period, the congestion window does not change in response to new losses or increases in the ECN-CE count.¶ A recovery period ends and the sender enters congestion avoidance when a packet sent during the recovery period is acknowledged. This is slightly different from TCP's definition of recovery, which ends when the lost segment that started recovery is acknowledged [RFC5681].¶ 7.3.3. Congestion Avoidance A NewReno sender is in congestion avoidance any time the congestion window is at or above the slow start threshold and not in a recovery period.¶ A sender in congestion avoidance uses an Additive Increase Multiplicative Decrease (AIMD) approach that MUST limit the increase to the congestion window to at most one maximum datagram size for each congestion window that is acknowledged.¶ The sender exits congestion avoidance and enters a recovery period when a packet is lost or when the ECN-CE count reported by its peer increases.¶ 7.4. Ignoring Loss of Undecryptable Packets During the handshake, some packet protection keys might not be available when a packet arrives, and the receiver can choose to drop the packet. In particular, Handshake and 0-RTT packets cannot be processed until the Initial packets arrive, and 1-RTT packets cannot be processed until the handshake completes. Endpoints MAY ignore the loss of Handshake, 0-RTT, and 1-RTT packets that might have arrived before the peer had packet protection keys to process those packets. Endpoints MUST NOT ignore the loss of packets that were sent after the earliest acknowledged packet in a given packet number space.¶ 7.5. Probe Timeout Probe packets MUST NOT be blocked by the congestion controller. A sender MUST however count these packets as being additionally in flight, since these packets add network load without establishing packet loss. Note that sending probe packets might cause the sender's bytes in flight to exceed the congestion window until an acknowledgment is received that establishes loss or delivery of packets.¶ 7.6. Persistent Congestion When a sender establishes loss of all packets sent over a long enough duration, the network is considered to be experiencing persistent congestion.¶ 7.6.1. Duration The persistent congestion duration is computed as follows:¶ (smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay) * kPersistentCongestionThreshold ¶ Unlike the PTO computation in Section 6.2, this duration includes the max_ack_delay irrespective of the packet number spaces in which losses are established.¶ This duration allows a sender to send as many packets before establishing persistent congestion, including some in response to PTO expiration, as TCP does with Tail Loss Probes [RFC8985] and an RTO [RFC5681].¶ Larger values of kPersistentCongestionThreshold cause the sender to become less responsive to persistent congestion in the network, which can result in aggressive sending into a congested network. Too small a value can result in a sender declaring persistent congestion unnecessarily, resulting in reduced throughput for the sender.¶ The RECOMMENDED value for kPersistentCongestionThreshold is 3, which results in behavior that is approximately equivalent to a TCP sender declaring an RTO after two TLPs.¶ This design does not use consecutive PTO events to establish persistent congestion, since application patterns impact PTO expiration. For example, a sender that sends small amounts of data with silence periods between them restarts the PTO timer every time it sends, potentially preventing the PTO timer from expiring for a long period of time, even when no acknowledgments are being received. The use of a duration enables a sender to establish persistent congestion without depending on PTO expiration.¶ 7.6.2. Establishing Persistent Congestion A sender establishes persistent congestion after the receipt of an acknowledgment if two packets that are ack-eliciting are declared lost, and:¶ across all packet number spaces, none of the packets sent between the send times of these two packets are acknowledged;¶ the duration between the send times of these two packets exceeds the persistent congestion duration (Section 7.6.1); and¶ a prior RTT sample existed when these two packets were sent.¶ These two packets MUST be ack-eliciting, since a receiver is required to acknowledge only ack-eliciting packets within its maximum acknowledgment delay; see Section 13.2 of [QUIC-TRANSPORT].¶ The persistent congestion period SHOULD NOT start until there is at least one RTT sample. Before the first RTT sample, a sender arms its PTO timer based on the initial RTT (Section 6.2.2), which could be substantially larger than the actual RTT. Requiring a prior RTT sample prevents a sender from establishing persistent congestion with potentially too few probes.¶ Since network congestion is not affected by packet number spaces, persistent congestion SHOULD consider packets sent across packet number spaces. A sender that does not have state for all packet number spaces or an implementation that cannot compare send times across packet number spaces MAY use state for just the packet number space that was acknowledged. This might result in erroneously declaring persistent congestion, but it will not lead to a failure to detect persistent congestion.¶ When persistent congestion is declared, the sender's congestion window MUST be reduced to the minimum congestion window (kMinimumWindow), similar to a TCP sender's response on an RTO [RFC5681].¶ 7.6.3. Example The following example illustrates how a sender might establish persistent congestion. Assume:¶ smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay = 2 kPersistentCongestionThreshold = 3 ¶ Consider the following sequence of events:¶ Table 1 Time Action t=0 Send packet #1 (application data) t=1 Send packet #2 (application data) t=1.2 Receive acknowledgment of #1 t=2 Send packet #3 (application data) t=3 Send packet #4 (application data) t=4 Send packet #5 (application data) t=5 Send packet #6 (application data) t=6 Send packet #7 (application data) t=8 Send packet #8 (PTO 1) t=12 Send packet #9 (PTO 2) t=12.2 Receive acknowledgment of #9 Packets 2 through 8 are declared lost when the acknowledgment for packet 9 is received at t = 12.2.¶ The congestion period is calculated as the time between the oldest and newest lost packets: 8 - 1 = 7. The persistent congestion duration is 2 * 3 = 6. Because the threshold was reached and because none of the packets between the oldest and the newest lost packets were acknowledged, the network is considered to have experienced persistent congestion.¶ While this example shows PTO expiration, they are not required for persistent congestion to be established.¶ 7.7. Pacing A sender SHOULD pace sending of all in-flight packets based on input from the congestion controller.¶ Sending multiple packets into the network without any delay between them creates a packet burst that might cause short-term congestion and losses. Senders MUST either use pacing or limit such bursts. Senders SHOULD limit bursts to the initial congestion window; see Section 7.2. A sender with knowledge that the network path to the receiver can absorb larger bursts MAY use a higher limit.¶ An implementation should take care to architect its congestion controller to work well with a pacer. For instance, a pacer might wrap the congestion controller and control the availability of the congestion window, or a pacer might pace out packets handed to it by the congestion controller.¶ Timely delivery of ACK frames is important for efficient loss recovery. To avoid delaying their delivery to the peer, packets containing only ACK frames SHOULD therefore not be paced.¶ Endpoints can implement pacing as they choose. A perfectly paced sender spreads packets exactly evenly over time. For a window-based congestion controller, such as the one in this document, that rate can be computed by averaging the congestion window over the RTT. Expressed as a rate in units of bytes per time, where congestion_window is in bytes:¶ rate = N * congestion_window / smoothed_rtt ¶ Or expressed as an inter-packet interval in units of time:¶ interval = ( smoothed_rtt * packet_size / congestion_window ) / N ¶ Using a value for N that is small, but at least 1 (for example, 1.25) ensures that variations in RTT do not result in underutilization of the congestion window.¶ Practical considerations, such as packetization, scheduling delays, and computational efficiency, can cause a sender to deviate from this rate over time periods that are much shorter than an RTT.¶ One possible implementation strategy for pacing uses a leaky bucket algorithm, where the capacity of the \"bucket\" is limited to the maximum burst size and the rate the \"bucket\" fills is determined by the above function.¶ 7.8. Underutilizing the Congestion Window When bytes in flight is smaller than the congestion window and sending is not pacing limited, the congestion window is underutilized. This can happen due to insufficient application data or flow control limits. When this occurs, the congestion window SHOULD NOT be increased in either slow start or congestion avoidance.¶ A sender that paces packets (see Section 7.7) might delay sending packets and not fully utilize the congestion window due to this delay. A sender SHOULD NOT consider itself application limited if it would have fully utilized the congestion window without pacing delay.¶ A sender MAY implement alternative mechanisms to update its congestion window after periods of underutilization, such as those proposed for TCP in [RFC7661].¶ 8. Security Considerations 8.1. Loss and Congestion Signals Loss detection and congestion control fundamentally involve the consumption of signals, such as delay, loss, and ECN markings, from unauthenticated entities. An attacker can cause endpoints to reduce their sending rate by manipulating these signals: by dropping packets, by altering path delay strategically, or by changing ECN codepoints.¶ 8.2. Traffic Analysis Packets that carry only ACK frames can be heuristically identified by observing packet size. Acknowledgment patterns may expose information about link characteristics or application behavior. To reduce leaked information, endpoints can bundle acknowledgments with other frames, or they can use PADDING frames at a potential cost to performance.¶ 8.3. Misreporting ECN Markings A receiver can misreport ECN markings to alter the congestion response of a sender. Suppressing reports of ECN-CE markings could cause a sender to increase their send rate. This increase could result in congestion and loss.¶ A sender can detect suppression of reports by marking occasional packets that it sends with an ECN-CE marking. If a packet sent with an ECN-CE marking is not reported as having been CE marked when the packet is acknowledged, then the sender can disable ECN for that path by not setting ECN-Capable Transport (ECT) codepoints in subsequent packets sent on that path [RFC3168].¶ Reporting additional ECN-CE markings will cause a sender to reduce their sending rate, which is similar in effect to advertising reduced connection flow control limits and so no advantage is gained by doing so.¶ Endpoints choose the congestion controller that they use. Congestion controllers respond to reports of ECN-CE by reducing their rate, but the response may vary. Markings can be treated as equivalent to loss [RFC3168], but other responses can be specified, such as [RFC8511] or [RFC8311].¶ 9. References 9.1. Normative References [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., \"Using TLS to Secure QUIC\", RFC 9001, DOI 10.17487/RFC9001, May 2021, <https://www.rfc-editor.org/info/rfc9001>. [QUIC-TRANSPORT] Iyengar, J., Ed. and M. Thomson, Ed., \"QUIC: A UDP-Based Multiplexed and Secure Transport\", RFC 9000, DOI 10.17487/RFC9000, May 2021, <https://www.rfc-editor.org/info/rfc9000>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, DOI 10.17487/RFC3168, September 2001, <https://www.rfc-editor.org/info/rfc3168>. [RFC8085] Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085, March 2017, <https://www.rfc-editor.org/info/rfc8085>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 9.2. Informative References [FACK] Mathis, M. and J. Mahdavi, \"Forward acknowledgement: Refining TCP Congestion Control\", ACM SIGCOMM Computer Communication Review, DOI 10.1145/248157.248181, August 1996, <https://doi.org/10.1145/248157.248181>. [PRR] Mathis, M., Dukkipati, N., and Y. Cheng, \"Proportional Rate Reduction for TCP\", RFC 6937, DOI 10.17487/RFC6937, May 2013, <https://www.rfc-editor.org/info/rfc6937>. [RETRANSMISSION] Karn, P. and C. Partridge, \"Improving Round-Trip Time Estimates in Reliable Transport Protocols\", ACM Transactions on Computer Systems, DOI 10.1145/118544.118549, November 1991, <https://doi.org/10.1145/118544.118549>. [RFC2018] Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP Selective Acknowledgment Options\", RFC 2018, DOI 10.17487/RFC2018, October 1996, <https://www.rfc-editor.org/info/rfc2018>. [RFC3465] Allman, M., \"TCP Congestion Control with Appropriate Byte Counting (ABC)\", RFC 3465, DOI 10.17487/RFC3465, February 2003, <https://www.rfc-editor.org/info/rfc3465>. [RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>. [RFC5682] Sarolahti, P., Kojo, M., Yamamoto, K., and M. Hata, \"Forward RTO-Recovery (F-RTO): An Algorithm for Detecting Spurious Retransmission Timeouts with TCP\", RFC 5682, DOI 10.17487/RFC5682, September 2009, <https://www.rfc-editor.org/info/rfc5682>. [RFC5827] Allman, M., Avrachenkov, K., Ayesta, U., Blanton, J., and P. Hurtig, \"Early Retransmit for TCP and Stream Control Transmission Protocol (SCTP)\", RFC 5827, DOI 10.17487/RFC5827, May 2010, <https://www.rfc-editor.org/info/rfc5827>. [RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, DOI 10.17487/RFC6298, June 2011, <https://www.rfc-editor.org/info/rfc6298>. [RFC6582] Henderson, T., Floyd, S., Gurtov, A., and Y. Nishida, \"The NewReno Modification to TCP's Fast Recovery Algorithm\", RFC 6582, DOI 10.17487/RFC6582, April 2012, <https://www.rfc-editor.org/info/rfc6582>. [RFC6675] Blanton, E., Allman, M., Wang, L., Jarvinen, I., Kojo, M., and Y. Nishida, \"A Conservative Loss Recovery Algorithm Based on Selective Acknowledgment (SACK) for TCP\", RFC 6675, DOI 10.17487/RFC6675, August 2012, <https://www.rfc-editor.org/info/rfc6675>. [RFC6928] Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis, \"Increasing TCP's Initial Window\", RFC 6928, DOI 10.17487/RFC6928, April 2013, <https://www.rfc-editor.org/info/rfc6928>. [RFC7661] Fairhurst, G., Sathiaseelan, A., and R. Secchi, \"Updating TCP to Support Rate-Limited Traffic\", RFC 7661, DOI 10.17487/RFC7661, October 2015, <https://www.rfc-editor.org/info/rfc7661>. [RFC8311] Black, D., \"Relaxing Restrictions on Explicit Congestion Notification (ECN) Experimentation\", RFC 8311, DOI 10.17487/RFC8311, January 2018, <https://www.rfc-editor.org/info/rfc8311>. [RFC8312] Rhee, I., Xu, L., Ha, S., Zimmermann, A., Eggert, L., and R. Scheffenegger, \"CUBIC for Fast Long-Distance Networks\", RFC 8312, DOI 10.17487/RFC8312, February 2018, <https://www.rfc-editor.org/info/rfc8312>. [RFC8511] Khademi, N., Welzl, M., Armitage, G., and G. Fairhurst, \"TCP Alternative Backoff with ECN (ABE)\", RFC 8511, DOI 10.17487/RFC8511, December 2018, <https://www.rfc-editor.org/info/rfc8511>. [RFC8985] Cheng, Y., Cardwell, N., Dukkipati, N., and P. Jha, \"The RACK-TLP Loss Detection Algorithm for TCP\", RFC 8985, DOI 10.17487/RFC8985, February 2021, <https://www.rfc-editor.org/info/rfc8985>. Appendix A. Loss Recovery Pseudocode We now describe an example implementation of the loss detection mechanisms described in Section 6.¶ The pseudocode segments in this section are licensed as Code Components; see the copyright notice.¶ A.1. Tracking Sent Packets To correctly implement congestion control, a QUIC sender tracks every ack-eliciting packet until the packet is acknowledged or lost. It is expected that implementations will be able to access this information by packet number and crypto context and store the per-packet fields (Appendix A.1.1) for loss recovery and congestion control.¶ After a packet is declared lost, the endpoint can still maintain state for it for an amount of time to allow for packet reordering; see Section 13.3 of [QUIC-TRANSPORT]. This enables a sender to detect spurious retransmissions.¶ Sent packets are tracked for each packet number space, and ACK processing only applies to a single space.¶ A.1.1. Sent Packet Fields packet_number: The packet number of the sent packet.¶ ack_eliciting: A Boolean that indicates whether a packet is ack-eliciting. If true, it is expected that an acknowledgment will be received, though the peer could delay sending the ACK frame containing it by up to the max_ack_delay.¶ in_flight: A Boolean that indicates whether the packet counts toward bytes in flight.¶ sent_bytes: The number of bytes sent in the packet, not including UDP or IP overhead, but including QUIC framing overhead.¶ time_sent: The time the packet was sent.¶ A.2. Constants of Interest Constants used in loss recovery are based on a combination of RFCs, papers, and common practice.¶ kPacketThreshold: Maximum reordering in packets before packet threshold loss detection considers a packet lost. The value recommended in Section 6.1.1 is 3.¶ kTimeThreshold: Maximum reordering in time before time threshold loss detection considers a packet lost. Specified as an RTT multiplier. The value recommended in Section 6.1.2 is 9/8.¶ kGranularity: Timer granularity. This is a system-dependent value, and Section 6.1.2 recommends a value of 1 ms.¶ kInitialRtt: The RTT used before an RTT sample is taken. The value recommended in Section 6.2.2 is 333 ms.¶ kPacketNumberSpace: An enum to enumerate the three packet number spaces:¶ enum kPacketNumberSpace { Initial, Handshake, ApplicationData, } ¶ A.3. Variables of Interest Variables required to implement the congestion control mechanisms are described in this section.¶ latest_rtt: The most recent RTT measurement made when receiving an acknowledgment for a previously unacknowledged packet.¶ smoothed_rtt: The smoothed RTT of the connection, computed as described in Section 5.3.¶ rttvar: The RTT variation, computed as described in Section 5.3.¶ min_rtt: The minimum RTT seen over a period of time, ignoring acknowledgment delay, as described in Section 5.2.¶ first_rtt_sample: The time that the first RTT sample was obtained.¶ max_ack_delay: The maximum amount of time by which the receiver intends to delay acknowledgments for packets in the Application Data packet number space, as defined by the eponymous transport parameter (Section 18.2 of [QUIC-TRANSPORT]). Note that the actual ack_delay in a received ACK frame may be larger due to late timers, reordering, or loss.¶ loss_detection_timer: Multi-modal timer used for loss detection.¶ pto_count: The number of times a PTO has been sent without receiving an acknowledgment.¶ time_of_last_ack_eliciting_packet[kPacketNumberSpace]: The time the most recent ack-eliciting packet was sent.¶ largest_acked_packet[kPacketNumberSpace]: The largest packet number acknowledged in the packet number space so far.¶ loss_time[kPacketNumberSpace]: The time at which the next packet in that packet number space can be considered lost based on exceeding the reordering window in time.¶ sent_packets[kPacketNumberSpace]: An association of packet numbers in a packet number space to information about them. Described in detail above in Appendix A.1.¶ A.4. Initialization At the beginning of the connection, initialize the loss detection variables as follows:¶ loss_detection_timer.reset() pto_count = 0 latest_rtt = 0 smoothed_rtt = kInitialRtt rttvar = kInitialRtt / 2 min_rtt = 0 first_rtt_sample = 0 for pn_space in [ Initial, Handshake, ApplicationData ]: largest_acked_packet[pn_space] = infinite time_of_last_ack_eliciting_packet[pn_space] = 0 loss_time[pn_space] = 0 ¶ A.5. On Sending a Packet After a packet is sent, information about the packet is stored. The parameters to OnPacketSent are described in detail above in Appendix A.1.1.¶ Pseudocode for OnPacketSent follows:¶ OnPacketSent(packet_number, pn_space, ack_eliciting, in_flight, sent_bytes): sent_packets[pn_space][packet_number].packet_number = packet_number sent_packets[pn_space][packet_number].time_sent = now() sent_packets[pn_space][packet_number].ack_eliciting = ack_eliciting sent_packets[pn_space][packet_number].in_flight = in_flight sent_packets[pn_space][packet_number].sent_bytes = sent_bytes if (in_flight): if (ack_eliciting): time_of_last_ack_eliciting_packet[pn_space] = now() OnPacketSentCC(sent_bytes) SetLossDetectionTimer() ¶ A.6. On Receiving a Datagram When a server is blocked by anti-amplification limits, receiving a datagram unblocks it, even if none of the packets in the datagram are successfully processed. In such a case, the PTO timer will need to be rearmed.¶ Pseudocode for OnDatagramReceived follows:¶ OnDatagramReceived(datagram): // If this datagram unblocks the server, arm the // PTO timer to avoid deadlock. if (server was at anti-amplification limit): SetLossDetectionTimer() if loss_detection_timer.timeout < now(): // Execute PTO if it would have expired // while the amplification limit applied. OnLossDetectionTimeout() ¶ A.7. On Receiving an Acknowledgment When an ACK frame is received, it may newly acknowledge any number of packets.¶ Pseudocode for OnAckReceived and UpdateRtt follow:¶ IncludesAckEliciting(packets): for packet in packets: if (packet.ack_eliciting): return true return false OnAckReceived(ack, pn_space): if (largest_acked_packet[pn_space] == infinite): largest_acked_packet[pn_space] = ack.largest_acked else: largest_acked_packet[pn_space] = max(largest_acked_packet[pn_space], ack.largest_acked) // DetectAndRemoveAckedPackets finds packets that are newly // acknowledged and removes them from sent_packets. newly_acked_packets = DetectAndRemoveAckedPackets(ack, pn_space) // Nothing to do if there are no newly acked packets. if (newly_acked_packets.empty()): return // Update the RTT if the largest acknowledged is newly acked // and at least one ack-eliciting was newly acked. if (newly_acked_packets.largest().packet_number == ack.largest_acked && IncludesAckEliciting(newly_acked_packets)): latest_rtt = now() - newly_acked_packets.largest().time_sent UpdateRtt(ack.ack_delay) // Process ECN information if present. if (ACK frame contains ECN information): ProcessECN(ack, pn_space) lost_packets = DetectAndRemoveLostPackets(pn_space) if (!lost_packets.empty()): OnPacketsLost(lost_packets) OnPacketsAcked(newly_acked_packets) // Reset pto_count unless the client is unsure if // the server has validated the client's address. if (PeerCompletedAddressValidation()): pto_count = 0 SetLossDetectionTimer() UpdateRtt(ack_delay): if (first_rtt_sample == 0): min_rtt = latest_rtt smoothed_rtt = latest_rtt rttvar = latest_rtt / 2 first_rtt_sample = now() return // min_rtt ignores acknowledgment delay. min_rtt = min(min_rtt, latest_rtt) // Limit ack_delay by max_ack_delay after handshake // confirmation. if (handshake confirmed): ack_delay = min(ack_delay, max_ack_delay) // Adjust for acknowledgment delay if plausible. adjusted_rtt = latest_rtt if (latest_rtt >= min_rtt + ack_delay): adjusted_rtt = latest_rtt - ack_delay rttvar = 3/4 * rttvar + 1/4 * abs(smoothed_rtt - adjusted_rtt) smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * adjusted_rtt ¶ A.8. Setting the Loss Detection Timer QUIC loss detection uses a single timer for all timeout loss detection. The duration of the timer is based on the timer's mode, which is set in the packet and timer events further below. The function SetLossDetectionTimer defined below shows how the single timer is set.¶ This algorithm may result in the timer being set in the past, particularly if timers wake up late. Timers set in the past fire immediately.¶ Pseudocode for SetLossDetectionTimer follows (where the \"^\" operator represents exponentiation):¶ GetLossTimeAndSpace(): time = loss_time[Initial] space = Initial for pn_space in [ Handshake, ApplicationData ]: if (time == 0 || loss_time[pn_space] < time): time = loss_time[pn_space]; space = pn_space return time, space GetPtoTimeAndSpace(): duration = (smoothed_rtt + max(4 * rttvar, kGranularity)) * (2 ^ pto_count) // Anti-deadlock PTO starts from the current time if (no ack-eliciting packets in flight): assert(!PeerCompletedAddressValidation()) if (has handshake keys): return (now() + duration), Handshake else: return (now() + duration), Initial pto_timeout = infinite pto_space = Initial for space in [ Initial, Handshake, ApplicationData ]: if (no ack-eliciting packets in flight in space): continue; if (space == ApplicationData): // Skip Application Data until handshake confirmed. if (handshake is not confirmed): return pto_timeout, pto_space // Include max_ack_delay and backoff for Application Data. duration += max_ack_delay * (2 ^ pto_count) t = time_of_last_ack_eliciting_packet[space] + duration if (t < pto_timeout): pto_timeout = t pto_space = space return pto_timeout, pto_space PeerCompletedAddressValidation(): // Assume clients validate the server's address implicitly. if (endpoint is server): return true // Servers complete address validation when a // protected packet is received. return has received Handshake ACK || handshake confirmed SetLossDetectionTimer(): earliest_loss_time, _ = GetLossTimeAndSpace() if (earliest_loss_time != 0): // Time threshold loss detection. loss_detection_timer.update(earliest_loss_time) return if (server is at anti-amplification limit): // The server's timer is not set if nothing can be sent. loss_detection_timer.cancel() return if (no ack-eliciting packets in flight && PeerCompletedAddressValidation()): // There is nothing to detect lost, so no timer is set. // However, the client needs to arm the timer if the // server might be blocked by the anti-amplification limit. loss_detection_timer.cancel() return timeout, _ = GetPtoTimeAndSpace() loss_detection_timer.update(timeout) ¶ A.9. On Timeout When the loss detection timer expires, the timer's mode determines the action to be performed.¶ Pseudocode for OnLossDetectionTimeout follows:¶ OnLossDetectionTimeout(): earliest_loss_time, pn_space = GetLossTimeAndSpace() if (earliest_loss_time != 0): // Time threshold loss Detection lost_packets = DetectAndRemoveLostPackets(pn_space) assert(!lost_packets.empty()) OnPacketsLost(lost_packets) SetLossDetectionTimer() return if (no ack-eliciting packets in flight): assert(!PeerCompletedAddressValidation()) // Client sends an anti-deadlock packet: Initial is padded // to earn more anti-amplification credit, // a Handshake packet proves address ownership. if (has Handshake keys): SendOneAckElicitingHandshakePacket() else: SendOneAckElicitingPaddedInitialPacket() else: // PTO. Send new data if available, else retransmit old data. // If neither is available, send a single PING frame. _, pn_space = GetPtoTimeAndSpace() SendOneOrTwoAckElicitingPackets(pn_space) pto_count++ SetLossDetectionTimer() ¶ A.10. Detecting Lost Packets DetectAndRemoveLostPackets is called every time an ACK is received or the time threshold loss detection timer expires. This function operates on the sent_packets for that packet number space and returns a list of packets newly detected as lost.¶ Pseudocode for DetectAndRemoveLostPackets follows:¶ DetectAndRemoveLostPackets(pn_space): assert(largest_acked_packet[pn_space] != infinite) loss_time[pn_space] = 0 lost_packets = [] loss_delay = kTimeThreshold * max(latest_rtt, smoothed_rtt) // Minimum time of kGranularity before packets are deemed lost. loss_delay = max(loss_delay, kGranularity) // Packets sent before this time are deemed lost. lost_send_time = now() - loss_delay foreach unacked in sent_packets[pn_space]: if (unacked.packet_number > largest_acked_packet[pn_space]): continue // Mark packet as lost, or set time when it should be marked. // Note: The use of kPacketThreshold here assumes that there // were no sender-induced gaps in the packet number space. if (unacked.time_sent <= lost_send_time || largest_acked_packet[pn_space] >= unacked.packet_number + kPacketThreshold): sent_packets[pn_space].remove(unacked.packet_number) lost_packets.insert(unacked) else: if (loss_time[pn_space] == 0): loss_time[pn_space] = unacked.time_sent + loss_delay else: loss_time[pn_space] = min(loss_time[pn_space], unacked.time_sent + loss_delay) return lost_packets ¶ A.11. Upon Dropping Initial or Handshake Keys When Initial or Handshake keys are discarded, packets from the space are discarded and loss detection state is updated.¶ Pseudocode for OnPacketNumberSpaceDiscarded follows:¶ OnPacketNumberSpaceDiscarded(pn_space): assert(pn_space != ApplicationData) RemoveFromBytesInFlight(sent_packets[pn_space]) sent_packets[pn_space].clear() // Reset the loss detection and PTO timer time_of_last_ack_eliciting_packet[pn_space] = 0 loss_time[pn_space] = 0 pto_count = 0 SetLossDetectionTimer() ¶ Appendix B. Congestion Control Pseudocode We now describe an example implementation of the congestion controller described in Section 7.¶ The pseudocode segments in this section are licensed as Code Components; see the copyright notice.¶ B.1. Constants of Interest Constants used in congestion control are based on a combination of RFCs, papers, and common practice.¶ kInitialWindow: Default limit on the initial bytes in flight as described in Section 7.2.¶ kMinimumWindow: Minimum congestion window in bytes as described in Section 7.2.¶ kLossReductionFactor: Scaling factor applied to reduce the congestion window when a new loss event is detected. Section 7 recommends a value of 0.5.¶ kPersistentCongestionThreshold: Period of time for persistent congestion to be established, specified as a PTO multiplier. Section 7.6 recommends a value of 3.¶ B.2. Variables of Interest Variables required to implement the congestion control mechanisms are described in this section.¶ max_datagram_size: The sender's current maximum payload size. This does not include UDP or IP overhead. The max datagram size is used for congestion window computations. An endpoint sets the value of this variable based on its Path Maximum Transmission Unit (PMTU; see Section 14.2 of [QUIC-TRANSPORT]), with a minimum value of 1200 bytes.¶ ecn_ce_counters[kPacketNumberSpace]: The highest value reported for the ECN-CE counter in the packet number space by the peer in an ACK frame. This value is used to detect increases in the reported ECN-CE counter.¶ bytes_in_flight: The sum of the size in bytes of all sent packets that contain at least one ack-eliciting or PADDING frame and have not been acknowledged or declared lost. The size does not include IP or UDP overhead, but does include the QUIC header and Authenticated Encryption with Associated Data (AEAD) overhead. Packets only containing ACK frames do not count toward bytes_in_flight to ensure congestion control does not impede congestion feedback.¶ congestion_window: Maximum number of bytes allowed to be in flight.¶ congestion_recovery_start_time: The time the current recovery period started due to the detection of loss or ECN. When a packet sent after this time is acknowledged, QUIC exits congestion recovery.¶ ssthresh: Slow start threshold in bytes. When the congestion window is below ssthresh, the mode is slow start and the window grows by the number of bytes acknowledged.¶ The congestion control pseudocode also accesses some of the variables from the loss recovery pseudocode.¶ B.3. Initialization At the beginning of the connection, initialize the congestion control variables as follows:¶ congestion_window = kInitialWindow bytes_in_flight = 0 congestion_recovery_start_time = 0 ssthresh = infinite for pn_space in [ Initial, Handshake, ApplicationData ]: ecn_ce_counters[pn_space] = 0 ¶ B.4. On Packet Sent Whenever a packet is sent and it contains non-ACK frames, the packet increases bytes_in_flight.¶ OnPacketSentCC(sent_bytes): bytes_in_flight += sent_bytes ¶ B.5. On Packet Acknowledgment This is invoked from loss detection's OnAckReceived and is supplied with the newly acked_packets from sent_packets.¶ In congestion avoidance, implementers that use an integer representation for congestion_window should be careful with division and can use the alternative approach suggested in Section 2.1 of [RFC3465].¶ InCongestionRecovery(sent_time): return sent_time <= congestion_recovery_start_time OnPacketsAcked(acked_packets): for acked_packet in acked_packets: OnPacketAcked(acked_packet) OnPacketAcked(acked_packet): if (!acked_packet.in_flight): return; // Remove from bytes_in_flight. bytes_in_flight -= acked_packet.sent_bytes // Do not increase congestion_window if application // limited or flow control limited. if (IsAppOrFlowControlLimited()) return // Do not increase congestion window in recovery period. if (InCongestionRecovery(acked_packet.time_sent)): return if (congestion_window < ssthresh): // Slow start. congestion_window += acked_packet.sent_bytes else: // Congestion avoidance. congestion_window += max_datagram_size * acked_packet.sent_bytes / congestion_window ¶ B.6. On New Congestion Event This is invoked from ProcessECN and OnPacketsLost when a new congestion event is detected. If not already in recovery, this starts a recovery period and reduces the slow start threshold and congestion window immediately.¶ OnCongestionEvent(sent_time): // No reaction if already in a recovery period. if (InCongestionRecovery(sent_time)): return // Enter recovery period. congestion_recovery_start_time = now() ssthresh = congestion_window * kLossReductionFactor congestion_window = max(ssthresh, kMinimumWindow) // A packet can be sent to speed up loss recovery. MaybeSendOnePacket() ¶ B.7. Process ECN Information This is invoked when an ACK frame with an ECN section is received from the peer.¶ ProcessECN(ack, pn_space): // If the ECN-CE counter reported by the peer has increased, // this could be a new congestion event. if (ack.ce_counter > ecn_ce_counters[pn_space]): ecn_ce_counters[pn_space] = ack.ce_counter sent_time = sent_packets[ack.largest_acked].time_sent OnCongestionEvent(sent_time) ¶ B.8. On Packets Lost This is invoked when DetectAndRemoveLostPackets deems packets lost.¶ OnPacketsLost(lost_packets): sent_time_of_last_loss = 0 // Remove lost packets from bytes_in_flight. for lost_packet in lost_packets: if lost_packet.in_flight: bytes_in_flight -= lost_packet.sent_bytes sent_time_of_last_loss = max(sent_time_of_last_loss, lost_packet.time_sent) // Congestion event if in-flight packets were lost if (sent_time_of_last_loss != 0): OnCongestionEvent(sent_time_of_last_loss) // Reset the congestion window if the loss of these // packets indicates persistent congestion. // Only consider packets sent after getting an RTT sample. if (first_rtt_sample == 0): return pc_lost = [] for lost in lost_packets: if lost.time_sent > first_rtt_sample: pc_lost.insert(lost) if (InPersistentCongestion(pc_lost)): congestion_window = kMinimumWindow congestion_recovery_start_time = 0 ¶ B.9. Removing Discarded Packets from Bytes in Flight When Initial or Handshake keys are discarded, packets sent in that space no longer count toward bytes in flight.¶ Pseudocode for RemoveFromBytesInFlight follows:¶ RemoveFromBytesInFlight(discarded_packets): // Remove any unacknowledged packets from flight. foreach packet in discarded_packets: if packet.in_flight bytes_in_flight -= size ¶ Contributors The IETF QUIC Working Group received an enormous amount of support from many people. The following people provided substantive contributions to this document:¶ Alessandro Ghedini¶ Benjamin Saunders¶ Gorry Fairhurst¶ 山本和彦 (Kazu Yamamoto)¶ 奥 一穂 (Kazuho Oku)¶ Lars Eggert¶ Magnus Westerlund¶ Marten Seemann¶ Martin Duke¶ Martin Thomson¶ Mirja Kühlewind¶ Nick Banks¶ Praveen Balasubramanian¶ Authors' Addresses Jana Iyengar (editor) Fastly Email: jri.ietf@gmail.com Ian Swett (editor) Google Email: ianswett@google.com"
    },
    {
        "Number": "9010",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves",
        "Authors": [
            "P. Thubert",
            "Ed.",
            "M. Richardson"
        ],
        "Date": "2021-04",
        "More Info": "Errata, Updates RFC 6550, RFC 6775, RFC 8505, Updated by RFC 9685",
        "Status": "Proposed Standard",
        "Abstract": "This specification provides a mechanism for a host that implements a routing-agnostic interface based on IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery to obtain reachability services across a network that leverages RFC 6550 for its routing operations. It updates RFCs 6550, 6775, and 8505.",
        "Keywords": [
            "IPv6",
            "ND",
            "Redistribution"
        ],
        "Content": "RFC 9010: Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves RFC 9010 RPL-Unaware Leaves April 2021 Thubert & Richardson Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9010 Updates: 6550, 6775, 8505 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: P. Thubert, Ed. Cisco Systems M. Richardson Sandelman RFC 9010 Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves Abstract This specification provides a mechanism for a host that implements a routing-agnostic interface based on IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery to obtain reachability services across a network that leverages RFC 6550 for its routing operations. It updates RFCs 6550, 6775, and 8505.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9010.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Requirements Language 2.2.  Glossary 2.3.  Related Documents 3.  RPL External Routes and Data-Plane Artifacts 4.  6LoWPAN Neighbor Discovery 4.1.  Address Registration per RFC 6775 4.2.  Extended Address Registration per RFC 8505 4.2.1.  R Flag 4.2.2.  TID, \"I\" Field, and Opaque Field 4.2.3.  Route Ownership Verifier 4.3.  EDAR/EDAC per RFC 8505 4.3.1.  Capability Indication Option per RFC 7400 5.  Requirements for the RPL-Unaware Leaf 5.1.  Support of 6LoWPAN ND 5.2.  Support of IPv6 Encapsulation 5.3.  Support of the Hop-by-Hop Header 5.4.  Support of the Routing Header 6.  Enhancements to RFC 6550 6.1.  Updated RPL Target Option 6.2.  Additional Flag in the RPL DODAG Configuration Option 6.3.  Updated RPL Status 7.  Enhancements to RFC 9009 8.  Enhancements to RFCs 6775 and 8505 9.  Protocol Operations for Unicast Addresses 9.1.  General Flow 9.2.  Detailed Operation 9.2.1.  Perspective of the 6LN Acting as a RUL 9.2.2.  Perspective of the 6LR Acting as a Border Router 9.2.3.  Perspective of the RPL DODAG Root 9.2.4.  Perspective of the 6LBR 10. Protocol Operations for Multicast Addresses 11. Security Considerations 12. IANA Considerations 12.1.  Fixing the Address Registration Option Flags 12.2.  Resizing the ARO Status Values 12.3.  New RPL DODAG Configuration Option Flag 12.4.  RPL Target Option Flags Registry 12.5.  New Subregistry for RPL Non-Rejection Status Values 12.6.  New Subregistry for RPL Rejection Status Values 13. References 13.1.  Normative References 13.2.  Informative References Appendix A.  Example Compression Acknowledgments Authors' Addresses 1. Introduction The design of Low-Power and Lossy Networks (LLNs) is generally focused on saving energy, which is the most constrained resource of all. Other design constraints, such as a limited memory capacity, duty cycling of the LLN devices, and low-power lossy transmissions, derive from that primary concern.¶ The IETF produced \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550] to provide routing services for IPv6 [RFC8200] within such constraints. RPL belongs to the class of distance-vector protocols -- which, compared to link-state protocols, limit the amount of topological knowledge that needs to be installed and maintained in each node -- and does not require convergence to avoid micro-loops.¶ To save signaling and routing state in constrained networks, RPL allows a path stretch (see [RFC6687]), whereby routing is only performed along a Destination-Oriented Directed Acyclic Graph (DODAG) that is optimized to reach a root node, as opposed to along the shortest path between two peers, whatever that would mean in a given LLN. This trades the quality of peer-to-peer (P2P) paths for a vastly reduced amount of control traffic and routing state that would be required to operate an any-to-any shortest-path protocol. Additionally, broken routes may be fixed lazily and on demand, based on data-plane inconsistency discovery, which avoids wasting energy in the proactive repair of unused paths.¶ For many of the nodes, though not all, the DODAG provides multiple forwarding solutions towards the root of the topology via so-called parents. RPL installs the routes proactively, but to adapt to fuzzy connectivity -- whereby the physical topology cannot be expected to reach a stable state -- it uses a lazy route maintenance operation that may only fix them reactively, upon actual traffic. The result is that RPL provides reachability for most of the LLN nodes, most of the time, but may not converge in the classical sense.¶ RPL can be deployed in conjunction with IPv6 Neighbor Discovery (ND) [RFC4861] [RFC4862] and IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) ND [RFC6775] [RFC8505] to maintain reachability within a Non-Broadcast Multi-Access (NBMA) multi-link subnet.¶ In that mode, IPv6 addresses are advertised individually as host routes. Some nodes may act as routers and participate in the forwarding operations, whereas others will only receive/originate packets, acting as hosts in the data plane. Per the terminology of [RFC6550], an IPv6 host [RFC8504] that is reachable over the RPL network is called a \"leaf\".¶ Section 2 of [RFC9008] defines the terms \"RPL leaf\", \"RPL-Aware Leaf\" (RAL), and \"RPL-Unaware Leaf\" (RUL). A RPL leaf is a host attached to one or more RPL routers; as such, it relies on the RPL router(s) to forward its traffic across the RPL domain but does not forward traffic from another node. As opposed to the RAL, the RUL does not participate in RPL and relies on its RPL router(s) to also inject the routes to its IPv6 addresses in the RPL domain.¶ A RUL may be unable to participate because it is very energy constrained or code-space constrained, or because it would be unsafe to let it inject routes in RPL. Using 6LoWPAN ND as opposed to RPL as the host-to-router interface limits the surface of the possible attacks by the RUL against the RPL domain. If all RULs and RPL-Aware Nodes (RANs) use 6LoWPAN ND for the neighbor discovery process, it is also possible to protect the address ownership of all nodes, including the RULs.¶ This document specifies how the router injects the host routes in the RPL domain on behalf of the RUL. Section 5 details how the RUL can leverage 6LoWPAN ND to obtain the routing services from the router. In that model, the RUL is also a 6LoWPAN Node (6LN) and the RPL-aware router is also a 6LoWPAN Router (6LR). Using the 6LoWPAN ND Address Registration mechanism, the RUL signals that the router must inject a host route for the Registered Address.¶ ------+--------- | Internet | +-----+ | | <------------- 6LBR / RPL DODAG Root +-----+ ^ | | o o o o | RPL o o o o o o o o | o o o o o o o o o o | + o o o o o o o | o o o o o o o o o | 6LoWPAN ND o o o o o o | o o o o v o o o <------------- 6LR / RPL Border Router ^ | 6LoWPAN ND only v u <------------- 6LN / RPL-Unaware Leaf Figure 1: Injecting Routes on Behalf of RULs The RPL Non-Storing mode mechanism is used to extend the routing state with connectivity to the RULs even when the DODAG is operated in Storing mode. The unicast packet-forwarding operation by the 6LR serving a RUL is described in Section 4.1.1 of [RFC9008].¶ Examples of possible RULs include severely energy-constrained sensors such as window smash sensors (alarm system) and kinetically powered light switches. Other applications of this specification may include a smart grid network that controls appliances -- such as washing machines or the heating system -- in the home. Appliances may not participate in the RPL protocol operated in the smart grid network but can still interact with the smart grid for control and/or metering.¶ This specification can be deployed incrementally in a network that implements [RFC9008]. Only the root and the 6LRs that connect the RULs need to be upgraded. The RPL routers on the path will only see unicast IPv6 traffic between the root and the 6LR.¶ This document is organized as follows:¶ Sections 3 and 4 present in a non-normative fashion the salient aspects of RPL and 6LoWPAN ND, respectively, that are leveraged in this specification to provide connectivity to a 6LN acting as a RUL across a RPL network.¶ Section 5 lists the requirements that a RUL needs to match in order to be served by a RPL router that complies with this specification.¶ Section 6 presents the changes made to [RFC6550]; a new behavior is introduced whereby the 6LR advertises the 6LN's addresses in a RPL Destination Advertisement Object (DAO) message based on the ND registration by the 6LN, and the RPL DODAG root performs the Extended Duplicate Address Request / Extended Duplicate Address Confirmation (EDAR/EDAC) exchange with the 6LoWPAN Border Router (6LBR) on behalf of the 6LR; modifications are introduced to some RPL options and to the RPL Status to facilitate the integration of the protocols.¶ Section 7 presents the changes made to [RFC9009]; the use of the Destination Cleanup Object (DCO) message is extended to the Non-Storing RPL Mode of Operation (MOP) to report asynchronous issues from the root to the 6LR.¶ Section 8 presents the changes made to [RFC6775] and [RFC8505]; the range of the Address Registration Option / Extended Address Registration Option (ARO/EARO) Status values is reduced to 64 values, and the remaining bits in the original status field are now reserved.¶ Sections 9 and 10 present the operation of this specification for unicast and multicast flows, respectively, and Section 11 presents associated security considerations.¶ 2. Terminology 2.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2.2. Glossary This document uses the following abbreviations:¶ 6BBR: 6LoWPAN Backbone Router¶ 6CIO: 6LoWPAN Capability Indication Option¶ 6LBR: 6LoWPAN Border Router¶ 6LN: 6LoWPAN Node (a low-power host or router)¶ 6LoRH: 6LoWPAN Routing Header¶ 6LoWPAN: IPv6 over Low-Power Wireless Personal Area Network¶ 6LR: 6LoWPAN Router¶ AP-ND: Address-Protected Neighbor Discovery¶ ARO: Address Registration Option¶ DAC: Duplicate Address Confirmation¶ DAD: Duplicate Address Detection¶ DAO: Destination Advertisement Object (a RPL message)¶ DAR: Duplicate Address Request¶ DCO: Destination Cleanup Object (a RPL message)¶ DIO: DODAG Information Object (a RPL message)¶ DODAG: Destination-Oriented Directed Acyclic Graph¶ EARO: Extended Address Registration Option¶ EDAC: Extended Duplicate Address Confirmation¶ EDAR: Extended Duplicate Address Request¶ EUI: Extended Unique Identifier¶ LLN: Low-Power and Lossy Network¶ MLD: Multicast Listener Discovery¶ MOP: RPL Mode of Operation¶ NA: Neighbor Advertisement¶ NBMA: Non-Broadcast Multi-Access¶ NCE: Neighbor Cache Entry¶ ND: Neighbor Discovery¶ NS: Neighbor Solicitation¶ PIO: Prefix Information Option¶ RA: Router Advertisement¶ RAL: RPL-Aware Leaf¶ RAN: RPL-Aware Node (either a RPL router or a RPL-Aware Leaf)¶ RH3: Routing Header for IPv6 (type 3)¶ ROVR: Registration Ownership Verifier¶ RPI: RPL Packet Information¶ RPL: Routing Protocol for Low-Power and Lossy Networks¶ RUL: RPL-Unaware Leaf¶ SAVI: Source Address Validation Improvement¶ SLAAC: Stateless Address Autoconfiguration¶ SRH: Source Routing Header¶ TID: Transaction ID (a sequence counter in the EARO)¶ TIO: Transit Information Option¶ 2.3. Related Documents The terminology used in this document is consistent with, and incorporates the terms provided in, \"Terms Used in Routing for Low-Power and Lossy Networks\" [RFC7102]. A glossary of classical 6LoWPAN abbreviations is given in Section 2.2. Other terms in use in LLNs are found in \"Terminology for Constrained-Node Networks\" [RFC7228]. This specification uses the terms \"6LN\" and \"6LR\" to refer specifically to nodes that implement the 6LN and 6LR roles in 6LoWPAN ND and does not expect other functionality such as 6LoWPAN Header Compression [RFC6282] from those nodes.¶ \"RPL\", \"RPI\", \"RPL Instance\" (indexed by a RPLInstanceID), \"up\", and \"down\" are defined in \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550]. The RPI is the abstract information that RPL defines to be placed in data packets, e.g., as the RPL Option [RFC6553] within the IPv6 Hop-By-Hop Header. By extension, the term \"RPI\" is often used to refer to the RPL Option itself. The DAO and DIO messages are also specified in [RFC6550]. The DCO message is defined in [RFC9009].¶ This document uses the terms \"RUL\", \"RAN\", and \"RAL\" consistently with [RFC9008]. A RAN is either a RAL or a RPL router. As opposed to a RUL, a RAN manages the reachability of its addresses and prefixes by injecting them in RPL by itself.¶ In this document, readers will encounter terms and concepts that are discussed in the following documents:¶ Classical IPv6 ND: \"Neighbor Discovery for IP version 6 (IPv6)\" [RFC4861] and \"IPv6 Stateless Address Autoconfiguration\" [RFC4862],¶ 6LoWPAN: \"Problem Statement and Requirements for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing\" [RFC6606] and \"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals\" [RFC4919], and¶ 6LoWPAN ND: \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\" [RFC6775], \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\" [RFC8505], \"Address-Protected Neighbor Discovery for Low-Power and Lossy Networks\" [RFC8928], and \"IPv6 Backbone Router\" [RFC8929].¶ 3. RPL External Routes and Data-Plane Artifacts RPL was initially designed to build stub networks whereby the only border router would be the RPL DODAG root (typically co-located with the 6LBR) and all the nodes in the stub would be RPL aware. But [RFC6550] was also prepared to be extended for external routes (\"targets\" in RPL parlance), via the External ('E') flag in the Transit Information Option (TIO). External targets provide the ability to reach destinations that are outside the RPL domain and connected to the RPL domain via RPL border routers that are not the root. Section 4.1 of [RFC9008] provides a set of rules (summarized below) that must be followed for routing packets to and from an external destination. A RUL is a special case of an external target that is also a host directly connected to the RPL domain.¶ A 6LR that acts as a border router for external routes advertises them using Non-Storing mode DAO messages that are unicast directly to the root, even if the DODAG is operated in Storing mode. Non-Storing mode routes are not visible inside the RPL domain, and all packets are routed via the root. The RPL DODAG root tunnels the data packets directly to the 6LR that advertised the external route, which decapsulates and forwards the original (inner) packets.¶ The RPL Non-Storing MOP signaling and the associated IPv6-in-IPv6 encapsulated packets appear as normal traffic to the intermediate routers. Support of external routes only impacts the root and the 6LR. It can be operated with legacy intermediate routers and does not add to the amount of state that must be maintained in those routers. A RUL is an example of a destination that is reachable via an external route that happens to also be a host route.¶ The RPL data packets typically carry a Hop-by-Hop Header with a RPL Option [RFC6553] that contains the RPI (the RPL Packet Information, as defined in Section 11.2 of [RFC6550]). Unless the RUL already placed a RPL Option in the outer header chain, the packets from and to the RUL are encapsulated using an IPv6-in-IPv6 tunnel between the root and the 6LR that serves the RUL (see Sections 7 and 8 of [RFC9008] for details). If the packet from the RUL has an RPI, the 6LR acting as a RPL border router rewrites the RPI to indicate the selected RPL Instance and set the flags, but it does not need to encapsulate the packet (see Section 9.2.2).¶ In Non-Storing mode, packets going down the DODAG carry a Source Routing Header (SRH). The IPv6-in-IPv6 encapsulation, the RPI, and the SRH are collectively called the \"RPL artifacts\" and can be compressed using the method defined in [RFC8138]. Appendix A presents an example compressed format for a packet forwarded by the root to a RUL in a Storing mode DODAG.¶ The inner packet that is forwarded to the RUL may carry some RPL artifacts, e.g., an RPI if the original packet was generated with it, and an SRH in a Non-Storing mode DODAG. [RFC9008] expects the RUL to support the basic IPv6 node requirements per [RFC8504] and, in particular, the mandates in Sections 4.2 and 4.4 of [RFC8200]. As such, the RUL is expected to ignore the RPL artifacts that may be left over -- either an SRH whose Segments Left is zero or a RPL Option in the Hop-by-Hop Header (which can be skipped when not recognized; see Section 5.3 for details).¶ A RUL is not expected to support the compression method defined in [RFC8138]. For that reason, the border router (the 6LR here) uncompresses the packet before forwarding it over an external route to a RUL [RFC9008].¶ 4. 6LoWPAN Neighbor Discovery This section goes through the 6LoWPAN ND mechanisms that this specification leverages, as a non-normative reference to the reader. The full normative text is to be found in [RFC6775], [RFC8505], and [RFC8928].¶ 4.1. Address Registration per RFC 6775 The classical IPv6 Neighbor Discovery (IPv6 ND) protocol [RFC4861] [RFC4862] was defined for serial links and transit media such as Ethernet. It is a reactive protocol that relies heavily on multicast operations for Address Discovery (aka address lookup) and Duplicate Address Detection (DAD).¶ \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\" [RFC6775] adapts IPv6 ND for operations over energy-constrained LLNs. The main functions of [RFC6775] are to proactively establish the Neighbor Cache Entry (NCE) in the 6LR and to prevent address duplication. To that effect, [RFC6775] introduces a unicast Address Registration mechanism that contributes to reducing the use of multicast messages compared to the classical IPv6 ND protocol.¶ [RFC6775] also introduces the Address Registration Option (ARO), which is carried in the unicast Neighbor Solicitation (NS) and Neighbor Advertisement (NA) messages between the 6LoWPAN Node (6LN) and the 6LoWPAN router (6LR). It also defines the Duplicate Address Request (DAR) and Duplicate Address Confirmation (DAC) messages between the 6LR and the 6LBR). In an LLN, the 6LBR is the central repository of all the Registered Addresses in its domain and the source of truth for uniqueness and ownership.¶ 4.2. Extended Address Registration per RFC 8505 \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\" [RFC8505] updates RFC 6775 with a generic Address Registration mechanism that can be used to access services such as routing and ND proxy functions. To that effect, [RFC8505] defines the Extended Address Registration Option (EARO), as shown in Figure 2:¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | Status | Opaque | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Rsvd | I |R|T| TID | Registration Lifetime | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | ... Registration Ownership Verifier (ROVR) ... | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 2: EARO Format 4.2.1. R Flag [RFC8505] introduces the R flag in the EARO. The Registering Node sets the R flag to indicate whether the 6LR should ensure reachability for the Registered Address. If the R flag is set to 0, then the Registering Node handles the reachability of the Registered Address by other means. In a RPL network, this means that either it is a RAN that injects the route by itself or it uses another RPL router for reachability services.¶ This document specifies how the R flag is used in the context of RPL. A RPL leaf that implements the 6LN functionality from [RFC8505] requires reachability services for an IPv6 address if and only if it sets the R flag in the NS(EARO) used to register the address to a 6LR acting as a RPL border router. Upon receiving the NS(EARO), the RPL router generates a DAO message for the Registered Address if and only if the R flag is set to 1.¶ Section 9.2 specifies additional operations when the R flag is set to 1 in an EARO that is placed in either an NS message or an NA message.¶ 4.2.2. TID, \"I\" Field, and Opaque Field When the T flag is set to 1, the EARO includes a sequence counter called the \"Transaction ID\" (TID), which is needed to fill the Path Sequence field in the RPL Transit Information Option (TIO). For this reason, support of [RFC8505] by the RUL, as opposed to only [RFC6775], is a prerequisite for this specification; this requirement is fully explained in Section 5.1. The EARO also transports an Opaque field and an associated \"I\" field that describes what the Opaque field transports and how to use it.¶ Section 9.2.1 specifies the use of the \"I\" field and the Opaque field by a RUL.¶ 4.2.3. Route Ownership Verifier Section 5.3 of [RFC8505] introduces the Registration Ownership Verifier (ROVR) field, which has a variable length of 64 to 256 bits. The ROVR replaces the 64-bit Extended Unique Identifier (EUI‑64) in the ARO [RFC6775], which was used to uniquely identify an Address Registration with the link-layer address of the owner but provided no protection against spoofing.¶ \"Address-Protected Neighbor Discovery for Low-Power and Lossy Networks\" [RFC8928] leverages the ROVR field as a cryptographic proof of ownership to prevent a rogue third party from registering an address that is already owned. The use of the ROVR field enables the 6LR to block traffic that is not sourced at an owned address.¶ This specification does not address how the protection offered by [RFC8928] could be extended for use in RPL. On the other hand, it adds the ROVR to the DAO to build the proxied EDAR at the root (see Section 6.1), which means that nodes that are aware of the host route are also aware of the ROVR associated to the Target Address.¶ 4.3. EDAR/EDAC per RFC 8505 [RFC8505] updates the DAR/DAC messages to EDAR/EDAC messages to carry the ROVR field. The EDAR/EDAC exchange takes place between the 6LR and the 6LBR. It is triggered by an NS(EARO) message from a 6LN to create, refresh, and delete the corresponding state in the 6LBR. The exchange is protected by the retry mechanism specified in Section 8.2.6 of [RFC6775], though in an LLN, a duration longer than the default value of the RetransTimer (RETRANS_TIMER) [RFC4861] of 1 second may be necessary to cover the round-trip delay between the 6LR and the 6LBR.¶ RPL [RFC6550] specifies a periodic DAO from the 6LN all the way to the root that maintains the routing state in the RPL network for the lifetime indicated by the source of the DAO. This means that for each address, there are two keep-alive messages that traverse the whole network: one to the root and one to the 6LBR.¶ This specification avoids the periodic EDAR/EDAC exchange across the LLN. The 6LR turns the periodic NS(EARO) from the RUL into a DAO message to the root on every refresh, but it only generates the EDAR upon the first registration, for the purpose of DAD, which must be verified before the address is injected in RPL. Upon the DAO message, the root proxies the EDAR exchange to refresh the state at the 6LBR on behalf of the 6LR, as illustrated in Figure 8 in Section 9.1.¶ 4.3.1. Capability Indication Option per RFC 7400 \"6LoWPAN-GHC: Generic Header Compression for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\" [RFC7400] defines the 6LoWPAN Capability Indication Option (6CIO), which enables a node to expose its capabilities in Router Advertisement (RA) messages.¶ [RFC8505] defines a number of bits in the 6CIO; in particular:¶ L: The node is a 6LR.¶ E: The node is an IPv6 ND Registrar -- i.e., it supports registrations based on EARO.¶ P: The node is a Routing Registrar -- i.e., an IPv6 ND Registrar that also provides reachability services for the Registered Address.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length = 1 | Reserved |D|L|B|P|E|G| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 3: 6CIO Flags A 6LR that provides reachability services for a RUL in a RPL network as specified in this document includes a 6CIO in its RA messages and set the L, P, and E flags to 1 as prescribed by [RFC8505]; this is fully explained in Section 9.2.¶ 5. Requirements for the RPL-Unaware Leaf This document describes how RPL routing can be extended to reach a RUL. This section specifies the minimal RPL-independent functionality that the RUL needs to implement in order to obtain routing services for its addresses.¶ 5.1. Support of 6LoWPAN ND To obtain routing services from a router that implements this specification, a RUL needs to implement [RFC8505] and sets the \"R\" and \"T\" flags in the EARO to 1 as discussed in Sections 4.2.1 and 4.2.2, respectively. Section 9.2.1 specifies new behaviors for the RUL, e.g., when the R flag set to 1 in an NS(EARO) is not echoed in the NA(EARO), which indicates that the route injection failed.¶ The RUL is expected to request routing services from a router only if that router originates RA messages with a 6CIO that has the L, P, and E flags all set to 1 as discussed in Section 4.3.1, unless configured to do so. It is suggested that the RUL also implement [RFC8928] to protect the ownership of its addresses.¶ A RUL that may attach to multiple 6LRs is expected to prefer those that provide routing services. The RUL needs to register with all the 6LRs from which it desires routing services.¶ Parallel Address Registrations to several 6LRs should be performed in a rapid sequence, using the same EARO for the same address. Gaps between the Address Registrations will invalidate some of the routes until the Address Registration finally shows on those routes.¶ [RFC8505] introduces error Status values in the NA(EARO) that can be received synchronously upon an NS(EARO) or asynchronously. The RUL needs to support both cases and refrain from using the address when the Status value indicates a rejection (see Section 6.3).¶ 5.2. Support of IPv6 Encapsulation Section 4.1.1 of [RFC9008] defines the rules for signaling an external destination (e.g., a RUL) and tunneling to its attachment router (designated as a 6LR). In order to terminate the IPv6-in-IPv6 tunnel, the RUL, as an IPv6 host, would have to be capable of decapsulating the tunneled packet and either drop the encapsulated packet if it is not the final destination or pass it to the upper layer for further processing. As indicated in Section 4.1 of [RFC9008], this is not mandated by [RFC8504], and the IPv6-in-IPv6 tunnel from the root is terminated at the parent 6LR. It is thus not necessary for a RUL to support IPv6-in-IPv6 decapsulation.¶ 5.3. Support of the Hop-by-Hop Header A RUL is expected to process an Option Type in a Hop-by-Hop Header as prescribed by Section 4.2 of [RFC8200]. An RPI with an Option Type of 0x23 [RFC9008] is thus skipped when not recognized.¶ 5.4. Support of the Routing Header A RUL is expected to process an unknown Routing Header Type as prescribed by Section 4.4 of [RFC8200]. This implies that the SRH, which has a Routing Type of 3 [RFC6554], is ignored when Segments Left is zero. When Segments Left is non-zero, the RUL discards the packet and sends an ICMP Parameter Problem message with Code 0 to the packet's source address, pointing to the unrecognized Routing Type.¶ 6. Enhancements to RFC 6550 This document specifies a new behavior whereby a 6LR injects DAO messages for unicast addresses (see Section 9) and multicast addresses (see Section 10) on behalf of leaves that are not aware of RPL. The RUL addresses are exposed as external targets [RFC6550]. Conforming to [RFC9008], IPv6-in-IPv6 encapsulation between the 6LR and the RPL DODAG root is used to carry the RPL artifacts and remove them when forwarding outside the RPL domain, e.g., to a RUL.¶ This document also synchronizes the liveness monitoring at the root and the 6LBR. The same lifetime value is used for both, and a single keep-alive message, the RPL DAO, traverses the RPL network. Another new behavior is introduced whereby the RPL DODAG root proxies the EDAR message to the 6LBR on behalf of the 6LR (see Section 8), for any leaf node that implements the 6LN functionality described in [RFC8505].¶ Section 6.7.7 of [RFC6550] introduces the RPL Target option, which can be used in RPL control messages such as the DAO message to signal a destination prefix. This document adds capabilities for transporting the ROVR field (see Section 4.2.3) and the IPv6 address of the prefix advertiser when the Target is a shorter prefix. Their use is signaled by a new ROVR Size field being non-zero and a new \"Advertiser address in Full (F)\" flag set to 1, respectively; see Section 6.1.¶ This specification defines a new flag, \"Root Proxies EDAR/EDAC (P)\", in the RPL DODAG Configuration option; see Section 6.2.¶ Furthermore, this specification provides the ability to carry the EARO Status defined for 6LoWPAN ND in RPL DAO and DCO messages, embedded in a RPL Status; see Section 6.3.¶ Section 12 of [RFC6550] details RPL support for multicast flows when the RPL Instance is operated with a MOP setting of 3 (\"Storing Mode of Operation with multicast support\"). This specification extends the RPL DODAG root operation to proxy-relay the MLDv2 operation [RFC3810] between the RUL and the 6LR; see Section 10.¶ 6.1. Updated RPL Target Option This specification updates the RPL Target option to transport the ROVR that was also defined for 6LoWPAN ND messages. This enables the RPL DODAG root to generate the proxied EDAR message to the 6LBR.¶ The Target Prefix of the RPL Target option is left (high bit) justified and contains the advertised prefix; its size may be smaller than 128 when it indicates a prefix route. The Prefix Length field signals the number of bits that correspond to the advertised prefix; it is 128 for a host route or less in the case of a prefix route. This remains unchanged.¶ This specification defines the new 'F' flag. When it is set to 1, the size of the Target Prefix field MUST be 128 bits and it MUST contain an IPv6 address of the advertising node taken from the advertised prefix. In that case, the Target Prefix field carries two distinct pieces of information: a route that can be a host route or a prefix route, depending on the Prefix Length; and an IPv6 address that can be used to reach the advertising node and validate the route.¶ If the 'F' flag is set to 0, the Target Prefix field can be shorter than 128 bits, and it MUST be aligned to the next byte boundary after the end of the prefix. Any additional bits in the rightmost octet are filled with padding bits. Padding bits are reserved and set to 0 as specified in Section 6.7.7 of [RFC6550].¶ With this specification, the ROVR is the remainder of the RPL Target option. The size of the ROVR is indicated in a new ROVR Size field that is encoded to map one to one with the Code Suffix in the EDAR message (see Table 4 of [RFC8505]). The ROVR Size field is taken from the Flags field, which is an update to the \"RPL Target Option Flags\" IANA registry.¶ The updated format is illustrated in Figure 4. It is backward compatible with the Target option defined in [RFC6550]. It is recommended that the updated format be used as a replacement in new implementations in all MOPs in preparation for upcoming route ownership validation mechanisms based on the ROVR, unless the device or the network is so constrained that this is not feasible.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type = 0x05 | Option Length |F|X|Flg|ROVRsz | Prefix Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Target Prefix (Variable Length) | . . +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | ... Registration Ownership Verifier (ROVR) ... | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 4: Updated Target Option New fields:¶ F: 1-bit flag. Set to 1 to indicate that the Target Prefix field contains the complete (128-bit) IPv6 address of the advertising node.¶ X: 1-bit flag. Set to 1 to request that the root perform a proxy EDAR/EDAC exchange.¶ The 'X' flag can only be set to 1 if the DODAG is operating in Non-Storing mode and if the root sets the \"Root Proxies EDAR/EDAC (P)\" flag to 1 in the DODAG Configuration option; see Section 6.2.¶ The 'X' flag can be set for host routes to RULs and RANs; it can also be set for internal prefix routes if the 'F' flag is set, using the node's address in the Target Prefix field to form the EDAR, but it cannot be used otherwise.¶ Flg (Flags): The 2 bits remaining unused in the Flags field are reserved for flags. The field MUST be initialized to 0 by the sender and MUST be ignored by the receiver.¶ ROVRsz (ROVR Size): Indicates the size of the ROVR. It MUST be set to 1, 2, 3, or 4, indicating a ROVR size of 64, 128, 192, or 256 bits, respectively.¶ If a legacy Target option is used, then the value must remain 0, as specified in [RFC6550].¶ In the case of a value above 4, the size of the ROVR is undetermined and this node cannot validate the ROVR; an implementation SHOULD propagate the whole Target option upwards as received to enable the verification by an ancestor that would support the upgraded ROVR.¶ Registration Ownership Verifier (ROVR): This is the same field as in the EARO; see [RFC8505].¶ 6.2. Additional Flag in the RPL DODAG Configuration Option The DODAG Configuration option is defined in Section 6.7.6 of [RFC6550]. Its purpose is extended to distribute configuration information affecting the construction and maintenance of the DODAG, as well as operational parameters for RPL on the DODAG, through the DODAG. This option was originally designed with four bit positions reserved for future use as flags.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type = 0x04 |Opt Length = 14| |P| | |A| ... | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ + |4 bits | Figure 5: DODAG Configuration Option (Partial View) This specification defines a new flag, \"Root Proxies EDAR/EDAC (P)\". The 'P' flag is encoded in bit position 1 of the reserved flags in the DODAG Configuration option (counting from bit 0 as the most significant bit), and it is set to 0 in legacy implementations as specified in Sections 20.14 and 6.7.6 of [RFC6550], respectively.¶ The 'P' flag is set to 1 to indicate that the root performs the proxy operation, which implies that it supports this specification and the updated RPL Target option (see Section 6.1).¶ Section 4.1.3 of [RFC9008] updates [RFC6550] to indicate that the definition of the flags applies to MOP values from zero (0) to six (6) only. For a MOP value of 7, the implementation MUST assume that the root performs the proxy operation.¶ The RPL DODAG Configuration option is typically placed in a DODAG Information Object (DIO) message. The DIO message propagates down the DODAG to form and then maintain its structure. The DODAG Configuration option is copied unmodified from parents to children. [RFC6550] states that \"Nodes other than the DODAG root MUST NOT modify this information when propagating the DODAG Configuration option.\" Therefore, a legacy parent propagates the 'P' flag as set by the root, and when the 'P' flag is set to 1, it is transparently flooded to all the nodes in the DODAG.¶ 6.3. Updated RPL Status The RPL Status is defined in Section 6.5.1 of [RFC6550] for use in the DAO-ACK message. Values are assigned as follows:¶ Table 1: RPL Status per RFC 6550 Range Meaning 0 Success / Unqualified acceptance 1-127 Not an outright rejection 128-255 Rejection The 6LoWPAN ND Status was defined for use in the EARO; see Section 4.1 of [RFC8505]. This specification adds the ability to allow the carriage of 6LoWPAN ND Status values in RPL DAO and DCO messages, embedded in the RPL Status field.¶ To achieve this, the range of the ARO/EARO Status values is reduced to 0-63, which updates the IANA registry created for [RFC6775]. This reduction ensures that the values fit within a RPL Status as shown in Figure 6. See Sections 12.2, 12.5, and 12.6 for the respective IANA declarations. These updates are reasonable because the associated registry relies on the Standards Action policy [RFC8126] for registration and only values up to 10 are currently allocated.¶ 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ |U|A|StatusValue| +-+-+-+-+-+-+-+-+ Figure 6: RPL Status Format This specification updates the RPL Status with the following subfields:¶ U: 1-bit flag. Set to 1 to indicate a rejection. When set to 0, a Status value of 0 indicates Success / Unqualified acceptance and other values indicate \"Not an outright rejection\" as per RFC 6550.¶ A: 1-bit flag. Indicates the type of the RPL Status value.¶ Status Value: 6-bit unsigned integer.¶ If the 'A' flag is set to 1, this field transports a value defined for the 6LoWPAN ND EARO Status.¶ When the 'A' flag is set to 0, this field transports a Status value defined for RPL.¶ When building a DCO or a DAO-ACK message upon an IPv6 ND NA or an EDAC message, the RPL DODAG root MUST copy the 6LoWPAN ND status code unchanged in the RPL Status Value field and set the 'A' flag to 1. The RPL DODAG root MUST set the 'U' flag to 1 for all rejection and unknown status codes. The status codes in the 1-10 range [RFC8505] are all considered rejections.¶ Reciprocally, upon a DCO or a DAO-ACK message from the RPL DODAG root with a RPL Status that has the 'A' flag set, the 6LR MUST copy the RPL Status value unchanged in the Status field of the EARO when generating an NA to the RUL.¶ 7. Enhancements to RFC 9009 [RFC9009] defines the DCO message for RPL Storing mode only, with a link-local scope. All nodes in the RPL network are expected to support the specification, since the message is processed hop by hop along the path that is being cleaned up.¶ This specification extends the use of the DCO message to the Non-Storing MOP, whereby the DCO is sent end to end by the root directly to the RAN that injected the DAO message for the considered target. In that case, intermediate nodes do not need to support [RFC9009]; they forward the DCO message as a plain IPv6 packet between the root and the RAN.¶ In the case of a RUL, the 6LR that serves the RUL acts as the RAN that receives the Non-Storing DCO. This specification leverages the Non-Storing DCO between the root and the 6LR that serves as the attachment router for a RUL. A 6LR and a root that support this specification MUST implement the Non-Storing DCO.¶ 8. Enhancements to RFCs 6775 and 8505 This document updates [RFC6775] and [RFC8505] to reduce the range of the ARO/EARO Status values to 64 values. The two most significant (leftmost) bits of the original ND Status field are now reserved; they MUST be set to 0 by the sender and ignored by the receiver.¶ This document also updates the behavior of a 6LR acting as a RPL router and of a 6LN acting as a RUL in the 6LoWPAN ND Address Registration as follows:¶ If the RPL DODAG root advertises the ability to proxy the EDAR/EDAC exchange to the 6LBR, the 6LR refrains from sending the keep-alive EDAR message. If it is separated from the 6LBR, the root regenerates the EDAR message to the 6LBR periodically, upon a DAO message that signals the liveliness of the address.¶ The use of the R flag is extended to the NA(EARO) to confirm whether the route was installed.¶ 9. Protocol Operations for Unicast Addresses The description below assumes that the root sets the 'P' flag in the DODAG Configuration option and performs the EDAR proxy operation presented in Section 4.3.¶ If the 'P' flag is set to 0, the 6LR MUST generate the periodic EDAR messages and process the returned status as specified in [RFC8505]. If the EDAC indicates success, the rest of the flow takes place as presented but without the proxied EDAR/EDAC exchange.¶ Section 9.1 provides an overview of the route injection in RPL, whereas Section 9.2 offers more details from the perspective of the different nodes involved in the flow.¶ 9.1. General Flow This specification eliminates the need to exchange keep-alive EDAR and EDAC messages all the way from a 6LN to the 6LBR across a RPL mesh. Instead, the EDAR/EDAC exchange with the 6LBR is proxied by the RPL DODAG root upon the DAO message that refreshes the RPL routing state. The first EDAR upon a new Address Registration cannot be proxied, though, as it is generated for the purpose of DAD, which must be verified before the address is injected in RPL.¶ In a RPL network where the function is enabled, refreshing the state in the 6LBR is the responsibility of the root. Consequently, only addresses that are injected in RPL will be kept alive at the 6LBR by the RPL DODAG root. Since RULs are advertised using Non-Storing mode, the DAO message flow and the keep-alive EDAR/EDAC can be nested within the Address (re)Registration flow. Figure 7 illustrates that, for the first Address Registration, both the DAD and the keep-alive EDAR⁠/EDAC exchanges happen in the same sequence.¶ 6LN/RUL 6LR <6LR*> Root 6LBR |<---Using ND--->|<--Using RPL->|<-----Using ND---->| | |<-----------Using ND------------->| | | | | | NS(EARO) | | | |--------------->| | | | EDAR | | |--------------------------------->| | | | | | EDAC | | |<---------------------------------| | | | | | DAO(X=0) | | | |------------->| | | | | | | DAO-ACK | | | |<-------------| | | NA(EARO) | | | |<---------------| | | | | | | Figure 7: First RUL Registration Flow This flow requires that the lifetimes and sequence counters in 6LoWPAN ND and RPL be aligned.¶ To achieve this, the Path Sequence and the Path Lifetime in the DAO message are taken from the Transaction ID and the Address Registration lifetime in the NS(EARO) message from the 6LN.¶ On the first Address Registration, illustrated in Figure 7 for RPL Non-Storing mode, the EDAR/EDAC exchange takes place as prescribed by [RFC8505]. If the exchange fails, the 6LR returns an NA message with a non-zero status to the 6LN, the NCE is not created, and the address is not injected in RPL. Otherwise, the 6LR creates an NCE and injects the Registered Address in the RPL routing using a DAO/DAO-ACK exchange with the RPL DODAG root.¶ An Address Registration refresh is performed by the 6LN to keep the NCE in the 6LR alive before the lifetime expires. Upon the refresh of a registration, the 6LR reinjects the corresponding route in RPL before it expires, as illustrated in Figure 8.¶ 6LN/RUL <-ND-> 6LR <-RPL-> Root <-ND-> 6LBR | | | | | NS(EARO) | | | |--------------->| | | | | DAO(X=1) | | | |------------->| | | | | EDAR | | | |------------------>| | | | EDAC | | | |<------------------| | | DAO-ACK | | | |<-------------| | | NA(EARO) | | | |<---------------| | | Figure 8: Next RUL Registration Flow This is what causes the RPL DODAG root to refresh the state in the 6LBR, using an EDAC message. In the case of an error in the proxied EDAR flow, the error is returned in the DAO-ACK using a RPL Status with the 'A' flag set to 1, which embeds a 6LoWPAN Status value as discussed in Section 6.3.¶ The 6LR may receive a requested DAO-ACK after it received an asynchronous Non-Storing DCO, but the non-zero status in the DCO supersedes a positive status in the DAO-ACK, regardless of the order in which they are received. Upon the DAO-ACK -- or the DCO, if one arrives first -- the 6LR responds to the RUL with an NA(EARO).¶ An issue may be detected later, e.g., the address moves to a different DODAG with the 6LBR attached to a different 6LoWPAN Backbone Router (6BBR); see Figure 5 in Section 3.3 of [RFC8929]. The 6BBR may send a negative ND Status, e.g., in an asynchronous NA(EARO) to the 6LBR.¶ [RFC8929] expects that the 6LBR is co-located with the RPL DODAG root, but if not, the 6LBR MUST forward the status code to the originator of the EDAR -- either the 6LR or the RPL DODAG root that proxies for it. The ND status code is mapped in a RPL Status value by the RPL DODAG root, and then back to an ND Status by the 6LR to the 6LN. Note that a legacy RAN that receives a Non-Storing DCO that it does not support will ignore it silently, as specified in Section 6 of [RFC6550]. The result is that it will remain unaware that it is no longer reachable until its next RPL exchange happens. This situation will be cleared upon the next Non-Storing DAO exchange if the error is returned in a DAO-ACK.¶ Figure 9 illustrates this in the case where the 6LBR and the root are not co-located, and the root proxies the EDAR/EDAC flow.¶ 6LN/RUL <-ND-> 6LR <-RPL-> Root <-ND-> 6LBR <-ND-> 6BBR | | | | | | | | | NA(EARO) | | | | |<------------| | | | EDAC | | | | |<-------------| | | | DCO | | | | |<------------| | | | NA(EARO) | | | | |<-------------| | | | | | | | | Figure 9: Asynchronous Issue If the root does not proxy, then the EDAC with a non-zero status reaches the 6LR directly. In that case, the 6LR MUST clean up the route using a DAO with a Lifetime of 0, and it MUST propagate the status back to the RUL in an NA(EARO) with the R flag set to 0.¶ The RUL may terminate the registration at any time by using a Registration Lifetime of 0. This specification requires that the RPL Target option transport the ROVR. This way, the same flow as the heartbeat flow is sufficient to inform the 6LBR using the root as a proxy, as illustrated in Figure 8.¶ All or any combination of the 6LR, the root, and the 6LBR might be collapsed in a single node.¶ 9.2. Detailed Operation The following sections specify the behavior of (1) the 6LN acting as a RUL, (2) the 6LR acting as a border router and serving the 6LN, (3) the RPL DODAG root, and (4) the 6LBR in the control flows that enable RPL routing back to the RUL, respectively.¶ 9.2.1. Perspective of the 6LN Acting as a RUL This specification builds on the operation of a 6LoWPAN ND-compliant 6LN/RUL, which is expected to operate as follows:¶ The 6LN selects a 6LR that provides reachability services for a RUL. This is signaled by a 6CIO in the RA messages with the L, P, and E flags set to 1 as prescribed by [RFC8505].¶ The 6LN obtains an IPv6 global address, via either (1) Stateless Address Autoconfiguration (SLAAC) [RFC4862] based on a Prefix Information Option (PIO) [RFC4861] found in an RA message or (2) some other means, such as DHCPv6 [RFC8415].¶ Once it has formed an address, the 6LN registers its address and refreshes its registration periodically, early enough within the lifetime of the previous Address Registration, as prescribed by [RFC6775], to refresh the NCE before the lifetime indicated in the EARO expires. It sets the T flag to 1 as prescribed in [RFC8505]. The TID is incremented each time and wraps in a lollipop fashion (see Section 5.2.1 of [RFC8505], which is fully compatible with Section 7.2 of [RFC6550]).¶ As stated in Section 5.2 of [RFC8505], the 6LN can register with more than one 6LR at the same time. In that case, all the fields in the EARO are set to the same value for all of the parallel Address Registrations, with the exception of the Registration Lifetime field and the R flag, which may be set to different values. The 6LN may cancel a subset of its registrations or may transfer a registration from one or more old 6LRs to one or more new 6LRs. To do so, the 6LN sends a series of NS(EARO) messages, all with the same TID, with a zero Registration Lifetime to the old 6LR(s) and with a non-zero Registration Lifetime to the new 6LR(s). In that process, the 6LN SHOULD send the NS(EARO) with a non-zero Registration Lifetime and ensure that at least one succeeds before it sends an NS(EARO) that terminates another registration. This avoids the churn related to transient route invalidation in the RPL network above the common parent of the involved 6LRs.¶ Following Section 5.1 of [RFC8505], a 6LN acting as a RUL sets the R flag in the EARO of its registration(s) for which it requires routing services. If the R flag is not echoed in the NA, the RUL MUST assume that establishing the routing services via this 6LR failed, and it SHOULD attempt to use another 6LR. The RUL SHOULD ensure that one registration succeeds before setting the R flag to 0. In the case of a conflict with the preceding rule regarding the lifetime, the rule regarding the lifetime has precedence.¶ The 6LN may use any of the 6LRs to which it registered as the default gateway. Using a 6LR to which the 6LN is not registered may result in packets dropped at the 6LR by a Source Address Validation Improvement (SAVI) function [RFC7039] and thus is not recommended.¶ Even without support for RPL, the RUL may be configured with an opaque value to be provided to the routing protocol. If the RUL has knowledge of the RPL Instance into which the packet should be injected, then it SHOULD set the Opaque field in the EARO to the RPLInstanceID; otherwise, it MUST leave the Opaque field as 0.¶ Regardless of the setting of the Opaque field, the 6LN MUST set the \"I\" field to 0 to signal \"topological information to be passed to a routing process\", as specified in Section 5.1 of [RFC8505].¶ A RUL is not expected to produce RPL artifacts in the data packets, but it may do so. For instance, if the RUL has minimal awareness of the RPL Instance, then it can build an RPI. A RUL that places an RPI in a data packet SHOULD indicate the RPLInstanceID of the RPL Instance where the packet should be forwarded. It is up to the 6LR (e.g., by policy) to use the RPLInstanceID information provided by the RUL or rewrite it to the selected RPLInstanceID for forwarding inside the RPL domain. All the flags and the SenderRank field are set to 0 as specified by Section 11.2 of [RFC6550].¶ 9.2.2. Perspective of the 6LR Acting as a Border Router A 6LR that provides reachability services for a RUL in a RPL network as specified in this document MUST include a 6CIO in its RA messages and set the L, P, and E flags to 1 as prescribed by [RFC8505].¶ As prescribed by [RFC8505], the 6LR generates an EDAR message upon reception of a valid NS(EARO) message for the registration of a new IPv6 address by a 6LN. If the initial EDAR/EDAC exchange succeeds, then the 6LR installs an NCE for the Registration Lifetime.¶ If the R flag is set to 1 in the NS(EARO), the 6LR SHOULD inject the host route in RPL, unless this is barred for other reasons, such as the saturation of the RPL parents. The 6LR MUST use RPL Non-Storing mode signaling and the updated Target option (see Section 6.1). To avoid a redundant EDAR/EDAC flow to the 6LBR, the 6LR SHOULD refrain from setting the 'X' flag. The 6LR MUST request a DAO-ACK by setting the 'K' flag in the DAO message. Successfully injecting the route to the RUL's address will be indicated via the 'U' flag set to 0 in the RPL Status of the DAO-ACK message.¶ For the registration refreshes, if the RPL DODAG root sets the 'P' flag in the DODAG Configuration option to 1, then the 6LR MUST refrain from sending the keep-alive EDAR; instead, it MUST set the 'X' flag to 1 in the Target option of the DAO messages, to request that the root proxy the keep-alive EDAR/EDAC exchange with the 6LBR (see Section 6); if the 'P' flag is set to 0, then the 6LR MUST set the 'X' flag to 0 and handle the EDAR/EDAC flow itself.¶ The Opaque field in the EARO provides a means to signal which RPL Instance is to be used for the DAO advertisements and the forwarding of packets sourced at the Registered Address when there is no RPI in the packet.¶ As described in [RFC8505], if the \"I\" field is 0, then the Opaque field is expected to carry the RPLInstanceID suggested by the 6LN; otherwise, there is no suggested RPL Instance. If the 6LR participates in the suggested RPL Instance, then the 6LR MUST use that RPL Instance for the Registered Address.¶ If there is no suggested RPL Instance or if the 6LR does not participate in the suggested RPL Instance, it is expected that the packets coming from the 6LN \"can unambiguously be associated to at least one RPL Instance\" [RFC6550] by the 6LR, e.g., using a policy that maps the 6-tuple to a RPL Instance.¶ The DAO message advertising the Registered Address MUST be constructed as follows:¶ The Registered Address is signaled as the Target Prefix in the updated Target option in the DAO message; the Prefix Length is set to 128 but the 'F' flag is set to 0, since the advertiser is not the RUL. The ROVR field is copied unchanged from the EARO (see Section 6.1).¶ The 6LR indicates one of its global or unique-local IPv6 unicast addresses as the Parent Address in the TIO associated with the Target option.¶ The 6LR sets the External ('E') flag in the TIO to indicate that it is redistributing an external target into the RPL network.¶ The Path Lifetime in the TIO is computed from the Registration Lifetime in the EARO. This operation converts seconds to the Lifetime Units used in the RPL operation. This creates the deployment constraint that the Lifetime Unit is reasonably compatible with the expression of the Registration Lifetime; e.g., a Lifetime Unit of 0x4000 maps the most significant byte of the Registration Lifetime to the Path Lifetime.¶ In that operation, the Path Lifetime must be set to ensure that the path has a longer lifetime than the registration and also covers the round-trip time to the root.¶ Note that if the Registration Lifetime is 0, then the Path Lifetime is also 0 and the DAO message becomes a No-Path DAO, which cleans up the routes down to the RUL's address; this also causes the root as a proxy to send an EDAR message to the 6LBR with a Lifetime of 0.¶ The Path Sequence in the TIO is set to the TID value found in the EARO.¶ Upon receiving or timing out the DAO-ACK after an implementation-specific number of retries, the 6LR MUST send the corresponding NA(EARO) to the RUL. Upon receiving an asynchronous DCO message, it MUST send an asynchronous NA(EARO) to the RUL immediately but still be capable of processing the DAO-ACK if one is pending.¶ The 6LR MUST set the R flag to 1 in the NA(EARO) that it sends back to the 6LN if and only if the 'U' flag in the RPL Status is set to 0, indicating that the 6LR injected the Registered Address in the RPL routing successfully and that the EDAR proxy operation succeeded.¶ If the 'A' flag in the RPL Status is set to 1, the embedded Status value is passed back to the RUL in the EARO Status. If the 'U' flag is also set to 1, the registration failed for 6LoWPAN-ND-related reasons, and the NCE is removed.¶ An error injecting the route causes the 'U' flag to be set to 1. If the error is not related to ND, the 'A' flag is set to 0. In that case, the registration succeeds, but the RPL route is not installed. So, the NA(EARO) is returned with a status indicating success but the R flag set to 0, which means that the 6LN obtained a binding but no route.¶ If the 'A' flag is set to 0 in the RPL Status of the DAO-ACK, then the 6LoWPAN ND operation succeeded, and an EARO Status of 0 (Success) MUST be returned to the 6LN. The EARO Status of 0 MUST also be used if the 6LR did not attempt to inject the route but could create the binding after a successful EDAR/EDAC exchange or refresh it.¶ If the 'U' flag is set to 1 in the RPL Status of the DAO-ACK, then the route was not installed, and the R flag MUST be set to 0 in the NA(EARO). The R flag MUST be set to 0 if the 6LR did not attempt to inject the route.¶ In a network where Address-Protected Neighbor Discovery (AP-ND) is enabled, in the case of a DAO-ACK or a DCO transporting an EARO Status value of 5 (Validation Requested), the 6LR MUST challenge the 6LN for ownership of the address, as described in Section 6.1 of [RFC8928], before the registration is complete. This flow, illustrated in Figure 10, ensures that the address is validated before it is injected in the RPL routing.¶ 6LN 6LR Root 6LBR | | | | |<--------------- RA ---------------------| | | | | | | |------ NS(EARO) (ROVR=Crypto-ID) ------->| | | | | | | |<-NA(EARO) (Status=Validation Requested)-| | | | | | | |---- NS(EARO) and proof of ownership --->| | | | | | | | <validate the proof> | | | | | |<------- NA(EARO) (Status=10) -----<if failed> | | | | | | <else> | | | | | | | |--------- EDAR ------->| | | | | |<-------- EDAC --------| | | | | | | | | |-DAO(X=0)->| | | | | | | |<- DAO-ACK-| | | | | | |<---------- NA(EARO) (Status=0) ---------| | | | | | | ... | | | | |------ NS(EARO) (ROVR=Crypto-ID) ------->| | | | |-DAO(X=1)->| | | | |-- EDAR -->| | | | | | | |<-- EDAC --| | |<- DAO-ACK-| | |<---------- NA(EARO) (Status=0) ---------| | | | | | | ... Figure 10: Address Protection If the challenge succeeded, then the operations continue as normal. In particular, a DAO message is generated upon the NS(EARO) that proves the ownership of the address. If the challenge failed, the 6LR rejects the registration as prescribed by AP-ND and may take actions to protect itself against Denial-Of-Service (DoS) attacks by a rogue 6LN; see Section 11.¶ The 6LR may, at any time, send a unicast asynchronous NA(EARO) with the R flag set to 0 to signal that it has stopped providing routing services, and/or with an EARO Status of 2 (Neighbor Cache Full) to signal that it removed the NCE. It may also send a final RA -- unicast or multicast -- with a router Lifetime field of 0, to signal that it will cease to serve as the router, as specified in Section 6.2.5 of [RFC4861]. This may happen upon a DCO or a DAO-ACK message indicating that the path is already removed; otherwise, the 6LR MUST remove the host route to the 6LN using a DAO message with a Path Lifetime of 0.¶ A valid NS(EARO) message with the R flag set to 0 and a Registration Lifetime that is not zero signals that the 6LN wishes to maintain the binding but does not require (i.e., no longer requires) the routing services from the 6LR. Upon this message, if, due to a previous NS(EARO) with the R flag set to 1 the 6LR was injecting the host route to the Registered Address in RPL using DAO messages, then the 6LR MUST invalidate the host route in RPL using a DAO with a Path Lifetime of 0. It is up to the registering 6LN to maintain the corresponding route from then on, by either (1) keeping it active via a different 6LR or (2) acting as a RAN and managing its own reachability.¶ When forwarding a packet from the RUL into the RPL domain, if the packet does not have an RPI, the 6LR MUST encapsulate the packet to the root and add an RPI. If there is an RPI in the packet, the 6LR MUST rewrite the RPI, but it does not need to encapsulate.¶ 9.2.3. Perspective of the RPL DODAG Root A RPL DODAG root MUST set the 'P' flag to 1 in the RPL DODAG Configuration option of the DIO messages that it generates (see Section 6) to signal that it proxies the EDAR/EDAC exchange and supports the updated RPL Target option.¶ Upon reception of a DAO message, for each updated RPL Target option (see Section 6.1) with the 'X' flag set to 1, the root MUST notify the 6LBR by using a proxied EDAR/EDAC exchange; if the RPL DODAG root and the 6LBR are integrated, an internal API can be used instead.¶ The EDAR message MUST be constructed as follows:¶ The target IPv6 address from the RPL Target option is placed in the Registered Address field of the EDAR message;¶ The Registration Lifetime is adapted from the Path Lifetime in the TIO by converting the Lifetime Units used in RPL into units of 60 seconds used in the 6LoWPAN ND messages;¶ The TID value is set to the Path Sequence in the TIO and indicated with an ICMP code of 1 in the EDAR message;¶ The ROVR in the RPL Target option is copied as is in the EDAR, and the ICMP Code Suffix is set to the appropriate value as shown in Table 4 of [RFC8505], depending on the size of the ROVR field.¶ Upon receiving an EDAC message from the 6LBR, if a DAO is pending, then the root MUST send a DAO-ACK back to the 6LR. Otherwise, if the status in the EDAC message is not \"Success\", then it MUST send an asynchronous DCO to the 6LR.¶ In either case, the EDAC Status is embedded in the RPL Status with the 'A' flag set to 1.¶ The proxied EDAR/EDAC exchange MUST be protected with a timer whose appropriate duration and number of retries (1) are implementation dependent and (2) SHOULD be configurable, since the root and the 6LBR are typically nodes with a higher capacity and manageability than 6LRs. Upon timing out, the root MUST send an error back to the 6LR as above, using either a DAO-ACK or a DCO, as appropriate, with the 'A' and 'U' flags set to 1 in the RPL Status, and a RPL Status value of \"6LBR Registry Saturated\" [RFC8505].¶ 9.2.4. Perspective of the 6LBR The 6LBR is unaware that the RPL DODAG root is not the new attachment 6LR of the RUL, so it is not impacted by this specification.¶ Upon reception of an EDAR message, the 6LBR behaves as prescribed by [RFC8505] and returns an EDAC message to the sender.¶ 10. Protocol Operations for Multicast Addresses Section 12 of [RFC6550] details RPL support for multicast flows. This support is activated by setting the MOP value to 3 (\"Storing Mode of Operation with multicast support\") in the DIO messages that form the DODAG. This section also applies if and only if the MOP of the RPL Instance is 3.¶ RPL support for multicast is not source specific and only operates as an extension to the Storing mode of operation for unicast packets. Note that it is the RPL model that the multicast packet is copied and transmitted as a Layer 2 unicast to each of the interested children. This remains true when forwarding between the 6LR and the listener 6LN.¶ \"Multicast Listener Discovery Version 2 (MLDv2) for IPv6\" [RFC3810] provides an interface for a listener to register with multicast flows. In the MLD model, the router is a \"querier\", and the host is a multicast listener that registers with the querier to obtain copies of the particular flows it is interested in.¶ The equivalent of the first Address Registration happens as illustrated in Figure 11. The 6LN, as an MLD listener, sends an unsolicited Report to the 6LR. This enables it to start receiving the flow immediately and causes the 6LR to inject the multicast route in RPL.¶ 6LN/RUL 6LR Root 6LBR | | | | | unsolicited Report | | | |------------------->| | | | | DAO | | | |-------------->| | | | DAO-ACK | | | |<--------------| | | | | <if not done already> | | | | unsolicited Report | | | |---------------------->| | | | | Figure 11: First Multicast Registration Flow This specification does not change MLD but will operate more efficiently if the asynchronous messages for unsolicited Report and Done are sent by the 6LN as Layer 2 unicast to the 6LR, particularly on wireless.¶ The 6LR acts as a generic MLD querier and generates a DAO with the multicast address as the Target Prefix as described in Section 12 of [RFC6550]. As for the unicast host routes, the Path Lifetime associated to the Target is mapped from the Query Interval and is set to be larger, to account for variable propagation delays to the root. The root proxies the MLD exchange as a listener with the 6LBR acting as the querier, so as to get packets from a source external to the RPL domain.¶ Upon a DAO with a Target option for a multicast address, the RPL DODAG root checks to see if it is already registered as a listener for that address, and if not, it performs its own unsolicited Report for the multicast address as described in Section 6.1 of [RFC3810]. The Report is source independent, so there is no source address listed.¶ The equivalent of the registration refresh is pulled periodically by the 6LR acting as the querier. Upon the timing out of the Query Interval, the 6LR sends a Multicast Address Specific Query to each of its listeners, for each multicast address. The listeners respond with a Report. Based on the Reports, the 6LR maintains the aggregated list of all the multicast addresses for which there is a listener and advertises them using DAO messages as specified in Section 12 of [RFC6550]. Optionally, the 6LR MAY send a General Query, where the Multicast Address field is set to 0. In that case, the multicast packet is passed as a Layer 2 unicast to each of the interested children.¶ Upon a Report, the 6LR generates a DAO with as many Target options as there are Multicast Address Records in the Report message, copying the Multicast Address field in the Target Prefix of the RPL Target option. The DAO message is a Storing mode DAO, passed to a selection of the 6LR's parents.¶ Asynchronously to this, a similar procedure happens between the root and a router, such as the 6LBR, that serves multicast flows on the link where the root is located. Again, the Query and Report messages are source independent. The root lists exactly once each multicast address for which it has at least one active multicast DAO state, copying the multicast address in the DAO state in the Multicast Address field of the Multicast Address Records in the Report message.¶ This is illustrated in Figure 12:¶ 6LN/RUL 6LR Root 6LBR | | | | | Query | | | |<-------------------| | | | Report | | | |------------------->| | | | | DAO | | | |-------------->| | | | DAO-ACK | | | |<--------------| | | | | Query | | | |<-------------------| | | | Report | | | |------------------->| | | | | Figure 12: Next Registration Flow Note that all or any combination of the 6LR, the root, and the 6LBR might be collapsed in a single node, in which case the flow above happens internally, and possibly through internal API calls as opposed to messaging.¶ 11. Security Considerations It is worth noting that with [RFC6550], every node in the LLN is RPL aware and can inject any RPL-based attack in the network. This specification improves this situation by isolating edge nodes that can only interact with the RPL routers using 6LoWPAN ND, meaning that they cannot perform RPL insider attacks.¶ The LLN nodes depend on the 6LBR and the RPL participants for their operation. A trust model must be put in place to ensure that the right devices are acting in these roles, so as to avoid such threats as black-holing (see Section 7 of [RFC7416]), DoS attacks whereby a rogue 6LR creates a high churn in the RPL network by advertising and removing many forged addresses, or a bombing attack whereby an impersonated 6LBR would destroy state in the network by using a status code of 4 (\"Removed\") [RFC8505].¶ This trust model could be, at a minimum, based on Layer 2 secure joining and link-layer security. This is a generic 6LoWPAN requirement; see Req-5.1 in Appendix B.5 of [RFC8505].¶ In a general manner, the Security Considerations sections of [RFC6550], [RFC7416], [RFC6775], and [RFC8505] apply to this specification as well.¶ In particular, link-layer security is needed to prevent DoS attacks whereby a rogue 6LN creates a high churn in the RPL network by constantly registering and deregistering addresses with the R flag set to 1 in the EARO.¶ [RFC8928] updated 6LoWPAN ND with AP-ND. AP-ND protects the owner of an address against address theft and impersonation attacks in an LLN. Nodes supporting the extension compute a cryptographic identifier (Crypto-ID) and use it with one or more of their Registered Addresses. The Crypto-ID identifies the owner of the Registered Address and can be used to provide proof of ownership of the Registered Addresses. Once an address is registered with the Crypto‑ID and proof of ownership is provided, only the owner of that address can modify the registration information, thereby enforcing SAVI. [RFC8928] reduces even further the attack perimeter that is available to the edge nodes, and its use is suggested in this specification.¶ Additionally, the trust model could include role validation (e.g., using role-based authorization) to ensure that the node that claims to be a 6LBR or a RPL DODAG root is entitled to do so.¶ The Opaque field in the EARO enables the RUL to suggest a RPLInstanceID where its traffic is placed. It is also possible for an attacker RUL to include an RPI in the packet. This opens the door to attacks where a RPL Instance would be reserved for critical traffic, e.g., with a specific bandwidth reservation, that the additional traffic generated by a rogue may disrupt. The attack may be alleviated by traditional access control and traffic-shaping mechanisms where the 6LR controls the incoming traffic from the 6LN. More importantly, the 6LR is the node that injects the traffic in the RPL domain, so it has the final word on which RPL Instance is to be used for the traffic coming from the RUL, per its own policy. In particular, a policy can override the formal language that forces the use of the Opaque field or the rewriting of the RPI provided by the RUL, in a situation where the network administrator finds it relevant.¶ At the time of this writing, RPL does not have a route ownership validation model whereby it is possible to validate the origin of an address that is injected in a DAO. This specification makes a first step in that direction by allowing the root to challenge the RUL via the 6LR that serves it.¶ Section 6.1 indicates that when the length of the ROVR field is unknown, the RPL Target option must be passed on as received in RPL Storing mode. This creates a possible opening for using DAO messages as a covert channel. Note that DAO messages are rare, and overusing that channel could be detected. An implementation SHOULD notify the network management system when a RPL Target option is received with an unknown ROVR field size, to ensure that the network administrator is aware of the situation.¶ [RFC9009] introduces the ability for a rogue common ancestor node to invalidate a route on behalf of the target node. In this case, the RPL Status in the DCO has the 'A' flag set to 0, and an NA(EARO) is returned to the 6LN with the R flag set to 0. This encourages the 6LN to try another 6LR. If a 6LR exists that does not use the rogue common ancestor, then the 6LN will eventually succeed gaining reachability over the RPL network in spite of the rogue node.¶ 12. IANA Considerations 12.1. Fixing the Address Registration Option Flags Section 9.1 of [RFC8505] created a registry for the 8-bit Address Registration Option Flags field. IANA has renamed the first column of the table from \"ARO Status\" to \"Bit Number\".¶ 12.2. Resizing the ARO Status Values Section 12 of [RFC6775] created the \"Address Registration Option Status Values\" registry with a range of 0-255.¶ This specification reduces that range to 0-63; see Section 6.3.¶ IANA has modified the \"Address Registration Option Status Values\" registry so that the upper bound of the unassigned values is 63. This document has been added as a reference. The registration procedure has not changed.¶ 12.3. New RPL DODAG Configuration Option Flag IANA has assigned the following flag in the \"DODAG Configuration Option Flags for MOP 0..6\" registry [RFC9008]:¶ Table 2: New DODAG Configuration Option Flag Bit Number Capability Description Reference 1 Root Proxies EDAR/EDAC (P) RFC 9010 IANA has added this document as a reference for MOP 7 in the RPL \"Mode of Operation\" registry.¶ 12.4. RPL Target Option Flags Registry This document modifies the \"RPL Target Option Flags\" registry initially created per Section 20.15 of [RFC6550]. The registry now includes only 4 bits (Section 6.1) and lists this document as an additional reference. The registration procedure has not changed.¶ Section 6.1 also defines two new entries in the registry, as follows:¶ Table 3: RPL Target Option Flags Registry Bit Number Capability Description Reference 0 Advertiser address in Full (F) RFC 9010 1 Proxy EDAR Requested (X) RFC 9010 12.5. New Subregistry for RPL Non-Rejection Status Values IANA has created a new subregistry for the RPL Non-Rejection Status values for use in the RPL DAO-ACK, DCO, and DCO-ACK messages with the 'A' flag set to 0 and the 'U' flag set to 1, under the \"Routing Protocol for Low Power and Lossy Networks (RPL)\" registry.¶ Possible values are 6-bit unsigned integers (0..63).¶ The registration procedure is IETF Review [RFC8126].¶ The initial allocation is as indicated in Table 4:¶ Table 4: Acceptance Values of the RPL Status Value Meaning Reference 0 Success / Unqualified acceptance RFC 6550 / RFC 9010 1..63 Unassigned 12.6. New Subregistry for RPL Rejection Status Values IANA has created a new subregistry for the RPL Rejection Status values for use in the RPL DAO-ACK and DCO messages with the 'A' flag set to 0 and the 'U' flag set to 1, under the \"Routing Protocol for Low Power and Lossy Networks (RPL)\" registry.¶ Possible values are 6-bit unsigned integers (0..63).¶ The registration procedure is IETF Review [RFC8126].¶ The initial allocation is as indicated in Table 5:¶ Table 5: Rejection Values of the RPL Status Value Meaning Reference 0 Unqualified rejection RFC 9010 1 No routing entry RFC 9009 2..63 Unassigned 13. References 13.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3810] Vida, R., Ed. and L. Costa, Ed., \"Multicast Listener Discovery Version 2 (MLDv2) for IPv6\", RFC 3810, DOI 10.17487/RFC3810, June 2004, <https://www.rfc-editor.org/info/rfc3810>. [RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman, \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861, DOI 10.17487/RFC4861, September 2007, <https://www.rfc-editor.org/info/rfc4861>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. Bormann, \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 6775, DOI 10.17487/RFC6775, November 2012, <https://www.rfc-editor.org/info/rfc6775>. [RFC7102] Vasseur, JP., \"Terms Used in Routing for Low-Power and Lossy Networks\", RFC 7102, DOI 10.17487/RFC7102, January 2014, <https://www.rfc-editor.org/info/rfc7102>. [RFC7400] Bormann, C., \"6LoWPAN-GHC: Generic Header Compression for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 7400, DOI 10.17487/RFC7400, November 2014, <https://www.rfc-editor.org/info/rfc7400>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>. [RFC8504] Chown, T., Loughney, J., and T. Winters, \"IPv6 Node Requirements\", BCP 220, RFC 8504, DOI 10.17487/RFC8504, January 2019, <https://www.rfc-editor.org/info/rfc8504>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC8928] Thubert, P., Ed., Sarikaya, B., Sethi, M., and R. Struik, \"Address-Protected Neighbor Discovery for Low-Power and Lossy Networks\", RFC 8928, DOI 10.17487/RFC8928, November 2020, <https://www.rfc-editor.org/info/rfc8928>. [RFC9008] Robles, M.I., Richardson, M., and P. Thubert, \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\", RFC 9008, DOI 10.17487/RFC9008, April 2021, <https://www.rfc-editor.org/info/rfc9008>. [RFC9009] Jadhav, R.A., Ed., Thubert, P., Sahoo, R.N., and Z. Cao, \"Efficient Route Invalidation\", RFC 9009, DOI 10.17487/RFC9009, April 2021, <https://www.rfc-editor.org/info/rfc9009>. 13.2. Informative References [RFC4862] Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless Address Autoconfiguration\", RFC 4862, DOI 10.17487/RFC4862, September 2007, <https://www.rfc-editor.org/info/rfc4862>. [RFC4919] Kushalnagar, N., Montenegro, G., and C. Schumacher, \"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals\", RFC 4919, DOI 10.17487/RFC4919, August 2007, <https://www.rfc-editor.org/info/rfc4919>. [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6553] Hui, J. and JP. Vasseur, \"The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams\", RFC 6553, DOI 10.17487/RFC6553, March 2012, <https://www.rfc-editor.org/info/rfc6553>. [RFC6554] Hui, J., Vasseur, JP., Culler, D., and V. Manral, \"An IPv6 Routing Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6554, DOI 10.17487/RFC6554, March 2012, <https://www.rfc-editor.org/info/rfc6554>. [RFC6606] Kim, E., Kaspar, D., Gomez, C., and C. Bormann, \"Problem Statement and Requirements for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing\", RFC 6606, DOI 10.17487/RFC6606, May 2012, <https://www.rfc-editor.org/info/rfc6606>. [RFC6687] Tripathi, J., Ed., de Oliveira, J., Ed., and JP. Vasseur, Ed., \"Performance Evaluation of the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6687, DOI 10.17487/RFC6687, October 2012, <https://www.rfc-editor.org/info/rfc6687>. [RFC7039] Wu, J., Bi, J., Bagnulo, M., Baker, F., and C. Vogt, Ed., \"Source Address Validation Improvement (SAVI) Framework\", RFC 7039, DOI 10.17487/RFC7039, October 2013, <https://www.rfc-editor.org/info/rfc7039>. [RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>. [RFC7416] Tsao, T., Alexander, R., Dohler, M., Daza, V., Lozano, A., and M. Richardson, Ed., \"A Security Threat Analysis for the Routing Protocol for Low-Power and Lossy Networks (RPLs)\", RFC 7416, DOI 10.17487/RFC7416, January 2015, <https://www.rfc-editor.org/info/rfc7416>. [RFC8025] Thubert, P., Ed. and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging Dispatch\", RFC 8025, DOI 10.17487/RFC8025, November 2016, <https://www.rfc-editor.org/info/rfc8025>. [RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing Header\", RFC 8138, DOI 10.17487/RFC8138, April 2017, <https://www.rfc-editor.org/info/rfc8138>. [RFC8415] Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A., Richardson, M., Jiang, S., Lemon, T., and T. Winters, \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\", RFC 8415, DOI 10.17487/RFC8415, November 2018, <https://www.rfc-editor.org/info/rfc8415>. [RFC8929] Thubert, P., Ed., Perkins, C.E., and E. Levy-Abegnoli, \"IPv6 Backbone Router\", RFC 8929, DOI 10.17487/RFC8929, November 2020, <https://www.rfc-editor.org/info/rfc8929>. Appendix A. Example Compression Figure 13 illustrates the case in Storing mode where the packet is received from the Internet, then the root encapsulates the packet to insert the RPI and deliver it to the 6LR that is the parent and last hop to the final destination, which is not known to support [RFC8138].¶ +-+ ... -+-+ ... +-+- ... -+-+ ... -+-+-+ ... +-+-+ ... -+ ... +-... |11110001|SRH-6LoRH| RPI- |IP-in-IP| NH=1 |11110CPP| UDP | UDP |Page 1 |Type1 S=0| 6LoRH | 6LoRH |LOWPAN_IPHC| UDP | hdr |Payld +-+ ... -+-+ ... +-+- ... -+-+ ... -+-+-+ ... +-+-+ ... -+ ... +-... <-4 bytes-> <- RFC 6282 -> <- No RPL artifact ... Figure 13: Encapsulation to Parent 6LR in Storing Mode The difference from the example presented in Figure 19 of [RFC8138] is the addition of an SRH-6LoRH before the RPI-6LoRH to transport the compressed address of the 6LR as the destination address of the outer IPv6 header. In Figure 19 of [RFC8138], the destination IP of the outer header was elided and was implicitly the same address as the destination of the inner header. Type 1 was arbitrarily chosen, and the size of 0 denotes a single address in the SRH.¶ In Figure 13, the source of the IPv6-in-IPv6 encapsulation is the root, so it is elided in the IPv6-in-IPv6 6LoRH. The destination is the parent 6LR of the destination of the encapsulated packet, so it cannot be elided. If the DODAG is operated in Storing mode, it is the single entry in the SRH-6LoRH and the SRH-6LoRH Size is encoded as 0. The SRH-6LoRH is the first 6LoRH in the chain. In this particular example, the 6LR address can be compressed to 2 bytes, so a Type of 1 is used. The result is that the total length of the SRH-6LoRH is 4 bytes.¶ In Non-Storing mode, the encapsulation from the root would be similar to that represented in Figure 13 with possibly more hops in the SRH‑6LoRH and possibly multiple SRH-6LoRHs if the various addresses in the routing header are not compressed to the same format. Note that on the last hop to the parent 6LR, the RH3 is consumed and removed from the compressed form, so the use of Non-Storing mode vs. Storing mode is indistinguishable from the packet format.¶ The SRH-6LoRHs are followed by the RPI-6LoRH and then the IPv6-in-IPv6 6LoRH. When the IPv6-in-IPv6 6LoRH is removed, all the 6LoRH Headers that precede it are also removed. The Paging Dispatch [RFC8025] may also be removed if there was no previous Page change to a Page other than 0 or 1, since the LOWPAN_IPHC is encoded in the same fashion in the default Page 0 and in Page 1. The resulting packet to the destination is the encapsulated packet compressed per [RFC6282].¶ Acknowledgments The authors wish to thank Ines Robles, Georgios Papadopoulos, and especially Rahul Jadhav and Alvaro Retana for their reviews and contributions to this document. Also many thanks to Éric Vyncke, Erik Kline, Murray Kucherawy, Peter van der Stok, Carl Wallace, Barry Leiba, Julien Meuric, and especially Benjamin Kaduk and Elwyn Davies, for their reviews and useful comments during the IETF Last Call and the IESG review sessions.¶ Authors' Addresses Pascal Thubert (editor) Cisco Systems, Inc. Building D45 Allee des Ormes - BP1200 06254 MOUGINS - Sophia Antipolis France Phone: +33 497 23 26 34 Email: pthubert@cisco.com Michael C. Richardson Sandelman Software Works Email: mcr+ietf@sandelman.ca URI: https://www.sandelman.ca/"
    },
    {
        "Number": "9011",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Static Context Header Compression and Fragmentation (SCHC) over LoRaWAN",
        "Authors": [
            "O. Gimenez",
            "Ed.",
            "I. Petrov",
            "Ed."
        ],
        "Date": "2021-04",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "The Static Context Header Compression and fragmentation (SCHC) specification (RFC 8724) describes generic header compression and fragmentation techniques for Low-Power Wide Area Network (LPWAN) technologies. SCHC is a generic mechanism designed for great flexibility so that it can be adapted for any of the LPWAN technologies.  This document defines a profile of SCHC (RFC 8724) for use in LoRaWAN networks and provides elements such as efficient parameterization and modes of operation.",
        "Keywords": [
            "header compression",
            "compression",
            "fragmentation",
            "static context",
            "rule-based",
            "LPWAN",
            "LPWANs",
            "low power",
            "low-power",
            "LoRa",
            "LoRaWAN",
            "IoT",
            "Internet of Things",
            "adaptation layer",
            "UDP",
            "IPv6",
            "sensor network",
            "wireless sensor network",
            "802.15.4",
            "constrained network",
            "constrained node",
            "constrained-node network",
            "SCHC"
        ],
        "Content": "RFC 9011: Static Context Header Compression and Fragmentation (SCHC) over LoRaWAN RFC 9011 SCHC over LoRaWAN April 2021 Gimenez & Petrov Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9011 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: O. Gimenez, Ed. Semtech I. Petrov, Ed. Acklio RFC 9011 Static Context Header Compression and Fragmentation (SCHC) over LoRaWAN Abstract The Static Context Header Compression and fragmentation (SCHC) specification (RFC 8724) describes generic header compression and fragmentation techniques for Low-Power Wide Area Network (LPWAN) technologies. SCHC is a generic mechanism designed for great flexibility so that it can be adapted for any of the LPWAN technologies.¶ This document defines a profile of SCHC (RFC 8724) for use in LoRaWAN networks and provides elements such as efficient parameterization and modes of operation.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9011.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  SCHC Overview 4.  LoRaWAN Architecture 4.1.  Device Classes (A, B, C) and Interactions 4.2.  Device Addressing 4.3.  General Frame Types 4.4.  LoRaWAN MAC Frames 4.5.  LoRaWAN FPort 4.6.  LoRaWAN Empty Frame 4.7.  Unicast and Multicast Technology 5.  SCHC over LoRaWAN 5.1.  LoRaWAN FPort and RuleID 5.2.  RuleID Management 5.3.  Interface IDentifier (IID) Computation 5.4.  Padding 5.5.  Decompression 5.6.  Fragmentation 5.6.1.  DTag 5.6.2.  Uplink Fragmentation: From Device to SCHC Gateway 5.6.3.  Downlink Fragmentation: From SCHC Gateway to Device 5.7.  SCHC Fragment Format 5.7.1.  All-0 SCHC Fragment 5.7.2.  All-1 SCHC Fragment 5.7.3.  Delay after Each LoRaWAN Frame to Respect Local Regulation 6.  Security Considerations 7.  IANA Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Appendix A.  Examples A.1.  Uplink - Compression Example - No Fragmentation A.2.  Uplink - Compression and Fragmentation Example A.3.  Downlink Acknowledgements Contributors Authors' Addresses 1. Introduction The SCHC specification [RFC8724] describes generic header compression and fragmentation techniques that can be used on all Low-Power Wide Area Network (LPWAN) technologies defined in [RFC8376]. Even though those technologies share a great number of common features like star-oriented topologies, network architecture, devices with communications that are mostly quite predictable, etc., they do have some slight differences with respect to payload sizes, reactiveness, etc.¶ SCHC provides a generic framework that enables those devices to communicate on IP networks. However, for efficient performance, some parameters and modes of operation need to be set appropriately for each of the LPWAN technologies.¶ This document describes the parameters and modes of operation when SCHC is used over LoRaWAN networks. The LoRaWAN protocol is specified by the LoRa Alliance in [LORAWAN-SPEC].¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ This section defines the terminology and abbreviations used in this document. For all other definitions, please look up the SCHC specification [RFC8724].¶ Note: The SCHC acronym is pronounced like \"sheek\" in English (or \"chic\" in French). Therefore, this document writes \"a SCHC Packet\" instead of \"an SCHC Packet\".¶ AppKey: Application Key. An AES-128 root key specific to each device.¶ AppSKey: Application Session Key. An AES-128 key derived from the AppKey for each new session. It is used to encrypt the payload field of a LoRaWAN applicative frame.¶ DevAddr: A 32-bit non-unique identifier assigned to a device either:¶ Statically: by the device manufacturer in \"Activation-by-Personalization\" mode, or¶ Dynamically: after a LoRaWAN \"Join Procedure\" by the Network Gateway in \"Over-the-Air-Activation\" mode.¶ DevEUI: Device Extended Unique Identifier, an IEEE EUI-64 identifier used to identify the device during the procedure while joining the network (Join Procedure). It is assigned by the manufacturer or the device owner and provisioned on the Network Gateway.¶ Downlink: A LoRaWAN term for a frame transmitted by the network and received by the device.¶ EUI: Extended Unique Identifier¶ FRMPayload: Application data in a LoRaWAN frame¶ IID: Interface Identifier¶ LoRaWAN: LoRaWAN is a wireless technology based on Industrial, Scientific, and Medical (ISM) radio bands that is used for long-range, low-power, low-data-rate applications developed by the LoRa Alliance, a membership consortium: <https://www.lora-alliance.org>.¶ MSB: Most Significant Byte¶ NGW: Network Gateway¶ OUI: Organizationally Unique Identifier. IEEE-assigned prefix for EUI.¶ RCS: Reassembly Check Sequence. Used to verify the integrity of the fragmentation-reassembly process.¶ RGW: Radio Gateway¶ RX: A device's reception window.¶ RX1/RX2: LoRaWAN class A devices open two RX windows following an uplink, called \"RX1\" and \"RX2\".¶ SCHC C/D: SCHC Compression/Decompression¶ SCHC F/R: SCHC Fragmentation/Reassembly¶ SCHC gateway: The LoRaWAN Application Server that manages translation between an IPv6 network and the Network Gateway (LoRaWAN Network Server).¶ Tile: A piece of a fragmented packet as described in Section 8.2.2.1 of [RFC8724].¶ Uplink: LoRaWAN term for a frame transmitted by the device and received by the network.¶ 3. SCHC Overview This section contains a short overview of SCHC. For a detailed description, refer to the full specification [RFC8724].¶ It defines:¶ Compression mechanisms to avoid transporting information known by both sender and receiver over the air. Known information is part of the \"context\". This component is called the \"SCHC Compression/Decompression\" (SCHC C/D).¶ Fragmentation mechanisms to allow SCHC Packet transportation on a small, and potentially variable, MTU. This component is called the \"SCHC Fragmentation/Reassembly\" (SCHC F/R).¶ Context exchange or pre-provisioning is out of scope of this document.¶ Device App +----------------+ +----+ +----+ +----+ | App1 App2 App3 | |App1| |App2| |App3| | | | | | | | | | UDP | |UDP | |UDP | |UDP | | IPv6 | |IPv6| |IPv6| |IPv6| | | | | | | | | |SCHC C/D and F/R| | | | | | | +--------+-------+ +----+ +----+ +----+ | +---+ +----+ +----+ +----+ . . . +~ |RGW| === |NGW | == |SCHC| == |SCHC|...... Internet .... +---+ +----+ |F/R | |C/D | +----+ +----+ |<- - - - LoRaWAN - - ->| Figure 1: Architecture Figure 1 represents the architecture for compression/decompression; it is based on the terminology from [RFC8376]. The device is sending application flows using IPv6 or IPv6/UDP protocols. These flows might be compressed by a SCHC C/D to reduce header size, and fragmented by the SCHC F/R. The resulting information is sent on a Layer 2 (L2) frame to an LPWAN Radio Gateway (RGW) that forwards the frame to a Network Gateway (NGW). The NGW sends the data to a SCHC F/R for reassembly, if required, then to a SCHC C/D for decompression. The SCHC C/D shares the same rules with the device. The SCHC C/D and SCHC F/R can be located on the NGW or in another place as long as a communication is established between the NGW and the SCHC F/R, then SCHC F/R and SCHC C/D. The SCHC C/D and SCHC F/R in the device and the SCHC gateway MUST share the same set of rules. After decompression, the packet can be sent on the Internet to one or several LPWAN Application Servers (App).¶ The SCHC C/D and SCHC F/R process is bidirectional, so the same principles can be applied to the other direction.¶ In a LoRaWAN network, the RGW is called a \"Gateway\", the NGW is a \"Network Server\", and the SCHC C/D and SCHC F/R are one or more \"Application Servers\". Application servers can be provided by the NGW or any third-party software. Figure 1 can be mapped in LoRaWAN terminology to:¶ End Device App +--------------+ +----+ +----+ +----+ |App1 App2 App3| |App1| |App2| |App3| | | | | | | | | | UDP | |UDP | |UDP | |UDP | | IPv6 | |IPv6| |IPv6| |IPv6| | | | | | | | | |SCHC C/D & F/R| | | | | | | +-------+------+ +----+ +----+ +----+ | +-------+ +-------+ +-----------+ . . . +~ |Gateway| == |Network| == |Application|..... Internet .... +-------+ |server | |server | +-------+ | F/R - C/D | +-----------+ |<- - - - - LoRaWAN - - - ->| Figure 2: SCHC Architecture Mapped to LoRaWAN 4. LoRaWAN Architecture An overview of the LoRaWAN protocol and architecture [LORAWAN-SPEC] is described in [RFC8376]. The mapping between the LPWAN architecture entities as described in [RFC8724] and the ones in [LORAWAN-SPEC] is as follows:¶ Devices are LoRaWAN End Devices (e.g., sensors, actuators, etc.). There can be a very high density of devices per radio gateway (LoRaWAN gateway). This entity maps to the LoRaWAN end device.¶ The RGW is the endpoint of the constrained link. This entity maps to the LoRaWAN Gateway.¶ The NGW is the interconnection node between the Radio Gateway and the SCHC gateway (LoRaWAN Application Server). This entity maps to the LoRaWAN Network Server.¶ The SCHC C/D and SCHC F/R are handled by the LoRaWAN Application Server.¶ The LPWAN-AAA Server is the LoRaWAN Join Server. Its role is to manage and deliver security keys in a secure way so that the devices root key is never exposed.¶ (LPWAN-AAA Server) () () () | +------+ () () () () / \\ +---------+ | Join | () () () () () / \\======| ^ |===|Server| +-----------+ () () () | | <--|--> | +------+ |Application| () () () () / \\==========| v |=============| Server | () () () / \\ +---------+ +-----------+ End devices Gateways Network Server (SCHC C/D and F/R) (devices) (RGW) (NGW) Figure 3: LPWAN Architecture Note: Figure 3 terms are from LoRaWAN, with [RFC8376] terminology in brackets.¶ The SCHC C/D and SCHC F/R are performed on the LoRaWAN end device and the Application Server (called the SCHC gateway). While the point-to-point link between the device and the Application Server constitutes a single IP hop, the ultimate endpoint of the IP communication may be an Internet node beyond the Application Server. In other words, the LoRaWAN Application Server (SCHC gateway) acts as the first-hop IP router for the device. The Application Server and Network Server may be co-located, which effectively turns the Network/Application Server into the first-hop IP router.¶ 4.1. Device Classes (A, B, C) and Interactions The LoRaWAN Medium Access Control (MAC) layer supports three classes of devices named A, B, and C. All devices implement Class A, and some devices may implement Class B or Class C. Class B and Class C are mutually exclusive.¶ Class A: Class A is the simplest class of devices. The device is allowed to transmit at any time, randomly selecting a communication channel. The Network Gateway may reply with a downlink in one of the two receive windows immediately following the uplinks. Therefore, the Network Gateway cannot initiate a downlink; it has to wait for the next uplink from the device to get a downlink opportunity. Class A is the lowest power consumption class.¶ Class B: Class B devices implement all the functionalities of Class A devices but also schedule periodic listen windows. Therefore, as opposed to Class A devices, Class B devices can receive downlinks that are initiated by the Network Gateway and not following an uplink. There is a trade-off between the periodicity of those scheduled Class B listen windows and the power consumption of the device:¶ High periodicity: Downlinks from the NGW will be sent faster but the device wakes up more often and power consumption is increased.¶ Low periodicity: Downlinks from the NGW will have higher latency but lower power consumption.¶ Class C: Class C devices implement all the functionalities of Class A devices but keep their receiver open whenever they are not transmitting. Class C devices can receive downlinks at any time at the expense of a higher power consumption. Battery-powered devices can only operate in Class C for a limited amount of time (for example, for a firmware upgrade over-the-air). Most of the Class C devices are grid powered (for example, Smart Plugs).¶ 4.2. Device Addressing LoRaWAN end devices use a 32-bit network address (DevAddr) to communicate with the Network Gateway over the air; this address might not be unique in a LoRaWAN network. Devices using the same DevAddr are distinguished by the Network Gateway based on the cryptographic signature appended to every LoRaWAN frame.¶ To communicate with the SCHC gateway, the Network Gateway MUST identify the devices by a unique 64-bit device identifier called the \"DevEUI\".¶ The DevEUI is assigned to the device during the manufacturing process by the device's manufacturer. It is built like an Ethernet MAC address by concatenating the manufacturer's IEEE OUI field with a vendor unique number. For example, a 24-bit OUI is concatenated with a 40-bit serial number. The Network Gateway translates the DevAddr into a DevEUI in the uplink direction and reciprocally on the downlink direction.¶ +--------+ +---------+ +---------+ +----------+ | Device | <=====> | Network | <====> | SCHC | <======> | Internet | | | DevAddr | Gateway | DevEUI | Gateway | IPv6/UDP | | +--------+ +---------+ +---------+ +----------+ Figure 4: LoRaWAN Addresses 4.3. General Frame Types LoRaWAN implements the possibility to send confirmed or unconfirmed frames:¶ Confirmed frame: The sender asks the receiver to acknowledge the frame.¶ Unconfirmed frame: The sender does not ask the receiver to acknowledge the frame.¶ As SCHC defines its own acknowledgment mechanisms, SCHC does not require the use of LoRaWAN Confirmed frames (FType = 0b100 as per [LORAWAN-SPEC]).¶ 4.4. LoRaWAN MAC Frames In addition to regular data frames, LoRaWAN implements JoinRequest and JoinAccept frame types, which are used by a device to join a network:¶ JoinRequest: This frame is used by a device to join a network. It contains the device's unique identifier DevEUI and a random nonce that will be used for session key derivation.¶ JoinAccept: To onboard a device, the Network Gateway responds to the JoinRequest issued by a device with a JoinAccept frame. That frame is encrypted with the device's AppKey and contains (among other fields) the network's major settings and a random nonce used to derive the session keys.¶ Data: This refers to MAC and application data. Application data is protected with AES-128 encryption. MAC-related data is AES-128 encrypted with another key.¶ 4.5. LoRaWAN FPort The LoRaWAN MAC layer features a frame port field in all frames. This field (FPort) is 8 bits long and the values from 1 to 223 can be used. It allows LoRaWAN networks and applications to identify data.¶ 4.6. LoRaWAN Empty Frame A LoRaWAN empty frame is a LoRaWAN frame without FPort (cf. Section 5.1) and FRMPayload.¶ 4.7. Unicast and Multicast Technology LoRaWAN technology supports unicast downlinks but also multicast; a multicast packet sent over a LoRaWAN radio link can be received by several devices. It is useful to address many devices with the same content: either a large binary file (firmware upgrade) or the same command (e.g., lighting control). As IPv6 is also a multicast technology, this feature can be used to address a group of devices.¶ Note 1: IPv6 multicast addresses must be defined as per [RFC4291]. The LoRaWAN multicast group definition in a Network Gateway and the relation between those groups and IPv6 groupID are out of scope of this document.¶ Note 2: The LoRa Alliance defined [LORAWAN-REMOTE-MULTICAST-SET] as the RECOMMENDED way to set up multicast groups on devices and create a synchronized reception window.¶ 5. SCHC over LoRaWAN 5.1. LoRaWAN FPort and RuleID The FPort field is part of the SCHC Message, as shown in Figure 5. The SCHC C/D and the SCHC F/R SHALL concatenate the FPort field with the LoRaWAN payload to recompose the SCHC Message.¶ | FPort | LoRaWAN payload | + ------------------------ + | SCHC Message | Figure 5: SCHC Message in LoRaWAN Note: The SCHC Message is any datagram sent by the SCHC C/D or F/R layers.¶ A fragmented datagram with application payload transferred from device to Network Gateway is called an \"uplink-fragmented datagram\". It uses an FPort for data uplink and its associated SCHC control downlinks, named \"FPortUp\" in this document. The other way, a fragmented datagram with application payload transferred from Network Gateway to device is called a \"downlink-fragmented datagram\". It uses another FPort for data downlink and its associated SCHC control uplinks, named \"FPortDown\" in this document.¶ All RuleIDs can use arbitrary values inside the FPort range allowed by the LoRaWAN specification [LORAWAN-SPEC] and MUST be shared by the device and SCHC gateway prior to the communication with the selected rule. The uplink and downlink fragmentation FPorts MUST be different.¶ 5.2. RuleID Management The RuleID MUST be 8 bits and encoded in the LoRaWAN FPort as described in Section 5.1. LoRaWAN supports up to 223 application FPorts in the range [1..223] as defined in Section 4.3.2 of [LORAWAN-SPEC]; it implies that the RuleID MSB SHOULD be inside this range. An application can send non-SCHC traffic by using FPort values different from the ones used for SCHC.¶ In order to improve interoperability, RECOMMENDED fragmentation RuleID values are:¶ RuleID = 20 (8-bit) for uplink fragmentation, named FPortUp.¶ RuleID = 21 (8-bit) for downlink fragmentation, named FPortDown.¶ RuleID = 22 (8-bit) for which SCHC compression was not possible (i.e., no matching compression Rule was found), as described in Section 6 of [RFC8724].¶ The FPortUp value MUST be different from the FPortDown value. The remaining RuleIDs are available for compression. RuleIDs are shared between uplink and downlink sessions. A RuleID not in the set(s) of FPortUp or FPortDown means that the fragmentation is not used; thus, on reception, the SCHC Message MUST be sent to the SCHC C/D layer.¶ The only uplink frames using the FPortDown port are the fragmentation SCHC control messages of a downlink-fragmented datagram (for example, SCHC ACKs). Similarly, the only downlink frames using the FPortUp port are the fragmentation SCHC control messages of an uplink-fragmented datagram.¶ An application can have multiple fragmented datagrams between a device and one or several SCHC gateways. A set of FPort values is REQUIRED for each SCHC gateway instance the device is required to communicate with. The application can use additional uplinks or downlink-fragmented parameters but SHALL implement at least the parameters defined in this document.¶ The mechanism for context distribution across devices and gateways is outside the scope of this document.¶ 5.3. Interface IDentifier (IID) Computation In order to mitigate the risks described in [RFC8064] and [RFC8065], implementations MUST implement the following algorithm and SHOULD use it.¶ key = LoRaWAN AppSKey¶ cmac = aes128_cmac(key, DevEUI)¶ IID = cmac[0..7]¶ The aes128_cmac algorithm is described in [RFC4493]. It has been chosen as it is already used by devices for the LoRaWAN protocol.¶ As AppSKey is renewed each time a device joins or rejoins a LoRaWAN network, the IID will change over time; this mitigates privacy concerns, for example, location tracking or correlation over time. Join periodicity is defined at the application level.¶ Address-scan risk is mitigated thanks to the entropy added to the IID by the inclusion of AppSKey.¶ Using this algorithm will also ensure that there is no correlation between the hardware identifier (DevEUI) and the IID, so an attacker cannot use the manufacturer OUI to target devices.¶ Example with:¶ DevEUI: 0x1122334455667788¶ AppSKey: 0x00AABBCCDDEEFF00AABBCCDDEEFFAABB¶ 1. key: 0x00AABBCCDDEEFF00AABBCCDDEEFFAABB 2. cmac: 0x4E822D9775B2649928F82066AF804FEC 3. IID: 0x4E822D9775B26499 Figure 6: Example of IID Computation There is a small probability of IID collision in a LoRaWAN network. If this occurs, the IID can be changed by rekeying the device at the L2 level (i.e., triggering a LoRaWAN join). The way the device is rekeyed is out of scope of this document and left to the implementation.¶ Note: Implementations also using another IID source MUST ensure that the same IID is shared between the device and the SCHC gateway in the compression and decompression of the IPv6 address of the device.¶ 5.4. Padding All padding bits MUST be 0.¶ 5.5. Decompression The SCHC C/D MUST concatenate FPort and LoRaWAN payload to retrieve the SCHC Packet as per Section 5.1.¶ RuleIDs matching FPortUp and FPortDown are reserved for SCHC fragmentation.¶ 5.6. Fragmentation The L2 Word Size used by LoRaWAN is 1 byte (8 bits). The SCHC fragmentation over LoRaWAN uses the ACK-on-Error mode for uplink fragmentation and ACK-Always mode for downlink fragmentation. A LoRaWAN device cannot support simultaneous interleaved fragmented datagrams in the same direction (uplink or downlink).¶ The fragmentation parameters are different for uplink- and downlink-fragmented datagrams and are successively described in the next sections.¶ 5.6.1. DTag Section 8.2.4 of [RFC8724] describes the possibility to interleave several fragmented SCHC datagrams for the same RuleID. This is not used in the SCHC-over-LoRaWAN profile. A device cannot interleave several fragmented SCHC datagrams on the same FPort. This field is not used, and its size is 0.¶ Note: The device can still have several parallel fragmented datagrams with more than one SCHC gateway thanks to distinct sets of FPorts, cf. Section 5.2.¶ 5.6.2. Uplink Fragmentation: From Device to SCHC Gateway In this case, the device is the fragment transmitter and the SCHC gateway is the fragment receiver. A single fragmentation rule is defined. The SCHC F/R MUST concatenate FPort and LoRaWAN payload to retrieve the SCHC Packet, as per Section 5.1.¶ SCHC fragmentation reliability mode: ACK-on-Error.¶ SCHC header size: 2 bytes (the FPort byte + 1 additional byte).¶ RuleID: 8 bits stored in the LoRaWAN FPort (cf. Section 5.2).¶ DTag: Size T = 0 bits, not used (cf. Section 5.6.1).¶ Window index: 4 windows are used, encoded on M = 2 bits.¶ FCN: The FCN field is encoded on N = 6 bits, so WINDOW_SIZE = 63 tiles are allowed in a window.¶ Last tile: It can be carried in a Regular SCHC Fragment, alone in an All-1 SCHC Fragment, or with any of these two methods. Implementations must ensure that:¶ The sender MUST ascertain that the receiver will not receive the last tile through both a Regular SCHC Fragment and an All-1 SCHC Fragment during the same session.¶ If the last tile is in an All-1 SCHC Message, the current L2 MTU MUST be big enough to fit the All-1 header and the last tile.¶ Penultimate tile: MUST be equal to the regular size.¶ RCS: Use the recommended calculation algorithm in Section 8.2.3 of [RFC8724], Integrity Checking.¶ Tile: Size is 10 bytes.¶ Retransmission timer: Set by the implementation depending on the application requirements. The default RECOMMENDED duration of this timer is 12 hours; this value is mainly driven by application requirements and MAY be changed by the application.¶ Inactivity timer: The SCHC gateway implements an \"inactivity timer\". The default RECOMMENDED duration of this timer is 12 hours; this value is mainly driven by application requirements and MAY be changed by the application.¶ MAX_ACK_REQUESTS: 8. With this set of parameters, the SCHC Fragment Header is 16 bits, including FPort; payload overhead will be 8 bits as FPort is already a part of LoRaWAN payload. MTU is: 4 windows * 63 tiles * 10 bytes per tile = 2520 bytes.¶ In addition to the per-rule context parameters specified in [RFC8724], for uplink rules, an additional context parameter is added: whether or not to ack after each window. For battery powered devices, it is RECOMMENDED to use the ACK mechanism at the end of each window instead of waiting until the end of all windows:¶ The SCHC receiver SHOULD send a SCHC ACK after every window even if there is no missing tile.¶ The SCHC sender SHOULD wait for the SCHC ACK from the SCHC receiver before sending tiles from the next window. If the SCHC ACK is not received, it SHOULD send a SCHC ACK REQ up to MAX_ACK_REQUESTS times, as described previously.¶ This will avoid useless uplinks if the device has lost network coverage.¶ For non-battery powered devices, the SCHC receiver MAY also choose to send a SCHC ACK only at the end of all windows. This will reduce downlink load on the LoRaWAN network by reducing the number of downlinks.¶ SCHC implementations MUST be compatible with both behaviors, and this selection is part of the rule context.¶ 5.6.2.1. Regular Fragments Figure 7 is an example of a regular fragment for all fragments except the last one. SCHC Header Size is 16 Bits, including the LoRaWAN FPort.¶ | FPort | LoRaWAN payload | + ------ + ------------------------- + | RuleID | W | FCN | Payload | + ------ + ------ + ------ + ------- + | 8 bits | 2 bits | 6 bits | | Figure 7: All Fragments Except the Last One. 5.6.2.2. Last Fragment (All-1) Following figures are examples of All-1 messages. Figure 8 is without the last tile, Figure 9 is with the last tile.¶ | FPort | LoRaWAN payload | + ------ + ---------------------------- + | RuleID | W | FCN=All-1 | RCS | + ------ + ------ + --------- + ------- + | 8 bits | 2 bits | 6 bits | 32 bits | Figure 8: All-1 SCHC Message without Last Tile | FPort | LoRaWAN payload | + ------ + ---------------------------------------------------------- + | RuleID | W | FCN=All-1 | RCS | Last tile | Opt. padding | + ------ + ------ + --------- + ------- + ------------ + ------------ + | 8 bits | 2 bits | 6 bits | 32 bits | 1 to 80 bits | 0 to 7 bits | Figure 9: All-1 SCHC Message with Last Tile 5.6.2.3. SCHC ACK | FPort | LoRaWAN payload | + ------ + --------------------------+ | RuleID | W | C = 1 | padding | | | | | (b'00000) | + ------ + ----- + ----- + --------- + | 8 bits | 2 bit | 1 bit | 5 bits | Figure 10: SCHC ACK Format - Correct RCS Check | FPort | LoRaWAN payload | + ------ + --------------------------------- + ---------------- + | RuleID | W | C = 0 | Compressed bitmap | Optional padding | | | | | (C = 0) | (b'0...0) | + ------ + ----- + ----- + ----------------- + ---------------- + | 8 bits | 2 bit | 1 bit | 5 to 63 bits | 0, 6, or 7 bits | Figure 11: SCHC ACK Format - Incorrect RCS Check Note: Because of the bitmap compression mechanism and L2 byte alignment, only the following discrete values are possible for the compressed bitmap size: 5, 13, 21, 29, 37, 45, 53, 61, 62, and 63. Bitmaps of 63 bits will require 6 bits of padding.¶ 5.6.2.4. Receiver-Abort | FPort | LoRaWAN payload | + ------ + -------------------------------------------- + | RuleID | W = b'11 | C = 1 | b'11111 | 0xFF (all 1's) | + ------ + -------- + ------+-------- + ----------------+ | 8 bits | 2 bits | 1 bit | 5 bits | 8 bits | next L2 Word boundary ->| <-- L2 Word --> | Figure 12: Receiver-Abort Format 5.6.2.5. SCHC Acknowledge Request | FPort | LoRaWAN payload | +------- +------------------------- + | RuleID | W | FCN = b'000000 | + ------ + ------ + --------------- + | 8 bits | 2 bits | 6 bits | Figure 13: SCHC ACK REQ Format 5.6.3. Downlink Fragmentation: From SCHC Gateway to Device In this case, the device is the fragmentation receiver and the SCHC gateway is the fragmentation transmitter. The following fields are common to all devices. The SCHC F/R MUST concatenate FPort and LoRaWAN payload to retrieve the SCHC Packet as described in Section 5.1.¶ SCHC fragmentation reliability mode: Unicast downlinks: ACK-Always.¶ Multicast downlinks: No-ACK; reliability has to be ensured by the upper layer. This feature is OPTIONAL for the SCHC gateway and REQUIRED for the device.¶ RuleID: 8 bits stored in the LoRaWAN FPort (cf. Section 5.2).¶ DTag: Size T = 0 bit, not used (cf. Section 5.6.1).¶ FCN: The FCN field is encoded on N = 1 bit, so WINDOW_SIZE = 1 tile.¶ RCS: Use the recommended calculation algorithm in Section 8.2.3 of [RFC8724], Integrity Checking.¶ Inactivity timer: The default RECOMMENDED duration of this timer is 12 hours; this value is mainly driven by application requirements and MAY be changed by the application.¶ The following parameters apply to ACK-Always (Unicast) only:¶ Retransmission timer: See Section 5.6.3.5.¶ MAX_ACK_REQUESTS: 8.¶ Window index (unicast only): encoded on M = 1 bit, as per [RFC8724].¶ As only one tile is used, its size can change for each downlink and will be the currently available MTU.¶ Class A devices can only receive during an RX slot, following the transmission of an uplink. Therefore, the SCHC gateway cannot initiate communication (e.g., start a new SCHC session). In order to create a downlink opportunity, it is RECOMMENDED for Class A devices to send an uplink every 24 hours when no SCHC session is started; this is application specific and can be disabled. The RECOMMENDED uplink is a LoRaWAN empty frame as defined in Section 4.6. As this uplink is sent only to open an RX window, any LoRaWAN uplink frame from the device MAY reset this counter.¶ Note: The FPending bit included in the LoRaWAN protocol SHOULD NOT be used for the SCHC-over-LoRaWAN protocol. It might be set by the Network Gateway for other purposes but not SCHC needs.¶ 5.6.3.1. Regular Fragments Figure 14 is an example of a regular fragment for all fragments except the last one. SCHC Header Size is 10 Bits, including the LoRaWAN FPort.¶ | FPort | LoRaWAN payload | + ------ + ------------------------------------ + | RuleID | W | FCN = b'0 | Payload | + ------ + ----- + --------- + ---------------- + | 8 bits | 1 bit | 1 bit | X bytes + 6 bits | Figure 14: All Fragments but the Last One. 5.6.3.2. Last Fragment (All-1) | FPort | LoRaWAN payload | + ------ + --------------------------- + ------------------------- + | RuleID | W | FCN = b'1 | RCS | Payload | Opt padding | + ------ + ----- + --------- + ------- + ----------- + ----------- + | 8 bits | 1 bit | 1 bit | 32 bits | 6 to X bits | 0 to 7 bits | Figure 15: All-1 SCHC Message: The Last Fragment 5.6.3.3. SCHC ACK | FPort | LoRaWAN payload | + ------ + ---------------------------------- + | RuleID | W | C = b'1 | Padding b'000000 | + ------ + ----- + ------- + ---------------- + | 8 bits | 1 bit | 1 bit | 6 bits | Figure 16: SCHC ACK Format - Correct RCS Check | FPort | LoRaWAN payload | + ------ + ------------------------------------------------- + | RuleID | W | C = b'0 | Bitmap = b'1 | Padding b'000000 | + ------ + ----- + ------- + ------------ + ---------------- + | 8 bits | 1 bit | 1 bit | 1 bit | 5 bits | Figure 17: SCHC ACK Format - Incorrect RCS Check 5.6.3.4. Receiver-Abort Figure 18 is an example of a Receiver-Abort packet, following an All-1 SCHC Fragment with incorrect RCS.¶ | FPort | LoRaWAN payload | + ------ + ---------------------------------------------- + | RuleID | W = b'1 | C = b'1 | b'111111 | 0xFF (all 1's) | + ------ + ------- + ------- + -------- + --------------- + | 8 bits | 1 bit | 1 bits | 6 bits | 8 bits | next L2 Word boundary ->| <-- L2 Word --> | Figure 18: Receiver-Abort Packet 5.6.3.5. Downlink Retransmission Timer Class A, Class B, and Class C devices do not manage retransmissions and timers the same way.¶ 5.6.3.5.1. Class A Devices Class A devices can only receive in an RX slot following the transmission of an uplink.¶ The SCHC gateway implements an inactivity timer with a RECOMMENDED duration of 36 hours. For devices with very low transmission rates (for example, 1 packet a day in normal operation), that duration may be extended; it is application specific.¶ RETRANSMISSION_TIMER is application specific and its RECOMMENDED value is INACTIVITY_TIMER/(MAX_ACK_REQUESTS + 1).¶ SCHC All-0 (FCN = 0)¶ All fragments but the last have an FCN = 0 (because the window size is 1). Following an All-0 SCHC Fragment, the device MUST transmit the SCHC ACK message. It MUST transmit up to MAX_ACK_REQUESTS SCHC ACK messages before aborting. In order to progress the fragmented datagram, the SCHC layer should immediately queue for transmission those SCHC ACK messages if no SCHC downlink has been received during the RX1 and RX2 windows. The LoRaWAN layer will respect the applicable local spectrum regulation.¶ Note: The ACK bitmap is 1 bit long and is always 1.¶ SCHC All-1 (FCN = 1)¶ SCHC All-1 is the last fragment of a datagram, and the corresponding SCHC ACK message might be lost; therefore, the SCHC gateway MUST request a retransmission of this ACK when the retransmission timer expires. To open a downlink opportunity, the device MUST transmit an uplink every interval of RETRANSMISSION_TIMER/(MAX_ACK_REQUESTS * SCHC_ACK_REQ_DN_OPPORTUNITY). The format of this uplink is application specific. It is RECOMMENDED for a device to send an empty frame (see Section 4.6), but it is application specific and will be used by the NGW to transmit a potential SCHC ACK REQ. SCHC_ACK_REQ_DN_OPPORTUNITY is application specific and its recommended value is 2. It MUST be greater than 1. This allows the opening of a downlink opportunity to any downlink with higher priority than the SCHC ACK REQ message.¶ Note: The device MUST keep this SCHC ACK message in memory until it receives a downlink SCHC Fragmentation Message (with FPort == FPortDown) that is not a SCHC ACK REQ; this indicates that the SCHC gateway has received the SCHC ACK message.¶ 5.6.3.6. Class B or Class C Devices Class B devices can receive in scheduled RX slots or in RX slots following the transmission of an uplink. Class C devices are almost in constant reception.¶ RECOMMENDED retransmission timer values are:¶ Class B: 3 times the ping slot periodicity.¶ Class C: 30 seconds.¶ The RECOMMENDED inactivity timer value is 12 hours for both Class B and Class C devices.¶ 5.7. SCHC Fragment Format 5.7.1. All-0 SCHC Fragment Uplink Fragmentation (Ack-on-Error):¶ All-0 is distinguishable from a SCHC ACK REQ, as [RFC8724] states \"This condition is also met if the SCHC Fragment Header is a multiple of L2 Words\", the following condition being met: SCHC header is 2 bytes.¶ Downlink fragmentation (ACK-Always):¶ As per [RFC8724], SCHC All-1 MUST contain the last tile, and implementations MUST ensure that SCHC All-0 message Payload will be at least the size of an L2 Word.¶ 5.7.2. All-1 SCHC Fragment All-1 is distinguishable from a SCHC Sender-Abort, as [RFC8724] states \"This condition is met if the RCS is present and is at least the size of an L2 Word\", the following condition being met: RCS is 4 bytes.¶ 5.7.3. Delay after Each LoRaWAN Frame to Respect Local Regulation This profile does not define a delay to be added after each LoRaWAN frame; local regulation compliance is expected to be enforced by the LoRaWAN stack.¶ 6. Security Considerations This document is only providing parameters that are expected to be best suited for LoRaWAN networks for [RFC8724]. IID security is discussed in Section 5.3. As such, this document does not contribute to any new security issues beyond those already identified in [RFC8724]. Moreover, SCHC data (LoRaWAN payload) are protected at the LoRaWAN level by an AES-128 encryption with a session key shared by the device and the SCHC gateway. These session keys are renewed at each LoRaWAN session (i.e., each join or rejoin to the LoRaWAN network).¶ 7. IANA Considerations This document has no IANA actions.¶ 8. References 8.1. Normative References [LORAWAN-SPEC] LoRa Alliance, \"LoRaWAN 1.0.4 Specification Package\", <https://lora-alliance.org/resource_hub/lorawan-104-specification-package/>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4291] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 4291, DOI 10.17487/RFC4291, February 2006, <https://www.rfc-editor.org/info/rfc4291>. [RFC4493] Song, JH., Poovendran, R., Lee, J., and T. Iwata, \"The AES-CMAC Algorithm\", RFC 4493, DOI 10.17487/RFC4493, June 2006, <https://www.rfc-editor.org/info/rfc4493>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8724] Minaburo, A., Toutain, L., Gomez, C., Barthel, D., and JC. Zúñiga, \"SCHC: Generic Framework for Static Context Header Compression and Fragmentation\", RFC 8724, DOI 10.17487/RFC8724, April 2020, <https://www.rfc-editor.org/info/rfc8724>. 8.2. Informative References [LORAWAN-REMOTE-MULTICAST-SET] LoRa Alliance, \"LoRaWAN Remote Multicast Setup Specification v1.0.0\", <https://lora-alliance.org/resource_hub/lorawan-remote-multicast-setup-specification-v1-0-0/>. [RFC8064] Gont, F., Cooper, A., Thaler, D., and W. Liu, \"Recommendation on Stable IPv6 Interface Identifiers\", RFC 8064, DOI 10.17487/RFC8064, February 2017, <https://www.rfc-editor.org/info/rfc8064>. [RFC8065] Thaler, D., \"Privacy Considerations for IPv6 Adaptation-Layer Mechanisms\", RFC 8065, DOI 10.17487/RFC8065, February 2017, <https://www.rfc-editor.org/info/rfc8065>. [RFC8376] Farrell, S., Ed., \"Low-Power Wide Area Network (LPWAN) Overview\", RFC 8376, DOI 10.17487/RFC8376, May 2018, <https://www.rfc-editor.org/info/rfc8376>. Appendix A. Examples In the following examples, \"applicative data\" refers to the IPv6 payload sent by the application to the SCHC layer.¶ A.1. Uplink - Compression Example - No Fragmentation This example represents an applicative data going through SCHC over LoRaWAN; no fragmentation required.¶ An applicative data of 78 bytes is passed to the SCHC compression layer. Rule 1 is used by the SCHC C/D layer, allowing to compress it to 40 bytes and 5 bits: 1 byte RuleID, 21 bits residue + 37 bytes payload.¶ | RuleID | Compression residue | Payload | Padding=b'000 | + ------ + ------------------- + --------- + ------------- + | 1 | 21 bits | 37 bytes | 3 bits | Figure 19: Uplink Example: SCHC Message The current LoRaWAN MTU is 51 bytes, although 2-byte FOpts are used by the LoRaWAN protocol: 49 bytes are available for SCHC payload; no need for fragmentation. The payload will be transmitted through FPort = 1.¶ | LoRaWAN Header | LoRaWAN payload (40 bytes) | + ------------------------- + --------------------------------------- + | | FOpts | RuleID=1 | Compression | Payload | Padding=b'000 | | | | | residue | | | + ---- + ------- + -------- + ----------- + --------- + ------------- + | XXXX | 2 bytes | 1 byte | 21 bits | 37 bytes | 3 bits | Figure 20: Uplink Example: LoRaWAN Packet A.2. Uplink - Compression and Fragmentation Example This example represents an applicative data going through SCHC, with fragmentation.¶ An applicative data of 300 bytes is passed to the SCHC compression layer. Rule 1 is used by the SCHC C/D layer, allowing to compress it to 282 bytes and 5 bits: 1 byte RuleID, 21 bits residue + 279 bytes payload.¶ | RuleID | Compression residue | Payload | + ------ + ------------------- + --------- + | 1 | 21 bits | 279 bytes | Figure 21: Uplink Example: SCHC Message The current LoRaWAN MTU is 11 bytes; 0-byte FOpts are used by the LoRaWAN protocol: 11 bytes are available for SCHC payload + 1 byte FPort field. The SCHC header is 2 bytes (including FPort), so 1 tile is sent in the first fragment.¶ | LoRaWAN Header | LoRaWAN payload (11 bytes) | + -------------------------- + -------------------------- + | | RuleID=20 | W | FCN | 1 tile | + -------------- + --------- + ----- + ------ + --------- + | XXXX | 1 byte | 0 0 | 62 | 10 bytes | Figure 22: Uplink Example: LoRaWAN Packet 1 The tile content is described in Figure 23¶ Content of the tile is: | RuleID | Compression residue | Payload | + ------ + ------------------- + ----------------- + | 1 | 21 bits | 6 bytes + 3 bits | Figure 23: Uplink Example: First Tile Content Next transmission MTU is 11 bytes, although 2-byte FOpts are used by the LoRaWAN protocol: 9 bytes are available for SCHC payload + 1 byte FPort field, a tile does not fit inside so the LoRaWAN stack will send only FOpts.¶ Next transmission MTU is 242 bytes, 4-byte FOpts. 23 tiles are transmitted:¶ | LoRaWAN Header | LoRaWAN payload (231 bytes) | + --------------------------------------+ --------------------------- + | | FOpts | RuleID=20 | W | FCN | 23 tiles | + -------------- + ------- + ---------- + ----- + ----- + ----------- + | XXXX | 4 bytes | 1 byte | 0 0 | 61 | 230 bytes | Figure 24: Uplink Example: LoRaWAN Packet 2 Next transmission MTU is 242 bytes, no FOpts. All 5 remaining tiles are transmitted, the last tile is only 2 bytes + 5 bits. Padding is added for the remaining 3 bits.¶ | LoRaWAN Header | LoRaWAN payload (44 bytes) | + ---- + ---------- + ----------------------------------------------- + | | RuleID=20 | W | FCN | 5 tiles | Padding=b'000 | + ---- + ---------- + ----- + ----- + --------------- + ------------- + | XXXX | 1 byte | 0 0 | 38 | 42 bytes+5 bits | 3 bits | Figure 25: Uplink Example: LoRaWAN Packet 3 Then All-1 message can be transmitted:¶ | LoRaWAN Header | LoRaWAN payload (44 bytes) | + ---- + -----------+ -------------------------- + | | RuleID=20 | W | FCN | RCS | + ---- + ---------- + ----- + ----- + ---------- + | XXXX | 1 byte | 0 0 | 63 | 4 bytes | Figure 26: Uplink Example: LoRaWAN Packet 4 - All-1 SCHC Message All packets have been received by the SCHC gateway, computed RCS is correct so the following ACK is sent to the device by the SCHC receiver:¶ | LoRaWAN Header | LoRaWAN payload | + -------------- + --------- + ------------------- + | | RuleID=20 | W | C | Padding | + -------------- + --------- + ----- + - + ------- + | XXXX | 1 byte | 0 0 | 1 | 5 bits | Figure 27: Uplink Example: LoRaWAN Packet 5 - SCHC ACK A.3. Downlink An applicative data of 155 bytes is passed to the SCHC compression layer. Rule 1 is used by the SCHC C/D layer, allowing to compress it to 130 bytes and 5 bits: 1 byte RuleID, 21 bits residue + 127 bytes payload.¶ | RuleID | Compression residue | Payload | + ------ + ------------------- + --------- + | 1 | 21 bits | 127 bytes | Figure 28: Downlink Example: SCHC Message The current LoRaWAN MTU is 51 bytes; no FOpts are used by the LoRaWAN protocol: 51 bytes are available for SCHC payload + FPort field; the applicative data has to be fragmented.¶ | LoRaWAN Header | LoRaWAN payload (51 bytes) | + ---- + ---------- + -------------------------------------- + | | RuleID=21 | W = 0 | FCN = 0 | 1 tile | + ---- + ---------- + ------ + ------- + ------------------- + | XXXX | 1 byte | 1 bit | 1 bit | 50 bytes and 6 bits | Figure 29: Downlink Example: LoRaWAN Packet 1 - SCHC Fragment 1 The tile content is described in Figure 30¶ | RuleID | Compression residue | Payload | + ------ + ------------------- + ------------------ + | 1 | 21 bits | 48 bytes and 1 bit | Figure 30: Downlink Example: First Tile Content The receiver answers with a SCHC ACK:¶ | LoRaWAN Header | LoRaWAN payload | + ---- + --------- + -------------------------------- + | | RuleID=21 | W = 0 | C = 1 | Padding=b'000000 | + ---- + --------- + ----- + ----- + ---------------- + | XXXX | 1 byte | 1 bit | 1 bit | 6 bits | Figure 31: Downlink Example: LoRaWAN Packet 2 - SCHC ACK The second downlink is sent, two FOpts:¶ | LoRaWAN Header | LoRaWAN payload (49 bytes) | + --------------------------- + ------------------------------------- + | | FOpts | RuleID=21 | W = 1 | FCN = 0 | 1 tile | + ---- + ------- + ---------- + ----- + ------- + ------------------- + | XXXX | 2 bytes | 1 byte | 1 bit | 1 bit | 48 bytes and 6 bits | Figure 32: Downlink Example: LoRaWAN Packet 3 - SCHC Fragment 2 The receiver answers with a SCHC ACK:¶ | LoRaWAN Header | LoRaWAN payload | + ---- + --------- + -------------------------------- + | | RuleID=21 | W = 1 | C = 1 | Padding=b'000000 | + ---- + --------- + ----- + ----- + ---------------- + | XXXX | 1 byte | 1 bit | 1 bit | 6 bits | Figure 33: Downlink Example: LoRaWAN Packet 4 - SCHC ACK The last downlink is sent, no FOpts:¶ | LoRaWAN Header | LoRaWAN payload (37 bytes) | + ---- + ------- + -------------------------------------------------- + | | RuleID | W | FCN | RCS | 1 tile | Padding | | | 21 | 0 | 1 | | | b'00000 | + ---- + ------- + ----- + ----- + ------- + -------------- + ------- + | XXXX | 1 byte | 1 bit | 1 bit | 4 bytes | 31 bytes+1 bit | 5 bits | Figure 34: Downlink Example: LoRaWAN Packet 5 - All-1 SCHC Message The receiver answers to the sender with a SCHC ACK:¶ | LoRaWAN Header | LoRaWAN payload | + ---- + --------- + -------------------------------- + | | RuleID=21 | W = 0 | C = 1 | Padding=b'000000 | + ---- + --------- + ----- + ----- + ---------------- + | XXXX | 1 byte | 1 bit | 1 bit | 6 bits | Figure 35: Downlink Example: LoRaWAN Packet 6 - SCHC ACK Acknowledgements Thanks to all those listed in the Contributors Section for the excellent text, insightful discussions, reviews, and suggestions, and also to (in alphabetical order) Dominique Barthel, Arunprabhu Kandasamy, Rodrigo Munoz, Alexander Pelov, Pascal Thubert, and Laurent Toutain for useful design considerations, reviews, and comments.¶ LoRaWAN is a registered trademark of the LoRa Alliance.¶ Contributors Contributors ordered by family name.¶ Vincent Audebert EDF R&D Email: vincent.audebert@edf.fr Julien Catalano Kerlink Email: j.catalano@kerlink.fr Michael Coracin Semtech Email: mcoracin@semtech.com Marc Le Gourrierec Sagemcom Email: marc.legourrierec@sagemcom.com Nicolas Sornin Chirp Foundation Email: nicolas.sornin@chirpfoundation.org Alper Yegin Actility Email: alper.yegin@actility.com Authors' Addresses Olivier Gimenez (editor) Semtech 14 Chemin des Clos Meylan France Email: ogimenez@semtech.com Ivaylo Petrov (editor) Acklio 1137A Avenue des Champs Blancs 35510 Cesson-Sévigné Cedex France Email: ivaylo@ackl.io"
    },
    {
        "Number": "9008",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane",
        "Authors": [
            "M.I. Robles",
            "M. Richardson",
            "P. Thubert"
        ],
        "Date": "2021-04",
        "More Info": "Errata, Updates RFC 6553, RFC 6550, RFC 8138",
        "Status": "Proposed Standard",
        "Abstract": "This document looks at different data flows through Low-Power and Lossy Networks (LLN) where RPL (IPv6 Routing Protocol for Low-Power and Lossy Networks) is used to establish routing. The document enumerates the cases where RPL Packet Information (RPI) Option Type (RFC 6553), RPL Source Route Header (RFC 6554), and IPv6-in-IPv6 encapsulation are required in the data plane. This analysis provides the basis upon which to design efficient compression of these headers. This document updates RFC 6553 by adding a change to the RPI Option Type. Additionally, this document updates RFC 6550 by defining a flag in the DODAG Information Object (DIO) Configuration option to indicate this change and updates RFC 8138 as well to consider the new Option Type when the RPL Option is decompressed.",
        "Keywords": [
            "RPL Option",
            "6LoWPAN",
            "RFC 6553"
        ],
        "Content": "RFC 9008: Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane RFC 9008 RPL Data Plane April 2021 Robles, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9008 Updates: 6550, 6553, 8138 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: M.I. Robles UTN-FRM/Aalto M. Richardson SSW P. Thubert Cisco RFC 9008 Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane Abstract This document looks at different data flows through Low-Power and Lossy Networks (LLN) where RPL (IPv6 Routing Protocol for Low-Power and Lossy Networks) is used to establish routing. The document enumerates the cases where RPL Packet Information (RPI) Option Type (RFC 6553), RPL Source Route Header (RFC 6554), and IPv6-in-IPv6 encapsulation are required in the data plane. This analysis provides the basis upon which to design efficient compression of these headers. This document updates RFC 6553 by adding a change to the RPI Option Type. Additionally, this document updates RFC 6550 by defining a flag in the DODAG Information Object (DIO) Configuration option to indicate this change and updates RFC 8138 as well to consider the new Option Type when the RPL Option is decompressed.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9008.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Overview 2.  Terminology and Requirements Language 3.  RPL Overview 4.  Updates to RFC 6550, RFC 6553, and RFC 8138 4.1.  Updates to RFC 6550 4.1.1.  Advertising External Routes with Non-Storing Mode Signaling 4.1.2.  Configuration Options and Mode of Operation 4.1.3.  Indicating the New RPI in the DODAG Configuration Option Flag 4.2.  Updates to RFC 6553: Indicating the New RPI Option Type 4.3.  Updates to RFC 8138: Indicating the Way to Decompress with the New RPI Option Type 5.  Reference Topology 6.  Use Cases 7.  Storing Mode 7.1.  Storing Mode: Interaction between Leaf and Root 7.1.1.  SM: Example of Flow from RAL to Root 7.1.2.  SM: Example of Flow from Root to RAL 7.1.3.  SM: Example of Flow from Root to RUL 7.1.4.  SM: Example of Flow from RUL to Root 7.2.  SM: Interaction between Leaf and Internet 7.2.1.  SM: Example of Flow from RAL to Internet 7.2.2.  SM: Example of Flow from Internet to RAL 7.2.3.  SM: Example of Flow from RUL to Internet 7.2.4.  SM: Example of Flow from Internet to RUL 7.3.  SM: Interaction between Leaf and Leaf 7.3.1.  SM: Example of Flow from RAL to RAL 7.3.2.  SM: Example of Flow from RAL to RUL 7.3.3.  SM: Example of Flow from RUL to RAL 7.3.4.  SM: Example of Flow from RUL to RUL 8.  Non-Storing Mode 8.1.  Non-Storing Mode: Interaction between Leaf and Root 8.1.1.  Non-SM: Example of Flow from RAL to Root 8.1.2.  Non-SM: Example of Flow from Root to RAL 8.1.3.  Non-SM: Example of Flow from Root to RUL 8.1.4.  Non-SM: Example of Flow from RUL to Root 8.2.  Non-Storing Mode: Interaction between Leaf and Internet 8.2.1.  Non-SM: Example of Flow from RAL to Internet 8.2.2.  Non-SM: Example of Flow from Internet to RAL 8.2.3.  Non-SM: Example of Flow from RUL to Internet 8.2.4.  Non-SM: Example of Flow from Internet to RUL 8.3.  Non-SM: Interaction between Leaves 8.3.1.  Non-SM: Example of Flow from RAL to RAL 8.3.2.  Non-SM: Example of Flow from RAL to RUL 8.3.3.  Non-SM: Example of Flow from RUL to RAL 8.3.4.  Non-SM: Example of Flow from RUL to RUL 9.  Operational Considerations of Supporting RULs 10. Operational Considerations of Introducing 0x23 11. IANA Considerations 11.1.  Option Type in RPL Option 11.2.  Change to the \"DODAG Configuration Option Flags\" Subregistry 11.3.  Change MOP Value 7 to Reserved 12. Security Considerations 13. References 13.1.  Normative References 13.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction RPL (IPv6 Routing Protocol for Low-Power and Lossy Networks) [RFC6550] is a routing protocol for constrained networks. [RFC6553] defines the RPL Option carried within the IPv6 Hop-by-Hop Options header to carry the RPLInstanceID and quickly identify inconsistencies (loops) in the routing topology. The RPL Option is commonly referred to as the RPL Packet Information (RPI), although the RPI is the routing information that is defined in [RFC6550] and transported in the RPL Option. RFC 6554 [RFC6554] defines the \"RPL Source Route Header\" (RH3), an IPv6 extension header to deliver datagrams within a RPL routing domain, particularly in Non-Storing mode.¶ These various items are referred to as RPL artifacts, and they are seen on all of the data plane traffic that occurs in RPL-routed networks; they do not, in general, appear on the RPL control plane at all, which is mostly hop-by-hop traffic (one exception being Destination Advertisement Object (DAO) messages in Non-Storing mode).¶ It has become clear from attempts to do multi-vendor interoperability, and from a desire to compress as many of the above artifacts as possible, that not all implementers agree when artifacts are necessary, or when they can be safely omitted, or removed.¶ The ROLL (Routing Over Low power and Lossy networks) Working Group analyzed how IPv6 rules [RFC2460] apply to the Storing and Non-Storing use of RPL. The result was 24 data-plane use cases. They are exhaustively outlined here in order to be completely unambiguous. During the processing of this document, new rules were published as [RFC8200], and this document was updated to reflect the normative changes in that document.¶ This document updates [RFC6553], changing the value of the Option Type of the RPL Option to make routers compliant with [RFC8200] ignore this option when it is not recognized.¶ A Routing Header Dispatch for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPAN) (6LoRH) [RFC8138] defines a mechanism for compressing RPL Option information and Routing Header type 3 (RH3) [RFC6554], as well as an efficient IPv6-in-IPv6 technique.¶ Most of the use cases described herein require the use of IPv6-in-IPv6 packet encapsulation. When encapsulating and decapsulating packets, [RFC6040] MUST be applied to map the setting of the explicit congestion notification (ECN) field between inner and outer headers. Additionally, [TUNNELS] is recommended reading to explain the relationship of IP tunnels to existing protocol layers and the challenges in supporting IP tunneling.¶ Unconstrained uses of RPL are not in scope of this document, and applicability statements for those uses may provide different advice, e.g., [ACP].¶ 1.1. Overview The rest of the document is organized as follows: Section 2 describes the terminology that is used. Section 3 provides a RPL overview. Section 4 describes the updates to RFC 6553, RFC 6550, and RFC 8138. Section 5 provides the reference topology used for the use cases. Section 6 describes the use cases included. Section 7 describes the Storing mode cases and Section 8 the Non-Storing mode cases. Section 9 describes the operational considerations of supporting RPL-unaware leaves. Section 10 depicts operational considerations for the proposed change on RPI Option Type, Section 11 the IANA considerations, and then Section 12 describes the security aspects.¶ 2. Terminology and Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ The following terminology defined in [RFC7102] applies to this document: LLN, RPL, RPL domain, and ROLL.¶ Consumed: A Routing Header is consumed when the Segments Left field is zero, which indicates that the destination in the IPv6 header is the final destination of the packet and that the hops in the Routing Header have been traversed.¶ RPL Leaf: An IPv6 host that is attached to a RPL router and obtains connectivity through a RPL Destination-Oriented Directed Acyclic Graph (DODAG). As an IPv6 node, a RPL leaf is expected to ignore a consumed Routing Header, and as an IPv6 host, it is expected to ignore a Hop-by-Hop Options header. Thus, a RPL leaf can correctly receive a packet with RPL artifacts. On the other hand, a RPL leaf is not expected to generate RPL artifacts or to support IP-in-IP encapsulation. For simplification, this document uses the standalone term leaf to mean a RPL leaf.¶ RPL Packet Information (RPI): The information defined abstractly in [RFC6550] to be placed in IP packets. The term is commonly used, including in this document, to refer to the RPL Option [RFC6553] that transports that abstract information in an IPv6 Hop-by-Hop Options header. [RFC8138] provides an alternate (more compressed) formatting for the same abstract information.¶ RPL-Aware Node (RAN): A device that implements RPL. Please note that the device can be found inside the LLN or outside LLN.¶ RPL-Aware Leaf (RAL): A RPL-aware node that is also a RPL leaf.¶ RPL-Unaware Node: A device that does not implement RPL, thus the device is RPL unaware. Please note that the device can be found inside the LLN.¶ RPL-Unaware Leaf (RUL): A RPL-unaware node that is also a RPL leaf.¶ 6LoWPAN Node (6LN): [RFC6775] defines it as the following: \"A 6LoWPAN node is any host or router participating in a LoWPAN. This term is used when referring to situations in which either a host or router can play the role described.\" In this document, a 6LN acts as a leaf.¶ 6LoWPAN Router (6LR): [RFC6775] defines it as the following: \"An intermediate router in the LoWPAN that is able to send and receive Router Advertisements (RAs) and Router Solicitations (RSs) as well as forward and route IPv6 packets. 6LoWPAN routers are present only in route-over topologies.\"¶ 6LoWPAN Border Router (6LBR): [RFC6775] defines it as the following: \"A border router located at the junction of separate 6LoWPAN networks or between a 6LoWPAN network and another IP network. There may be one or more 6LBRs at the 6LoWPAN network boundary. A 6LBR is the responsible authority for IPv6 prefix propagation for the 6LoWPAN network it is serving. An isolated LoWPAN also contains a 6LBR in the network, which provides the prefix(es) for the isolated network.\"¶ Flag Day: A flag day is caused when a network is reconfigured in a way that nodes running the older configuration cannot communicate with nodes running the new configuration. An example of a flag day is when the ARPANET changed from IP version 3 to IP version 4 on January 1, 1983 [RFC0801]. In the context of this document, a switch from RPI Option Type (0x63) to Option Type (0x23) presents as a disruptive changeover. In order to reduce the amount of time for such a changeover, Section 4.1.3 provides a mechanism to allow nodes to be incrementally upgraded.¶ Non-Storing Mode (Non-SM): A RPL mode of operation in which the RPL-aware nodes send information to the root about their parents. Thus, the root knows the topology. Because the root knows the topology, the intermediate 6LRs do not maintain routing state, and source routing is needed.¶ Storing Mode (SM): A RPL mode of operation in which RPL-aware nodes (6LRs) maintain routing state (of the children) so that source routing is not needed.¶ Note: Due to lack of space in some tables, we refer to IPv6-in-IPv6 as IP6-IP6.¶ 3. RPL Overview RPL defines the RPL control message (control plane), which is an ICMPv6 message [RFC4443] with a Type of 155. DIS (DODAG Information Solicitation), DIO (DODAG Information Object), and DAO (Destination Advertisement Object) messages are all RPL control messages but with different Code values. A RPL stack is shown in Figure 1.¶ +--------------+ | Upper Layers | | | +--------------+ | RPL | | | +--------------+ | ICMPv6 | | | +--------------+ | IPv6 | | | +--------------+ | 6LoWPAN | | | +--------------+ | PHY-MAC | | | +--------------+ Figure 1: RPL Stack RPL supports two modes of Downward internal traffic: in Storing mode (SM), it is fully stateful; in Non-Storing mode (non-SM), it is fully source routed. A RPL Instance is either fully Storing or fully Non-Storing, i.e., a RPL Instance with a combination of fully Storing and Non-Storing nodes is not supported with the current specifications at the time of writing this document. External routes are advertised with non-SM messaging even in an SM network, see Section 4.1.1¶ 4. Updates to RFC 6550, RFC 6553, and RFC 8138 4.1. Updates to RFC 6550 4.1.1. Advertising External Routes with Non-Storing Mode Signaling Section 6.7.8 of [RFC6550] introduces the 'E' flag that is set to indicate that the 6LR that generates the DAO redistributes external targets into the RPL network. An external target is a target that has been learned through an alternate protocol, for instance, a route to a prefix that is outside the RPL domain but reachable via a 6LR. Being outside of the RPL domain, a node that is reached via an external target cannot be guaranteed to ignore the RPL artifacts and cannot be expected to process the compression defined in [RFC8138] correctly. This means that the RPL artifacts should be contained in an IP-in-IP encapsulation that is removed by the 6LR, and that any remaining compression should be expanded by the 6LR before it forwards a packet outside the RPL domain.¶ This specification updates [RFC6550] to say that advertising external targets using Non-Storing mode DAO messaging even in a Storing mode network is RECOMMENDED. This way, external routes are not advertised within the DODAG, and all packets to an external target reach the root like normal Non-Storing mode traffic. The Non-Storing mode DAO informs the root of the address of the 6LR that injects the external route, and the root uses IP-in-IP encapsulation to that 6LR, which terminates the IP-in-IP tunnel and forwards the original packet outside the RPL domain free of RPL artifacts.¶ In the other direction, for traffic coming from an external target into the LLN, the parent (6LR) that injects the traffic always encapsulates to the root. This whole operation is transparent to intermediate routers that only see traffic between the 6LR and the root, and only the root and the 6LRs that inject external routes in the network need to be upgraded to add this function to the network.¶ A RUL is a special case of external target when the target is actually a host, and it is known to support a consumed Routing Header and to ignore a Hop-by-Hop Options header as prescribed by [RFC8200]. The target may have been learned through an external routing protocol or may have been registered to the 6LR using [RFC8505].¶ In order to enable IP-in-IP all the way to a 6LN, it is beneficial that the 6LN supports decapsulating IP-in-IP, but that is not assumed by [RFC8504]. If the 6LN is a RUL, the root that encapsulates a packet SHOULD terminate the tunnel at a parent 6LR. The root may encapsulate all the way to the RUL if it is aware that the RUL supports IP-in-IP decapsulation and the artifacts in the outer header chain.¶ A node that is reachable over an external route is not expected to support [RFC8138]. Whether a decapsulation took place or not and even when the 6LR is delivering the packet to a RUL, the 6LR that injected an external route MUST undo the [RFC8138] compression on the packet before forwarding over that external route.¶ 4.1.2. Configuration Options and Mode of Operation Section 6.7.6 of [RFC6550] describes the DODAG Configuration option as containing a series of flags in the first octet of the payload.¶ Anticipating future work to revise RPL relating to how the LLN and DODAG are configured, this document renames the IANA \"DODAG Configuration Option Flags\" subregistry so that it applies to Mode of Operation (MOP) values zero (0) through six (6) only, leaving the flags unassigned for MOP value seven (7). The MOP is described in [RFC6550], Section 6.3.1.¶ In addition, this document reserves MOP value 7 for future expansion.¶ See Sections 11.2 and 11.3.¶ 4.1.3. Indicating the New RPI in the DODAG Configuration Option Flag In order to avoid a flag day caused by lack of interoperation between nodes of the new RPI Option Type (0x23) and old RPI Option Type (0x63), this section defines a flag in the DODAG Configuration option, to indicate when the new RPI Option Type can be safely used. This means that the flag is going to indicate the value of Option Type that the network will be using for the RPL Option. Thus, when a node joins to a network, it will know which value to use. With this, RPL-capable nodes know if it is safe to use 0x23 when creating a new RPL Option. A node that forwards a packet with an RPI MUST NOT modify the Option Type of the RPL Option.¶ This is done using a DODAG Configuration option flag that will signal \"RPI 0x23 enable\" and propagate through the network. Section 6.3.1 of [RFC6550] defines a 3-bit Mode of Operation (MOP) in the DIO Base Object. The flag is defined only for MOP value between 0 to 6.¶ For a MOP value of 7, a node MUST use the RPI 0x23 option.¶ As stated in [RFC6550], the DODAG Configuration option is present in DIO messages. The DODAG Configuration option distributes configuration information. It is generally static, and it does not change within the DODAG. This information is configured at the DODAG root and distributed throughout the DODAG with the DODAG Configuration option. Nodes other than the DODAG root do not modify this information when propagating the DODAG Configuration option.¶ Currently, the DODAG Configuration option in [RFC6550] states that the unused bits \"MUST be initialized to zero by the sender and MUST be ignored by the receiver.\" If the flag is received with a value zero, which is the default, then new nodes will remain compatible with RFC 6553 -- originating traffic with the old RPI Option Type value (0x63). If the flag is received with a value of 1, then the value for the RPL Option MUST be set to 0x23.¶ Bit number three of the Flags field in the DODAG Configuration option is to be used as shown in Table 1 (which is the same as Table 36 in Section 11 and is shown here for convenience):¶ Table 1: DODAG Configuration Option Flag to Indicate the RPI Flag Day Bit number Description Reference 3 RPI 0x23 enable This document In the case of reboot, the node (6LN or 6LR) does not remember the RPI Option Type (i.e., whether or not the flag is set), so the node will not trigger DIO messages until a DIO message is received that indicates the RPI value to be used. The node will use the value 0x23 if the network supports this feature.¶ 4.2. Updates to RFC 6553: Indicating the New RPI Option Type This modification is required in order to be able to send, for example, IPv6 packets from a RPL-aware leaf to a RPL-unaware node through the Internet (see Section 7.2.1) without requiring IPv6-in-IPv6 encapsulation.¶ Section 6 of [RFC6553] states, as shown in Table 2, that in the Option Type field of the RPL Option, the two high-order bits must be set to '01' and the third bit is equal to '1'. The first two bits indicate that the IPv6 node must discard the packet if it doesn't recognize the Option Type, and the third bit indicates that the Option Data may change in route. The remaining bits serve as the Option Type.¶ Table 2: Option Type in RPL Option Hex Value Binary Value Description Reference act chg rest 0x63 01 1 00011 RPL Option [RFC6553] This document illustrates that it is not always possible to know for sure at the source whether a packet will travel only within the RPL domain or whether it will leave it.¶ At the time [RFC6553] was published, leaking a Hop-by-Hop Options header in the outer IPv6 header chain could potentially impact core routers in the Internet. So at that time, it was decided to encapsulate any packet with a RPL Option using IPv6-in-IPv6 in all cases where it was unclear whether the packet would remain within the RPL domain. In the exception case where a packet would still leak, the Option Type would ensure that the first router in the Internet that does not recognize the option would drop the packet and protect the rest of the network.¶ Even with [RFC8138], where the IPv6-in-IPv6 header is compressed, this approach yields extra bytes in a packet; this means consuming more energy and more bandwidth, incurring higher chances of loss, and possibly causing a fragmentation at the 6LoWPAN level. This impacts the daily operation of constrained devices for a case that generally does not happen and would not heavily impact the core anyway.¶ While the intention was and remains that the Hop-by-Hop Options header with a RPL Option should be confined within the RPL domain, this specification modifies this behavior in order to reduce the dependency on IPv6-in-IPv6 and protect the constrained devices. Section 4 of [RFC8200] clarifies the behavior of routers in the Internet as follows: \"it is now expected that nodes along a packet's delivery path only examine and process the Hop-by-Hop Options header if explicitly configured to do so.\"¶ When unclear about the travel of a packet, it becomes preferable for a source not to encapsulate, accepting the fact that the packet may leave the RPL domain on its way to its destination. In that event, the packet should reach its destination and should not be discarded by the first node that does not recognize the RPL Option. However, with the current value of the Option Type, if a node in the Internet is configured to process the Hop-by-Hop Options header, and if such a node encounters an Option Type with the first two bits set to 01 and the node conforms to [RFC8200], it will drop the packet. Host systems should do the same, irrespective of the configuration.¶ Thus, this document updates the Option Type of the RPL Option [RFC6553], naming it RPI Option Type for simplicity (Table 3): the two high order bits MUST be set to '00', and the third bit is equal to '1'. The first two bits indicate that the IPv6 node MUST skip over this option and continue processing the header ([RFC8200], Section 4.2) if it doesn't recognize the Option Type, and the third bit continues to be set to indicate that the Option Data may change en route. The rightmost five bits remain at 0x3(00011). This ensures that a packet that leaves the RPL domain of an LLN (or that leaves the LLN entirely) will not be discarded when it contains the RPL Option.¶ With the new Option Type, if an IPv6 (intermediate) node (RPL unaware) receives a packet with a RPL Option, it should ignore the Hop-by-Hop RPL Option (skip over this option and continue processing the header). This is relevant, as it was mentioned previously, in the case that there is a flow from RAL to Internet (see Section 7.2.1).¶ This is a significant update to [RFC6553].¶ Table 3: Revised Option Type in RPL Option Hex Value Binary Value Description Reference act chg rest 0x23 00 1 00011 RPL Option This document Without the signaling described below, this change would otherwise create a lack of interoperation (flag day) for existing networks that are currently using 0x63 as the RPI Option Type value. A move to 0x23 will not be understood by those networks. It is suggested that RPL implementations accept both 0x63 and 0x23 when processing the header.¶ When forwarding packets, implementations SHOULD use the same value of RPI Type as was received. This is required because the RPI Option Type does not change en route ([RFC8200], Section 4.2). It allows the network to be incrementally upgraded and allows the DODAG root to know which parts of the network have been upgraded.¶ When originating new packets, implementations should have an option to determine which value to originate with. This option is controlled by the DODAG Configuration option (Section 4.1.3).¶ The change of RPI Option Type from 0x63 to 0x23 makes all nodes that are compliant with Section 4.2 of [RFC8200] tolerant of the RPL artifacts. There is no longer a need to remove the artifacts when sending traffic to the Internet. This change clarifies when to use IPv6-in-IPv6 headers and how to address them: the Hop-by-Hop Options header containing the RPI MUST always be added when 6LRs originate packets (without IPv6-in-IPv6 headers), and IPv6-in-IPv6 headers MUST always be added when a 6LR finds that it needs to insert a Hop-by-Hop Options header containing the RPL Option. The IPv6-in-IPv6 header is to be addressed to the RPL root when on the way up, and to the end host when on the way down.¶ In the Non-Storing case, dealing with RPL-unaware leaf nodes is much easier as the 6LBR (DODAG root) has complete knowledge about the connectivity of all DODAG nodes, and all traffic flows through the root node.¶ The 6LBR can recognize RPL-unaware leaf nodes because it will receive a DAO about that node from the 6LR immediately above that RPL-unaware node.¶ The Non-Storing mode case does not require the Type change from 0x63 to 0x23, as the root can always create the right packet. The Type change does not adversely affect the Non-Storing case (see Section 4.1.3).¶ 4.3. Updates to RFC 8138: Indicating the Way to Decompress with the New RPI Option Type This modification is required in order to be able to decompress the RPL Option with the new Option Type of 0x23.¶ The RPI-6LoRH header provides a compressed form for the RPL RPI; see [RFC8138], Section 6. A node that is decompressing this header MUST decompress using the RPI Option Type that is currently active, that is, a choice between 0x23 (new) and 0x63 (old). The node will know which to use based upon the presence of the flag in the DODAG Configuration option defined in Section 4.1.3. For example, if the network is in 0x23 mode (by DIO option), then it should be decompressed to 0x23.¶ Section 7 of [RFC8138] documents how to compress the IPv6-in-IPv6 header.¶ There are potential significant advantages to having a single code path that always processes IPv6-in-IPv6 headers with no conditional branches.¶ In Storing mode, the scenarios where the flow goes from RAL to RUL and RUL to RUL include compression of the IPv6-in-IPv6 and RPI headers. The IPv6-in-IPv6 header MUST be used in this case, and it SHOULD be compressed as specified in [RFC8138], Section 7. Figure 2 illustrates the case in Storing mode where the packet is received from the Internet, then the root encapsulates the packet to insert the RPI. In that example, the leaf is not known to support RFC 8138, and the packet is encapsulated to the 6LR that is the parent and last hop to the final destination.¶ +-+ ... -+-+ ... +-+- ... -+-+- +-+-+-+ ... +-+-+ ... -+++ ... +-... |11110001|SRH-6LoRH| RPI- |IP-in-IP| NH=1 |11110CPP| UDP | UDP |Page 1 |Type1 S=0| 6LoRH |6LoRH |LOWPAN_IPHC| UDP | hdr |Payld +-+ ... -+-+ ... +-+- ... -+-+-.+-+-+-+-+ ... +-+-+ ... -+ ... +-... <-4bytes-> <- RFC 6282 -> No RPL artifact Figure 2: RPI Inserted by the Root in Storing Mode In Figure 2, the source of the IPv6-in-IPv6 encapsulation is the root, so it is elided in the IP-in-IP 6LoRH. The destination is the parent 6LR of the destination of the inner packet so it cannot be elided. It is placed as the single entry in a Source Route Header 6LoRH (SRH-6LoRH) as the first 6LoRH. There is a single entry so the SRH-6LoRH Size is zero. In that example, the Type is 1 so the 6LR address is compressed to two bytes. This results in the total length of the SRH-6LoRH being four bytes. The RPI-6LoRH and then the IP-in-IP 6LoRH follow. When the IP-in-IP 6LoRH is removed, all the router headers that precede it are also removed. The Paging Dispatch [RFC8025] may also be removed if there was no previous Page change to a Page other than 0 or 1, since the LOWPAN_IPHC is encoded in the same fashion in the default Page 0 and in Page 1. The resulting packet to the destination is the inner packet compressed with [RFC6282].¶ 5. Reference Topology A RPL network in general is composed of a 6LBR, a Backbone Router (6BBR), a 6LR, and a 6LN as a leaf logically organized in a DODAG structure.¶ Figure 3 shows the reference RPL topology for this document. The nodes are labeled with letters so that they may be referenced in subsequent sections. In the figure, 6LR represents a full router node. The 6LN is a RPL-aware router or host (as a leaf). Additionally, for simplification purposes, it is supposed that the 6LBR has direct access to Internet and is the root of the DODAG, thus the 6BBR is not present in the figure.¶ The 6LN leaves marked as RAL (F, H, and I) are RPL nodes with no children hosts.¶ The leaves marked as RUL (G and J) are devices that do not speak RPL at all (RPL unaware), but use Router Advertisements, 6LoWPAN Duplicate Address Request and Duplicate Address Confirmation (DAR/DAC), and 6LoWPAN Neighbor Discovery (ND) only to participate in the network [RFC8505]. In the document, these leaves (G and J) are also referred to as a RUL.¶ The 6LBR (A) in the figure is the root of the Global DODAG.¶ +------------+ | INTERNET ----------+ | | | +------------+ | | | | A | +-------+ |6LBR | +-----------|(root) |-------+ | +-------+ | | | | | | | | | | B |C +---|---+ +---|---+ | 6LR | | 6LR | +---------| |--+ +--- ---+ | +-------+ | | +-------+ | | | | | | | | | | | | | | | | | | D | E | | +-|-----+ +---|---+ | | | 6LR | | 6LR | | | | | +------ | | | +---|---+ | +---|---+ | | | | | | | | | +--+ | | | | | | | | | | | | | | | I | J | F | | G | H | | +-----+-+ +-|-----+ +---|--+ +---|---+ +---|---+ | RAL | | RUL | | RAL | | RAL | | RUL | | 6LN | | 6LN | | 6LN | | 6LN | | 6LN | +-------+ +-------+ +------+ +-------+ +-------+ Figure 3: A Reference RPL Topology 6. Use Cases In the data plane, a combination of RFC 6553, RFC 6554, and IPv6-in-IPv6 encapsulation are going to be analyzed for a number of representative traffic flows.¶ The use cases describe the communication in the following cases:¶ Between RPL-aware nodes with the root (6LBR)¶ Between RPL-aware nodes with the Internet¶ Between RUL nodes within the LLN (e.g., see Section 7.1.4)¶ Inside of the LLN when the final destination address resides outside of the LLN (e.g., see Section 7.2.3)¶ The use cases are as follows:¶ Interaction between leaf and root:¶ RAL to root¶ root to RAL¶ RUL to root¶ root to RUL¶ Interaction between leaf and Internet:¶ RAL to Internet¶ Internet to RAL¶ RUL to Internet¶ Internet to RUL¶ Interaction between leaves:¶ RAL to RAL¶ RAL to RUL¶ RUL to RAL¶ RUL to RUL¶ This document is consistent with the rule that a header cannot be inserted or removed on the fly inside an IPv6 packet that is being routed. This is a fundamental precept of the IPv6 architecture as outlined in [RFC8200].¶ As the Rank information in the RPI artifact is changed at each hop, it will typically be zero when it arrives at the DODAG root. The DODAG root MUST force it to zero when passing the packet out to the Internet. The Internet will therefore not see any SenderRank information.¶ Despite being legal to leave the RPI artifact in place, an intermediate router that needs to add an extension header (e.g., RH3 or RPL Option) MUST still encapsulate the packet in an (additional) outer IP header. The new header is placed after this new outer IP header.¶ A corollary is that an intermediate router can remove an RH3 or RPL Option only if it is placed in an encapsulating IPv6 header that is addressed to this intermediate router. When doing the above, the whole encapsulating header must be removed. (A replacement may be added.)¶ Both the RPL Option and the RH3 headers may be modified in very specific ways by routers on the path of the packet without the need to add and remove an encapsulating header. Both headers were designed with this modification in mind, and both the RPL RH3 and the RPL Option are marked mutable but recoverable: so an IPsec Authentication Header (AH) can be applied across these headers, but it cannot secure the values that mutate.¶ The RPI MUST be present in every single RPL data packet.¶ Prior to [RFC8138], there was significant interest in creating an exception to this rule and removing the RPI for Downward flows in Non-Storing mode. This exception covered a very small number of cases, and caused significant interoperability challenges while adding significant interest in the code and tests. The ability to compress the RPI down to three bytes or less removes much of the pressure to optimize this any further.¶ Throughout the following subsections, the examples are described in more detail in the first subsections, and more concisely in the later ones.¶ The use cases are delineated based on the following IPV6 and RPL mandates:¶ The RPI has to be in every packet that traverses the LLN.¶ Because of the above requirement, packets from the Internet have to be encapsulated.¶ A header cannot be inserted or removed on the fly inside an IPv6 packet that is being routed.¶ Extension headers may not be added or removed except by the sender or the receiver.¶ RPI and RH3 headers may be modified by routers on the path of the packet without the need to add and remove an encapsulating header.¶ An RH3 or RPL Option can only be removed by an intermediate router if it is placed in an encapsulating IPv6 header, which is addressed to the intermediate router.¶ The Non-Storing mode requires downstream encapsulation by the root for RH3.¶ The use cases are delineated based on the following assumptions:¶ This document assumes that the LLN is using the no-drop RPI Option Type (0x23).¶ Each IPv6 node (including Internet routers) obeys [RFC8200], so that the 0x23 RPI Option Type can be safely inserted.¶ All 6LRs obey [RFC8200].¶ The RPI is ignored at the IPv6 destination (dst) node (RUL).¶ In the use cases, we assume that the RAL supports IP-in-IP encapsulation.¶ In the use cases, we don't assume that the RUL supports IP-in-IP encapsulation.¶ For traffic leaving a RUL, if the RUL adds an opaque RPI, then the 6LR as a RPL Border Router SHOULD rewrite the RPI to indicate the selected Instance and set the flags.¶ The description for RALs applies to RAN in general.¶ Unconstrained uses of RPL are not in scope of this document.¶ Compression is based on [RFC8138].¶ The flow label [RFC6437] is not needed in RPL.¶ 7. Storing Mode In Storing mode (SM) (fully stateful), the sender can determine if the destination is inside the LLN by looking if the destination address is matched by the DIO's Prefix Information Option (PIO) option.¶ Table 4 itemizes which headers are needed in each of the following scenarios. It indicates whether an IPv6-in-IPv6 header must be added and to which destination it must be addressed:¶ the final destination (the RAL node that is the target (tgt)),¶ the \"root\", or¶ the 6LR parent of a RUL.¶ In cases where no IPv6-in-IPv6 header is needed, the column states \"No\", and the destination is N/A (Not Applicable). If the IPv6-in-IPv6 header is needed, the column shows \"must\".¶ In all cases, the RPI is needed, since it identifies inconsistencies (loops) in the routing topology. In general, the RH3 is not needed because it is not used in Storing mode. However, there is one scenario (from the root to the RUL in SM) where the RH3 can be used to point at the RUL (Table 8).¶ The leaf can be a router 6LR or a host, both indicated as 6LN. The root refers to the 6LBR (see Figure 3).¶ Table 4: IPv6-in-IPv6 Encapsulation in Storing Mode Interaction between Use Case IPv6-in-IPv6 IPv6-in-IPv6 dst Leaf - Root RAL to root No N/A root to RAL No N/A root to RUL must 6LR RUL to root must root Leaf - Internet RAL to Int may root Int to RAL must RAL (tgt) RUL to Int must root Int to RUL must 6LR Leaf - Leaf RAL to RAL No N/A RAL to RUL No(up) N/A must(down) 6LR RUL to RAL must(up) root must(down) RAL RUL to RUL must(up) root must(down) 6LR 7.1. Storing Mode: Interaction between Leaf and Root This section describes the communication flow in Storing mode (SM) between the following:¶ RAL to root¶ root to RAL¶ RUL to root¶ root to RUL¶ 7.1.1. SM: Example of Flow from RAL to Root In Storing mode, RPI [RFC6553] is used to send the RPLInstanceID and Rank information.¶ In this case, the flow comprises:¶ RAL (6LN) --> 6LR_i --> root (6LBR)¶ For example, a communication flow could be: Node F (6LN) --> Node D (6LR_i) --> Node B (6LR_i) --> Node A root (6LBR)¶ The RAL (Node F) inserts the RPI, and sends the packet to the 6LR (Node D), which decrements the Rank in the RPI and sends the packet up. When the packet arrives at the 6LBR (Node A), the RPI is removed and the packet is processed.¶ No IPv6-in-IPv6 header is required.¶ The RPI can be removed by the 6LBR because the packet is addressed to the 6LBR. The RAL must know that it is communicating with the 6LBR to make use of this scenario. The RAL can know the address of the 6LBR because it knows the address of the root via the DODAGID in the DIO messages.¶ Table 5 summarizes which headers are needed for this use case.¶ Table 5: SM: Summary of the Use of Headers from RAL to Root Header RAL src 6LR_i 6LBR dst Added headers RPI -- -- Modified headers -- RPI -- Removed headers -- -- RPI Untouched headers -- -- -- 7.1.2. SM: Example of Flow from Root to RAL In this case, the flow comprises:¶ root (6LBR) --> 6LR_i --> RAL (6LN)¶ For example, a communication flow could be: Node A root (6LBR) --> Node B (6LR_i) --> Node D (6LR_i) --> Node F (6LN)¶ In this case, the 6LBR inserts RPI and sends the packet down. The 6LR increments the Rank in the RPI (it examines the RPLInstanceID to identify the right forwarding table). The packet is processed in the RAL, and the RPI is removed.¶ No IPv6-in-IPv6 header is required.¶ Table 6 summarizes which headers are needed for this use case.¶ Table 6: SM: Summary of the Use of Headers from Root to RAL Header 6LBR src 6LR_i RAL dst Added headers RPI -- -- Modified headers -- RPI -- Removed headers -- -- RPI Untouched headers -- -- -- 7.1.3. SM: Example of Flow from Root to RUL In this case, the flow comprises:¶ root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node A (6LBR) --> Node B (6LR_i) --> Node E (6LR_n) --> Node G (RUL)¶ 6LR_i (Node B) represents the intermediate routers from the source (6LBR) to the destination (RUL), and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the 6LBR (Node A) to the RUL (Node G).¶ The 6LBR will encapsulate the packet in an IPv6-in-IPv6 header and prepend an RPI. The IPv6-in-IPv6 header is addressed to the 6LR parent of the RUL (6LR_n). The 6LR parent of the RUL removes the header and sends the packet to the RUL.¶ Table 7 summarizes which headers are needed for this use case.¶ Table 7: SM: Summary of the Use of Headers from Root to RUL Header 6LBR src 6LR_i 6LR_n RUL dst Added headers IP6-IP6 (RPI) -- -- -- Modified headers -- RPI -- -- Removed headers -- -- IP6-IP6 (RPI) -- Untouched headers -- IP6-IP6 -- -- IP-in-IP encapsulation may be avoided for root-to-RUL communication. In SM, it can be replaced by a loose RH3 header that indicates the RUL. In which case, the packet is routed to the 6LR as a normal SM operation, then the 6LR forwards to the RUL based on the RH3, and the RUL ignores both the consumed RH3 and the RPI, as in Non-Storing mode.¶ Table 8 summarizes which headers are needed for this scenario.¶ Table 8: SM: Summary of the Use of Headers from Root to RUL without Encapsulation Header 6LBR src 6LR_ii=(1,..,n-1) 6LR_n RUL dst Added headers RPI, RH3 -- -- -- Modified headers -- RPI RPI, RH3(consumed) -- Removed headers -- -- -- -- Untouched headers -- RH3 -- RPI, RH3 (both ignored) 7.1.4. SM: Example of Flow from RUL to Root In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR)¶ For example, a communication flow could be: Node G (RUL) --> Node E (6LR_1) --> Node B (6LR_i) --> Node A root (6LBR)¶ 6LR_i represents the intermediate routers from the source (RUL) to the destination (6LBR), and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the RUL to the 6LBR.¶ When the packet arrives from the RUL (Node G) to 6LR_1 (Node E), the 6LR_1 will encapsulate the packet in an IPv6-in-IPv6 header with an RPI. The IPv6-in-IPv6 header is addressed to the root (Node A). The root removes the header and processes the packet.¶ Table 9 summarizes which headers are needed for this use case where the IPv6-in-IPv6 header is addressed to the root (Node A).¶ Table 9: SM: Summary of the Use of Headers from RUL to Root Header RUL src 6LR_1 6LR_i 6LBR dst Added headers -- IP6-IP6 (RPI) -- -- Modified headers -- -- RPI -- Removed headers -- -- -- IP6-IP6 (RPI) Untouched headers -- -- IP6-IP6 -- 7.2. SM: Interaction between Leaf and Internet This section describes the communication flow in Storing mode (SM) between the following:¶ RAL to Internet¶ Internet to RAL¶ RUL to Internet¶ Internet to RUL¶ 7.2.1. SM: Example of Flow from RAL to Internet In this case, the flow comprises:¶ RAL (6LN) --> 6LR_i --> root (6LBR) --> Internet¶ For example, the communication flow could be: Node F (RAL) --> Node D (6LR_i) --> Node B (6LR_i) --> Node A root (6LBR) --> Internet¶ 6LR_i represents the intermediate routers from the source (RAL) to the root (6LBR), and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the RAL to the 6LBR.¶ RPL information from RFC 6553 may go out to Internet as it will be ignored by nodes that have not been configured to be RPL aware. No IPv6-in-IPv6 header is required.¶ On the other hand, the RAL may insert the RPI encapsulated in an IPv6-in-IPv6 header to the root. Thus, the root removes the RPI and sends the packet to the Internet.¶ Note: In this use case, a leaf node is used, but this use case can also be applicable to any RPL-aware node type (e.g., 6LR).¶ Table 10 summarizes which headers are needed for this use case when there is no encapsulation. Note that the RPI is modified by 6LBR to set the SenderRank to zero in the case that it is not already zero. Table 11 summarizes which headers are needed when encapsulation to the root takes place.¶ Table 10: SM: Summary of the Use of Headers from RAL to Internet with No Encapsulation Header RAL src 6LR_i 6LBR Internet dst Added headers RPI -- -- -- Modified headers -- RPI RPI -- Removed headers -- -- -- -- Untouched headers -- -- -- RPI (Ignored) Table 11: SM: Summary of the Use of Headers from RAL to Internet with Encapsulation to the Root (6LBR) Header RAL src 6LR_i 6LBR Internet dst Added headers IP6-IP6 (RPI) -- -- -- Modified headers -- RPI -- -- Removed headers -- -- IP6-IP6 (RPI) -- Untouched headers -- IP6-IP6 -- -- 7.2.2. SM: Example of Flow from Internet to RAL In this case, the flow comprises:¶ Internet --> root (6LBR) --> 6LR_i --> RAL (6LN)¶ For example, a communication flow could be: Internet --> Node A root (6LBR) --> Node B (6LR_1) --> Node D (6LR_n) --> Node F (RAL)¶ When the packet arrives from Internet to 6LBR, the RPI is added in a outer IPv6-in-IPv6 header (with the IPv6-in-IPv6 destination address set to the RAL) and sent to the 6LR, which modifies the Rank in the RPI. When the packet arrives at the RAL, the packet is decapsulated, which removes the RPI before the packet is processed.¶ Table 12 summarizes which headers are needed for this use case.¶ Table 12: SM: Summary of the Use of Headers from Internet to RAL Header Internet src 6LBR 6LR_i RAL dst Added headers -- IP6-IP6 (RPI) -- -- Modified headers -- -- RPI -- Removed headers -- -- -- IP6-IP6 (RPI) Untouched headers -- -- -- -- 7.2.3. SM: Example of Flow from RUL to Internet In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR) --> Internet¶ For example, a communication flow could be: Node G (RUL) --> Node E (6LR_1) --> Node B (6lR_i) --> Node A root (6LBR) --> Internet¶ The node 6LR_1 (i=1) will add an IPv6-in-IPv6 (RPI) header addressed to the root such that the root can remove the RPI before passing upwards. In the intermediate 6LR, the Rank in the RPI is modified.¶ The originating node will ideally leave the IPv6 flow label as zero so that the packet can be better compressed through the LLN. The 6LBR will set the flow label of the packet to a non-zero value when sending to the Internet. For details, check [RFC6437].¶ Table 13 summarizes which headers are needed for this use case.¶ Table 13: SM: Summary of the Use of Headers from RUL to Internet Header IPv6 src (RUL) 6LR_1 6LR_i i=(2,..,n) 6LBR Internet dst Added headers -- IP6-IP6 (RPI) -- -- -- Modified headers -- -- RPI -- -- Removed headers -- -- -- IP6-IP6 (RPI) -- Untouched headers -- -- -- -- -- 7.2.4. SM: Example of Flow from Internet to RUL In this case, the flow comprises:¶ Internet --> root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Internet --> Node A root (6LBR) --> Node B (6LR_i) --> Node E (6LR_n) --> Node G (RUL)¶ The 6LBR will have to add an RPI within an IPv6-in-IPv6 header. The IPv6-in-IPv6 encapsulating header is addressed to the 6LR parent of the RUL.¶ Further details about this are mentioned in [RFC9010], which specifies RPL routing for a 6LN acting as a plain host and being unaware of RPL.¶ The 6LBR may set the flow label on the inner IPv6-in-IPv6 header to zero in order to aid in compression [RFC8138] [RFC6437].¶ Table 14 summarizes which headers are needed for this use case.¶ Table 14: SM: Summary of the Use of Headers from Internet to RUL Header Internet src 6LBR 6LR_i i=(1,..,n-1) 6LR_n RUL dst Added headers -- IP6-IP6 (RPI) -- -- -- Modified headers -- -- RPI -- -- Removed headers -- -- -- IP6-IP6 (RPI) -- Untouched headers -- -- -- -- -- 7.3. SM: Interaction between Leaf and Leaf This section describes the communication flow in Storing mode (SM) between the following:¶ RAL to RAL¶ RAL to RUL¶ RUL to RAL¶ RUL to RUL¶ 7.3.1. SM: Example of Flow from RAL to RAL In [RFC6550], RPL allows a simple, one-hop optimization for both Storing and Non-Storing networks. A node may send a packet destined to a one-hop neighbor directly to that node. See Section 9 of [RFC6550].¶ When the nodes are not directly connected, then the flow comprises the following in the Storing mode:¶ RAL src (6LN) --> 6LR_ia --> common parent (6LR_x) --> 6LR_id --> RAL dst (6LN)¶ For example, a communication flow could be: Node F (RAL src) --> Node D (6LR_ia) --> Node B (6LR_x) --> Node E (6LR_id) --> Node H (RAL dst)¶ 6LR_ia (Node D) represents the intermediate routers from the source to the common parent 6LR_x (Node B), and 1 <= ia <= n, where n is the total number of routers (6LR) that the packet goes through, from the RAL (Node F) to the common parent 6LR_x (Node B).¶ 6LR_id (Node E) represents the intermediate routers from the common parent 6LR_x (Node B) to the destination RAL (Node H), and 1 <= id <= m, where m is the total number of routers (6LR) that the packet goes through, from the common parent (6LR_x) to the destination RAL (Node H).¶ It is assumed that the two nodes are in the same RPL domain (that they share the same DODAG root). At the common parent (Node B), the direction flag ('O' flag) of the RPI is changed (from decreasing ranks to increasing ranks).¶ While the 6LR nodes will update the RPI, no node needs to add or remove the RPI, so no IPv6-in-IPv6 headers are necessary.¶ Table 15 summarizes which headers are needed for this use case.¶ Table 15: SM: Summary of the Use of Headers from RAL to RAL Header RAL src 6LR_ia 6LR_x (common parent) 6LR_id RAL dst Added headers RPI -- -- -- -- Modified headers -- RPI RPI RPI -- Removed headers -- -- -- -- RPI Untouched headers -- -- -- -- -- 7.3.2. SM: Example of Flow from RAL to RUL In this case, the flow comprises:¶ RAL src (6LN) --> 6LR_ia --> common parent (6LBR, the root) --> 6LR_id --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node F (RAL) --> Node D --> Node B --> Node A --> Node B --> Node E --> Node G (RUL)¶ 6LR_ia represents the intermediate routers from the source (RAL) to the common parent (the root), and 1 <= ia <= n, where n is the total number of routers (6LR) that the packet goes through, from the RAL to the root.¶ 6LR_id (Node E) represents the intermediate routers from the root (Node B) to the destination RUL (Node G). In this case, 1 <= id <= m, where m is the total number of routers (6LR) that the packet goes through, from the root down to the destination RUL.¶ In this case, the packet from the RAL goes to the 6LBR because the route to the RUL is not injected into the RPL SM. Thus, the RAL inserts an RPI (RPI1) addressed to the root (6LBR). The root does not remove the RPI1 (the root cannot remove an RPI if there is no encapsulation). The root inserts an IPv6-in-IPv6 encapsulation with an RPI2 and sends it to the 6LR parent of the RUL, which removes the encapsulation and RPI2 before passing the packet to the RUL.¶ Table 16 summarizes which headers are needed for this use case.¶ Table 16: SM: Summary of the Use of Headers from RAL to RUL Header RAL src 6LR_ia 6LBR 6LR_id 6LR_m RUL dst Added headers RPI1 -- IP6-IP6 (RPI2) -- -- -- Modified headers -- RPI1 -- RPI2 -- -- Removed headers -- -- -- -- IP6-IP6 (RPI2) -- Untouched headers -- -- RPI1 RPI1 RPI1 RPI1 (ignored) 7.3.3. SM: Example of Flow from RUL to RAL In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_ia --> 6LBR --> 6LR_id --> RAL dst (6LN)¶ For example, a communication flow could be: Node G (RUL) --> Node E --> Node B --> Node A --> Node B --> Node D --> Node F (RAL)¶ 6LR_ia (Node E) represents the intermediate routers from the source (RUL) (Node G) to the root (Node A). In this case, 1 <= ia <= n, where n is the total number of routers (6LR) that the packet goes through, from the source to the root.¶ 6LR_id represents the intermediate routers from the root (Node A) to the destination RAL (Node F). In this case, 1 <= id <= m, where m is the total number of routers (6LR) that the packet goes through, from the root to the destination RAL.¶ The 6LR_1 (Node E) receives the packet from the RUL (Node G) and inserts the RPI (RPI1) encapsulated in an IPv6-in-IPv6 header to the root. The root removes the outer header including the RPI (RPI1) and inserts a new RPI (RPI2) addressed to the destination RAL (Node F).¶ Table 17 summarizes which headers are needed for this use case.¶ Table 17: SM: Summary of the Use of Headers from RUL to RAL Header RUL src 6LR_1 6LR_ia 6LBR 6LR_id RAL dst Added headers -- IP6-IP6 (RPI1) -- IP6-IP6 (RPI2) -- -- Modified headers -- -- RPI1 -- RPI2 -- Removed headers -- -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RPI2) Untouched headers -- -- -- -- -- -- 7.3.4. SM: Example of Flow from RUL to RUL In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_ia --> 6LBR --> 6LR_id --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node G (RUL src) --> Node E --> Node B --> Node A (root) --> Node C --> Node J (RUL dst)¶ Internal nodes 6LR_ia (e.g., Node E or Node B) is the intermediate router from the RUL source (Node G) to the root (6LBR) (Node A). In this case, 1 <= ia <= n, where n is the total number of routers (6LR) that the packet goes through, from the RUL to the root. 6LR_1 applies when ia=1.¶ 6LR_id (Node C) represents the intermediate routers from the root (Node A) to the destination RUL (Node J). In this case, 1 <= id <= m, where m is the total number of routers (6LR) that the packet goes through, from the root to the destination RUL.¶ The 6LR_1 (Node E) receives the packet from the RUL (Node G) and adds the RPI (RPI1) in an IPv6-in-IPv6 encapsulation directed to the root. The root removes the outer header including the RPI (RPI1) and inserts a new RPI (RPI2) addressed to the 6LR parent of the RUL.¶ Table 18 summarizes which headers are needed for this use case.¶ Table 18: SM: Summary of the Use of Headers from RUL to RUL Header RUL src 6LR_1 6LR_ia 6LBR 6LR_id 6LR_n RUL dst Added headers -- IP6-IP6 (RPI1) -- IP6-IP6 (RPI1) -- -- -- Modified headers -- -- RPI1 -- RPI2 -- -- Removed headers -- -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RPI2) -- Untouched headers -- -- -- -- -- -- -- 8. Non-Storing Mode In Non-Storing mode (Non-SM) (fully source routed), the 6LBR (DODAG root) has complete knowledge about the connectivity of all DODAG nodes and all traffic flows through the root node. Thus, there is no need for all nodes to know about the existence of RPL-unaware nodes. Only the 6LBR needs to act if compensation is necessary for RPL-unaware receivers.¶ Table 19 summarizes which headers are needed in the following scenarios and indicates when the RPI, RH3, and IPv6-in-IPv6 header are to be inserted. The last column depicts the target destination of the IPv6-in-IPv6 header: 6LN (indicated by \"RAL\"), 6LR (parent of a RUL), or the root. In cases where no IPv6-in-IPv6 header is needed, the column indicates \"No\". There is no expectation on RPL that RPI can be omitted because it is needed for routing, quality of service, and compression. This specification expects that an RPI is always present. The term \"may(up)\" means that the IPv6-in-IPv6 header may be necessary in the Upward direction. The term \"must(up)\" means that the IPv6-in-IPv6 header must be present in the Upward direction. The term \"must(down)\" means that the IPv6-in-IPv6 header must be present in the Downward direction.¶ The leaf can be a router 6LR or a host, both indicated as 6LN (Figure 3). In Table 19, the (1) indicates a 6TiSCH case [RFC8180], where the RPI may still be needed for the RPLInstanceID to be available for priority/channel selection at each hop.¶ Table 19: Headers Needed in Non-Storing Mode: RPI, RH3, IPv6-in-IPv6 Encapsulation Interaction between Use Case RPI RH3 IPv6-in-IPv6 IP-in-IP dst Leaf - Root RAL to root Yes No No No root to RAL Yes Yes No No root to RUL Yes (1) Yes No 6LR RUL to root Yes No must root Leaf - Internet RAL to Int Yes No may(up) root Int to RAL Yes Yes must RAL RUL to Int Yes No must root Int to RUL Yes Yes must 6LR Leaf - Leaf RAL to RAL Yes Yes may(up) root must(down) RAL RAL to RUL Yes Yes may(up) root must(down) 6LR RUL to RAL Yes Yes must(up) root must(down) RAL RUL to RUL Yes Yes must(up) root must(down) 6LR 8.1. Non-Storing Mode: Interaction between Leaf and Root This section describes the communication flow in Non-Storing mode (Non-SM) between the following:¶ RAL to root¶ root to RAL¶ RUL to root¶ root to RUL¶ 8.1.1. Non-SM: Example of Flow from RAL to Root In Non-Storing mode, the leaf node uses default routing to send traffic to the root. The RPI must be included since it contains the Rank information, which is used to avoid and/or detect loops.¶ RAL (6LN) --> 6LR_i --> root(6LBR)¶ For example, a communication flow could be: Node F --> Node D --> Node B --> Node A (root)¶ 6LR_i represents the intermediate routers from the source to the destination. In this case, 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the source (RAL) to the destination (6LBR).¶ This situation is the same case as Storing mode.¶ Table 20 summarizes which headers are needed for this use case.¶ Table 20: Non-SM: Summary of the Use of Headers from RAL to Root Header RAL src 6LR_i 6LBR dst Added headers RPI -- -- Modified headers -- RPI -- Removed headers -- -- RPI Untouched headers -- -- -- 8.1.2. Non-SM: Example of Flow from Root to RAL In this case, the flow comprises:¶ root (6LBR) --> 6LR_i --> RAL (6LN)¶ For example, a communication flow could be: Node A (root) --> Node B --> Node D --> Node F¶ 6LR_i represents the intermediate routers from the source to the destination. In this case, 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the source (6LBR) to the destination (RAL).¶ The 6LBR inserts an RH3 and an RPI. No IPv6-in-IPv6 header is necessary as the traffic originates with a RPL-aware node, the 6LBR. The destination is known to be RPL aware because the root knows the whole topology in Non-Storing mode.¶ Table 21 summarizes which headers are needed for this use case.¶ Table 21: Non-SM: Summary of the Use of Headers from Root to RAL Header 6LBR src 6LR_i RAL dst Added headers RPI, RH3 -- -- Modified headers -- RPI, RH3 -- Removed headers -- -- RPI, RH3 Untouched headers -- -- -- 8.1.3. Non-SM: Example of Flow from Root to RUL In this case, the flow comprises:¶ root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node A (root) --> Node B --> Node E --> Node G (RUL)¶ 6LR_i represents the intermediate routers from the source to the destination. In this case, 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the source (6LBR) to the destination (RUL).¶ In the 6LBR, the RH3 is added; it is then modified at each intermediate 6LR (6LR_1 and so on), and it is fully consumed in the last 6LR (6LR_n) but is left in place. When the RPI is added, the RUL, which does not understand the RPI, will ignore it (per [RFC8200]); thus, encapsulation is not necessary.¶ Table 22 summarizes which headers are needed for this use case.¶ Table 22: Non-SM: Summary of the Use of Headers from Root to RUL Header 6LBR src 6LR_i i=(1,..,n-1) 6LR_n RUL dst Added headers RPI, RH3 -- -- -- Modified headers -- RPI, RH3 RPI, RH3(consumed) -- Removed headers -- -- -- -- Untouched headers -- -- -- RPI, RH3 (both ignored) 8.1.4. Non-SM: Example of Flow from RUL to Root In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR) dst¶ For example, a communication flow could be: Node G --> Node E --> Node B --> Node A (root)¶ 6LR_i represents the intermediate routers from the source to the destination. In this case, 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the source (RUL) to the destination (6LBR). For example, 6LR_1 (i=1) is the router that receives the packets from the RUL.¶ In this case, the RPI is added by the first 6LR (6LR_1) (Node E), encapsulated in an IPv6-in-IPv6 header, and modified in the subsequent 6LRs in the flow. The RPI and the entire packet are consumed by the root.¶ Table 23 summarizes which headers are needed for this use case.¶ Table 23: Non-SM: Summary of the Use of Headers from RUL to Root Header RUL src 6LR_1 6LR_i 6LBR dst Added headers -- IPv6-in-IPv6 (RPI) -- -- Modified headers -- -- RPI -- Removed headers -- -- -- IPv6-in-IPv6 (RPI) Untouched headers -- -- -- -- 8.2. Non-Storing Mode: Interaction between Leaf and Internet This section describes the communication flow in Non-Storing mode (Non-SM) between the following:¶ RAL to Internet¶ Internet to RAL¶ RUL to Internet¶ Internet to RUL¶ 8.2.1. Non-SM: Example of Flow from RAL to Internet In this case, the flow comprises:¶ RAL (6LN) src --> 6LR_i --> root (6LBR) --> Internet dst¶ For example, a communication flow could be: Node F (RAL) --> Node D --> Node B --> Node A --> Internet. Having the RAL information about the RPL domain, the packet may be encapsulated to the root when the destination is not in the RPL domain of the RAL.¶ 6LR_i represents the intermediate routers from the source to the destination, and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the source (RAL) to the 6LBR.¶ In this case, the encapsulation from the RAL to the root is optional. The simplest case is when the RPI gets to the Internet (as the Table 24 shows it), knowing that the Internet is going to ignore it.¶ The IPv6 flow label should be set to zero to aid in compression [RFC8138], and the 6LBR will set it to a non-zero value when sending towards the Internet [RFC6437].¶ Table 24 summarizes which headers are needed for this use case when no encapsulation is used. Table 25 summarizes which headers are needed for this use case when encapsulation to the root is used.¶ Table 24: Non-SM: Summary of the Use of Headers from RAL to Internet with No Encapsulation Header RAL src 6LR_i 6LBR Internet dst Added headers RPI -- -- -- Modified headers -- RPI RPI -- Removed headers -- -- -- -- Untouched headers -- -- -- RPI (Ignored) Table 25: Non-SM: Summary of the Use of Headers from RAL to Internet with Encapsulation to the Root Header RAL src 6LR_i 6LBR Internet dst Added headers IP6v6-in-IPv6 (RPI) -- -- -- Modified headers -- RPI -- -- Removed headers -- -- IPv6-in-IPv6 (RPI) -- Untouched headers -- -- -- -- 8.2.2. Non-SM: Example of Flow from Internet to RAL In this case, the flow comprises:¶ Internet --> root (6LBR) --> 6LR_i --> RAL dst (6LN)¶ For example, a communication flow could be: Internet --> Node A (root) --> Node B --> Node D --> Node F (RAL)¶ 6LR_i represents the intermediate routers from source to destination, and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the 6LBR to the destination (RAL).¶ The 6LBR must add an RH3 header. As the 6LBR will know the path and address of the target node, it can address the IPv6-in-IPv6 header to that node. The 6LBR will zero the flow label upon entry in order to aid compression [RFC8138].¶ Table 26 summarizes which headers are needed for this use case.¶ Table 26: Non-SM: Summary of the Use of Headers from Internet to RAL Header Internet src 6LBR 6LR_i RAL dst Added headers -- IPv6-in-IPv6 (RH3, RPI) -- -- Modified headers -- -- IPv6-in-IPv6 (RH3, RPI) -- Removed headers -- -- -- IPv6-in-IPv6 (RH3, RPI) Untouched headers -- -- -- -- 8.2.3. Non-SM: Example of Flow from RUL to Internet In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_i --> root (6LBR) --> Internet dst¶ For example, a communication flow could be: Node G --> Node E --> Node B --> Node A --> Internet¶ 6LR_i represents the intermediate routers from the source to the destination, and 1 <= i <= n, where n is the total number of routers (6LRs) that the packet goes through, from the source (RUL) to the 6LBR, e.g., 6LR_1 (i=1).¶ In this case, the flow label is recommended to be zero in the RUL. As the RUL parent adds RPL headers in the RUL packet, the first 6LR (6LR_1) will add an RPI inside a new IPv6-in-IPv6 header. The IPv6-in-IPv6 header will be addressed to the root. This case is identical to the Storing mode case (see Section 7.2.3).¶ Table 27 summarizes which headers are needed for this use case.¶ Table 27: Non-SM: Summary of the Use of Headers from RUL to Internet Header RUL src 6LR_1 6LR_i i=(2,..,n) 6LBR Internet dst Added headers -- IP6-IP6 (RPI) -- -- -- Modified headers -- -- RPI -- -- Removed headers -- -- -- IP6-IP6 (RPI) -- Untouched headers -- -- -- -- -- 8.2.4. Non-SM: Example of Flow from Internet to RUL In this case, the flow comprises:¶ Internet src --> root (6LBR) --> 6LR_i --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Internet --> Node A (root) --> Node B --> Node E --> Node G¶ 6LR_i represents the intermediate routers from the source to the destination, and 1 <= i <= n, where n is the total number of routers (6LR) that the packet goes through, from the 6LBR to the RUL.¶ The 6LBR must add an RH3 header inside an IPv6-in-IPv6 header. The 6LBR will know the path and will recognize that the final node is not a RPL-capable node as it will have received the connectivity DAO from the nearest 6LR. The 6LBR can therefore make the IPv6-in-IPv6 header destination be the last 6LR. The 6LBR will set to zero the flow label upon entry in order to aid compression [RFC8138].¶ Table 28 summarizes which headers are needed for this use case.¶ Table 28: Non-SM: Summary of the Use of Headers from Internet to RUL Header Internet src 6LBR 6LR_i 6LR_n RUL dst Added headers -- IP6-IP6 (RH3, RPI) -- -- -- Modified headers -- -- IP6-IP6 (RH3, RPI) -- -- Removed headers -- -- -- IP6-IP6 (RH3, RPI) -- Untouched headers -- -- -- -- -- 8.3. Non-SM: Interaction between Leaves This section describes the communication flow in Non-Storing mode (Non-SM) between the following:¶ RAL to RAL¶ RAL to RUL¶ RUL to RAL¶ RUL to RUL¶ 8.3.1. Non-SM: Example of Flow from RAL to RAL In this case, the flow comprises:¶ RAL src --> 6LR_ia --> root (6LBR) --> 6LR_id --> RAL dst¶ For example, a communication flow could be: Node F (RAL src) --> Node D --> Node B --> Node A (root) --> Node B --> Node E --> Node H (RAL dst)¶ 6LR_ia represents the intermediate routers from the source to the root, and 1 <= ia <= n, where n is the total number of routers (6LR) that the packet goes through, from the RAL to the root.¶ 6LR_id represents the intermediate routers from the root to the destination, and 1 <= id <= m, where m is the total number of the intermediate routers (6LR).¶ This case involves only nodes in same RPL domain. The originating node will add an RPI to the original packet and send the packet Upward.¶ The originating node may put the RPI (RPI1) into an IPv6-in-IPv6 header addressed to the root so that the 6LBR can remove that header. If it does not, then the RPI1 is forwarded down from the root in the inner header to no avail.¶ The 6LBR will need to insert an RH3 header, which requires that it add an IPv6-in-IPv6 header. It removes the RPI (RPI1), as it was contained in an IPv6-in-IPv6 header addressed to it. Otherwise, there may be an RPI buried inside the inner IP header, which should be ignored. The root inserts an RPI (RPI2) alongside the RH3.¶ Networks that use the RPL point-to-point extension [RFC6997] are essentially Non-Storing DODAGs and fall into this scenario or the scenario given in Section 8.1.2, with the originating node acting as a 6LBR.¶ Table 29 summarizes which headers are needed for this use case when encapsulation to the root takes place.¶ Table 30 summarizes which headers are needed for this use case when there is no encapsulation to the root. Note that in the Modified headers row, going up in each 6LR_ia only the RPI1 is changed. Going down, in each 6LR_id the IPv6 header is swapped with the RH3 so both are changed alongside with the RPI2.¶ Table 29: Non-SM: Summary of the Use of Headers from RAL to RAL with Encapsulation to the Root Header RAL src 6LR_ia 6LBR 6LR_id RAL dst Added headers IP6-IP6 (RPI1) -- IP6-IP6 (RH3 -> RAL, RPI2) -- -- Modified headers -- RPI1 -- IP6-IP6 (RH3, RPI2) -- Removed headers -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) Untouched headers -- -- -- -- -- Table 30: Non-SM: Summary of the Use of Headers from RAL to RAL without Encapsulation to the Root Header RAL src 6LR_ia 6LBR 6LR_id RAL dst Added headers RPI1 -- IP6-IP6 (RH3, RPI2) -- -- Modified headers -- RPI1 -- IP6-IP6 (RH3, RPI2) -- Removed headers -- -- -- -- IP6-IP6 (RH3, RPI2) Untouched headers -- -- RPI1 RPI1 RPI1 (Ignored) 8.3.2. Non-SM: Example of Flow from RAL to RUL In this case, the flow comprises:¶ RAL --> 6LR_ia --> root (6LBR) --> 6LR_id --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node F (RAL) --> Node D --> Node B --> Node A (root) --> Node B --> Node E --> Node G (RUL)¶ 6LR_ia represents the intermediate routers from the source to the root, and 1 <= ia <= n, where n is the total number of intermediate routers (6LR).¶ 6LR_id represents the intermediate routers from the root to the destination, and 1 <= id <= m, where m is the total number of the intermediate routers (6LRs).¶ As in the previous case, the RAL (6LN) may insert an RPI (RPI1) header, which must be in an IPv6-in-IPv6 header addressed to the root so that the 6LBR can remove this RPI. The 6LBR will then insert an RH3 inside a new IPv6-in-IPv6 header addressed to the last 6LR_id (6LR_id = m) alongside the insertion of RPI2.¶ If the originating node does not put the RPI (RPI1) into an IPv6-in-IPv6 header addressed to the root, then the RPI1 is forwarded down from the root in the inner header to no avail.¶ Table 31 summarizes which headers are needed for this use case when encapsulation to the root takes place. Table 32 summarizes which headers are needed for this use case when no encapsulation to the root takes place.¶ Table 31: Non-SM: Summary of the Use of Headers from RAL to RUL with Encapsulation to the Root Header RAL src 6LR_ia 6LBR 6LR_id 6LR_m RUL dst Added headers IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) -- -- -- Modified headers -- RPI1 -- IP6-IP6 (RH3, RPI2) -- -- Removed headers -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) -- Untouched headers -- -- -- -- -- -- Table 32: Non-SM: Summary of the Use of Headers from RAL to RUL without Encapsulation to the Root Header RAL src 6LR_ia 6LBR 6LR_id 6LR_n RUL dst Added headers RPI1 -- IP6-IP6 (RH3, RPI2) -- -- -- Modified headers -- RPI1 -- IP6-IP6 (RH3, RPI2) -- -- Removed headers -- -- -- -- IP6-IP6 (RH3, RPI2) -- Untouched headers -- -- RPI1 RPI1 RPI1 RPI1 (ignored) 8.3.3. Non-SM: Example of Flow from RUL to RAL In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_ia --> root (6LBR) --> 6LR_id --> RAL dst (6LN)¶ For example, a communication flow could be: Node G (RUL) --> Node E --> Node B --> Node A (root) --> Node B --> Node E --> Node H (RAL)¶ 6LR_ia represents the intermediate routers from source to the root, and 1 <= ia <= n, where n is the total number of intermediate routers (6LR).¶ 6LR_id represents the intermediate routers from the root to the destination, and 1 <= id <= m, where m is the total number of the intermediate routers (6LR).¶ In this scenario, the RPI (RPI1) is added by the first 6LR (6LR_1) inside an IPv6-in-IPv6 header addressed to the root. The 6LBR will remove this RPI and add its own IPv6-in-IPv6 header containing an RH3 header and an RPI (RPI2).¶ Table 33 summarizes which headers are needed for this use case.¶ Table 33: Non-SM: Summary of the Use of Headers from RUL to RAL Header RUL src 6LR_1 6LR_ia 6LBR 6LR_id RAL dst Added headers -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) -- -- Modified headers -- -- RPI1 -- IP6-IP6 (RH3, RPI2) -- Removed headers -- -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) Untouched headers -- -- -- -- -- -- 8.3.4. Non-SM: Example of Flow from RUL to RUL In this case, the flow comprises:¶ RUL (IPv6 src node) --> 6LR_1 --> 6LR_ia --> root (6LBR) --> 6LR_id --> RUL (IPv6 dst node)¶ For example, a communication flow could be: Node G --> Node E --> Node B --> Node A (root) --> Node C --> Node J¶ 6LR_ia represents the intermediate routers from the source to the root, and 1 <= ia <= n, where n is the total number of intermediate routers (6LR).¶ 6LR_id represents the intermediate routers from the root to the destination, and 1 <= id <= m, where m is the total number of the intermediate routers (6LR).¶ This scenario is the combination of the previous two cases.¶ Table 34 summarizes which headers are needed for this use case.¶ Table 34: Non-SM: Summary of the Use of Headers from RUL to RUL Header RUL src 6LR_1 6LR_ia 6LBR 6LR_id 6LR_m RUL dst Added headers -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) -- -- -- Modified headers -- -- RPI1 -- IP6-IP6 (RH3, RPI2) -- -- Removed headers -- -- -- IP6-IP6 (RPI1) -- IP6-IP6 (RH3, RPI2) -- Untouched headers -- -- -- -- -- -- -- 9. Operational Considerations of Supporting RULs Roughly half of the situations described in this document involve leaf (\"host\") nodes that do not speak RPL. These nodes fall into two further categories: ones that drop a packet that have RPI or RH3 headers, and ones that continue to process a packet that has RPI and/or RH3 headers.¶ [RFC8200] provides for new rules that suggest that nodes that have not been configured (explicitly) to examine Hop-by-Hop Options headers should ignore those headers and continue processing the packet. Despite this, and despite the switch from 0x63 to 0x23, there may be nodes that predate RFC 8200 or are simply intolerant. Those nodes will drop packets that continue to have RPL artifacts in them. In general, such nodes cannot be easily supported in RPL LLNs.¶ There are some specific cases where it is possible to remove the RPL artifacts prior to forwarding the packet to the leaf host. The critical thing is that the artifacts have been inserted by the RPL root inside an IPv6-in-IPv6 header, and that the header has been addressed to the 6LR immediately prior to the leaf node. In that case, in the process of removing the IPv6-in-IPv6 header, the artifacts can also be removed.¶ The above case occurs whenever traffic originates from the outside the LLN (the \"Internet\" cases above), and Non-Storing mode is used. In Non-Storing mode, the RPL root knows the exact topology (as it must create the RH3 header) and therefore knows which 6LR is prior to the leaf. For example, in Figure 3, Node E is the 6LR prior to leaf Node G, or Node C is the 6LR prior to leaf Node J.¶ Traffic originating from the RPL root (such as when the data collection system is co-located on the RPL root), does not require an IPv6-in-IPv6 header (in Storing or Non-Storing mode), as the packet is originating at the root, and the root can insert the RPI and RH3 headers directly into the packet as it is formed. Such a packet is slightly smaller, but can only be sent to nodes (whether RPL aware or not) that will tolerate the RPL artifacts.¶ An operator that finds itself with a high amount of traffic from the RPL root to RPL-unaware leaves will have to do IPv6-in-IPv6 encapsulation if the leaf is not tolerant of the RPL artifacts. Such an operator could otherwise omit this unnecessary header if it was certain of the properties of the leaf.¶ As the Storing mode cannot know the final path of the traffic, intolerant leaf nodes, which drop packets with RPL artifacts, cannot be supported.¶ 10. Operational Considerations of Introducing 0x23 This section describes the operational considerations of introducing the new RPI Option Type of 0x23.¶ During bootstrapping, the node receives the DIO with the information of RPI Option Type, indicating the new RPI in the DODAG Configuration option flag. The DODAG root is in charge of configuring the current network with the new value, through DIO messages, and determining when all the nodes have been set with the new value. The DODAG should change to a new DODAG version. In case of rebooting, the node does not remember the RPI Option Type. Thus, the DIO is sent with a flag indicating the new RPI Option Type.¶ The DODAG Configuration option is contained in a RPL DIO message, which contains a unique Destination Advertisement Trigger Sequence Number (DTSN) counter. The leaf nodes respond to this message with DAO messages containing the same DTSN. This is a normal part of RPL routing; the RPL root therefore knows when the updated DODAG Configuration option has been seen by all nodes.¶ Before the migration happens, all the RPL-aware nodes should support both values. The migration procedure is triggered when the DIO is sent with the flag indicating the new RPI Option Type. Namely, it remains at 0x63 until it is sure that the network is capable of 0x23, then it abruptly changes to 0x23. The 0x23 RPI Option allows the sending of packets to non-RPL nodes. The non-RPL nodes should ignore the option and continue processing the packets.¶ As mentioned previously, indicating the new RPI in the DODAG Configuration option flag is a way to avoid the flag day (abrupt changeover) in a network using 0x63 as the RPI Option Type value. It is suggested that RPL implementations accept both 0x63 and 0x23 RPI Option Type values when processing the header to enable interoperability.¶ 11. IANA Considerations 11.1. Option Type in RPL Option This document updates the registration made in the \"Destination Options and Hop-by-Hop Options\" subregistry [RFC6553] from 0x63 to 0x23 as shown in Table 35.¶ Table 35: Option Type in RPL Option Hex Value Binary Value Description Reference act chg rest 0x23 00 1 00011 RPL Option This document 0x63 01 1 00011 RPL Option (DEPRECATED) [RFC6553], this document The \"DODAG Configuration Option Flags for MOP 0..6\" subregistry is updated as follows (Table 36):¶ Table 36: DODAG Configuration Option Flag to Indicate the RPI Flag Day Bit Number Capability Description Reference 3 RPI 0x23 enable This document 11.2. Change to the \"DODAG Configuration Option Flags\" Subregistry IANA has changed the name of the \"DODAG Configuration Option Flags\" subregistry to \"DODAG Configuration Option Flags for MOP 0..6\".¶ The subregistry references this document for this change.¶ 11.3. Change MOP Value 7 to Reserved IANA has changed the registration status of value 7 in the \"Mode of Operation\" subregistry from Unassigned to Reserved. This change is in support of future work.¶ This document is listed as a reference for this entry in the subregistry.¶ 12. Security Considerations The security considerations covered in [RFC6553] and [RFC6554] apply when the packets are in the RPL Domain.¶ The IPv6-in-IPv6 mechanism described in this document is much more limited than the general mechanism described in [RFC2473]. The willingness of each node in the LLN to decapsulate packets and forward them could be exploited by nodes to disguise the origin of an attack.¶ While a typical LLN may be a very poor origin for attack traffic (as the networks tend to be very slow, and the nodes often have very low duty cycles), given enough nodes, LLNs could still have a significant impact, particularly if the attack is targeting another LLN. Additionally, some uses of RPL involve large-backbone, ISP-scale equipment [ACP], which may be equipped with multiple 100 Gb/s interfaces.¶ Blocking or careful filtering of IPv6-in-IPv6 traffic entering the LLN as described above will make sure that any attack that is mounted must originate from compromised nodes within the LLN. The use of network ingress filtering [BCP38] on egress traffic at the RPL root will alert the operator to the existence of the attack as well as drop the attack traffic. As the RPL network is typically numbered from a single prefix, which is itself assigned by RPL, network ingress filtering [BCP38] involves a single prefix comparison and should be trivial to automatically configure.¶ There are some scenarios where IPv6-in-IPv6 traffic should be allowed to pass through the RPL root, such as the IPv6-in-IPv6 mediated communications between a new pledge and the Join Registrar/Coordinator (JRC) when using [BRSKI] and [ZEROTOUCH-JOIN]. This is the case for the RPL root to do careful filtering: it occurs only when the Join Coordinator is not co-located inside the RPL root.¶ With the above precautions, an attack using IPv6-in-IPv6 tunnels can only be by a node within the LLN on another node within the LLN. Such an attack could, of course, be done directly. An attack of this kind is meaningful only if the source addresses are either fake or if the point is to amplify return traffic. Such an attack could also be done without the use of IPv6-in-IPv6 headers, by using forged source addresses instead. If the attack requires bidirectional communication, then IPv6-in-IPv6 provides no advantages.¶ Whenever IPv6-in-IPv6 headers are being proposed, there is a concern about creating security issues. In the Security Considerations section of [RFC2473] (Section 9), it was suggested that tunnel entry and exit points can be secured by securing the IPv6 path between them. This recommendation is not practical for RPL networks. [RFC5406] provides guidance on what on what additional details are needed in order to \"Use IPsec\". While the use of Encapsulating Security Payload (ESP) would prevent source address forgeries, in order to use it with [RFC8138], compression would have to occur before encryption, as the [RFC8138] compression is lossy. Once encrypted, there would be no further redundancy to compress. These are minor issues. The major issue is how to establish trust enough such that Internet Key Exchange Protocol Version 2 (IKEv2) could be used. This would require a system of certificates to be present in every single node, including any Internet nodes that might need to communicate with the LLN. Thus, using IPsec requires a global PKI in the general case.¶ More significantly, the use of IPsec tunnels to protect the IPv6-in-IPv6 headers would, in the general case, scale with the square of the number of nodes. This is a lot of resources for a constrained nodes on a constrained network. In the end, the IPsec tunnels would be providing only BCP38-like origin authentication! That is, IPsec provides a transitive guarantee to the tunnel exit point that the tunnel entry point did network ingress filtering [BCP38] on traffic going in. Just doing origin filtering per BCP 38 at the entry and exit of the LLN provides a similar level of security without all the scaling and trust problems related to IPv6 tunnels as discussed in [RFC2473]. IPsec is not recommended.¶ An LLN with hostile nodes within it would not be protected against impersonation within the LLN by entry/exit filtering.¶ The RH3 header usage described here can be abused in equivalent ways. An external attacker may form a packet with an RH3 that is not fully consumed and encapsulate it to hide the RH3 from intermediate nodes and disguise the origin of traffic. As such, the attacker's RH3 header will not be seen by the network until it reaches the destination, which will decapsulate it. As indicated in Section 4.2 of [RFC6554], RPL routers are responsible for ensuring that an SRH is only used between RPL routers. As such, if there is an RH3 that is not fully consumed in the encapsulated packet, the node that decapsulates it MUST ensure that the outer packet was originated in the RPL domain and drop the packet otherwise.¶ Also, as indicated by Section 2 of [RFC6554], RPL Border Routers \"do not allow datagrams carrying an SRH header to enter or exit a RPL routing domain.\" This sentence must be understood as concerning non-fully-consumed packets. A consumed (inert) RH3 header could be present in a packet that flows from one LLN, crosses the Internet, and enters another LLN. Per the discussion in this document, such headers do not need to be removed. However, there is no case described in this document where an RH3 is inserted in a Non-Storing network on traffic that is leaving the LLN, but this document should not preclude such a future innovation.¶ In short, a packet that crosses the border of the RPL domain MAY carry an RH3, and if so, that RH3 MUST be fully consumed.¶ The RPI, if permitted to enter the LLN, could be used by an attacker to change the priority of a packet by selecting a different RPLInstanceID, perhaps one with a higher energy cost, for instance. It could also be that not all nodes are reachable in an LLN using the default RPLInstanceID, but a change of RPLInstanceID would permit an attacker to bypass such filtering. Like the RH3, an RPI is to be inserted by the RPL root on traffic entering the LLN by first inserting an IPv6-in-IPv6 header. The attacker's RPI therefore will not be seen by the network. Upon reaching the destination node, the RPI has no further meaning and is just skipped; the presence of a second RPI will have no meaning to the end node as the packet has already been identified as being at its final destination.¶ For traffic leaving a RUL, if the RUL adds an uninitialized RPI (e.g., with a value of zero), then the 6LR as a RPL Border Router SHOULD rewrite the RPI to indicate the selected Instance and set the flags. This is done in order to avoid the following scenarios: 1) The leaf is an external router that passes a packet that it did not generate and that carries an unrelated RPI, and 2) The leaf is an attacker or presents misconfiguration and tries to inject traffic in a protected Instance. Also, this applies to the case where the leaf is aware of the RPL Instance and passes a correct RPI; the 6LR needs a configuration that allows that leaf to inject in that instance.¶ The RH3 and RPIs could be abused by an attacker inside of the network to route packets in nonobvious ways, perhaps eluding observation. This usage appears consistent with a normal operation of [RFC6997] and cannot be restricted at all. This is a feature, not a bug.¶ [RFC7416] deals with many other threats to LLNs not directly related to the use of IPv6-in-IPv6 headers, and this document does not change that analysis.¶ Nodes within the LLN can use the IPv6-in-IPv6 mechanism to mount an attack on another part of the LLN, while disguising the origin of the attack. The mechanism can even be abused to make it appear that the attack is coming from outside the LLN, and unless countered, this could be used to mount a DDOS attack upon nodes elsewhere in the Internet. See [DDOS-KREBS] for an example of such attacks already seen in the real world.¶ If an attack comes from inside of LLN, it can be alleviated with SAVI (Source Address Validation Improvement) using [RFC8505] with [RFC8928]. The attacker will not be able to source traffic with an address that is not registered, and the registration process checks for topological correctness. Notice that there is Layer 2 authentication in most of the cases. If an attack comes from outside LLN, IPv6-in-IPv6 can be used to hide inner routing headers, but by construction, the RH3 can typically only address nodes within the LLN. That is, an RH3 with a CmprI less than 8 should be considered an attack (see Section 3 of [RFC6554]).¶ Nodes outside of the LLN will need to pass IPv6-in-IPv6 traffic through the RPL root to perform this attack. To counter, the RPL root SHOULD either restrict ingress of IPv6-in-IPv6 packets (the simpler solution), or it SHOULD walk the IP header extension chain until it can inspect the upper-layer payload as described in [RFC7045]. In particular, the RPL root SHOULD do network ingress filtering [BCP38] on the source addresses of all IP headers that it examines in both directions.¶ Note: there are some situations where a prefix will spread across multiple LLNs via mechanisms such as the one described in [RFC8929]. In this case, the network ingress filtering [BCP38] needs to take this into account, either by exchanging detailed routing information on each LLN or by moving the network ingress filtering [BCP38] further towards the Internet, so that the details of the multiple LLNs do not matter.¶ 13. References 13.1. Normative References [BCP38] Ferguson, P. and D. Senie, \"Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing\", BCP 38, RFC 2827, May 2000. <https://rfc-editor.org/info/bcp38> [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC6040] Briscoe, B., \"Tunnelling of Explicit Congestion Notification\", RFC 6040, DOI 10.17487/RFC6040, November 2010, <https://www.rfc-editor.org/info/rfc6040>. [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6553] Hui, J. and JP. Vasseur, \"The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams\", RFC 6553, DOI 10.17487/RFC6553, March 2012, <https://www.rfc-editor.org/info/rfc6553>. [RFC6554] Hui, J., Vasseur, JP., Culler, D., and V. Manral, \"An IPv6 Routing Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6554, DOI 10.17487/RFC6554, March 2012, <https://www.rfc-editor.org/info/rfc6554>. [RFC7045] Carpenter, B. and S. Jiang, \"Transmission and Processing of IPv6 Extension Headers\", RFC 7045, DOI 10.17487/RFC7045, December 2013, <https://www.rfc-editor.org/info/rfc7045>. [RFC8025] Thubert, P., Ed. and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging Dispatch\", RFC 8025, DOI 10.17487/RFC8025, November 2016, <https://www.rfc-editor.org/info/rfc8025>. [RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing Header\", RFC 8138, DOI 10.17487/RFC8138, April 2017, <https://www.rfc-editor.org/info/rfc8138>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>. 13.2. Informative References [ACP] Eckert, T., Behringer, M. H., and S. Bjarnason, \"An Autonomic Control Plane (ACP)\", Work in Progress, Internet-Draft, draft-ietf-anima-autonomic-control-plane-30, 30 October 2020, <https://tools.ietf.org/html/draft-ietf-anima-autonomic-control-plane-30>. [BRSKI] Pritikin, M., Richardson, M. C., Eckert, T., Behringer, M. H., and K. Watsen, \"Bootstrapping Remote Secure Key Infrastructures (BRSKI)\", Work in Progress, Internet-Draft, draft-ietf-anima-bootstrapping-keyinfra-45, 11 November 2020, <https://tools.ietf.org/html/draft-ietf-anima-bootstrapping-keyinfra-45>. [DDOS-KREBS] Goodin, D., \"Record-breaking DDoS reportedly delivered by >145k hacked cameras\", September 2016, <https://arstechnica.com/information-technology/2016/09/botnet-of-145k-cameras-reportedly-deliver-internets-biggest-ddos-ever/>. [RFC0801] Postel, J., \"NCP/TCP transition plan\", RFC 801, DOI 10.17487/RFC0801, November 1981, <https://www.rfc-editor.org/info/rfc801>. [RFC2460] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460, December 1998, <https://www.rfc-editor.org/info/rfc2460>. [RFC2473] Conta, A. and S. Deering, \"Generic Packet Tunneling in IPv6 Specification\", RFC 2473, DOI 10.17487/RFC2473, December 1998, <https://www.rfc-editor.org/info/rfc2473>. [RFC4443] Conta, A., Deering, S., and M. Gupta, Ed., \"Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification\", STD 89, RFC 4443, DOI 10.17487/RFC4443, March 2006, <https://www.rfc-editor.org/info/rfc4443>. [RFC5406] Bellovin, S., \"Guidelines for Specifying the Use of IPsec Version 2\", BCP 146, RFC 5406, DOI 10.17487/RFC5406, February 2009, <https://www.rfc-editor.org/info/rfc5406>. [RFC6437] Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme, \"IPv6 Flow Label Specification\", RFC 6437, DOI 10.17487/RFC6437, November 2011, <https://www.rfc-editor.org/info/rfc6437>. [RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. Bormann, \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 6775, DOI 10.17487/RFC6775, November 2012, <https://www.rfc-editor.org/info/rfc6775>. [RFC6997] Goyal, M., Ed., Baccelli, E., Philipp, M., Brandt, A., and J. Martocci, \"Reactive Discovery of Point-to-Point Routes in Low-Power and Lossy Networks\", RFC 6997, DOI 10.17487/RFC6997, August 2013, <https://www.rfc-editor.org/info/rfc6997>. [RFC7102] Vasseur, JP., \"Terms Used in Routing for Low-Power and Lossy Networks\", RFC 7102, DOI 10.17487/RFC7102, January 2014, <https://www.rfc-editor.org/info/rfc7102>. [RFC7416] Tsao, T., Alexander, R., Dohler, M., Daza, V., Lozano, A., and M. Richardson, Ed., \"A Security Threat Analysis for the Routing Protocol for Low-Power and Lossy Networks (RPLs)\", RFC 7416, DOI 10.17487/RFC7416, January 2015, <https://www.rfc-editor.org/info/rfc7416>. [RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>. [RFC8504] Chown, T., Loughney, J., and T. Winters, \"IPv6 Node Requirements\", BCP 220, RFC 8504, DOI 10.17487/RFC8504, January 2019, <https://www.rfc-editor.org/info/rfc8504>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC8928] Thubert, P., Ed., Sarikaya, B., Sethi, M., and R. Struik, \"Address-Protected Neighbor Discovery for Low-Power and Lossy Networks\", RFC 8928, DOI 10.17487/RFC8928, November 2020, <https://www.rfc-editor.org/info/rfc8928>. [RFC8929] Thubert, P., Ed., Perkins, C.E., and E. Levy-Abegnoli, \"IPv6 Backbone Router\", RFC 8929, DOI 10.17487/RFC8929, November 2020, <https://www.rfc-editor.org/info/rfc8929>. [RFC9010] Thubert, P., Ed. and M. Richardson, \"Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves\", RFC 9010, DOI 10.17487/RFC9010, April 2021, <https://www.rfc-editor.org/rfc/rfc9010>. [TUNNELS] Touch, J. and M. Townsley, \"IP Tunnels in the Internet Architecture\", Work in Progress, Internet-Draft, draft-ietf-intarea-tunnels-10, 12 September 2019, <https://tools.ietf.org/html/draft-ietf-intarea-tunnels-10>. [ZEROTOUCH-JOIN] Richardson, M., \"6tisch Zero-Touch Secure Join protocol\", Work in Progress, Internet-Draft, draft-ietf-6tisch-dtsecurity-zerotouch-join-04, 8 July 2019, <https://tools.ietf.org/html/draft-ietf-6tisch-dtsecurity-zerotouch-join-04>. Acknowledgments This work is done thanks to the grant given by the StandICT.eu project.¶ A special BIG thanks to C. M. Heard for the help with Section 4. Much of the editing in that section is based on his comments.¶ Additionally, the authors would like to acknowledge the review, feedback, and comments of the following (in alphabetical order): Dominique Barthel, Robert Cragie, Ralph Droms, Simon Duquennoy, Cenk Guendogan, Rahul Jadhav, Benjamin Kaduk, Matthias Kovatsch, Gustavo Mercado, Subramanian Moonesamy, Marcela Orbiscay, Cristian Perez, Charlie Perkins, Alvaro Retana, Peter van der Stok, Xavier Vilajosana, Éric Vyncke, and Thomas Watteyne.¶ Authors' Addresses Maria Ines Robles Universidad Tecno. Nac.(UTN)-FRM, Argentina /Aalto University Finland Coronel Rodríguez 273 M5500 Mendoza Provincia de Mendoza Argentina Email: mariainesrobles@gmail.com Michael C. Richardson Sandelman Software Works 470 Dawson Avenue Ottawa ON K1Z 5V7 Canada Email: mcr+ietf@sandelman.ca URI: http://www.sandelman.ca/mcr/ Pascal Thubert Cisco Systems, Inc Building D 45 Allee des Ormes - BP1200 06254 MOUGINS - Sophia Antipolis France Phone: +33 497 23 26 34 Email: pthubert@cisco.com"
    },
    {
        "Number": "9012",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "The BGP Tunnel Encapsulation Attribute",
        "Authors": [
            "K. Patel",
            "G. Van de Velde",
            "S. Sangli",
            "J. Scudder"
        ],
        "Date": "2021-04",
        "More Info": "Obsoletes RFC 5512, RFC 5566, Updates RFC 5640",
        "Status": "Proposed Standard",
        "Abstract": "This document defines a BGP path attribute known as the \"Tunnel Encapsulation attribute\", which can be used with BGP UPDATEs of various Subsequent Address Family Identifiers (SAFIs) to provide information needed to create tunnels and their corresponding encapsulation headers. It provides encodings for a number of tunnel types, along with procedures for choosing between alternate tunnels and routing packets into tunnels.  This document obsoletes RFC 5512, which provided an earlier definition of the Tunnel Encapsulation attribute. RFC 5512 was never deployed in production. Since RFC 5566 relies on RFC 5512, it is likewise obsoleted. This document updates RFC 5640 by indicating that the Load-Balancing Block sub-TLV may be included in any Tunnel Encapsulation attribute where load balancing is desired.",
        "Keywords": [
            "BGP"
        ],
        "Content": "RFC 9012: The BGP Tunnel Encapsulation Attribute RFC 9012 Tunnel Encapsulation Attribute April 2021 Patel, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9012 Obsoletes: 5512, 5566 Updates: 5640 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: K. Patel Arrcus, Inc G. Van de Velde Nokia S. Sangli Juniper Networks J. Scudder Juniper Networks RFC 9012 The BGP Tunnel Encapsulation Attribute Abstract This document defines a BGP path attribute known as the \"Tunnel Encapsulation attribute\", which can be used with BGP UPDATEs of various Subsequent Address Family Identifiers (SAFIs) to provide information needed to create tunnels and their corresponding encapsulation headers. It provides encodings for a number of tunnel types, along with procedures for choosing between alternate tunnels and routing packets into tunnels.¶ This document obsoletes RFC 5512, which provided an earlier definition of the Tunnel Encapsulation attribute. RFC 5512 was never deployed in production. Since RFC 5566 relies on RFC 5512, it is likewise obsoleted. This document updates RFC 5640 by indicating that the Load-Balancing Block sub-TLV may be included in any Tunnel Encapsulation attribute where load balancing is desired.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9012.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Brief Summary of RFC 5512 1.2.  Deficiencies in RFC 5512 1.3.  Use Case for the Tunnel Encapsulation Attribute 1.4.  Brief Summary of Changes from RFC 5512 1.5.  Update to RFC 5640 1.6.  Effects of Obsoleting RFC 5566 2.  The Tunnel Encapsulation Attribute 3.  Tunnel Encapsulation Attribute Sub-TLVs 3.1.  The Tunnel Egress Endpoint Sub-TLV (Type Code 6) 3.1.1.  Validating the Address Subfield 3.2.  Encapsulation Sub-TLVs for Particular Tunnel Types (Type Code 1) 3.2.1.  VXLAN (Tunnel Type 8) 3.2.2.  NVGRE (Tunnel Type 9) 3.2.3.  L2TPv3 (Tunnel Type 1) 3.2.4.  GRE (Tunnel Type 2) 3.2.5.  MPLS-in-GRE (Tunnel Type 11) 3.3.  Outer Encapsulation Sub-TLVs 3.3.1.  DS Field (Type Code 7) 3.3.2.  UDP Destination Port (Type Code 8) 3.4.  Sub-TLVs for Aiding Tunnel Selection 3.4.1.  Protocol Type Sub-TLV (Type Code 2) 3.4.2.  Color Sub-TLV (Type Code 4) 3.5.  Embedded Label Handling Sub-TLV (Type Code 9) 3.6.  MPLS Label Stack Sub-TLV (Type Code 10) 3.7.  Prefix-SID Sub-TLV (Type Code 11) 4.  Extended Communities Related to the Tunnel Encapsulation Attribute 4.1.  Encapsulation Extended Community 4.2.  Router's MAC Extended Community 4.3.  Color Extended Community 5.  Special Considerations for IP-in-IP Tunnels 6.  Semantics and Usage of the Tunnel Encapsulation Attribute 7.  Routing Considerations 7.1.  Impact on the BGP Decision Process 7.2.  Looping, Mutual Recursion, Etc. 8.  Recursive Next-Hop Resolution 9.  Use of Virtual Network Identifiers and Embedded Labels When Imposing a Tunnel Encapsulation 9.1.  Tunnel Types without a Virtual Network Identifier Field 9.2.  Tunnel Types with a Virtual Network Identifier Field 9.2.1.  Unlabeled Address Families 9.2.2.  Labeled Address Families 10. Applicability Restrictions 11. Scoping 12. Operational Considerations 13. Validation and Error Handling 14. IANA Considerations 14.1.  Obsoleting RFC 5512 14.2.  Obsoleting Code Points Assigned by RFC 5566 14.3.  Border Gateway Protocol (BGP) Tunnel Encapsulation Grouping 14.4.  BGP Tunnel Encapsulation Attribute Tunnel Types 14.5.  Subsequent Address Family Identifiers 14.6.  BGP Tunnel Encapsulation Attribute Sub-TLVs 14.7.  Flags Field of VXLAN Encapsulation Sub-TLV 14.8.  Flags Field of NVGRE Encapsulation Sub-TLV 14.9.  Embedded Label Handling Sub-TLV 14.10. Color Extended Community Flags 15. Security Considerations 16. References 16.1.  Normative References 16.2.  Informative References Appendix A.  Impact on RFC 8365 Acknowledgments Contributors Authors' Addresses 1. Introduction This document obsoletes [RFC5512]. The deficiencies of [RFC5512], and a summary of the changes made, are discussed in Sections 1.1-1.3. The material from [RFC5512] that is retained has been incorporated into this document. Since [RFC5566] relies on [RFC5512], it is likewise obsoleted.¶ The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 1.1. Brief Summary of RFC 5512 [RFC5512] defines a BGP path attribute known as the Tunnel Encapsulation attribute. This attribute consists of one or more TLVs. Each TLV identifies a particular type of tunnel. Each TLV also contains one or more sub-TLVs. Some of the sub-TLVs, for example, the Encapsulation sub-TLV, contain information that may be used to form the encapsulation header for the specified tunnel type. Other sub-TLVs, for example, the \"color sub-TLV\" and the \"protocol sub-TLV\", contain information that aids in determining whether particular packets should be sent through the tunnel that the TLV identifies.¶ [RFC5512] only allows the Tunnel Encapsulation attribute to be attached to BGP UPDATE messages of the Encapsulation Address Family. These UPDATE messages have an Address Family Identifier (AFI) of 1 or 2, and a SAFI of 7. In an UPDATE of the Encapsulation SAFI, the Network Layer Reachability Information (NLRI) is an address of the BGP speaker originating the UPDATE. Consider the following scenario:¶ BGP speaker R1 has received and selected UPDATE U for local use;¶ UPDATE U's SAFI is the Encapsulation SAFI;¶ UPDATE U has the address R2 as its NLRI;¶ UPDATE U has a Tunnel Encapsulation attribute.¶ R1 has a packet, P, to transmit to destination D; and¶ R1's best route to D is a BGP route that has R2 as its next hop.¶ In this scenario, when R1 transmits packet P, it should transmit it to R2 through one of the tunnels specified in U's Tunnel Encapsulation attribute. The IP address of the tunnel egress endpoint of each such tunnel is R2. Packet P is known as the tunnel's \"payload\".¶ 1.2. Deficiencies in RFC 5512 While the ability to specify tunnel information in a BGP UPDATE is useful, the procedures of [RFC5512] have certain limitations:¶ The requirement to use the Encapsulation SAFI presents an unfortunate operational cost, as each BGP session that may need to carry tunnel encapsulation information needs to be reconfigured to support the Encapsulation SAFI. The Encapsulation SAFI has never been used, and this requirement has served only to discourage the use of the Tunnel Encapsulation attribute.¶ There is no way to use the Tunnel Encapsulation attribute to specify the tunnel egress endpoint address of a given tunnel; [RFC5512] assumes that the tunnel egress endpoint of each tunnel is specified as the NLRI of an UPDATE of the Encapsulation SAFI.¶ If the respective best routes to two different address prefixes have the same next hop, [RFC5512] does not provide a straightforward method to associate each prefix with a different tunnel.¶ If a particular tunnel type requires an outer IP or UDP encapsulation, there is no way to signal the values of any of the fields of the outer encapsulation.¶ In the specification of the sub-TLVs in [RFC5512], each sub-TLV has a one-octet Length field. In some cases, where a sub-TLV may require more than 255 octets for its encoding, a two-octet Length field may be needed.¶ 1.3. Use Case for the Tunnel Encapsulation Attribute Consider the case of a router R1 forwarding an IP packet P. Let D be P's IP destination address. R1 must look up D in its forwarding table. Suppose that the \"best match\" route for D is route Q, where Q is a BGP-distributed route whose \"BGP next hop\" is router R2. And suppose further that the routers along the path from R1 to R2 have entries for R2 in their forwarding tables but do NOT have entries for D in their forwarding tables. For example, the path from R1 to R2 may be part of a \"BGP-free core\", where there are no BGP-distributed routes at all in the core. Or, as in [RFC5565], D may be an IPv4 address while the intermediate routers along the path from R1 to R2 may support only IPv6.¶ In cases such as this, in order for R1 to properly forward packet P, it must encapsulate P and send P \"through a tunnel\" to R2. For example, R1 may encapsulate P using GRE, Layer 2 Tunneling Protocol version 3 (L2TPv3), IP in IP, etc., where the destination IP address of the encapsulation header is the address of R2.¶ In order for R1 to encapsulate P for transport to R2, R1 must know what encapsulation protocol to use for transporting different sorts of packets to R2. R1 must also know how to fill in the various fields of the encapsulation header. With certain encapsulation types, this knowledge may be acquired by default or through manual configuration. Other encapsulation protocols have fields such as session id, key, or cookie that must be filled in. It would not be desirable to require every BGP speaker to be manually configured with the encapsulation information for every one of its BGP next hops.¶ This document specifies a way in which BGP itself can be used by a given BGP speaker to tell other BGP speakers, \"If you need to encapsulate packets to be sent to me, here's the information you need to properly form the encapsulation header\". A BGP speaker signals this information to other BGP speakers by using a new BGP attribute type value -- the BGP Tunnel Encapsulation attribute. This attribute specifies the encapsulation protocols that may be used, as well as whatever additional information (if any) is needed in order to properly use those protocols. Other attributes, for example, communities or extended communities, may also be included.¶ 1.4. Brief Summary of Changes from RFC 5512 This document addresses the deficiencies identified in Section 1.2 by:¶ Deprecating the Encapsulation SAFI.¶ Defining a new \"Tunnel Egress Endpoint sub-TLV\" (Section 3.1) that can be included in any of the TLVs contained in the Tunnel Encapsulation attribute. This sub-TLV can be used to specify the remote endpoint address of a particular tunnel.¶ Allowing the Tunnel Encapsulation attribute to be carried by BGP UPDATEs of additional AFI/SAFIs. Appropriate semantics are provided for this way of using the attribute.¶ Defining a number of new sub-TLVs that provide additional information that is useful when forming the encapsulation header used to send a packet through a particular tunnel.¶ Defining the Sub-TLV Type field so that a sub-TLV whose type is in the range from 0 to 127 (inclusive) has a one-octet Length field, but a sub-TLV whose type is in the range from 128 to 255 (inclusive) has a two-octet Length field.¶ One of the sub-TLVs defined in [RFC5512] is the \"Encapsulation sub-TLV\". For a given tunnel, the Encapsulation sub-TLV specifies some of the information needed to construct the encapsulation header used when sending packets through that tunnel. This document defines Encapsulation sub-TLVs for a number of tunnel types not discussed in [RFC5512]: Virtual eXtensible Local Area Network (VXLAN) [RFC7348], Network Virtualization Using Generic Routing Encapsulation (NVGRE) [RFC7637], and MPLS in Generic Routing Encapsulation (MPLS-in-GRE) [RFC4023]. MPLS-in-UDP [RFC7510] is also supported, but an Encapsulation sub-TLV for it is not needed since there are no additional parameters to be signaled.¶ Some of the encapsulations mentioned in the previous paragraph need to be further encapsulated inside UDP and/or IP. [RFC5512] provides no way to specify that certain information is to appear in these outer IP and/or UDP encapsulations. This document provides a framework for including such information in the TLVs of the Tunnel Encapsulation attribute.¶ When the Tunnel Encapsulation attribute is attached to a BGP UPDATE whose AFI/SAFI identifies one of the labeled address families, it is not always obvious whether the label embedded in the NLRI is to appear somewhere in the tunnel encapsulation header (and if so, where), whether it is to appear in the payload, or whether it can be omitted altogether. This is especially true if the tunnel encapsulation header itself contains a \"virtual network identifier\". This document provides a mechanism that allows one to signal (by using sub-TLVs of the Tunnel Encapsulation attribute) how one wants to use the embedded label when the tunnel encapsulation has its own Virtual Network Identifier field.¶ [RFC5512] defines an Encapsulation Extended Community that can be used instead of the Tunnel Encapsulation attribute under certain circumstances. This document describes how the Encapsulation Extended Community can be used in a backwards-compatible fashion (see Section 4.1). It is possible to combine Encapsulation Extended Communities and Tunnel Encapsulation attributes in the same BGP UPDATE in this manner.¶ 1.5. Update to RFC 5640 This document updates [RFC5640] by indicating that the Load-Balancing Block sub-TLV MAY be included in any Tunnel Encapsulation attribute where load balancing is desired.¶ 1.6. Effects of Obsoleting RFC 5566 This specification obsoletes RFC 5566. This has the effect of, in turn, deprecating a number of code points defined in that document. In the \"BGP Tunnel Encapsulation Attribute Tunnel Types\" registry [IANA-BGP-TUNNEL-ENCAP], the following code points have been marked as deprecated: \"Transmit tunnel endpoint\" (type code 3), \"IPsec in Tunnel-mode\" (type code 4), \"IP in IP tunnel with IPsec Transport Mode\" (type code 5), and \"MPLS-in-IP tunnel with IPsec Transport Mode\" (type code 6). In the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry [IANA-BGP-TUNNEL-ENCAP], \"IPsec Tunnel Authenticator\" (type code 3) has been marked as deprecated. See Section 14.2.¶ 2. The Tunnel Encapsulation Attribute The Tunnel Encapsulation attribute is an optional transitive BGP path attribute. IANA has assigned the value 23 as the type code of the attribute in the \"BGP Path Attributes\" registry [IANA-BGP-PARAMS]. The attribute is composed of a set of Type-Length-Value (TLV) encodings. Each TLV contains information corresponding to a particular tunnel type. A Tunnel Encapsulation TLV, also known as Tunnel TLV, is structured as shown in Figure 1.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Tunnel Type (2 octets) | Length (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Value (variable) | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 1: Tunnel Encapsulation TLV Tunnel Type (2 octets): Identifies a type of tunnel. The field contains values from the IANA registry \"BGP Tunnel Encapsulation Attribute Tunnel Types\" [IANA-BGP-TUNNEL-ENCAP]. See Section 3.4.1 for discussion of special treatment of tunnel types with names of the form \"X-in-Y\".¶ Length (2 octets): The total number of octets of the Value field.¶ Value (variable): Comprised of multiple sub-TLVs.¶ Each sub-TLV consists of three fields: A 1-octet type, a 1-octet or 2-octet length (depending on the type), and zero or more octets of value. A sub-TLV is structured as shown in Figure 2.¶ +--------------------------------+ | Sub-TLV Type (1 octet) | +--------------------------------+ | Sub-TLV Length (1 or 2 octets) | +--------------------------------+ | Sub-TLV Value (variable) | +--------------------------------+ Figure 2: Encapsulation Sub-TLV Sub-TLV Type (1 octet): Each sub-TLV type defines a certain property about the Tunnel TLV that contains this sub-TLV. The field contains values from the IANA registry \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" [IANA-BGP-TUNNEL-ENCAP].¶ Sub-TLV Length (1 or 2 octets): The total number of octets of the Sub-TLV Value field. The Sub-TLV Length field contains 1 octet if the Sub-TLV Type field contains a value in the range from 0-127. The Sub-TLV Length field contains two octets if the Sub-TLV Type field contains a value in the range from 128-255.¶ Sub-TLV Value (variable): Encodings of the Value field depend on the sub-TLV type. The following subsections define the encoding in detail.¶ 3. Tunnel Encapsulation Attribute Sub-TLVs This section specifies a number of sub-TLVs. These sub-TLVs can be included in a TLV of the Tunnel Encapsulation attribute.¶ 3.1. The Tunnel Egress Endpoint Sub-TLV (Type Code 6) The Tunnel Egress Endpoint sub-TLV specifies the address of the egress endpoint of the tunnel, that is, the address of the router that will decapsulate the payload. Its Value field contains three subfields:¶ a Reserved subfield¶ a two-octet Address Family subfield¶ an Address subfield, whose length depends upon the Address Family.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Address Family (2 octets) | Address | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ (variable) + ~ ~ | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 3: Tunnel Egress Endpoint Sub-TLV Value Field The Reserved subfield SHOULD be originated as zero. It MUST be disregarded on receipt, and it MUST be propagated unchanged.¶ The Address Family subfield contains a value from IANA's \"Address Family Numbers\" registry [IANA-ADDRESS-FAM]. This document assumes that the Address Family is either IPv4 or IPv6; use of other address families is outside the scope of this document.¶ If the Address Family subfield contains the value for IPv4, the Address subfield MUST contain an IPv4 address (a /32 IPv4 prefix).¶ If the Address Family subfield contains the value for IPv6, the Address subfield MUST contain an IPv6 address (a /128 IPv6 prefix).¶ In a given BGP UPDATE, the address family (IPv4 or IPv6) of a Tunnel Egress Endpoint sub-TLV is independent of the address family of the UPDATE itself. For example, an UPDATE whose NLRI is an IPv4 address may have a Tunnel Encapsulation attribute containing Tunnel Egress Endpoint sub-TLVs that contain IPv6 addresses. Also, different tunnels represented in the Tunnel Encapsulation attribute may have tunnel egress endpoints of different address families.¶ There is one special case: the Tunnel Egress Endpoint sub-TLV MAY have a Value field whose Address Family subfield contains 0. This means that the tunnel's egress endpoint is the address of the next hop. If the Address Family subfield contains 0, the Address subfield is omitted. In this case, the Length field of Tunnel Egress Endpoint sub-TLV MUST contain the value 6 (0x06).¶ When the Tunnel Encapsulation attribute is carried in an UPDATE message of one of the AFI/SAFIs specified in this document (see the first paragraph of Section 6), each TLV MUST have one, and only one, Tunnel Egress Endpoint sub-TLV. If a TLV does not have a Tunnel Egress Endpoint sub-TLV, that TLV should be treated as if it had a malformed Tunnel Egress Endpoint sub-TLV (see below).¶ In the context of this specification, if the Address Family subfield has any value other than IPv4, IPv6, or the special value 0, the Tunnel Egress Endpoint sub-TLV is considered \"unrecognized\" (see Section 13). If any of the following conditions hold, the Tunnel Egress Endpoint sub-TLV is considered to be \"malformed\":¶ The length of the sub-TLV's Value field is other than 6 added to the defined length for the address family given in its Address Family subfield. Therefore, for address family behaviors defined in this document, the permitted values are:¶ 10, if the Address Family subfield contains the value for IPv4.¶ 22, if the Address Family subfield contains the value for IPv6.¶ 6, if the Address Family subfield contains the value zero.¶ The IP address in the sub-TLV's Address subfield lies within a block listed in the relevant Special-Purpose IP Address registry [RFC6890] with either a \"destination\" attribute value or a \"forwardable\" attribute value of \"false\". (Such routes are sometimes colloquially known as \"Martians\".) This restriction MAY be relaxed by explicit configuration.¶ It can be determined that the IP address in the sub-TLV's Address subfield does not belong to the Autonomous System (AS) that originated the route that contains the attribute. Section 3.1.1 describes an optional procedure to make this determination.¶ Error handling is specified in Section 13.¶ If the Tunnel Egress Endpoint sub-TLV contains an IPv4 or IPv6 address that is valid but not reachable, the sub-TLV is not considered to be malformed.¶ 3.1.1. Validating the Address Subfield This section provides a procedure that MAY be applied to validate that the IP address in the sub-TLV's Address subfield belongs to the AS that originated the route that contains the attribute. (The notion of \"belonging to\" an AS is expanded on below.) Doing this is thought to increase confidence that when traffic is sent to the IP address depicted in the Address subfield, it will go to the same AS as it would go to if the Tunnel Encapsulation attribute were not present, although of course it cannot guarantee it. See Section 15 for discussion of the limitations of this procedure. The principal applicability of this procedure is in deployments that are not strictly scoped. In deployments with strict scope, and especially those scoped to a single AS, these procedures may not add substantial benefit beyond those discussed in Section 11.¶ The Route Origin Autonomous System Number (ASN) of a BGP route that includes a Tunnel Encapsulation attribute can be determined by inspection of the AS_PATH attribute, according to the procedure specified in [RFC6811], Section 2. Call this value Route_AS.¶ In order to determine the Route Origin ASN of the address depicted in the Address subfield of the Tunnel Egress Endpoint sub-TLV, it is necessary to consider the forwarding route -- that is, the route that will be used to forward traffic toward that address. This route is determined by a recursive route-lookup operation for that address, as discussed in [RFC4271], Section 5.1.3. The relevant AS path to consider is the last one encountered while performing the recursive lookup; the procedures of [RFC6811], Section 2 are applied to that AS path to determine the Route Origin ASN. If no AS path is encountered at all, for example, if that route's source is a protocol other than BGP, the Route Origin ASN is the BGP speaker's own AS number. Call this value Egress_AS.¶ If Route_AS does not equal Egress_AS, then the Tunnel Egress Endpoint sub-TLV is considered not to be valid. In some cases, a network operator who controls a set of ASes might wish to allow a tunnel egress endpoint to reside in an AS other than Route_AS; configuration MAY allow for such a case, in which case the check becomes: if Egress_AS is not within the configured set of permitted AS numbers, then the Tunnel Egress Endpoint sub-TLV is considered to be \"malformed\".¶ Note that if the forwarding route changes, this procedure MUST be reapplied. As a result, a sub-TLV that was formerly considered valid might become not valid, or vice versa.¶ 3.2. Encapsulation Sub-TLVs for Particular Tunnel Types (Type Code 1) This section defines Encapsulation sub-TLVs for the following tunnel types: VXLAN [RFC7348], NVGRE [RFC7637], MPLS-in-GRE [RFC4023], L2TPv3 [RFC3931], and GRE [RFC2784].¶ Rules for forming the encapsulation based on the information in a given TLV are given in Sections 6 and 9.¶ Recall that the tunnel type itself is identified by the Tunnel Type field in the attribute header (Section 2); the Encapsulation sub-TLV's structure is inferred from this. Regardless of the tunnel type, the sub-TLV type of the Encapsulation sub-TLV is 1. There are also tunnel types for which it is not necessary to define an Encapsulation sub-TLV, because there are no fields in the encapsulation header whose values need to be signaled from the tunnel egress endpoint.¶ 3.2.1. VXLAN (Tunnel Type 8) This document defines an Encapsulation sub-TLV for VXLAN [RFC7348] tunnels. When the tunnel type is VXLAN, the length of the sub-TLV is 12 octets. The structure of the Value field in the Encapsulation sub-TLV is shown in Figure 4.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |V|M|R|R|R|R|R|R| VN-ID (3 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | MAC Address (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | MAC Address (2 octets) | Reserved (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 4: VXLAN Encapsulation Sub-TLV Value Field V: This bit is set to 1 to indicate that a Virtual Network Identifier (VN-ID) is present in the Encapsulation sub-TLV. If set to 0, the VN-ID field is disregarded. Please see Section 9.¶ M: This bit is set to 1 to indicate that a Media Access Control (MAC) Address is present in the Encapsulation sub-TLV. If set to 0, the MAC Address field is disregarded.¶ R: The remaining bits in the 8-bit Flags field are reserved for further use. They MUST always be set to 0 by the originator of the sub-TLV. Intermediate routers MUST propagate them without modification. Any receiving routers MUST ignore these bits upon receipt.¶ VN-ID: If the V bit is set to 1, the VN-ID field contains a 3-octet VN-ID value. If the V bit is set to 0, the VN-ID field MUST be set to zero on transmission and disregarded on receipt.¶ MAC Address: If the M bit is set to 1, this field contains a 6-octet Ethernet MAC address. If the M bit is set to 0, this field MUST be set to all zeroes on transmission and disregarded on receipt.¶ Reserved: MUST be set to zero on transmission and disregarded on receipt.¶ When forming the VXLAN encapsulation header:¶ The values of the V, M, and R bits are NOT copied into the Flags field of the VXLAN header. The Flags field of the VXLAN header is set as per [RFC7348].¶ If the M bit is set to 1, the MAC Address is copied into the Inner Destination MAC Address field of the Inner Ethernet Header (see Section 5 of [RFC7348]).¶ If the M bit is set to 0, and the payload being sent through the VXLAN tunnel is an Ethernet frame, the Destination MAC Address field of the Inner Ethernet Header is just the Destination MAC Address field of the payload's Ethernet header.¶ If the M bit is set to 0, and the payload being sent through the VXLAN tunnel is an IP or MPLS packet, the Inner Destination MAC Address field is set to a configured value; if there is no configured value, the VXLAN tunnel cannot be used.¶ If the V bit is set to 0, and the BGP UPDATE message has an AFI/SAFI other than Ethernet VPNs (SAFI 70, \"BGP EVPNs\"), then the VXLAN tunnel cannot be used.¶ Section 9 describes how the VNI (VXLAN Network Identifier) field of the VXLAN encapsulation header is set.¶ Note that in order to send an IP packet or an MPLS packet through a VXLAN tunnel, the packet must first be encapsulated in an Ethernet header, which becomes the \"Inner Ethernet Header\" described in [RFC7348]. The VXLAN Encapsulation sub-TLV may contain information (for example, the MAC address) that is used to form this Ethernet header.¶ 3.2.2. NVGRE (Tunnel Type 9) This document defines an Encapsulation sub-TLV for NVGRE [RFC7637] tunnels. When the tunnel type is NVGRE, the length of the sub-TLV is 12 octets. The structure of the Value field in the Encapsulation sub-TLV is shown in Figure 5.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |V|M|R|R|R|R|R|R| VN-ID (3 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | MAC Address (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | MAC Address (2 octets) | Reserved (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 5: NVGRE Encapsulation Sub-TLV Value Field V: This bit is set to 1 to indicate that a VN-ID is present in the Encapsulation sub-TLV. If set to 0, the VN-ID field is disregarded. Please see Section 9.¶ M: This bit is set to 1 to indicate that a MAC Address is present in the Encapsulation sub-TLV. If set to 0, the MAC Address field is disregarded.¶ R: The remaining bits in the 8-bit Flags field are reserved for further use. They MUST always be set to 0 by the originator of the sub-TLV. Intermediate routers MUST propagate them without modification. Any receiving routers MUST ignore these bits upon receipt.¶ VN-ID: If the V bit is set to 1, the VN-ID field contains a 3-octet VN-ID value, used to set the NVGRE Virtual Subnet Identifier (VSID; see Section 9). If the V bit is set to 0, the VN-ID field MUST be set to zero on transmission and disregarded on receipt.¶ MAC Address: If the M bit is set to 1, this field contains a 6-octet Ethernet MAC address. If the M bit is set to 0, this field MUST be set to all zeroes on transmission and disregarded on receipt.¶ Reserved: MUST be set to zero on transmission and disregarded on receipt.¶ When forming the NVGRE encapsulation header:¶ The values of the V, M, and R bits are NOT copied into the Flags field of the NVGRE header. The Flags field of the NVGRE header is set as per [RFC7637].¶ If the M bit is set to 1, the MAC Address is copied into the Inner Destination MAC Address field of the Inner Ethernet Header (see Section 3.2 of [RFC7637]).¶ If the M bit is set to 0, and the payload being sent through the NVGRE tunnel is an Ethernet frame, the Destination MAC Address field of the Inner Ethernet Header is just the Destination MAC Address field of the payload's Ethernet header.¶ If the M bit is set to 0, and the payload being sent through the NVGRE tunnel is an IP or MPLS packet, the Inner Destination MAC Address field is set to a configured value; if there is no configured value, the NVGRE tunnel cannot be used.¶ If the V bit is set to 0, and the BGP UPDATE message has an AFI/SAFI other than Ethernet VPNs (EVPNs), then the NVGRE tunnel cannot be used.¶ Section 9 describes how the VSID field of the NVGRE encapsulation header is set.¶ 3.2.3. L2TPv3 (Tunnel Type 1) When the tunnel type of the TLV is L2TPv3 over IP [RFC3931], the length of the sub-TLV is between 4 and 12 octets, depending on the length of the cookie. The structure of the Value field of the Encapsulation sub-TLV is shown in Figure 6.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Session ID (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Cookie (variable) | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 6: L2TPv3 Encapsulation Sub-TLV Value Field Session ID: A non-zero 4-octet value locally assigned by the advertising router that serves as a lookup key for the incoming packet's context.¶ Cookie: An optional, variable-length (encoded in 0 to 8 octets) value used by L2TPv3 to check the association of a received data message with the session identified by the Session ID. Generation and usage of the cookie value is as specified in [RFC3931].¶ The length of the cookie is not encoded explicitly but can be calculated as (sub-TLV length - 4).¶ 3.2.4. GRE (Tunnel Type 2) When the tunnel type of the TLV is GRE [RFC2784], the length of the sub-TLV is 4 octets. The structure of the Value field of the Encapsulation sub-TLV is shown in Figure 7.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | GRE Key (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 7: GRE Encapsulation Sub-TLV Value Field GRE Key: 4-octet field [RFC2890] that is generated by the advertising router. Note that the key is optional. Unless a key value is being advertised, the GRE Encapsulation sub-TLV MUST NOT be present.¶ 3.2.5. MPLS-in-GRE (Tunnel Type 11) When the tunnel type is MPLS-in-GRE [RFC4023], the length of the sub-TLV is 4 octets. The structure of the Value field of the Encapsulation sub-TLV is shown in Figure 8.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | GRE Key (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 8: MPLS-in-GRE Encapsulation Sub-TLV Value Field GRE Key: 4-octet field [RFC2890] that is generated by the advertising router. Note that the key is optional. Unless a key value is being advertised, the MPLS-in-GRE Encapsulation sub-TLV MUST NOT be present.¶ Note that the GRE tunnel type defined in Section 3.2.4 can be used instead of the MPLS-in-GRE tunnel type when it is necessary to encapsulate MPLS in GRE. Including a TLV of the MPLS-in-GRE tunnel type is equivalent to including a TLV of the GRE tunnel type that also includes a Protocol Type sub-TLV (Section 3.4.1) specifying MPLS as the protocol to be encapsulated.¶ Although the MPLS-in-GRE tunnel type is just a special case of the GRE tunnel type and thus is not strictly necessary, it is included for reasons of backwards compatibility with, for example, implementations of [RFC8365].¶ 3.3. Outer Encapsulation Sub-TLVs The Encapsulation sub-TLV for a particular tunnel type allows one to specify the values that are to be placed in certain fields of the encapsulation header for that tunnel type. However, some tunnel types require an outer IP encapsulation, and some also require an outer UDP encapsulation. The Encapsulation sub-TLV for a given tunnel type does not usually provide a way to specify values for fields of the outer IP and/or UDP encapsulations. If it is necessary to specify values for fields of the outer encapsulation, additional sub-TLVs must be used. This document defines two such sub-TLVs.¶ If an outer Encapsulation sub-TLV occurs in a TLV for a tunnel type that does not use the corresponding outer encapsulation, the sub-TLV MUST be treated as if it were an unrecognized type of sub-TLV.¶ 3.3.1. DS Field (Type Code 7) Most of the tunnel types that can be specified in the Tunnel Encapsulation attribute require an outer IP encapsulation. The Differentiated Services (DS) Field sub-TLV can be carried in the TLV of any such tunnel type. It specifies the setting of the one-octet Differentiated Services field in the outer IPv4 or IPv6 encapsulation (see [RFC2474]). Any one-octet value can be transported; the semantics of the DSCP (Differentiated Services Code Point) field is beyond the scope of this document. The Value field is always a single octet.¶ 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ | DS value | +-+-+-+-+-+-+-+-+ Figure 9: DS Field Sub-TLV Value Field Because the interpretation of the DSCP field at the recipient may be different from its interpretation at the originator, an implementation MAY provide a facility to use policy to filter or modify the DS field.¶ 3.3.2. UDP Destination Port (Type Code 8) Some of the tunnel types that can be specified in the Tunnel Encapsulation attribute require an outer UDP encapsulation. Generally, there is a standard UDP destination port value for a particular tunnel type. However, sometimes it is useful to be able to use a nonstandard UDP destination port. If a particular tunnel type requires an outer UDP encapsulation, and it is desired to use a UDP destination port other than the standard one, the port to be used can be specified by including a UDP Destination Port sub-TLV. The Value field of this sub-TLV is always a two-octet field, containing the port value. Any two-octet value other than zero can be transported. If the reserved value zero is received, the sub-TLV MUST be treated as malformed, according to the rules of Section 13.¶ 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | UDP Port (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 10: UDP Destination Port Sub-TLV Value Field 3.4. Sub-TLVs for Aiding Tunnel Selection 3.4.1. Protocol Type Sub-TLV (Type Code 2) The Protocol Type sub-TLV MAY be included in a given TLV to indicate the type of the payload packets that are allowed to be encapsulated with the tunnel parameters that are being signaled in the TLV. Packets with other payload types MUST NOT be encapsulated in the relevant tunnel. The Value field of the sub-TLV contains a 2-octet value from IANA's \"ETHER TYPES\" registry [IANA-ETHERTYPES]. If the reserved value 0xFFFF is received, the sub-TLV MUST be treated as malformed according to the rules of Section 13.¶ 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Ethertype (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 11: Protocol Type Sub-TLV Value Field For example, if there are three L2TPv3 sessions, one carrying IPv4 packets, one carrying IPv6 packets, and one carrying MPLS packets, the egress router will include three TLVs of L2TPv3 encapsulation type, each specifying a different Session ID and a different payload type. The Protocol Type sub-TLV for these will be IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847), respectively. This informs the ingress routers of the appropriate encapsulation information to use with each of the given protocol types. Insertion of the specified Session ID at the ingress routers allows the egress to process the incoming packets correctly, according to their protocol type.¶ Note that for tunnel types whose names are of the form \"X-in-Y\" (for example, MPLS-in-GRE), only packets of the specified payload type \"X\" are to be carried through the tunnel of type \"Y\". This is the equivalent of specifying a tunnel type \"Y\" and including in its TLV a Protocol Type sub-TLV (see Section 3.4.1) specifying protocol \"X\". If the tunnel type is \"X-in-Y\", it is unnecessary, though harmless, to explicitly include a Protocol Type sub-TLV specifying \"X\". Also, for \"X-in-Y\" type tunnels, a Protocol Type sub-TLV specifying anything other than \"X\" MUST be ignored; this is discussed further in Section 13.¶ 3.4.2. Color Sub-TLV (Type Code 4) The Color sub-TLV MAY be used as a way to \"color\" the corresponding Tunnel TLV. The Value field of the sub-TLV is eight octets long and consists of a Color Extended Community, as defined in Section 4.3. For the use of this sub-TLV and extended community, please see Section 8.¶ The format of the Value field is depicted in Figure 15.¶ If the Length field of a Color sub-TLV has a value other than 8, or the first two octets of its Value field are not 0x030b, the sub-TLV MUST be treated as if it were an unrecognized sub-TLV (see Section 13).¶ 3.5. Embedded Label Handling Sub-TLV (Type Code 9) Certain BGP address families (corresponding to particular AFI/SAFI pairs, for example, 1/4, 2/4, 1/128, 2/128) have MPLS labels embedded in their NLRIs. The term \"embedded label\" is used to refer to the MPLS label that is embedded in an NLRI, and the term \"labeled address family\" to refer to any AFI/SAFI that has embedded labels.¶ Some of the tunnel types (for example, VXLAN and NVGRE) that can be specified in the Tunnel Encapsulation attribute have an encapsulation header containing a virtual network identifier of some sort. The Encapsulation sub-TLVs for these tunnel types may optionally specify a value for the virtual network identifier.¶ Suppose a Tunnel Encapsulation attribute is attached to an UPDATE of a labeled address family, and it is decided to use a particular tunnel (specified in one of the attribute's TLVs) for transmitting a packet that is being forwarded according to that UPDATE. When forming the encapsulation header for that packet, different deployment scenarios require different handling of the embedded label and/or the virtual network identifier. The Embedded Label Handling sub-TLV can be used to control the placement of the embedded label and/or the virtual network identifier in the encapsulation.¶ The Embedded Label Handling sub-TLV may be included in any TLV of the Tunnel Encapsulation attribute. If the Tunnel Encapsulation attribute is attached to an UPDATE of a non-labeled address family, then the sub-TLV MUST be disregarded. If the sub-TLV is contained in a TLV whose tunnel type does not have a virtual network identifier in its encapsulation header, the sub-TLV MUST be disregarded. In those cases where the sub-TLV is ignored, it MUST NOT be stripped from the TLV before the route is propagated.¶ The sub-TLV's Length field always contains the value 1, and its Value field consists of a single octet. The following values are defined:¶ 1: The payload will be an MPLS packet with the embedded label at the top of its label stack.¶ 2: The embedded label is not carried in the payload but is either carried in the Virtual Network Identifier field of the encapsulation header or else ignored entirely.¶ If any value other than 1 or 2 is carried, the sub-TLV MUST be considered malformed, according to the procedures of Section 13.¶ Please see Section 9 for the details of how this sub-TLV is used when it is carried by an UPDATE of a labeled address family.¶ 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ | 1 or 2 | +-+-+-+-+-+-+-+-+ Figure 12: Embedded Label Handling Sub-TLV Value Field 3.6. MPLS Label Stack Sub-TLV (Type Code 10) This sub-TLV allows an MPLS label stack [RFC3032] to be associated with a particular tunnel.¶ The length of the sub-TLV is a multiple of 4 octets, and the Value field of this sub-TLV is a sequence of MPLS label stack entries. The first entry in the sequence is the \"topmost\" label, and the final entry in the sequence is the \"bottommost\" label. When this label stack is pushed onto a packet, this ordering MUST be preserved.¶ Each label stack entry has the format shown in Figure 13. 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Label | TC |S| TTL | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 13: MPLS Label Stack Sub-TLV Value Field The fields are as defined in [RFC3032] and [RFC5462].¶ If a packet is to be sent through the tunnel identified in a particular TLV, and if that TLV contains an MPLS Label Stack sub-TLV, then the label stack appearing in the sub-TLV MUST be pushed onto the packet before any other labels are pushed onto the packet. (See Section 6 for further discussion.)¶ In particular, if the Tunnel Encapsulation attribute is attached to a BGP UPDATE of a labeled address family, the contents of the MPLS Label Stack sub-TLV MUST be pushed onto the packet before the label embedded in the NLRI is pushed onto the packet.¶ If the MPLS Label Stack sub-TLV is included in a TLV identifying a tunnel type that uses virtual network identifiers (see Section 9), the contents of the MPLS Label Stack sub-TLV MUST be pushed onto the packet before the procedures of Section 9 are applied.¶ The number of label stack entries in the sub-TLV MUST be determined from the Sub-TLV Length field. Thus, it is not necessary to set the S bit in any of the label stack entries of the sub-TLV, and the setting of the S bit is ignored when parsing the sub-TLV. When the label stack entries are pushed onto a packet that already has a label stack, the S bits of all the entries being pushed MUST be cleared. When the label stack entries are pushed onto a packet that does not already have a label stack, the S bit of the bottommost label stack entry MUST be set, and the S bit of all the other label stack entries MUST be cleared.¶ The Traffic Class (TC) field [RFC3270][RFC5129] of each label stack entry SHOULD be set to 0, unless changed by policy at the originator of the sub-TLV. When pushing the label stack onto a packet, the TC of each label stack SHOULD be preserved, unless local policy results in a modification.¶ The TTL (Time to Live) field of each label stack entry SHOULD be set to 255, unless changed to some other non-zero value by policy at the originator of the sub-TLV. When pushing the label stack onto a packet, the TTL of each label stack entry SHOULD be preserved, unless local policy results in a modification to some other non-zero value. If any label stack entry in the sub-TLV has a TTL value of zero, the router that is pushing the stack onto a packet MUST change the value to a non-zero value, either 255 or some other value as determined by policy as discussed above.¶ Note that this sub-TLV can appear within a TLV identifying any type of tunnel, not just within a TLV identifying an MPLS tunnel. However, if this sub-TLV appears within a TLV identifying an MPLS tunnel (or an MPLS-in-X tunnel), this sub-TLV plays the same role that would be played by an MPLS Encapsulation sub-TLV. Therefore, an MPLS Encapsulation sub-TLV is not defined.¶ Although this specification does not supply detailed instructions for validating the received label stack, implementations might impose restrictions on the label stack they can support. If an invalid or unsupported label stack is received, the tunnel MAY be treated as not feasible, according to the procedures of Section 6.¶ 3.7. Prefix-SID Sub-TLV (Type Code 11) [RFC8669] defines a BGP path attribute known as the \"BGP Prefix-SID attribute\". This attribute is defined to contain a sequence of one or more TLVs, where each TLV is either a Label-Index TLV or an Originator SRGB (Source Routing Global Block) TLV.¶ This document defines a Prefix-SID (Prefix Segment Identifier) sub-TLV. The Value field of the Prefix-SID sub-TLV can be set to any permitted value of the Value field of a BGP Prefix-SID attribute [RFC8669].¶ [RFC8669] only defines behavior when the BGP Prefix-SID attribute is attached to routes of type IPv4/IPv6 Labeled Unicast [RFC4760][RFC8277], and it only defines values of the BGP Prefix-SID attribute for those cases. Therefore, similar limitations exist for the Prefix-SID sub-TLV: it SHOULD only be included in a BGP UPDATE message for one of the address families for which [RFC8669] has a defined behavior, namely BGP IPv4/IPv6 Labeled Unicast [RFC4760] [RFC8277]. If included in a BGP UPDATE for any other address family, it MUST be ignored.¶ The Prefix-SID sub-TLV can occur in a TLV identifying any type of tunnel. If an Originator SRGB is specified in the sub-TLV, that SRGB MUST be interpreted to be the SRGB used by the tunnel's egress endpoint. The Label-Index, if present, is the Segment Routing SID that the tunnel's egress endpoint uses to represent the prefix appearing in the NLRI field of the BGP UPDATE to which the Tunnel Encapsulation attribute is attached.¶ If a Label-Index is present in the Prefix-SID sub-TLV, then when a packet is sent through the tunnel identified by the TLV, if that tunnel is from a labeled address family, the corresponding MPLS label MUST be pushed on the packet's label stack. The corresponding MPLS label is computed from the Label-Index value and the SRGB of the route's originator, as specified in Section 4.1 of [RFC8669].¶ The corresponding MPLS label is pushed on after the processing of the MPLS Label Stack sub-TLV, if present, as specified in Section 3.6. It is pushed on before any other labels (for example, a label embedded in an UPDATE's NLRI or a label determined by the procedures of Section 9) are pushed on the stack.¶ The Prefix-SID sub-TLV has slightly different semantics than the BGP Prefix-SID attribute. When the BGP Prefix-SID attribute is attached to a given route, the BGP speaker that originally attached the attribute is expected to be in the same Segment Routing domain as the BGP speakers who receive the route with the attached attribute. The Label-Index tells the receiving BGP speakers what the Prefix-SID is for the advertised prefix in that Segment Routing domain. When the Prefix-SID sub-TLV is used, there is no implication that the Prefix-SID for the advertised prefix is the same in the Segment Routing domains of the BGP speaker that originated the sub-TLV and the BGP speaker that received it.¶ 4. Extended Communities Related to the Tunnel Encapsulation Attribute 4.1. Encapsulation Extended Community The Encapsulation Extended Community is a Transitive Opaque Extended Community.¶ The Encapsulation Extended Community encoding is as shown in Figure 14.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 0x03 (1 octet)| 0x0c (1 octet)| Reserved (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved (2 octets) | Tunnel Type (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 14: Encapsulation Extended Community The value of the high-order octet of the extended Type field is 0x03, which indicates it's transitive. The value of the low-order octet of the extended Type field is 0x0c.¶ The last two octets of the Value field encode a tunnel type.¶ This extended community may be attached to a route of any AFI/SAFI to which the Tunnel Encapsulation attribute may be attached. Each such extended community identifies a particular tunnel type; its semantics are the same as semantics of a Tunnel TLV in a Tunnel Encapsulation attribute, for which the following three conditions all hold:¶ It identifies the same tunnel type.¶ It has a Tunnel Egress Endpoint sub-TLV for which one of the following two conditions holds:¶ Its Address Family subfield contains zero, or¶ Its Address subfield contains the address of the Next Hop field of the route to which the Tunnel Encapsulation attribute is attached.¶ It has no other sub-TLVs.¶ Such a Tunnel TLV is called a \"barebones\" Tunnel TLV.¶ The Encapsulation Extended Community was first defined in [RFC5512]. While it provides only a small subset of the functionality of the Tunnel Encapsulation attribute, it is used in a number of deployed applications and is still needed for backwards compatibility. In situations where a tunnel could be encoded using a barebones TLV, it MUST be encoded using the corresponding Encapsulation Extended Community. Notwithstanding, an implementation MUST be prepared to process a tunnel received encoded as a barebones TLV.¶ Note that for tunnel types of the form \"X-in-Y\" (for example, MPLS-in-GRE), the Encapsulation Extended Community implies that only packets of the specified payload type \"X\" are to be carried through the tunnel of type \"Y\". Packets with other payload types MUST NOT be carried through such tunnels. See also Section 2.¶ In the remainder of this specification, when a route is referred to as containing a Tunnel Encapsulation attribute with a TLV identifying a particular tunnel type, it implicitly includes the case where the route contains an Encapsulation Extended Community identifying that tunnel type.¶ 4.2. Router's MAC Extended Community [EVPN-INTER-SUBNET] defines a router's MAC Extended Community. This extended community, as its name implies, carries the MAC address of the advertising router. Since the VXLAN and NVGRE Encapsulation sub-TLVs can also optionally carry a router's MAC, a conflict can arise if both the Router's MAC Extended Community and such an Encapsulation sub-TLV are present at the same time but have different values. In case of such a conflict, the information in the Router's MAC Extended Community MUST be used.¶ 4.3. Color Extended Community The Color Extended Community is a Transitive Opaque Extended Community with the encoding shown in Figure 15.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 0x03 (1 octet)| 0x0b (1 octet)| Flags (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Color Value (4 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 15: Color Extended Community The value of the high-order octet of the extended Type field is 0x03, which indicates it is transitive. The value of the low-order octet of the extended Type field for this community is 0x0b. The color value is user defined and configured locally. No flags are defined in this document; this field MUST be set to zero by the originator and ignored by the receiver; the value MUST NOT be changed when propagating this extended community. The Color Value field is encoded as a 4-octet value by the administrator and is outside the scope of this document. For the use of this extended community, please see Section 8.¶ 5. Special Considerations for IP-in-IP Tunnels In certain situations with an IP fabric underlay, one could have a tunnel overlay with the tunnel type IP-in-IP. The egress BGP speaker can advertise the IP-in-IP tunnel endpoint address in the Tunnel Egress Endpoint sub-TLV. When the tunnel type of the TLV is IP-in-IP, it will not have a virtual network identifier. However, the tunnel egress endpoint address can be used in identifying the forwarding table to use for making the forwarding decisions to forward the payload.¶ 6. Semantics and Usage of the Tunnel Encapsulation Attribute The BGP Tunnel Encapsulation attribute MAY be carried in any BGP UPDATE message whose AFI/SAFI is 1/1 (IPv4 Unicast), 2/1 (IPv6 Unicast), 1/4 (IPv4 Labeled Unicast), 2/4 (IPv6 Labeled Unicast), 1/128 (VPN-IPv4 Labeled Unicast), 2/128 (VPN-IPv6 Labeled Unicast), or 25/70 (Ethernet VPN, usually known as EVPN). Use of the Tunnel Encapsulation attribute in BGP UPDATE messages of other AFI/SAFIs is outside the scope of this document.¶ There is no significance to the order in which the TLVs occur within the Tunnel Encapsulation attribute. Multiple TLVs may occur for a given tunnel type; each such TLV is regarded as describing a different tunnel. (This also applies if the Encapsulation Extended Community encoding is used.)¶ The decision to attach a Tunnel Encapsulation attribute to a given BGP UPDATE is determined by policy. The set of TLVs and sub-TLVs contained in the attribute is also determined by policy.¶ Suppose that:¶ a given packet P must be forwarded by router R;¶ the path along which P is to be forwarded is determined by BGP UPDATE U;¶ UPDATE U has a Tunnel Encapsulation attribute, containing at least one TLV that identifies a \"feasible tunnel\" for packet P. A tunnel is considered feasible if it has the following four properties:¶ The tunnel type is supported (that is, router R knows how to set up tunnels of that type, how to create the encapsulation header for tunnels of that type, etc.).¶ The tunnel is of a type that can be used to carry packet P (for example, an MPLS-in-UDP tunnel would not be a feasible tunnel for carrying an IP packet, unless the IP packet can first be encapsulated in a MPLS packet).¶ The tunnel is specified in a TLV whose Tunnel Egress Endpoint sub-TLV identifies an IP address that is reachable. The reachability condition is evaluated as per [RFC4271]. If the IP address is reachable via more than one forwarding table, local policy is used to determine which table to use.¶ There is no local policy that prevents the use of the tunnel.¶ Then router R MUST send packet P through one of the feasible tunnels identified in the Tunnel Encapsulation attribute of UPDATE U.¶ If the Tunnel Encapsulation attribute contains several TLVs (that is, if it specifies several feasible tunnels), router R may choose any one of those tunnels, based upon local policy. If any Tunnel TLV contains one or more Color sub-TLVs (Section 3.4.2) and/or the Protocol Type sub-TLV (Section 3.4.1), the choice of tunnel may be influenced by these sub-TLVs. Many other factors, for example, minimization of encapsulation-header overhead, could also be used to influence selection.¶ The reachability to the address of the egress endpoint of the tunnel may change over time, directly impacting the feasibility of the tunnel. A tunnel that is not feasible at some moment may become feasible at a later time when its egress endpoint address is reachable. The router may start using the newly feasible tunnel instead of an existing one. How this decision is made is outside the scope of this document.¶ Once it is determined to send a packet through the tunnel specified in a particular Tunnel TLV of a particular Tunnel Encapsulation attribute, then the tunnel's egress endpoint address is the IP address contained in the Tunnel Egress Endpoint sub-TLV. If the Tunnel TLV contains a Tunnel Egress Endpoint sub-TLV whose Value field is all zeroes, then the tunnel's egress endpoint is the address of the next hop of the BGP UPDATE containing the Tunnel Encapsulation attribute (that is, the Network Address of Next Hop field of the MP_REACH_NLRI attribute if the encoding of [RFC4760] is in use or the NEXT_HOP attribute otherwise). The address of the tunnel egress endpoint generally appears in a Destination Address field of the encapsulation.¶ The full set of procedures for sending a packet through a particular tunnel type to a particular tunnel egress endpoint depends upon the tunnel type and is outside the scope of this document. Note that some tunnel types may require the execution of an explicit tunnel setup protocol before they can be used for carrying data. Other tunnel types may not require any tunnel setup protocol.¶ Sending a packet through a tunnel always requires that the packet be encapsulated, with an encapsulation header that is appropriate for the tunnel type. The contents of the tunnel encapsulation header may be influenced by the Encapsulation sub-TLV. If there is no Encapsulation sub-TLV present, the router transmitting the packet through the tunnel must have a priori knowledge (for example, by provisioning) of how to fill in the various fields in the encapsulation header.¶ A Tunnel Encapsulation attribute may contain several TLVs that all specify the same tunnel type. Each TLV should be considered as specifying a different tunnel. Two tunnels of the same type may have different Tunnel Egress Endpoint sub-TLVs, different Encapsulation sub-TLVs, etc. Choosing between two such tunnels is a matter of local policy.¶ Once router R has decided to send packet P through a particular tunnel, it encapsulates packet P appropriately and then forwards it according to the route that leads to the tunnel's egress endpoint. This route may itself be a BGP route with a Tunnel Encapsulation attribute. If so, the encapsulated packet is treated as the payload and encapsulated according to the Tunnel Encapsulation attribute of that route. That is, tunnels may be \"stacked\".¶ Notwithstanding anything said in this document, a BGP speaker MAY have local policy that influences the choice of tunnel and the way the encapsulation is formed. A BGP speaker MAY also have a local policy that tells it to ignore the Tunnel Encapsulation attribute entirely or in part. Of course, interoperability issues must be considered when such policies are put into place.¶ See also Section 13, which provides further specification regarding validation and exception cases.¶ 7. Routing Considerations 7.1. Impact on the BGP Decision Process The presence of the Tunnel Encapsulation attribute affects the BGP best route-selection algorithm. If a route includes the Tunnel Encapsulation attribute, and if that attribute includes no tunnel that is feasible, then that route MUST NOT be considered resolvable for the purposes of the route resolvability condition ([RFC4271], Section 9.1.2.1).¶ 7.2. Looping, Mutual Recursion, Etc. Consider a packet destined for address X. Suppose a BGP UPDATE for address prefix X carries a Tunnel Encapsulation attribute that specifies a tunnel egress endpoint of Y, and suppose that a BGP UPDATE for address prefix Y carries a Tunnel Encapsulation attribute that specifies a tunnel egress endpoint of X. It is easy to see that this can have no good outcome. [RFC4271] describes an analogous case as mutually recursive routes.¶ This could happen as a result of misconfiguration, either accidental or intentional. It could also happen if the Tunnel Encapsulation attribute were altered by a malicious agent. Implementations should be aware that such an attack will result in unresolvable BGP routes due to the mutually recursive relationship. This document does not specify a maximum number of recursions; that is an implementation-specific matter.¶ Improper setting (or malicious altering) of the Tunnel Encapsulation attribute could also cause data packets to loop. Suppose a BGP UPDATE for address prefix X carries a Tunnel Encapsulation attribute that specifies a tunnel egress endpoint of Y. Suppose router R receives and processes the advertisement. When router R receives a packet destined for X, it will apply the encapsulation and send the encapsulated packet to Y. Y will decapsulate the packet and forward it further. If Y is further away from X than is router R, it is possible that the path from Y to X will traverse R. This would cause a long-lasting routing loop. The control plane itself cannot detect this situation, though a TTL field in the payload packets would prevent any given packet from looping infinitely.¶ During the deployment of techniques described in this document, operators are encouraged to avoid mutually recursive route and/or tunnel dependencies. There is greater potential for such scenarios to arise when the tunnel egress endpoint for a given prefix differs from the address of the next hop for that prefix.¶ 8. Recursive Next-Hop Resolution Suppose that:¶ a given packet P must be forwarded by router R1;¶ the path along which P is to be forwarded is determined by BGP UPDATE U1;¶ UPDATE U1 does not have a Tunnel Encapsulation attribute;¶ the address of the next hop of UPDATE U1 is router R2;¶ the best route to router R2 is a BGP route that was advertised in UPDATE U2; and¶ UPDATE U2 has a Tunnel Encapsulation attribute.¶ Then packet P MUST be sent through one of the tunnels identified in the Tunnel Encapsulation attribute of UPDATE U2. See Section 6 for further details.¶ However, suppose that one of the TLVs in U2's Tunnel Encapsulation attribute contains one or more Color sub-TLVs. In that case, packet P MUST NOT be sent through the tunnel contained in that TLV, unless U1 is carrying a Color Extended Community that is identified in one of U2's Color sub-TLVs.¶ The procedures in this section presuppose that U1's address of the next hop resolves to a BGP route, and that U2's next hop resolves (perhaps after further recursion) to a non-BGP route.¶ 9. Use of Virtual Network Identifiers and Embedded Labels When Imposing a Tunnel Encapsulation If the TLV specifying a tunnel contains an MPLS Label Stack sub-TLV, then when sending a packet through that tunnel, the procedures of Section 3.6 are applied before the procedures of this section.¶ If the TLV specifying a tunnel contains a Prefix-SID sub-TLV, the procedures of Section 3.7 are applied before the procedures of this section. If the TLV also contains an MPLS Label Stack sub-TLV, the procedures of Section 3.6 are applied before the procedures of Section 3.7.¶ 9.1. Tunnel Types without a Virtual Network Identifier Field If a Tunnel Encapsulation attribute is attached to an UPDATE of a labeled address family, there will be one or more labels specified in the UPDATE's NLRI. When a packet is sent through a tunnel specified in one of the attribute's TLVs, and that tunnel type does not contain a Virtual Network Identifier field, the label or labels from the NLRI are pushed on the packet's label stack. The resulting MPLS packet is then further encapsulated, as specified by the TLV.¶ 9.2. Tunnel Types with a Virtual Network Identifier Field Two of the tunnel types that can be specified in a Tunnel Encapsulation TLV have Virtual Network Identifier fields in their encapsulation headers. In the VXLAN encapsulation, this field is called the VNI (VXLAN Network Identifier) field; in the NVGRE encapsulation, this field is called the VSID (Virtual Subnet Identifier) field.¶ When one of these tunnel encapsulations is imposed on a packet, the setting of the Virtual Network Identifier field in the encapsulation header depends upon the contents of the Encapsulation sub-TLV (if one is present). When the Tunnel Encapsulation attribute is being carried in a BGP UPDATE of a labeled address family, the setting of the Virtual Network Identifier field also depends upon the contents of the Embedded Label Handling sub-TLV (if present).¶ This section specifies the procedures for choosing the value to set in the Virtual Network Identifier field of the encapsulation header. These procedures apply only when the tunnel type is VXLAN or NVGRE.¶ 9.2.1. Unlabeled Address Families This subsection applies when:¶ the Tunnel Encapsulation attribute is carried in a BGP UPDATE of an unlabeled address family,¶ at least one of the attribute's TLVs identifies a tunnel type that uses a virtual network identifier, and¶ it has been determined to send a packet through one of those tunnels.¶ If the TLV identifying the tunnel contains an Encapsulation sub-TLV whose V bit is set to 1, the Virtual Network Identifier field of the encapsulation header is set to the value of the Virtual Network Identifier field of the Encapsulation sub-TLV.¶ Otherwise, the Virtual Network Identifier field of the encapsulation header is set to a configured value; if there is no configured value, the tunnel cannot be used.¶ 9.2.2. Labeled Address Families This subsection applies when:¶ the Tunnel Encapsulation attribute is carried in a BGP UPDATE of a labeled address family,¶ at least one of the attribute's TLVs identifies a tunnel type that uses a virtual network identifier, and¶ it has been determined to send a packet through one of those tunnels.¶ 9.2.2.1. When a Valid VNI Has Been Signaled If the TLV identifying the tunnel contains an Encapsulation sub-TLV whose V bit is set to 1, the Virtual Network Identifier field of the encapsulation header is set to the value of the Virtual Network Identifier field of the Encapsulation sub-TLV. However, the Embedded Label Handling sub-TLV will determine label processing as described below.¶ If the TLV contains an Embedded Label Handling sub-TLV whose value is 1, the embedded label (from the NLRI of the route that is carrying the Tunnel Encapsulation attribute) appears at the top of the MPLS label stack in the encapsulation payload.¶ If the TLV does not contain an Embedded Label Handling sub-TLV, or it contains an Embedded Label Handling sub-TLV whose value is 2, the embedded label is ignored entirely.¶ 9.2.2.2. When a Valid VNI Has Not Been Signaled If the TLV identifying the tunnel does not contain an Encapsulation sub-TLV whose V bit is set to 1, the Virtual Network Identifier field of the encapsulation header is set as follows:¶ If the TLV contains an Embedded Label Handling sub-TLV whose value is 1, then the Virtual Network Identifier field of the encapsulation header is set to a configured value.¶ If there is no configured value, the tunnel cannot be used.¶ The embedded label (from the NLRI of the route that is carrying the Tunnel Encapsulation attribute) appears at the top of the MPLS label stack in the encapsulation payload.¶ If the TLV does not contain an Embedded Label Handling sub-TLV, or if it contains an Embedded Label Handling sub-TLV whose value is 2, the embedded label is copied into the lower 3 octets of the Virtual Network Identifier field of the encapsulation header.¶ In this case, the payload may or may not contain an MPLS label stack, depending upon other factors. If the payload does contain an MPLS label stack, the embedded label does not appear in that stack.¶ 10. Applicability Restrictions In a given UPDATE of a labeled address family, the label embedded in the NLRI is generally a label that is meaningful only to the router represented by the address of the next hop. Certain of the procedures of Sections 9.2.2.1 or 9.2.2.2 cause the embedded label to be carried by a data packet to the router whose address appears in the Tunnel Egress Endpoint sub-TLV. If the Tunnel Egress Endpoint sub-TLV does not identify the same router represented by the address of the next hop, sending the packet through the tunnel may cause the label to be misinterpreted at the tunnel's egress endpoint. This may cause misdelivery of the packet. Avoidance of this unfortunate outcome is a matter of network planning and design and is outside the scope of this document.¶ Note that if the Tunnel Encapsulation attribute is attached to a VPN- IP route [RFC4364], if Inter-AS \"option b\" (see Section 10 of [RFC4364]) is being used, and if the Tunnel Egress Endpoint sub-TLV contains an IP address that is not in the same AS as the router receiving the route, it is very likely that the embedded label has been changed. Therefore, use of the Tunnel Encapsulation attribute in an \"Inter-AS option b\" scenario is not recommended.¶ Other documents may define other ways to signal tunnel information in BGP. For example, [RFC6514] defines the \"P-Multicast Service Interface Tunnel\" (PMSI Tunnel) attribute. In this specification, we do not consider the effects of advertising the Tunnel Encapsulation attribute in conjunction with other forms of signaling tunnels. Any document specifying such joint use MUST provide details as to how interactions should be handled.¶ 11. Scoping The Tunnel Encapsulation attribute is defined as a transitive attribute, so that it may be passed along by BGP speakers that do not recognize it. However, the Tunnel Encapsulation attribute MUST be used only within a well-defined scope, for example, within a set of ASes that belong to a single administrative entity. If the attribute is distributed beyond its intended scope, packets may be sent through tunnels in a manner that is not intended.¶ To prevent the Tunnel Encapsulation attribute from being distributed beyond its intended scope, any BGP speaker that understands the attribute MUST be able to filter the attribute from incoming BGP UPDATE messages. When the attribute is filtered from an incoming UPDATE, the attribute is neither processed nor distributed. This filtering SHOULD be possible on a per-BGP-session basis; finer granularities (for example, per route and/or per attribute TLV) MAY be supported. For each external BGP (EBGP) session, filtering of the attribute on incoming UPDATEs MUST be enabled by default.¶ In addition, any BGP speaker that understands the attribute MUST be able to filter the attribute from outgoing BGP UPDATE messages. This filtering SHOULD be possible on a per-BGP-session basis. For each EBGP session, filtering of the attribute on outgoing UPDATEs MUST be enabled by default.¶ Since the Encapsulation Extended Community provides a subset of the functionality of the Tunnel Encapsulation attribute, these considerations apply equally in its case:¶ Any BGP speaker that understands it MUST be able to filter it from incoming BGP UPDATE messages.¶ It MUST be possible to filter the Encapsulation Extended Community from outgoing messages.¶ In both cases, this filtering MUST be enabled by default for EBGP sessions.¶ 12. Operational Considerations A potential operational difficulty arises when tunnels are used, if the size of packets entering the tunnel exceeds the maximum transmission unit (MTU) the tunnel is capable of supporting. This difficulty can be exacerbated by stacking multiple tunnels, since each stacked tunnel header further reduces the supportable MTU. This issue is long-standing and well-known. The tunnel signaling provided in this specification does nothing to address this issue, nor to aggravate it (except insofar as it may further increase the popularity of tunneling).¶ 13. Validation and Error Handling The Tunnel Encapsulation attribute is a sequence of TLVs, each of which is a sequence of sub-TLVs. The final octet of a TLV is determined by its Length field. Similarly, the final octet of a sub- TLV is determined by its Length field. The final octet of a TLV MUST also be the final octet of its final sub-TLV. If this is not the case, the TLV MUST be considered to be malformed, and the \"Treat-as-withdraw\" procedure of [RFC7606] is applied.¶ If a Tunnel Encapsulation attribute does not have any valid TLVs, or it does not have the transitive bit set, the \"Treat-as-withdraw\" procedure of [RFC7606] is applied.¶ If a Tunnel Encapsulation attribute can be parsed correctly but contains a TLV whose tunnel type is not recognized by a particular BGP speaker, that BGP speaker MUST NOT consider the attribute to be malformed. Rather, it MUST interpret the attribute as if that TLV had not been present. If the route carrying the Tunnel Encapsulation attribute is propagated with the attribute, the unrecognized TLV MUST remain in the attribute.¶ The following sub-TLVs defined in this document MUST NOT occur more than once in a given Tunnel TLV: Tunnel Egress Endpoint (discussed below), Encapsulation, DS, UDP Destination Port, Embedded Label Handling, MPLS Label Stack, and Prefix-SID. If a Tunnel TLV has more than one of any of these sub-TLVs, all but the first occurrence of each such sub-TLV type MUST be disregarded. However, the Tunnel TLV containing them MUST NOT be considered to be malformed, and all the sub-TLVs MUST be propagated if the route carrying the Tunnel Encapsulation attribute is propagated.¶ The following sub-TLVs defined in this document may appear zero or more times in a given Tunnel TLV: Protocol Type and Color. Each occurrence of such sub-TLVs is meaningful. For example, the Color sub-TLV may appear multiple times to assign multiple colors to a tunnel.¶ If a TLV of a Tunnel Encapsulation attribute contains a sub-TLV that is not recognized by a particular BGP speaker, the BGP speaker MUST process that TLV as if the unrecognized sub-TLV had not been present. If the route carrying the Tunnel Encapsulation attribute is propagated with the attribute, the unrecognized sub-TLV MUST remain in the attribute.¶ In general, if a TLV contains a sub-TLV that is malformed, the sub-TLV MUST be treated as if it were an unrecognized sub-TLV. There is one exception to this rule: if a TLV contains a malformed Tunnel Egress Endpoint sub-TLV (as defined in Section 3.1), the entire TLV MUST be ignored and MUST be removed from the Tunnel Encapsulation attribute before the route carrying that attribute is distributed.¶ Within a Tunnel Encapsulation attribute that is carried by a BGP UPDATE whose AFI/SAFI is one of those explicitly listed in the first paragraph of Section 6, a TLV that does not contain exactly one Tunnel Egress Endpoint sub-TLV MUST be treated as if it contained a malformed Tunnel Egress Endpoint sub-TLV.¶ A TLV identifying a particular tunnel type may contain a sub-TLV that is meaningless for that tunnel type. For example, perhaps the TLV contains a UDP Destination Port sub-TLV, but the identified tunnel type does not use UDP encapsulation at all, or a tunnel of the form \"X-in-Y\" contains a Protocol Type sub-TLV that specifies something other than \"X\". Sub-TLVs of this sort MUST be disregarded. That is, they MUST NOT affect the creation of the encapsulation header. However, the sub-TLV MUST NOT be considered to be malformed and MUST NOT be removed from the TLV before the route carrying the Tunnel Encapsulation attribute is distributed. An implementation MAY log a message when it encounters such a sub-TLV.¶ 14. IANA Considerations IANA has made the updates described in the following subsections. All registration procedures listed are per their definitions in [RFC8126].¶ 14.1. Obsoleting RFC 5512 Because this document obsoletes RFC 5512, IANA has updated references to RFC 5512 to point to this document in the following registries:¶ \"Border Gateway Protocol (BGP) Extended Communities\" registry [IANA-BGP-EXT-COMM]¶ \"Border Gateway Protocol (BGP) Parameters\" registry [IANA-BGP-PARAMS]¶ \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" registry [IANA-BGP-TUNNEL-ENCAP]¶ \"Subsequent Address Family Identifiers (SAFI) Parameters\" registry [IANA-SAFI]¶ 14.2. Obsoleting Code Points Assigned by RFC 5566 Since this document obsoletes RFC 5566, the code points assigned by that RFC are similarly obsoleted. Specifically, the following code points have been marked as deprecated.¶ In the \"BGP Tunnel Encapsulation Attribute Tunnel Types\" registry [IANA-BGP-TUNNEL-ENCAP]:¶ Table 1 Value Name 3 Transmit tunnel endpoint (DEPRECATED) 4 IPsec in Tunnel-mode (DEPRECATED) 5 IP in IP tunnel with IPsec Transport Mode (DEPRECATED) 6 MPLS-in-IP tunnel with IPsec Transport Mode (DEPRECATED) And in the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry [IANA-BGP-TUNNEL-ENCAP]:¶ Table 2 Value Name 3 IPsec Tunnel Authenticator (DEPRECATED) 14.3. Border Gateway Protocol (BGP) Tunnel Encapsulation Grouping IANA has created a new registry grouping named \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" [IANA-BGP-TUNNEL-ENCAP].¶ 14.4. BGP Tunnel Encapsulation Attribute Tunnel Types IANA has relocated the \"BGP Tunnel Encapsulation Attribute Tunnel Types\" registry to be under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP].¶ 14.5. Subsequent Address Family Identifiers IANA has modified the \"SAFI Values\" registry [IANA-SAFI] to indicate that the Encapsulation SAFI (value 7) has been obsoleted. This document is listed as the reference for this change.¶ 14.6. BGP Tunnel Encapsulation Attribute Sub-TLVs IANA has relocated the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry to be under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP].¶ IANA has included the following note to the registry:¶ If the Sub-TLV Type is in the range from 0 to 127 (inclusive), the Sub-TLV Length field contains one octet. If the Sub-TLV Type is in the range from 128 to 255 (inclusive), the Sub-TLV Length field contains two octets.¶ IANA has updated the registration procedures of the registry to the following:¶ Table 3 Range Registration Procedures 1-63 Standards Action 64-125 First Come First Served 126-127 Experimental Use 128-191 Standards Action 192-252 First Come First Served 253-254 Experimental Use IANA has added the following entries to this registry:¶ Table 4 Value Description Reference 0 Reserved RFC 9012 6 Tunnel Egress Endpoint RFC 9012 7 DS Field RFC 9012 8 UDP Destination Port RFC 9012 9 Embedded Label Handling RFC 9012 10 MPLS Label Stack RFC 9012 11 Prefix-SID RFC 9012 255 Reserved RFC 9012 14.7. Flags Field of VXLAN Encapsulation Sub-TLV IANA has created a registry named \"Flags Field of VXLAN Encapsulation Sub-TLVs\" under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP]. The registration policy for this registry is \"Standards Action\". The minimum possible value is 0, and the maximum is 7.¶ The initial values for this new registry are indicated in Table 5.¶ Table 5 Bit Position Description Reference 0 V (VN-ID) RFC 9012 1 M (MAC Address) RFC 9012 14.8. Flags Field of NVGRE Encapsulation Sub-TLV IANA has created a registry named \"Flags Field of NVGRE Encapsulation Sub-TLVs\" under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP]. The registration policy for this registry is \"Standards Action\". The minimum possible value is 0, and the maximum is 7.¶ The initial values for this new registry are indicated in Table 6.¶ Table 6 Bit Position Description Reference 0 V (VN-ID) RFC 9012 1 M (MAC Address) RFC 9012 14.9. Embedded Label Handling Sub-TLV IANA has created a registry named \"Embedded Label Handling Sub-TLVs\" under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP]. The registration policy for this registry is \"Standards Action\". The minimum possible value is 0, and the maximum is 255.¶ The initial values for this new registry are indicated in Table 7.¶ Table 7 Value Description Reference 0 Reserved RFC 9012 1 Payload of MPLS with embedded label RFC 9012 2 No embedded label in payload RFC 9012 14.10. Color Extended Community Flags IANA has created a registry named \"Color Extended Community Flags\" under the \"Border Gateway Protocol (BGP) Tunnel Encapsulation\" grouping [IANA-BGP-TUNNEL-ENCAP]. The registration policy for this registry is \"Standards Action\". The minimum possible value is 0, and the maximum is 15.¶ This new registry contains columns for \"Bit Position\", \"Description\", and \"Reference\". No values have currently been registered.¶ 15. Security Considerations As Section 11 discusses, it is intended that the Tunnel Encapsulation attribute be used only within a well-defined scope, for example, within a set of ASes that belong to a single administrative entity. As long as the filtering mechanisms discussed in that section are applied diligently, an attacker outside the scope would not be able to use the Tunnel Encapsulation attribute in an attack. This leaves open the questions of attackers within the scope (for example, a compromised router) and failures in filtering that allow an external attack to succeed.¶ As [RFC4272] discusses, BGP is vulnerable to traffic-diversion attacks. The Tunnel Encapsulation attribute adds a new means by which an attacker could cause traffic to be diverted from its normal path, especially when the Tunnel Egress Endpoint sub-TLV is used. Such an attack would differ from pre-existing vulnerabilities in that traffic could be tunneled to a distant target across intervening network infrastructure, allowing an attack to potentially succeed more easily, since less infrastructure would have to be subverted. Potential consequences include \"hijacking\" of traffic (insertion of an undesired node in the path, which allows for inspection or modification of traffic, or avoidance of security controls) or denial of service (directing traffic to a node that doesn't desire to receive it).¶ In order to further mitigate the risk of diversion of traffic from its intended destination, Section 3.1.1 provides an optional procedure to check that the destination given in a Tunnel Egress Endpoint sub-TLV is within the AS that was the source of the route. One then has some level of assurance that the tunneled traffic is going to the same destination AS that it would have gone to had the Tunnel Encapsulation attribute not been present. As RFC 4272 discusses, it's possible for an attacker to announce an inaccurate AS_PATH; therefore, an attacker with the ability to inject a Tunnel Egress Endpoint sub-TLV could equally craft an AS_PATH that would pass the validation procedures of Section 3.1.1. BGP origin validation [RFC6811] and BGPsec [RFC8205] provide means to increase assurance that the origins being validated have not been falsified.¶ Many tunnels carry traffic that embeds a destination address that comes from a non-global namespace. One example is MPLS VPNs. If a tunnel crosses from one namespace to another, without the necessary translation being performed for the embedded address(es), there exists a risk of misdelivery of traffic. If the traffic contains confidential data that's not otherwise protected (for example, by end-to-end encryption), then confidential information could be revealed. The restriction of applicability of the Tunnel Encapsulation attribute to a well-defined scope limits the likelihood of this occurring. See the discussion of \"option b\" in Section 10 for further discussion of one such scenario.¶ RFC 8402 specifies that \"SR domain boundary routers MUST filter any external traffic\" ([RFC8402], Section 8.1). For these purposes, traffic introduced into an SR domain using the Prefix-SID sub-TLV lies within the SR domain, even though the Prefix-SIDs used by the routers at the two ends of the tunnel may be different, as discussed in Section 3.7. This implies that the duty to filter external traffic extends to all routers participating in such tunnels.¶ 16. References 16.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2474] Nichols, K., Blake, S., Baker, F., and D. Black, \"Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers\", RFC 2474, DOI 10.17487/RFC2474, December 1998, <https://www.rfc-editor.org/info/rfc2474>. [RFC2784] Farinacci, D., Li, T., Hanks, S., Meyer, D., and P. Traina, \"Generic Routing Encapsulation (GRE)\", RFC 2784, DOI 10.17487/RFC2784, March 2000, <https://www.rfc-editor.org/info/rfc2784>. [RFC2890] Dommety, G., \"Key and Sequence Number Extensions to GRE\", RFC 2890, DOI 10.17487/RFC2890, September 2000, <https://www.rfc-editor.org/info/rfc2890>. [RFC3032] Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y., Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack Encoding\", RFC 3032, DOI 10.17487/RFC3032, January 2001, <https://www.rfc-editor.org/info/rfc3032>. [RFC3270] Le Faucheur, F., Wu, L., Davie, B., Davari, S., Vaananen, P., Krishnan, R., Cheval, P., and J. Heinanen, \"Multi-Protocol Label Switching (MPLS) Support of Differentiated Services\", RFC 3270, DOI 10.17487/RFC3270, May 2002, <https://www.rfc-editor.org/info/rfc3270>. [RFC3931] Lau, J., Ed., Townsley, M., Ed., and I. Goyret, Ed., \"Layer Two Tunneling Protocol - Version 3 (L2TPv3)\", RFC 3931, DOI 10.17487/RFC3931, March 2005, <https://www.rfc-editor.org/info/rfc3931>. [RFC4023] Worster, T., Rekhter, Y., and E. Rosen, Ed., \"Encapsulating MPLS in IP or Generic Routing Encapsulation (GRE)\", RFC 4023, DOI 10.17487/RFC4023, March 2005, <https://www.rfc-editor.org/info/rfc4023>. [RFC4271] Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A Border Gateway Protocol 4 (BGP-4)\", RFC 4271, DOI 10.17487/RFC4271, January 2006, <https://www.rfc-editor.org/info/rfc4271>. [RFC4760] Bates, T., Chandra, R., Katz, D., and Y. Rekhter, \"Multiprotocol Extensions for BGP-4\", RFC 4760, DOI 10.17487/RFC4760, January 2007, <https://www.rfc-editor.org/info/rfc4760>. [RFC5129] Davie, B., Briscoe, B., and J. Tay, \"Explicit Congestion Marking in MPLS\", RFC 5129, DOI 10.17487/RFC5129, January 2008, <https://www.rfc-editor.org/info/rfc5129>. [RFC5462] Andersson, L. and R. Asati, \"Multiprotocol Label Switching (MPLS) Label Stack Entry: \"EXP\" Field Renamed to \"Traffic Class\" Field\", RFC 5462, DOI 10.17487/RFC5462, February 2009, <https://www.rfc-editor.org/info/rfc5462>. [RFC6811] Mohapatra, P., Scudder, J., Ward, D., Bush, R., and R. Austein, \"BGP Prefix Origin Validation\", RFC 6811, DOI 10.17487/RFC6811, January 2013, <https://www.rfc-editor.org/info/rfc6811>. [RFC6890] Cotton, M., Vegoda, L., Bonica, R., Ed., and B. Haberman, \"Special-Purpose IP Address Registries\", BCP 153, RFC 6890, DOI 10.17487/RFC6890, April 2013, <https://www.rfc-editor.org/info/rfc6890>. [RFC7348] Mahalingam, M., Dutt, D., Duda, K., Agarwal, P., Kreeger, L., Sridhar, T., Bursell, M., and C. Wright, \"Virtual eXtensible Local Area Network (VXLAN): A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks\", RFC 7348, DOI 10.17487/RFC7348, August 2014, <https://www.rfc-editor.org/info/rfc7348>. [RFC7606] Chen, E., Ed., Scudder, J., Ed., Mohapatra, P., and K. Patel, \"Revised Error Handling for BGP UPDATE Messages\", RFC 7606, DOI 10.17487/RFC7606, August 2015, <https://www.rfc-editor.org/info/rfc7606>. [RFC7637] Garg, P., Ed. and Y. Wang, Ed., \"NVGRE: Network Virtualization Using Generic Routing Encapsulation\", RFC 7637, DOI 10.17487/RFC7637, September 2015, <https://www.rfc-editor.org/info/rfc7637>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8669] Previdi, S., Filsfils, C., Lindem, A., Ed., Sreekantiah, A., and H. Gredler, \"Segment Routing Prefix Segment Identifier Extensions for BGP\", RFC 8669, DOI 10.17487/RFC8669, December 2019, <https://www.rfc-editor.org/info/rfc8669>. 16.2. Informative References [EVPN-INTER-SUBNET] Sajassi, A., Salam, S., Thoria, S., Drake, J. E., and J. Rabadan, \"Integrated Routing and Bridging in EVPN\", Work in Progress, Internet-Draft, draft-ietf-bess-evpn-inter-subnet-forwarding-13, 10 February 2021, <https://tools.ietf.org/html/draft-ietf-bess-evpn-inter-subnet-forwarding-13>. [IANA-ADDRESS-FAM] IANA, \"Address Family Numbers\", <https://www.iana.org/assignments/address-family-numbers/>. [IANA-BGP-EXT-COMM] IANA, \"Border Gateway Protocol (BGP) Extended Communities\", <https://www.iana.org/assignments/bgp-extended-communities/>. [IANA-BGP-PARAMS] IANA, \"Border Gateway Protocol (BGP) Parameters\", <https://www.iana.org/assignments/bgp-parameters/>. [IANA-BGP-TUNNEL-ENCAP] IANA, \"Border Gateway Protocol (BGP) Tunnel Encapsulation\", <https://www.iana.org/assignments/bgp-tunnel-encapsulation/>. [IANA-ETHERTYPES] IANA, \"IEEE 802 Numbers: ETHER TYPES\", <https://www.iana.org/assignments/ieee-802-numbers/>. [IANA-SAFI] IANA, \"Subsequent Address Family Identifiers (SAFI) Parameters\", <https://www.iana.org/assignments/safi-namespace/>. [RFC4272] Murphy, S., \"BGP Security Vulnerabilities Analysis\", RFC 4272, DOI 10.17487/RFC4272, January 2006, <https://www.rfc-editor.org/info/rfc4272>. [RFC4364] Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private Networks (VPNs)\", RFC 4364, DOI 10.17487/RFC4364, February 2006, <https://www.rfc-editor.org/info/rfc4364>. [RFC5512] Mohapatra, P. and E. Rosen, \"The BGP Encapsulation Subsequent Address Family Identifier (SAFI) and the BGP Tunnel Encapsulation Attribute\", RFC 5512, DOI 10.17487/RFC5512, April 2009, <https://www.rfc-editor.org/info/rfc5512>. [RFC5565] Wu, J., Cui, Y., Metz, C., and E. Rosen, \"Softwire Mesh Framework\", RFC 5565, DOI 10.17487/RFC5565, June 2009, <https://www.rfc-editor.org/info/rfc5565>. [RFC5566] Berger, L., White, R., and E. Rosen, \"BGP IPsec Tunnel Encapsulation Attribute\", RFC 5566, DOI 10.17487/RFC5566, June 2009, <https://www.rfc-editor.org/info/rfc5566>. [RFC5640] Filsfils, C., Mohapatra, P., and C. Pignataro, \"Load-Balancing for Mesh Softwires\", RFC 5640, DOI 10.17487/RFC5640, August 2009, <https://www.rfc-editor.org/info/rfc5640>. [RFC6514] Aggarwal, R., Rosen, E., Morin, T., and Y. Rekhter, \"BGP Encodings and Procedures for Multicast in MPLS/BGP IP VPNs\", RFC 6514, DOI 10.17487/RFC6514, February 2012, <https://www.rfc-editor.org/info/rfc6514>. [RFC7510] Xu, X., Sheth, N., Yong, L., Callon, R., and D. Black, \"Encapsulating MPLS in UDP\", RFC 7510, DOI 10.17487/RFC7510, April 2015, <https://www.rfc-editor.org/info/rfc7510>. [RFC8205] Lepinski, M., Ed. and K. Sriram, Ed., \"BGPsec Protocol Specification\", RFC 8205, DOI 10.17487/RFC8205, September 2017, <https://www.rfc-editor.org/info/rfc8205>. [RFC8277] Rosen, E., \"Using BGP to Bind MPLS Labels to Address Prefixes\", RFC 8277, DOI 10.17487/RFC8277, October 2017, <https://www.rfc-editor.org/info/rfc8277>. [RFC8365] Sajassi, A., Ed., Drake, J., Ed., Bitar, N., Shekhar, R., Uttaro, J., and W. Henderickx, \"A Network Virtualization Overlay Solution Using Ethernet VPN (EVPN)\", RFC 8365, DOI 10.17487/RFC8365, March 2018, <https://www.rfc-editor.org/info/rfc8365>. [RFC8402] Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L., Decraene, B., Litkowski, S., and R. Shakir, \"Segment Routing Architecture\", RFC 8402, DOI 10.17487/RFC8402, July 2018, <https://www.rfc-editor.org/info/rfc8402>. Appendix A. Impact on RFC 8365 [RFC8365] references RFC 5512 for its definition of the BGP Encapsulation Extended Community. That extended community is now defined in this document, in a way consistent with its previous definition.¶ Section 6 of [RFC8365] talks about the use of the Encapsulation Extended Community to allow Network Virtualization Edge (NVE) devices to signal their supported encapsulations. We note that with the introduction of this specification, the Tunnel Encapsulation attribute can also be used for this purpose. For purposes where RFC 8365 talks about \"advertising supported encapsulations\" (for example, in the second paragraph of Section 6), encapsulations advertised using the Tunnel Encapsulation attribute should be considered equally with those advertised using the Encapsulation Extended Community.¶ In particular, a review of Section 8.3.1 of [RFC8365] is called for, to consider whether the introduction of the Tunnel Encapsulation attribute creates a need for any revisions to the split-horizon procedures.¶ [RFC8365] also refers to a draft version of this specification in the final paragraph of Section 5.1.3. That paragraph references Section 8.2.2.2 of the draft. In this document, the correct reference would be Section 9.2.2.2. There are no substantive differences between the section in the referenced draft version and that in this document.¶ Acknowledgments This document contains text from RFC 5512, authored by Pradosh Mohapatra and Eric Rosen. The authors of the current document wish to thank them for their contribution. RFC 5512 itself built upon prior work by Gargi Nalawade, Ruchi Kapoor, Dan Tappan, David Ward, Scott Wainner, Simon Barber, Lili Wang, and Chris Metz, whom the authors also thank for their contributions. Eric Rosen was the principal author of earlier versions of this document.¶ The authors wish to thank Lou Berger, Ron Bonica, Martin Djernaes, John Drake, Susan Hares, Satoru Matsushima, Thomas Morin, Dhananjaya Rao, Ravi Singh, Harish Sitaraman, Brian Trammell, Xiaohu Xu, and Zhaohui Zhang for their review, comments, and/or helpful discussions. Alvaro Retana provided an especially comprehensive review.¶ Contributors Below is a list of other contributing authors in alphabetical order:¶ Randy Bush Internet Initiative Japan 5147 Crystal Springs Bainbridge Island, WA 98110 United States of America Email: randy@psg.com Robert Raszuk Bloomberg LP 731 Lexington Ave New York City, NY 10022 United States of America Email: robert@raszuk.net Eric C. Rosen Authors' Addresses Keyur Patel Arrcus, Inc 2077 Gateway Pl San Jose, CA 95110 United States of America Email: keyur@arrcus.com Gunter Van de Velde Nokia Copernicuslaan 50 2018 Antwerpen Belgium Email: gunter.van_de_velde@nokia.com Srihari R. Sangli Juniper Networks Email: ssangli@juniper.net John Scudder Juniper Networks Email: jgs@juniper.net"
    },
    {
        "Number": "9013",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "OSPF Advertisement of Tunnel Encapsulations",
        "Authors": [
            "X. Xu",
            "Ed.",
            "B. Decraene",
            "Ed.",
            "R. Raszuk",
            "L. Contreras",
            "L. Jalil"
        ],
        "Date": "2021-04",
        "More Info": "Errata",
        "Status": "Proposed Standard",
        "Abstract": "Networks use tunnels for a variety of reasons. A large variety of tunnel types are defined, and the tunnel encapsulator router needs to select a type of tunnel that is supported by the tunnel decapsulator router. This document defines how to advertise, in OSPF Router Information Link State Advertisements (LSAs), the list of tunnel encapsulations supported by the tunnel decapsulator.",
        "Keywords": [
            "BGP"
        ],
        "Content": "RFC 9013: OSPF Advertisement of Tunnel Encapsulations RFC 9013 Tunnel Encapsulations RI April 2021 Xu, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9013 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: X. Xu, Ed. Capitalonline B. Decraene, Ed. Orange R. Raszuk NTT Network Innovations L. Contreras Telefonica I+D L. Jalil Verizon RFC 9013 OSPF Advertisement of Tunnel Encapsulations Abstract Networks use tunnels for a variety of reasons. A large variety of tunnel types are defined, and the tunnel encapsulator router needs to select a type of tunnel that is supported by the tunnel decapsulator router. This document defines how to advertise, in OSPF Router Information Link State Advertisements (LSAs), the list of tunnel encapsulations supported by the tunnel decapsulator.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9013.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  Tunnel Encapsulations TLV 4.  Tunnel Sub-TLV 5.  Tunnel Parameter Sub-TLVs 5.1.  Encapsulation Sub-TLV 5.2.  Protocol Type Sub-TLV 5.3.  Tunnel Egress Endpoint Sub-TLV 5.4.  Color Sub-TLV 5.5.  Load-Balancing Block Sub-TLV 5.6.  DS Field Sub-TLV 5.7.  UDP Destination Port Sub-TLV 6.  Operation 7.  IANA Considerations 7.1.  OSPF Router Information (RI) TLVs Registry 7.2.  OSPF Tunnel Parameter Sub-TLVs Registry 8.  Security Considerations 9.  References 9.1.  Normative References 9.2.  Informative References Acknowledgements Contributors Authors' Addresses 1. Introduction Networks use tunnels for a variety of reasons, such as:¶ Partial deployment of IPv6 in IPv4 networks or IPv4 in IPv6 networks, as described in [RFC5565], where IPvx tunnels are used between IPvx-enabled routers so as to traverse non-IPvx routers.¶ Remote Loop-Free Alternate (RLFA) repair tunnels as described in [RFC7490], where tunnels are used between the Point of Local Repair and the selected PQ node.¶ The tunnel encapsulator router needs to select a type of tunnel that is supported by the tunnel decapsulator router. This document defines how to advertise, in OSPF Router Information Link State Advertisements (LSAs), the list of tunnel encapsulations supported by the tunnel decapsulator. In this document, OSPF refers to both OSPFv2 [RFC2328] and OSPFv3 [RFC5340].¶ 2. Terminology This memo makes use of the terms defined in [RFC7770].¶ The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Tunnel Encapsulations TLV Routers advertise their supported tunnel encapsulation type(s) by advertising a new TLV of the OSPF Router Information (RI) Opaque LSA [RFC7770], referred to as the \"Tunnel Encapsulations TLV\". This TLV is applicable to both OSPFv2 and OSPFv3.¶ The Type code of the Tunnel Encapsulations TLV is 13, the Length value is variable, and the Value field contains one or more Tunnel Sub-TLVs, as defined in Section 4. Each Tunnel Sub-TLV indicates a particular encapsulation format that the advertising router supports, along with the parameters corresponding to the tunnel type.¶ The Tunnel Encapsulations TLV MAY appear more than once within a given OSPF Router Information (RI) Opaque LSA. If the Tunnel Encapsulations TLV appears more than once in an OSPF Router Information LSA, the set of all Tunnel Sub-TLVs from all Tunnel Encapsulations TLVs SHOULD be considered. The scope of the advertisement depends on the application, but it is recommended that it SHOULD be domain wide.¶ 4. Tunnel Sub-TLV The Tunnel Sub-TLV is structured as shown in Figure 1.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Tunnel Type (2 octets) | Length (2 octets) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Tunnel Parameter Sub-TLVs | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 1: Tunnel Sub-TLV Tunnel Type (2 octets): Identifies the type of tunneling technology signaled. Tunnel types are shared with the BGP extension [RFC9012] and hence are defined in the IANA registry \"BGP Tunnel Encapsulation Attribute Tunnel Types\". Unknown tunnel types are to be ignored upon receipt.¶ Length (2 octets): Unsigned 16-bit integer indicating the total number of octets of the Tunnel Parameter Sub-TLVs field.¶ Tunnel Parameter Sub-TLVs (variable): Zero or more Tunnel Parameter Sub-TLVs, as defined in Section 5.¶ If a Tunnel Sub-TLV is invalid, it MUST be ignored and skipped. However, other Tunnel Sub-TLVs MUST be considered.¶ 5. Tunnel Parameter Sub-TLVs A Tunnel Parameter Sub-TLV is structured as shown in Figure 2.¶ +---------------------------------------------+ | Tunnel Parameter Sub-Type (2 octets) | +---------------------------------------------+ | Tunnel Parameter Length (2 octets) | +---------------------------------------------+ | Tunnel Parameter Value (variable) | | | +---------------------------------------------+ Figure 2: Tunnel Parameter Sub-TLV Tunnel Parameter Sub-Type (2 octets): Each sub-type defines a parameter of the Tunnel Sub-TLV. Sub-types are registered in the IANA registry \"OSPF Tunnel Parameter Sub-TLVs\" (see Section 7.2).¶ Tunnel Parameter Length (2 octets): Unsigned 16-bit integer indicating the total number of octets of the Tunnel Parameter Value field.¶ Tunnel Parameter Value (variable): Encodings of the Value field depend on the sub-TLV type. The following subsections define the encoding in detail.¶ Any unknown Tunnel Parameter sub-type MUST be ignored and skipped upon receipt. When a reserved value (see Section 7.2) is seen in an LSA, it MUST be treated as an invalid Tunnel Parameter Sub-TLV. When a Tunnel Parameter Value has an incorrect syntax or semantics, it MUST be treated as an invalid Tunnel Parameter Sub-TLV. If a Tunnel Parameter Sub-TLV is invalid, its Tunnel Sub-TLV MUST be ignored. However, other Tunnel Sub-TLVs MUST be considered.¶ 5.1. Encapsulation Sub-TLV This sub-TLV type is 1. The syntax, semantics, and usage of its Value field are defined in Section 3.2 (\"Encapsulation Sub-TLVs for Particular Tunnel Types\") of [RFC9012].¶ 5.2. Protocol Type Sub-TLV This sub-TLV type is 2. The syntax, semantics, and usage of its Value field are defined in Section 3.4.1 (\"Protocol Type Sub-TLV\") of [RFC9012].¶ 5.3. Tunnel Egress Endpoint Sub-TLV The Tunnel Egress Endpoint Sub-TLV specifies the address of the egress endpoint of the tunnel -- that is, the address of the router that will decapsulate the payload.¶ This sub-TLV type is 3. It MUST be present once and only once in a given Tunnel Sub-TLV. The Value field contains two subfields:¶ a two-octet Address Family subfield¶ an Address subfield, whose length depends upon the Address Family¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Address Family | Address ~ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ + ~ (variable length) ~ | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 3: Tunnel Egress Endpoint Sub-TLV The Address Family subfield contains a value from IANA's \"Address Family Numbers\" registry. In this document, we assume that the Address Family is either IPv4 or IPv6; use of other address families is outside the scope of this document.¶ If the Address Family subfield contains the value for IPv4, the Address subfield MUST contain an IPv4 address (a /32 IPv4 prefix). In this case, the Length field of the Tunnel Egress Endpoint Sub-TLV MUST contain the value 6.¶ If the Address Family subfield contains the value for IPv6, the address subfield MUST contain an IPv6 address (a /128 IPv6 prefix). In this case, the Length field of the Tunnel Egress Endpoint Sub-TLV MUST contain the value 18 (0x12). IPv6 link-local addresses are not valid values of the IP address field.¶ 5.4. Color Sub-TLV This sub-TLV type is 4. It may appear zero or more times in a given Tunnel Sub-TLV. The Value field is a 4-octet opaque unsigned integer.¶ The color value is user-defined and configured locally on the advertising routers. It may be used by service providers to define policies on the tunnel encapsulator routers, for example, to control the selection of the tunnel to use.¶ This color value can be referenced by BGP routes carrying the Color Extended Community [RFC9012]. If the tunnel is used to reach the BGP next hop of BGP routes, then attaching a Color Extended Community to those routes expresses the willingness of the BGP speaker to use a tunnel of the same color.¶ 5.5. Load-Balancing Block Sub-TLV This sub-TLV type is 5. The syntax, semantics, and usage of its Value field are defined in [RFC5640].¶ 5.6. DS Field Sub-TLV This sub-TLV type is 6. The syntax, semantics, and usage of its Value field are defined in Section 3.3.1 (\"DS Field\") of [RFC9012].¶ 5.7. UDP Destination Port Sub-TLV This sub-TLV type is 7. The syntax, semantics, and usage of its Value field are defined in Section 3.3.2 (\"UDP Destination Port\") of [RFC9012].¶ 6. Operation The advertisement of a Tunnel Encapsulations Sub-TLV indicates that the advertising router supports a particular tunnel decapsulation along with the parameters to be used for the tunnel. The decision to use that tunnel is driven by the capability of the tunnel encapsulator router to support the encapsulation type and the policy on the tunnel encapsulator router. The Color Sub-TLV (see Section 5.4) may be used as an input to this policy. Note that some tunnel types may require the execution of an explicit tunnel setup protocol before they can be used to transit data.¶ A tunnel MUST NOT be used if there is no route toward the IP address specified in the Tunnel Egress Endpoint Sub-TLV (see Section 5.3) or if the route is not advertised in the same OSPF domain.¶ 7. IANA Considerations 7.1. OSPF Router Information (RI) TLVs Registry IANA has allocated the following new code point in the \"OSPF Router Information (RI) TLVs\" registry.¶ Table 1: Addition to OSPF Router Information (RI) TLVs Registry Value TLV Name Reference 13 Tunnel Encapsulations RFC 9013 7.2. OSPF Tunnel Parameter Sub-TLVs Registry IANA has created a new subregistry called the \"OSPF Tunnel Parameter Sub-TLVs\" registry under the \"Open Shortest Path First (OSPF) Parameters\" registry. The registration procedures are as follows:¶ The values in the range 1-34999 are to be allocated using the \"Standards Action\" registration procedure defined in [RFC8126].¶ The values in the range 35000-65499 are to be allocated using the \"First Come First Served\" registration procedure.¶ The initial contents of the registry are as follows:¶ Table 2: Initial Contents of OSPF Tunnel Parameter Sub-TLVs Registry Value TLV Name Reference 0 Reserved RFC 9013 1 Encapsulation RFC 9013 & RFC 9012 2 Protocol Type RFC 9013 & RFC 9012 3 Endpoint RFC 9013 4 Color RFC 9013 5 Load-Balancing Block RFC 9013 & RFC 5640 6 DS Field RFC 9013 & RFC 9012 7 UDP Destination Port RFC 9013 & RFC 9012 8-65499 Unassigned 65500-65534 Experimental RFC 9013 65535 Reserved RFC 9013 8. Security Considerations Security considerations applicable to softwires can be found in the mesh framework [RFC5565]. In general, security issues of the tunnel protocols signaled through this OSPF capability extension are inherited.¶ If a third party is able to modify any of the information that is used to form encapsulation headers, choose a tunnel type, or choose a particular tunnel for a particular payload type, user data packets may end up getting misrouted, misdelivered, and/or dropped. However, since an OSPF routing domain is usually a well-controlled network under a single administrative domain, the possibility of the above attack is very low.¶ We note that the last paragraph of Section 6 forbids the establishment of a tunnel toward arbitrary destinations. It prohibits a destination outside of the OSPF domain. This prevents a third party that has gained access to an OSPF router from being able to send the traffic to other destinations, e.g., for inspection purposes.¶ Security considerations for the base OSPF protocol are covered in [RFC2328] and [RFC5340].¶ 9. References 9.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC5640] Filsfils, C., Mohapatra, P., and C. Pignataro, \"Load-Balancing for Mesh Softwires\", RFC 5640, DOI 10.17487/RFC5640, August 2009, <https://www.rfc-editor.org/info/rfc5640>. [RFC7770] Lindem, A., Ed., Shen, N., Vasseur, JP., Aggarwal, R., and S. Shaffer, \"Extensions to OSPF for Advertising Optional Router Capabilities\", RFC 7770, DOI 10.17487/RFC7770, February 2016, <https://www.rfc-editor.org/info/rfc7770>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC9012] Patel, K., Van de Velde, G., Sangli, S., and J. Scudder, \"The BGP Tunnel Encapsulation Attribute\", RFC 9012, DOI 10.17487/RFC9012, April 2021, <https://www.rfc-editor.org/info/rfc9012>. 9.2. Informative References [RFC2328] Moy, J., \"OSPF Version 2\", STD 54, RFC 2328, DOI 10.17487/RFC2328, April 1998, <https://www.rfc-editor.org/info/rfc2328>. [RFC5340] Coltun, R., Ferguson, D., Moy, J., and A. Lindem, \"OSPF for IPv6\", RFC 5340, DOI 10.17487/RFC5340, July 2008, <https://www.rfc-editor.org/info/rfc5340>. [RFC5512] Mohapatra, P. and E. Rosen, \"The BGP Encapsulation Subsequent Address Family Identifier (SAFI) and the BGP Tunnel Encapsulation Attribute\", RFC 5512, DOI 10.17487/RFC5512, April 2009, <https://www.rfc-editor.org/info/rfc5512>. [RFC5565] Wu, J., Cui, Y., Metz, C., and E. Rosen, \"Softwire Mesh Framework\", RFC 5565, DOI 10.17487/RFC5565, June 2009, <https://www.rfc-editor.org/info/rfc5565>. [RFC7490] Bryant, S., Filsfils, C., Previdi, S., Shand, M., and N. So, \"Remote Loop-Free Alternate (LFA) Fast Reroute (FRR)\", RFC 7490, DOI 10.17487/RFC7490, April 2015, <https://www.rfc-editor.org/info/rfc7490>. Acknowledgements This document is partially inspired by [RFC5512].¶ The authors would like to thank Greg Mirsky, John E. Drake, Carlos Pignataro, and Karsten Thomann for their valuable comments on this document. Special thanks should be given to Acee Lindem for his multiple detailed reviews of this document and help. The authors would like to thank Pete Resnick, Joe Touch, David Mandelberg, Sabrina Tanamal, Tim Wicinski, and Amanda Baber for their Last Call reviews. The authors also thank Spencer Dawkins, Mirja Kühlewind, Ben Campbell, Benoit Claise, Alvaro Retana, Adam Roach, and Suresh Krishnan for their AD reviews.¶ Contributors Uma Chunduri Huawei Email: uma.chunduri@gmail.com Authors' Addresses Xiaohu Xu (editor) Capitalonline Email: xiaohu.xu@capitalonline.net Bruno Decraene (editor) Orange Email: bruno.decraene@orange.com Robert Raszuk NTT Network Innovations 940 Stewart Dr Sunnyvale, CA 94085 United States of America Email: robert@raszuk.net Luis M. Contreras Telefonica I+D Email: luismiguel.contrerasmurillo@telefonica.com Luay Jalil Verizon Email: luay.jalil@verizon.com"
    },
    {
        "Number": "9018",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Interoperable Domain Name System (DNS) Server Cookies",
        "Authors": [
            "O. Sury",
            "W. Toorop",
            "D. Eastlake 3rd",
            "M. Andrews"
        ],
        "Date": "2021-04",
        "More Info": "Updates RFC 7873",
        "Status": "Proposed Standard",
        "Abstract": "DNS Cookies, as specified in RFC 7873, are a lightweight DNS transaction security mechanism that provide limited protection to DNS servers and clients against a variety of denial-of-service amplification, forgery, or cache-poisoning attacks by off-path attackers.  This document updates RFC 7873 with precise directions for creating Server Cookies so that an anycast server set including diverse implementations will interoperate with standard clients, with suggestions for constructing Client Cookies in a privacy-preserving fashion, and with suggestions on how to update a Server Secret.  An IANA registry listing the methods and associated pseudorandom function suitable for creating DNS Server Cookies has been created with the method described in this document as the first and, as of the time of publication, only entry.",
        "Keywords": [
            "Client",
            "Hash"
        ],
        "Content": "RFC 9018: Interoperable Domain Name System (DNS) Server Cookies RFC 9018 Interoperable DNS Server Cookies April 2021 Sury, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9018 Updates: 7873 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: O. Sury Internet Systems Consortium W. Toorop NLnet Labs D. Eastlake 3rd Futurewei Technologies M. Andrews Internet Systems Consortium RFC 9018 Interoperable Domain Name System (DNS) Server Cookies Abstract DNS Cookies, as specified in RFC 7873, are a lightweight DNS transaction security mechanism that provide limited protection to DNS servers and clients against a variety of denial-of-service amplification, forgery, or cache-poisoning attacks by off-path attackers.¶ This document updates RFC 7873 with precise directions for creating Server Cookies so that an anycast server set including diverse implementations will interoperate with standard clients, with suggestions for constructing Client Cookies in a privacy-preserving fashion, and with suggestions on how to update a Server Secret. An IANA registry listing the methods and associated pseudorandom function suitable for creating DNS Server Cookies has been created with the method described in this document as the first and, as of the time of publication, only entry.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9018.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Terminology and Definitions 2.  Changes to RFC 7873 3.  Constructing a Client Cookie 4.  Constructing a Server Cookie 4.1.  The Version Sub-Field 4.2.  The Reserved Sub-Field 4.3.  The Timestamp Sub-Field 4.4.  The Hash Sub-Field 5.  Updating the Server Secret 6.  Cookie Algorithms 7.  IANA Considerations 8.  Security and Privacy Considerations 8.1.  Client Cookie Construction 8.2.  Server Cookie Construction 9.  References 9.1.  Normative References 9.2.  Informative References Appendix A.  Test Vectors A.1.  Learning a New Server Cookie A.2.  The Same Client Learning a Renewed (Fresh) Server Cookie A.3.  Another Client Learning a Renewed Server Cookie A.4.  IPv6 Query with Rolled Over Secret Appendix B.  Implementation Status Acknowledgements Authors' Addresses 1. Introduction DNS Cookies, as specified in [RFC7873], are a lightweight DNS transaction security mechanism that provide limited protection to DNS servers and clients against a variety of denial-of-service amplification, forgery, or cache-poisoning attacks by off-path attackers. This document specifies a means of producing interoperable cookies so that an anycast server set including diverse implementations can be easily configured to interoperate with standard clients. Also, single-implementation or non-anycast services can benefit from a well-studied standardized algorithm for which the behavioral and security characteristics are more widely known.¶ The threats considered for DNS Cookies and the properties of the DNS Security features other than DNS Cookies are discussed in [RFC7873].¶ In Section 6 of [RFC7873], for simplicity, it is \"RECOMMENDED that the same Server Secret be used by each DNS server in a set of anycast servers.\" However, how precisely a Server Cookie is calculated from this Server Secret is left to the implementation.¶ This guidance has led to a gallimaufry of DNS Cookie implementations, calculating the Server Cookie in different ways. As a result, DNS Cookies are impractical to deploy on multi-vendor anycast networks because even when all DNS Software shares the same secret, as RECOMMENDED in Section 6 of [RFC7873], the Server Cookie constructed by one implementation cannot generally be validated by another.¶ There is no need for DNS client (resolver) Cookies to be interoperable across different implementations. Each client need only be able to recognize its own cookies. However, this document does contain recommendations for constructing Client Cookies in a client-protecting fashion.¶ 1.1. Terminology and Definitions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ Note: \"IP address\" is used herein as a length-independent term covering both IPv4 and IPv6 addresses.¶ 2. Changes to RFC 7873 Appendices A.1 and B.1 of [RFC7873] provide example \"simple\" algorithms for computing Client and Server Cookies, respectively. These algorithms MUST NOT be used as the resulting cookies are too weak when evaluated against modern security standards.¶ Appendix B.2 of [RFC7873] provides an example \"more complex\" server algorithm. This algorithm is replaced by the interoperable specification in Section 4 of this document, which MUST be used by Server Cookie implementations.¶ This document has suggestions on Client Cookie construction in Section 3. The previous example in Appendix A.2 of [RFC7873] is NOT RECOMMENDED.¶ 3. Constructing a Client Cookie The Client Cookie acts as an identifier for a given client and its IP address and needs to be unguessable. In order to provide minimal authentication of the targeted server, a client MUST use a different Client Cookie for each different Server IP address. This complicates a server's ability to spoof answers for other DNS servers. The Client Cookie SHOULD have 64 bits of entropy.¶ When a server does not support DNS Cookies, the client MUST NOT send the same Client Cookie to that same server again. Instead, it is recommended that the client does not send a Client Cookie to that server for a certain period (for example, five minutes) before it retries with a new Client Cookie.¶ When a server does support DNS Cookies, the client should store the Client Cookie alongside the Server Cookie it registered for that server.¶ Except for when the Client IP address changes, there is no need to change the Client Cookie often. It is then reasonable to change the Client Cookie only if it has been compromised or after a relatively long implementation-defined period of time. The time period should be no longer than a year, and in any case, Client Cookies are not expected to survive a program restart.¶ Client-Cookie = 64 bits of entropy ¶ Previously, the recommended algorithm to compute the Client Cookie included the Client IP address as an input to a hashing function. However, when implementing the DNS Cookies, several DNS vendors found it impractical to include the Client IP as the Client Cookie is typically computed before the Client IP address is known. Therefore, the requirement to put the Client IP address as input was removed.¶ However, for privacy reasons, in order to prevent tracking of devices across links and to not circumvent IPv6 Privacy Extensions [RFC8981], clients MUST NOT reuse a Client or Server Cookie after the Client IP address has changed.¶ One way to satisfy this requirement for non-reuse is to register the Client IP address alongside the Server Cookie when it receives the Server Cookie. In subsequent queries to the server with that Server Cookie, the socket MUST be bound to the Client IP address that was also used (and registered) when it received the Server Cookie. Failure to bind MUST then result in a new Client Cookie.¶ 4. Constructing a Server Cookie The Server Cookie is effectively a Message Authentication Code (MAC). The Server Cookie, when it occurs in a COOKIE option in a request, is intended to weakly assure the server that the request came from a client that is both at the source IP address of the request and using the Client Cookie included in the option. This assurance is provided by the Server Cookie that the server (or any other server from the anycast set) sent to that client in an earlier response and that appears as the Server Cookie field in the weakly authenticated request (see Section 5.2 of [RFC7873]).¶ DNS Cookies do not provide protection against \"on-path\" adversaries (see Section 9 of [RFC7873]). An on-path observer that has seen a Server Cookie for a client can abuse that Server Cookie to spoof request for that client within the time span a Server Cookie is valid (see Section 4.3).¶ The Server Cookie is calculated from the Client Cookie, a series of Sub-Fields specified below, the Client IP address, and a Server Secret that is known only to the server or only to the set of servers at the same anycast address.¶ For calculation of the Server Cookie, a pseudorandom function is RECOMMENDED with the property that an attacker that does not know the Server Secret, cannot find (any information about) the Server Secret, and cannot create a Server Cookie for any combination of the Client Cookie, the series of Sub-Fields specified below, and the client IP address, for which it has not seen a Server Cookie before. Because DNS servers need to use the pseudorandom function in order to verify Server Cookies, it is RECOMMENDED that it be efficient to calculate. The pseudorandom function described in [SipHash-2-4] and introduced in Section 4.4 of this document fits these recommendations.¶ Changing the Server Secret regularly is RECOMMENDED but, when a secure pseudorandom function is used, it need not be changed too frequently. Once a month, for example, would be adequate. See Section 5 on operator and implementation guidelines for updating a Server Secret.¶ The 128-bit Server Cookie consists of the following Sub-Fields: a 1-octet Version Sub-Field, a 3-octet Reserved Sub-Field, a 4-octet Timestamp Sub-Field, and an 8-octet Hash Sub-Field.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Version | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Timestamp | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Hash | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ¶ 4.1. The Version Sub-Field The Version Sub-Field prescribes the structure and Hash calculation formula. This document defines Version 1 to be the structure and way to calculate the Hash Sub-Field as defined in this section.¶ 4.2. The Reserved Sub-Field The value of the Reserved Sub-Field is reserved for future versions of server-side cookie construction. On construction, it MUST be set to zero octets. On Server Cookie verification, the server MUST NOT enforce those fields to be zero, and the Hash should be computed with the received value as described in Section 4.4.¶ 4.3. The Timestamp Sub-Field The Timestamp value prevents Replay Attacks and MUST be checked by the server to be within a defined period of time. The DNS server SHOULD allow cookies within a 1-hour period in the past and a 5-minute period into the future to allow operation of low-volume clients and some limited time skew between the DNS servers in the anycast set.¶ The Timestamp value specifies a date and time in the form of a 32-bit unsigned number of seconds elapsed since 1 January 1970 00:00:00 UTC, ignoring leap seconds, in network byte order. All comparisons involving these fields MUST use \"Serial number arithmetic\", as defined in [RFC1982]. [RFC1982] specifies how the differences should be handled. This handles any relative time window less than 68 years, at any time in the future (2038, 2106, 2256, 22209, or later.)¶ The DNS server SHOULD generate a new Server Cookie at least if the received Server Cookie from the client is more than half an hour old, but it MAY generate a new cookie more often than that.¶ 4.4. The Hash Sub-Field It's important that all the DNS servers use the same algorithm for computing the Server Cookie. This document defines the Version 1 of the server-side algorithm to be:¶ Hash = SipHash-2-4( Client Cookie | Version | Reserved | Timestamp | Client-IP, Server Secret ) ¶ where \"|\" indicates concatenation.¶ Notice that Client-IP is used for hash generation even though it is not included in the cookie value itself. Client-IP can be either 4 bytes for IPv4 or 16 bytes for IPv6. The length of all the concatenated elements (the input into [SipHash-2-4]) MUST be either precisely 20 bytes in case of an IPv4 Client-IP or precisely 32 bytes in case of an IPv6 Client-IP.¶ When a DNS server receives a Server Cookie version 1 for validation, the length of the received COOKIE option MUST be precisely 24 bytes: 8 bytes for the Client Cookie plus 16 bytes for the Server Cookie. Verification of the length of the received COOKIE option is REQUIRED to guarantee the length of the input into [SipHash-2-4] to be precisely 20 bytes in the case of an IPv4 Client-IP and precisely 32 bytes in the case of an IPv6 Client-IP. This ensures that the input into [SipHash-2-4] is an injective function of the elements making up the input, and thereby prevents data substitution attacks. More specifically, this prevents a 36-byte COOKIE option coming from an IPv4 Client-IP to be validated as if it were coming from an IPv6 Client-IP.¶ The Server Secret MUST be configurable to make sure that servers in an anycast network return consistent results.¶ 5. Updating the Server Secret Changing the Server Secret regularly is RECOMMENDED. All servers in an anycast set must be able to verify the Server Cookies constructed by all other servers in that anycast set at all times. Therefore, it is vital that the Server Secret is shared among all servers before it is used to generate Server Cookies on any server.¶ Also, to maximize maintaining established relationships between clients and servers, an old Server Secret should be valid for verification purposes for a specific period.¶ To facilitate this, deployment of a new Server Secret MUST be done in three stages:¶ Stage 1 The new Server Secret is deployed on all the servers in an anycast set by the operator.¶ Each server learns the new Server Secret but keeps using the previous Server Secret to generate Server Cookies.¶ Server Cookies constructed with both the new Server Secret and the previous Server Secret are considered valid when verifying.¶ After stage 1 is completed, all the servers in the anycast set have learned the new Server Secret and can verify Server Cookies constructed with it, but keep generating Server Cookies with the old Server Secret.¶ Stage 2 This stage is initiated by the operator after the Server Cookie is present on all members in the anycast set.¶ When entering Stage 2, servers start generating Server Cookies with the new Server Secret. The previous Server Secret is not yet removed/forgotten.¶ Server Cookies constructed with both the new Server Secret and the previous Server Secret are considered valid when verifying.¶ Stage 3 This stage is initiated by the operator when it can be assumed that most clients have obtained a Server Cookie derived from the new Server Secret.¶ With this stage, the previous Server Secret can be removed and MUST NOT be used anymore for verifying.¶ It is RECOMMENDED that the operator wait, after initiating Stage 2 and before initiating Stage 3, at least a period of time equal to the longest TTL in the zones served by the server plus 1 hour.¶ The operator SHOULD wait at least longer than the period clients are allowed to use the same Server Cookie, which SHOULD be 1 hour (see Section 4.3).¶ 6. Cookie Algorithms [SipHash-2-4] is a pseudorandom function suitable as a Message Authentication Code. It is REQUIRED that a compliant DNS server use SipHash-2-4 as a mandatory and default algorithm for DNS Cookies to ensure interoperability between the DNS Implementations.¶ The construction method and pseudorandom function used in calculating and verifying the Server Cookies are determined by the initial version byte and by the length of the Server Cookie. Additional pseudorandom or construction algorithms for Server Cookies might be added in the future.¶ 7. IANA Considerations IANA has created a registry under the \"Domain Name System (DNS) Parameters\" heading as follows:¶ Registry Name: DNS Server Cookie Methods¶ Assignment Policy: Expert Review¶ Reference: [RFC9018], [RFC7873]¶ Note: A Server Cookie method (construction and pseudorandom algorithm) is determined by the Version in the first byte of the cookie and by the cookie size. Server Cookie size is limited to the inclusive range of 8 to 32 bytes.¶ Table 1: DNS Server Cookie Methods Version Size Method 0 8-32 Reserved 1 8-15 Unassigned 1 16 SipHash-2-4 [RFC9018] Section 4 1 17-32 Unassigned 2-239 8-32 Unassigned 240-254 8-32 Reserved for Private Use 255 8-32 Reserved 8. Security and Privacy Considerations DNS Cookies provide limited protection to DNS servers and clients against a variety of denial-of-service amplification, forgery, or cache-poisoning attacks by off-path attackers. They provide no protection against on-path adversaries that can observe the plaintext DNS traffic. An on-path adversary that can observe a Server Cookie for a client and server interaction can use that Server Cookie for denial-of-service amplification, forgery, or cache-poisoning attacks directed at that client for the lifetime of the Server Cookie.¶ 8.1. Client Cookie Construction In [RFC7873], it was RECOMMENDED to construct a Client Cookie by using a pseudorandom function of the Client IP address, the Server IP address, and a secret quantity known only to the client. The Client IP address was included to ensure that a client could not be tracked if its IP address changes due to privacy mechanisms or otherwise.¶ In this document, we changed Client Cookie construction to be just 64 bits of entropy newly created for each new upstream server the client connects to. As a consequence, additional care needs to be taken to prevent tracking of clients. To prevent tracking, a new Client Cookie for a server MUST be created whenever the Client IP address changes.¶ Unfortunately, tracking Client IP address changes is impractical with servers that do not support DNS Cookies. To prevent tracking of clients with non-DNS Cookie-supporting servers, a client MUST NOT send a previously sent Client Cookie to a server not known to support DNS Cookies. To prevent the creation of a new Client Cookie for each query to a non-DNS Cookie-supporting server, it is RECOMMENDED to not send a Client Cookie to that server for a certain period, for example five minutes.¶ Summarizing:¶ In order to provide minimal authentication, a client MUST use a different Client Cookie for each different Server IP address.¶ To prevent tracking of clients, a new Client Cookie MUST be created when the Client IP address changes.¶ To prevent tracking of clients by a non-DNS Cookie-supporting server, a client MUST NOT send a previously sent Client Cookie to a server in the absence of an associated Server Cookie.¶ Note that it is infeasible for a client to detect a change in the public IP address when the client is behind a routing device performing Network Address Translation (NAT). A server may track the public IP address of that routing device performing the NAT. Preventing tracking of the public IP of a NAT-performing routing device is beyond the scope of this document.¶ 8.2. Server Cookie Construction [RFC7873] did not give a precise recipe for constructing Server Cookies, but it did recommend usage of a pseudorandom function strong enough to prevent the guessing of cookies. In this document, SipHash-2-4 is assigned as the pseudorandom function to be used for version 1 Server Cookies. SipHash-2-4 is considered sufficiently strong for the immediate future, but predictions about future development in cryptography and cryptanalysis are beyond the scope of this document.¶ The precise structure of version 1 Server Cookies is defined in this document. A portion of the structure is made up of unhashed data elements that are exposed in cleartext to an on-path observer. These unhashed data elements are taken along as input to the SipHash-2-4 function of which the result is the other portion of the Server Cookie, so the unhashed portion of the Server Cookie cannot be changed by an on-path attacker without also recalculating the hashed portion for which the Server Secret needs to be known.¶ One of the elements in the unhashed portion of version 1 Server Cookies is a Timestamp used to prevent Replay Attacks. Servers verifying version 1 Server Cookies need to have access to a reliable time value, one that cannot be altered by an attacker, to compare with the Timestamp value. Furthermore, all servers participating in an anycast set that validate version 1 Server Cookies need to have their clocks synchronized.¶ For an on-path adversary observing a Server Cookie (as mentioned in the first paragraph of Section 8), the cleartext Timestamp data element reveals the lifetime during which the observed Server Cookie can be used to attack the client.¶ In addition to the Security Considerations in this section, the Security Considerations section of [RFC7873] still applies.¶ 9. References 9.1. Normative References [RFC1982] Elz, R. and R. Bush, \"Serial Number Arithmetic\", RFC 1982, DOI 10.17487/RFC1982, August 1996, <https://www.rfc-editor.org/info/rfc1982>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3339] Klyne, G. and C. Newman, \"Date and Time on the Internet: Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002, <https://www.rfc-editor.org/info/rfc3339>. [RFC7873] Eastlake 3rd, D. and M. Andrews, \"Domain Name System (DNS) Cookies\", RFC 7873, DOI 10.17487/RFC7873, May 2016, <https://www.rfc-editor.org/info/rfc7873>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [SipHash-2-4] Aumasson, J. and D. J. Bernstein, \"SipHash: A Fast Short-Input PRF\", Progress in Cryptology - INDOCRYPT 2012, Lecture Notes in Computer Science, vol. 7668, December 2012, <https://doi.org/10.1007/978-3-642-34931-7_28>. 9.2. Informative References [RFC8981] Gont, F., Krishnan, S., Narten, T., and R. Draves, \"Temporary Address Extensions for Stateless Address Autoconfiguration in IPv6\", RFC 8981, DOI 10.17487/RFC8981, February 2021, <https://www.rfc-editor.org/info/rfc8981>. Appendix A. Test Vectors A.1. Learning a New Server Cookie A resolver (client) sending from IPv4 address 198.51.100.100 sends a query for example.com to an authoritative server listening on 192.0.2.53 from which it has not yet learned the server cookie.¶ The DNS requests and replies shown in this appendix are in a \"dig\"-like format. The content of the DNS COOKIE Option is shown in hexadecimal format after ; COOKIE:.¶ ;; Sending: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 57406 ;; flags:; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 2464c4abcf10c957 ;; QUESTION SECTION: ;example.com. IN A ;; QUERY SIZE: 52 ¶ The authoritative nameserver (server) is configured with the following secret: e5e973e5a6b2a43f48e7dc849e37bfcf (as hex data).¶ It receives the query on Wed Jun 5 10:53:05 UTC 2019.¶ The content of the DNS COOKIE Option that the server will return is shown below in hexadecimal format after ; COOKIE:.¶ The Timestamp field Section 4.3 in the returned Server Cookie has value 1559731985. In the format described in [RFC3339], this is 2019-06-05 10:53:05+00:00.¶ ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 57406 ;; flags: qr aa; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 2464c4abcf10c957010000005cf79f111f8130c3eee29480 (good) ;; QUESTION SECTION: ;example.com. IN A ;; ANSWER SECTION: example.com. 86400 IN A 192.0.2.34 ;; Query time: 6 msec ;; SERVER: 192.0.2.53#53(192.0.2.53) ;; WHEN: Wed Jun 5 10:53:05 UTC 2019 ;; MSD SIZE rcvd: 84 ¶ A.2. The Same Client Learning a Renewed (Fresh) Server Cookie 40 minutes later, the same resolver (client) queries the same server for example.org. It reuses the Server Cookie it learned in the previous query.¶ The Timestamp field in that previously learned Server Cookie, which is now sent along in the request, was and is 1559731985. In the format of [RFC3339], this is 2019-06-05 10:53:05+00:00.¶ ;; Sending: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50939 ;; flags:; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 2464c4abcf10c957010000005cf79f111f8130c3eee29480 ;; QUESTION SECTION: ;example.org. IN A ;; QUERY SIZE: 52 ¶ The authoritative nameserver (server) now generates a new Server Cookie. The server SHOULD do this because it can see the Server Cookie sent by the client is older than half an hour (Section 4.3), but it is also fine for a server to generate a new Server Cookie sooner or even for every answer.¶ The Timestamp field in the returned new Server Cookie has value 1559734385, which, in the format of [RFC3339], is 2019-06-05 11:33:05+00:00.¶ ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50939 ;; flags: qr aa; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 2464c4abcf10c957010000005cf7a871d4a564a1442aca77 (good) ;; QUESTION SECTION: ;example.org. IN A ;; ANSWER SECTION: example.org. 86400 IN A 192.0.2.34 ;; Query time: 6 msec ;; SERVER: 192.0.2.53#53(192.0.2.53) ;; WHEN: Wed Jun 5 11:33:05 UTC 2019 ;; MSD SIZE rcvd: 84 ¶ A.3. Another Client Learning a Renewed Server Cookie Another resolver (client) with IPv4 address 203.0.113.203 sends a request to the same server with a valid Server Cookie that it learned before (on Wed Jun 5 09:46:25 UTC 2019).¶ The Timestamp field of the Server Cookie in the request has value 1559727985, which, in the format of [RFC3339], is 2019-06-05 09:46:25+00:00.¶ Note that the Server Cookie has Reserved bytes set but is still valid with the configured secret; the Hash part is calculated taking along the Reserved bytes.¶ ;; Sending: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 34736 ;; flags:; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: fc93fc62807ddb8601abcdef5cf78f71a314227b6679ebf5 ;; QUESTION SECTION: ;example.com. IN A ;; QUERY SIZE: 52 ¶ The authoritative nameserver (server) replies with a freshly generated Server Cookie for this client conformant with this specification, i.e., with the Reserved bits set to zero.¶ The Timestamp field in the returned new Server Cookie has value 1559734700, which, in the format of [RFC3339], is 2019-06-05 11:38:20+00:00.¶ ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 34736 ;; flags: qr aa; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: fc93fc62807ddb86010000005cf7a9acf73a7810aca2381e (good) ;; QUESTION SECTION: ;example.com. IN A ;; ANSWER SECTION: example.com. 86400 IN A 192.0.2.34 ;; Query time: 6 msec ;; SERVER: 192.0.2.53#53(192.0.2.53) ;; WHEN: Wed Jun 5 11:38:20 UTC 2019 ;; MSD SIZE rcvd: 84 ¶ A.4. IPv6 Query with Rolled Over Secret The query below is from a client with IPv6 address 2001:db8:220:1:59de:d0f4:8769:82b8 to a server with IPv6 address 2001:db8:8f::53. The client has learned a valid Server Cookie before (on Wed Jun 5 13:36:57 UTC 2019) when the Server had the secret: dd3bdf9344b678b185a6f5cb60fca715. The server now uses a new secret, but it can still validate the Server Cookie provided by the client as the old secret has not expired yet.¶ The Timestamp field in the Server Cookie in the request has value 1559741817, which, in the format of [RFC3339], is 2019-06-05 13:36:57+00:00.¶ ;; Sending: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 6774 ;; flags:; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 22681ab97d52c298010000005cf7c57926556bd0934c72f8 ;; QUESTION SECTION: ;example.net. IN A ;; QUERY SIZE: 52 ¶ The authoritative nameserver (server) replies with a freshly generated server cookie for this client with its new secret: 445536bcd2513298075a5d379663c962.¶ The Timestamp field in the returned new Server Cookie has value 1559741961, which, in the format of [RFC3339], is 2019-06-05 13:39:21+00:00.¶ ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 6774 ;; flags: qr aa; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 22681ab97d52c298010000005cf7c609a6bb79d16625507a (good) ;; QUESTION SECTION: ;example.net. IN A ;; ANSWER SECTION: example.net. 86400 IN A 192.0.2.34 ;; Query time: 6 msec ;; SERVER: 2001:db8:8f::53#53(2001:db8:8f::53) ;; WHEN: Wed Jun 5 13:36:57 UTC 2019 ;; MSD SIZE rcvd: 84 ¶ Appendix B. Implementation Status At the time of writing, BIND from version 9.16 and Knot DNS from version 2.9.0 create Server Cookies according to the recipe described in this document. Unbound and NSD have a Proof-of-Concept implementation that has been tested for interoperability during the hackathon at IETF 104 in Prague. Construction of privacy maintaining Client Cookies according to the directions in this document have been implemented in the getdns library and will be in the upcoming getdns-1.6.1 release and in Stubby version 0.3.1.¶ Acknowledgements Thanks to Witold Krecicki and Pieter Lexis for valuable input, suggestions, text, and above all for implementing a prototype of an interoperable DNS Cookie in Bind9, Knot, and PowerDNS during the hackathon at IETF 104 in Prague. Thanks for valuable input and suggestions go to Ralph Dolmans, Bob Harold, Daniel Salzman, Martin Hoffmann, Mukund Sivaraman, Petr Spacek, Loganaden Velvindron, Bob Harold, Philip Homburg, Tim Wicinski, and Brian Dickson.¶ Authors' Addresses Ondrej Sury Internet Systems Consortium Czechia Email: ondrej@isc.org Willem Toorop NLnet Labs Science Park 400 1098 XH Amsterdam Netherlands Email: willem@nlnetlabs.nl Donald E. Eastlake 3rd Futurewei Technologies 2386 Panoramic Circle Apopka, FL 32703 United States of America Phone: +1-508-333-2270 Email: d3e3e3@gmail.com Mark Andrews Internet Systems Consortium 950 Charter Street Redwood City, CA 94063 United States of America Email: marka@isc.org"
    },
    {
        "Number": "9014",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Interconnect Solution for Ethernet VPN (EVPN) Overlay Networks",
        "Authors": [
            "J. Rabadan",
            "Ed.",
            "S. Sathappan",
            "W. Henderickx",
            "A. Sajassi",
            "J. Drake"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document describes how Network Virtualization Overlays (NVOs) can be connected to a Wide Area Network (WAN) in order to extend the Layer 2 connectivity required for some tenants. The solution analyzes the interaction between NVO networks running Ethernet Virtual Private Networks (EVPNs) and other Layer 2 VPN (L2VPN) technologies used in the WAN, such as Virtual Private LAN Services (VPLSs), VPLS extensions for Provider Backbone Bridging (PBB-VPLS), EVPN, or PBB-EVPN. It also describes how the existing technical specifications apply to the interconnection and extends the EVPN procedures needed in some cases. In particular, this document describes how EVPN routes are processed on Gateways (GWs) that interconnect EVPN-Overlay and EVPN-MPLS networks, as well as the Interconnect Ethernet Segment (I-ES), to provide multihoming. This document also describes the use of the Unknown MAC Route (UMR) to avoid issues of a Media Access Control (MAC) scale on Data Center Network Virtualization Edge (NVE) devices.",
        "Keywords": [
            "DCI",
            "UMR",
            "Unknown MAC Route",
            "I-ES",
            "I-ESI"
        ],
        "Content": "RFC 9014: Interconnect Solution for Ethernet VPN (EVPN) Overlay Networks RFC 9014 Interconnect for EVPN-Overlays May 2021 Rabadan, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9014 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: J. Rabadan, Ed. Nokia S. Sathappan Nokia W. Henderickx Nokia A. Sajassi Cisco J. Drake Juniper RFC 9014 Interconnect Solution for Ethernet VPN (EVPN) Overlay Networks Abstract This document describes how Network Virtualization Overlays (NVOs) can be connected to a Wide Area Network (WAN) in order to extend the Layer 2 connectivity required for some tenants. The solution analyzes the interaction between NVO networks running Ethernet Virtual Private Networks (EVPNs) and other Layer 2 VPN (L2VPN) technologies used in the WAN, such as Virtual Private LAN Services (VPLSs), VPLS extensions for Provider Backbone Bridging (PBB-VPLS), EVPN, or PBB-EVPN. It also describes how the existing technical specifications apply to the interconnection and extends the EVPN procedures needed in some cases. In particular, this document describes how EVPN routes are processed on Gateways (GWs) that interconnect EVPN-Overlay and EVPN-MPLS networks, as well as the Interconnect Ethernet Segment (I-ES), to provide multihoming. This document also describes the use of the Unknown MAC Route (UMR) to avoid issues of a Media Access Control (MAC) scale on Data Center Network Virtualization Edge (NVE) devices.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9014.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions and Terminology 3.  Decoupled Interconnect Solution for EVPN-Overlay Networks 3.1.  Interconnect Requirements 3.2.  VLAN-Based Handoff 3.3.  PW-Based Handoff 3.4.  Multihoming Solution on the GWs 3.5.  Gateway Optimizations 3.5.1.  MAC Address Advertisement Control 3.5.2.  ARP/ND Flooding Control 3.5.3.  Handling Failures between GW and WAN Edge Routers 4.  Integrated Interconnect Solution for EVPN-Overlay Networks 4.1.  Interconnect Requirements 4.2.  VPLS Interconnect for EVPN-Overlay Networks 4.2.1.  Control/Data Plane Setup Procedures on the GWs 4.2.2.  Multihoming Procedures on the GWs 4.3.  PBB-VPLS Interconnect for EVPN-Overlay Networks 4.3.1.  Control/Data Plane Setup Procedures on the GWs 4.3.2.  Multihoming Procedures on the GWs 4.4.  EVPN-MPLS Interconnect for EVPN-Overlay Networks 4.4.1.  Control plane Setup Procedures on the GWs 4.4.2.  Data Plane Setup Procedures on the GWs 4.4.3.  Multihoming Procedure Extensions on the GWs 4.4.4.  Impact on MAC Mobility Procedures 4.4.5.  Gateway Optimizations 4.4.6.  Benefits of the EVPN-MPLS Interconnect Solution 4.5.  PBB-EVPN Interconnect for EVPN-Overlay Networks 4.5.1.  Control/Data Plane Setup Procedures on the GWs 4.5.2.  Multihoming Procedures on the GWs 4.5.3.  Impact on MAC Mobility Procedures 4.5.4.  Gateway Optimizations 4.6.  EVPN-VXLAN Interconnect for EVPN-Overlay Networks 4.6.1.  Globally Unique VNIs in the Interconnect Network 4.6.2.  Downstream-Assigned VNIs in the Interconnect Network 5.  Security Considerations 6.  IANA Considerations 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgments Contributors Authors' Addresses 1. Introduction [RFC8365] discusses the use of Ethernet Virtual Private Networks (EVPNs) [RFC7432] as the control plane for Network Virtualization Overlays (NVOs), where VXLAN [RFC7348], NVGRE [RFC7637], or MPLS over GRE [RFC4023] can be used as possible data plane encapsulation options.¶ While this model provides a scalable and efficient multitenant solution within the Data Center, it might not be easily extended to the Wide Area Network (WAN) in some cases, due to the requirements and existing deployed technologies. For instance, a Service Provider might have an already deployed Virtual Private LAN Service (VPLS) [RFC4761] [RFC4762], VPLS extensions for Provider Backbone Bridging (PBB-VPLS) [RFC7041], EVPN [RFC7432], or PBB-EVPN [RFC7623] network that has to be used to interconnect Data Centers and WAN VPN users. A Gateway (GW) function is required in these cases. In fact, [RFC8365] discusses two main Data Center Interconnect (DCI) solution groups: \"DCI using GWs\" and \"DCI using ASBRs\". This document specifies the solutions that correspond to the \"DCI using GWs\" group.¶ It is assumed that the NVO GW and the WAN Edge functions can be decoupled into two separate systems or integrated into the same system. The former option will be referred to as \"decoupled interconnect solution\" throughout the document, whereas the latter one will be referred to as \"integrated interconnect solution\".¶ The specified procedures are local to the redundant GWs connecting a DC to the WAN. The document does not preclude any combination across different DCs for the same tenant. For instance, a \"Decoupled\" solution can be used in GW1 and GW2 (for DC1), and an \"Integrated\" solution can be used in GW3 and GW4 (for DC2).¶ While the Gateways and WAN Provider Edges (PEs) use existing specifications in some cases, the document also defines extensions that are specific to DCI. In particular, those extensions are:¶ The Interconnect Ethernet Segment (I-ES), an Ethernet Segment that can be associated to a set of pseudowires (PWs) or other tunnels. The I-ES defined in this document is not associated with a set of Ethernet links, as per [RFC7432], but rather with a set of virtual tunnels (e.g., a set of PWs). This set of virtual tunnels is referred to as vES [VIRTUAL-ES].¶ The use of the Unknown MAC Route (UMR) in a DCI scenario.¶ The processing of EVPN routes on Gateways with MAC-VRFs connecting EVPN-Overlay and EVPN-MPLS networks, or EVPN-Overlay and EVPN-Overlay networks.¶ 2. Conventions and Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ AC: Attachment Circuit¶ ARP: Address Resolution Protocol¶ BUM: Broadcast, Unknown Unicast and Multicast (traffic)¶ CE: Customer Equipment¶ CFM: Connectivity Fault Management¶ DC: Data Center¶ DCI: Data Center Interconnect¶ DF: Designated Forwarder¶ EVI: EVPN Instance¶ EVPN: Ethernet Virtual Private Network, as in [RFC7432]¶ EVPN Tunnel binding: refers to a tunnel to a remote PE/NVE for a given EVI. Ethernet packets in these bindings are encapsulated with the Overlay or MPLS encapsulation and the EVPN label at the bottom of the stack.¶ ES: Ethernet Segment¶ ESI: Ethernet Segment Identifier¶ GW: Gateway or Data Center Gateway¶ I-ES and I-ESI: Interconnect Ethernet Segment and Interconnect Ethernet Segment Identifier. An I-ES is defined on the GWs for multihoming to/from the WAN.¶ MAC Media Access Control¶ MAC-VRF: refers to an EVI instance in a particular node¶ MP2P and LSM tunnels: refer to multipoint-to-point and label switched multicast tunnels¶ ND: Neighbor Discovery¶ NDF: Non-Designated Forwarder¶ NVE: Network Virtualization Edge¶ NVGRE: Network Virtualization using Generic Routing Encapsulation¶ NVO: Network Virtualization Overlay¶ OAM: Operations, Administration, and Maintenance¶ PBB: Provider Backbone Bridging¶ PE: Provider Edge¶ PW: Pseudowire¶ RD: Route Distinguisher¶ RR: Route Reflector¶ RT: Route Target¶ S/C-TAG: refers to a combination of Service Tag and Customer Tag in a 802.1Q frame¶ TOR: Top-Of-Rack¶ UMR: Unknown MAC Route¶ vES: virtual Ethernet Segment¶ VNI/VSID: refers to VXLAN/NVGRE virtual identifiers¶ VPLS: Virtual Private LAN Service¶ VSI: Virtual Switch Instance or VPLS instance in a particular PE¶ VXLAN: Virtual eXtensible LAN¶ 3. Decoupled Interconnect Solution for EVPN-Overlay Networks This section describes the interconnect solution when the GW and WAN Edge functions are implemented in different systems. Figure 1 depicts the reference model described in this section. Note that, although not shown in Figure 1, GWs may have local Attachment Circuits (ACs).¶ +--+ |CE| +--+ | +----+ +----| PE |----+ +---------+ | +----+ | +---------+ +----+ | +---+ +----+ +----+ +---+ | +----+ |NVE1|--| | | |WAN | |WAN | | | |--|NVE3| +----+ | |GW1|--|Edge| |Edge|--|GW3| | +----+ | +---+ +----+ +----+ +---+ | | NVO-1 | | WAN | | NVO-2 | | +---+ +----+ +----+ +---+ | | | | |WAN | |WAN | | | | +----+ | |GW2|--|Edge| |Edge|--|GW4| | +----+ |NVE2|--| +---+ +----+ +----+ +---+ |--|NVE4| +----+ +---------+ | | +---------+ +----+ +--------------+ |<-EVPN-Overlay-->|<-VLAN->|<-WAN L2VPN->|<--PW-->|<--EVPN-Overlay->| handoff handoff Figure 1: Decoupled Interconnect Model The following section describes the interconnect requirements for this model.¶ 3.1. Interconnect Requirements The decoupled interconnect architecture is intended to be deployed in networks where the EVPN-Overlay and WAN providers are different entities and a clear demarcation is needed. This solution solves the following requirements:¶ A simple connectivity handoff between the EVPN-Overlay network provider and the WAN provider so that QoS and security enforcement are easily accomplished.¶ Independence of the L2VPN technology deployed in the WAN.¶ Multihoming between GW and WAN Edge routers, including per-service load balancing. Per-flow load balancing is not a strong requirement, since a deterministic path per service is usually required for an easy QoS and security enforcement.¶ Support of Ethernet OAM and Connectivity Fault Management (CFM) [IEEE.802.1AG] [Y.1731] functions between the GW and the WAN Edge router to detect individual AC failures.¶ Support for the following optimizations at the GW:¶ Flooding reduction of unknown unicast traffic sourced from the DC Network Virtualization Edge (NVE) devices.¶ Control of the WAN MAC addresses advertised to the DC.¶ Address Resolution Protocol (ARP) and Neighbor Discovery (ND) flooding control for the requests coming from the WAN.¶ 3.2. VLAN-Based Handoff In this option, the handoff between the GWs and the WAN Edge routers is based on VLANs [IEEE.802.1Q]. This is illustrated in Figure 1 (between the GWs in NVO-1 and the WAN Edge routers). Each MAC-VRF in the GW is connected to a different VSI/MAC-VRF instance in the WAN Edge router by using a different C-TAG VLAN ID or a different combination of S/C-TAG VLAN IDs that matches at both sides.¶ This option provides the best possible demarcation between the DC and WAN providers, and it does not require control plane interaction between both providers. The disadvantage of this model is the provisioning overhead, since the service has to be mapped to a C-TAG or S/C-TAG VLAN ID combination at both GW and WAN Edge routers.¶ In this model, the GW acts as a regular Network Virtualization Edge (NVE) towards the DC. Its control plane, data plane procedures, and interactions are described in [RFC8365].¶ The WAN Edge router acts as a (PBB-)VPLS or (PBB-)EVPN PE with Attachment Circuits (ACs) to the GWs. Its functions are described in [RFC4761], [RFC4762], [RFC6074], [RFC7432], and [RFC7623].¶ 3.3. PW-Based Handoff If MPLS between the GW and the WAN Edge router is an option, a PW-based interconnect solution can be deployed. In this option, the handoff between both routers is based on FEC128-based PWs [RFC4762] or FEC129-based PWs (for a greater level of network automation) [RFC6074]. Note that this model still provides a clear demarcation between DC and WAN (since there is a single PW between each MAC-VRF and peer VSI), and security/QoS policies may be applied on a per-PW basis. This model provides better scalability than a C-TAG-based handoff and less provisioning overhead than a combined C/S-TAG handoff. The PW-based handoff interconnect is illustrated in Figure 1 (between the NVO-2 GWs and the WAN Edge routers).¶ In this model, besides the usual MPLS procedures between GW and WAN Edge router [RFC3031], the GW MUST support an interworking function in each MAC-VRF that requires extension to the WAN:¶ If a FEC128-based PW is used between the MAC-VRF (GW) and the VSI (WAN Edge), the corresponding Virtual Connection Identifier (VCID) MUST be provisioned on the MAC-VRF and match the VCID used in the peer VSI at the WAN Edge router.¶ If BGP Auto-discovery [RFC6074] and FEC129-based PWs are used between the GW MAC-VRF and the WAN Edge VSI, the provisioning of the VPLS-ID MUST be supported on the MAC-VRF and MUST match the VPLS-ID used in the WAN Edge VSI.¶ If a PW-based handoff is used, the GW's AC (or point of attachment to the EVPN instance) uses a combination of a PW label and VLAN IDs. PWs are treated as service interfaces, defined in [RFC7432].¶ 3.4. Multihoming Solution on the GWs EVPN single-active multihoming -- i.e., per-service load-balancing multihoming -- is required in this type of interconnect.¶ The GWs will be provisioned with a unique ES for each WAN interconnect, and the handoff attachment circuits or PWs between the GW and the WAN Edge router will be assigned an ESI for each such ES. The ESI will be administratively configured on the GWs according to the procedures in [RFC7432]. This I-ES will be referred to as \"I-ES\" hereafter, and its identifier will be referred to as \"I-ESI\". Different ESI types are described in [RFC7432]. The use of Type 0 for the I-ESI is RECOMMENDED in this document.¶ The solution (on the GWs) MUST follow the single-active multihoming procedures as described in [RFC8365] for the provisioned I-ESI -- i.e., Ethernet A-D routes per ES and per EVI will be advertised to the DC NVEs for the multihoming functions, and ES routes will be advertised so that ES discovery and Designated Forwarder (DF) procedures can be followed. The MAC addresses learned (in the data plane) on the handoff links will be advertised with the I-ESI encoded in the ESI field.¶ 3.5. Gateway Optimizations The following GW features are optional and optimize the control plane and data plane in the DC.¶ 3.5.1. MAC Address Advertisement Control The use of EVPN in NVO networks brings a significant number of benefits, as described in [RFC8365]. However, if multiple DCs are interconnected into a single EVI, each DC will have to import all of the MAC addresses from each of the other DCs.¶ Even if optimized BGP techniques like RT constraint [RFC4684] are used, the number of MAC addresses to advertise or withdraw (in case of failure) by the GWs of a given DC could overwhelm the NVEs within that DC, particularly when the NVEs reside in the hypervisors.¶ The solution specified in this document uses the Unknown MAC Route (UMR) that is advertised into a given DC by each of the DC's GWs. This route is defined in [RFC7543] and is a regular EVPN MAC/IP Advertisement route in which the MAC Address Length is set to 48, the MAC address is set to 0, and the ESI field is set to the DC GW's I-ESI.¶ An NVE within that DC that understands and processes the UMR will send unknown unicast frames to one of the DC's GWs, which will then forward that packet to the correct egress PE. Note that, because the ESI is set to the DC GW's I-ESI, all-active multihoming can be applied to unknown unicast MAC addresses. An NVE that does not understand the Unknown MAC Route will handle unknown unicast as described in [RFC7432].¶ This document proposes that local policy determine whether MAC addresses and/or the UMR are advertised into a given DC. As an example, when all the DC MAC addresses are learned in the control/management plane, it may be appropriate to advertise only the UMR. Advertising all the DC MAC addresses in the control/management plane is usually the case when the NVEs reside in hypervisors. Refer to [RFC8365], Section 7.¶ It is worth noting that the UMR usage in [RFC7543] and the UMR usage in this document are different. In the former, a Virtual Spoke (V-spoke) does not necessarily learn all the MAC addresses pertaining to hosts in other V-spokes of the same network. The communication between two V-spokes is done through the Default MAC Gateway (DMG) until the V-spokes learn each other's MAC addresses. In this document, two leaf switches in the same DC are recommended for V-spokes to learn each other's MAC addresses for the same EVI. The leaf-to-leaf communication is always direct and does not go through the GW.¶ 3.5.2. ARP/ND Flooding Control Another optimization mechanism, naturally provided by EVPN in the GWs, is the Proxy ARP/ND function. The GWs should build a Proxy ARP/ND cache table, as per [RFC7432]. When the active GW receives an ARP/ND request/solicitation coming from the WAN, the GW does a Proxy ARP/ND table lookup and replies as long as the information is available in its table.¶ This mechanism is especially recommended on the GWs, since it protects the DC network from external ARP/ND-flooding storms.¶ 3.5.3. Handling Failures between GW and WAN Edge Routers Link/PE failures are handled on the GWs as specified in [RFC7432]. The GW detecting the failure will withdraw the EVPN routes, as per [RFC7432].¶ Individual AC/PW failures may be detected by OAM mechanisms. For instance:¶ If the interconnect solution is based on a VLAN handoff, Ethernet-CFM [IEEE.802.1AG] [Y.1731] may be used to detect individual AC failures on both the GW and WAN Edge router. An individual AC failure will trigger the withdrawal of the corresponding A-D per EVI route as well as the MACs learned on that AC.¶ If the interconnect solution is based on a PW handoff, the Label Distribution Protocol (LDP) PW Status bits TLV [RFC6870] may be used to detect individual PW failures on both the GW and WAN Edge router.¶ 4. Integrated Interconnect Solution for EVPN-Overlay Networks When the DC and the WAN are operated by the same administrative entity, the Service Provider can decide to integrate the GW and WAN Edge PE functions in the same router for obvious reasons to save as relates to Capital Expenditure (CAPEX) and Operating Expenses (OPEX). This is illustrated in Figure 2. Note that this model does not provide an explicit demarcation link between DC and WAN anymore. Although not shown in Figure 2, note that the GWs may have local ACs.¶ +--+ |CE| +--+ | +----+ +----| PE |----+ +---------+ | +----+ | +---------+ +----+ | +---+ +---+ | +----+ |NVE1|--| | | | | |--|NVE3| +----+ | |GW1| |GW3| | +----+ | +---+ +---+ | | NVO-1 | WAN | NVO-2 | | +---+ +---+ | | | | | | | +----+ | |GW2| |GW4| | +----+ |NVE2|--| +---+ +---+ |--|NVE4| +----+ +---------+ | | +---------+ +----+ +--------------+ |<--EVPN-Overlay--->|<-----VPLS--->|<---EVPN-Overlay-->| |<--PBB-VPLS-->| Interconnect -> |<-EVPN-MPLS-->| options |<--EVPN-Ovl-->|* |<--PBB-EVPN-->| * EVPN-Ovl stands for EVPN-Overlay (and it's an interconnect option). Figure 2: Integrated Interconnect Model 4.1. Interconnect Requirements The integrated interconnect solution meets the following requirements:¶ Control plane and data plane interworking between the EVPN-Overlay network and the L2VPN technology supported in the WAN, irrespective of the technology choice -- i.e., (PBB‑)VPLS or (PBB-)EVPN, as depicted in Figure 2.¶ Multihoming, including single-active multihoming with per-service load balancing or all-active multihoming -- i.e., per-flow load-balancing -- as long as the technology deployed in the WAN supports it.¶ Support for end-to-end MAC Mobility, Static MAC protection and other procedures (e.g., proxy-arp) described in [RFC7432] as long as EVPN-MPLS is the technology of choice in the WAN.¶ Independent inclusive multicast trees in the WAN and in the DC. That is, the inclusive multicast tree type defined in the WAN does not need to be the same as in the DC.¶ 4.2. VPLS Interconnect for EVPN-Overlay Networks 4.2.1. Control/Data Plane Setup Procedures on the GWs Regular MPLS tunnels and Targeted LDP (tLDP) / BGP sessions will be set up to the WAN PEs and RRs as per [RFC4761], [RFC4762], and [RFC6074], and overlay tunnels and EVPN will be set up as per [RFC8365]. Note that different route targets for the DC and the WAN are normally required (unless [RFC4762] is used in the WAN, in which case no WAN route target is needed). A single type-1 RD per service may be used.¶ In order to support multihoming, the GWs will be provisioned with an I-ESI (see Section 3.4), which will be unique for each interconnection. In this case, the I-ES will represent the group of PWs to the WAN PEs and GWs. All the [RFC7432] procedures are still followed for the I-ES -- e.g., any MAC address learned from the WAN will be advertised to the DC with the I-ESI in the ESI field.¶ A MAC-VRF per EVI will be created in each GW. The MAC-VRF will have two different types of tunnel bindings instantiated in two different split-horizon groups:¶ VPLS PWs will be instantiated in the WAN split-horizon group.¶ Overlay tunnel bindings (e.g., VXLAN, NVGRE) will be instantiated in the DC split-horizon group.¶ Attachment circuits are also supported on the same MAC-VRF (although not shown in Figure 2), but they will not be part of any of the above split-horizon groups.¶ Traffic received in a given split-horizon group will never be forwarded to a member of the same split-horizon group.¶ As far as BUM flooding is concerned, a flooding list will be composed of the sublist created by the inclusive multicast routes and the sublist created for VPLS in the WAN. BUM frames received from a local Attachment Circuit (AC) will be forwarded to the flooding list. BUM frames received from the DC or the WAN will be forwarded to the flooding list, observing the split-horizon group rule described above.¶ Note that the GWs are not allowed to have an EVPN binding and a PW to the same far end within the same MAC-VRF, so that loops and packet duplication are avoided. In case a GW can successfully establish both an EVPN binding and a PW to the same far-end PE, the EVPN binding will prevail, and the PW will be brought down operationally.¶ The optimization procedures described in Section 3.5 can also be applied to this model.¶ 4.2.2. Multihoming Procedures on the GWs This model supports single-active multihoming on the GWs. All-active multihoming is not supported by VPLS; therefore, it cannot be used on the GWs.¶ In this case, for a given EVI, all the PWs in the WAN split-horizon group are assigned to I-ES. All the single-active multihoming procedures as described by [RFC8365] will be followed for the I-ES.¶ The non-DF GW for the I-ES will block the transmission and reception of all the PWs in the WAN split-horizon group for BUM and unicast traffic.¶ 4.3. PBB-VPLS Interconnect for EVPN-Overlay Networks 4.3.1. Control/Data Plane Setup Procedures on the GWs In this case, there is no impact on the procedures described in [RFC7041] for the B-component. However, the I-component instances become EVI instances with EVPN-Overlay bindings and potentially local attachment circuits. A number of MAC-VRF instances can be multiplexed into the same B-component instance. This option provides significant savings in terms of PWs to be maintained in the WAN.¶ The I-ESI concept described in Section 4.2.1 will also be used for the PBB-VPLS-based interconnect.¶ B-component PWs and I-component EVPN-Overlay bindings established to the same far end will be compared. The following rules will be observed:¶ Attempts to set up a PW between the two GWs within the B-component context will never be blocked.¶ If a PW exists between two GWs for the B-component and an attempt is made to set up an EVPN binding on an I-component linked to that B-component, the EVPN binding will be kept down operationally. Note that the BGP EVPN routes will still be valid but not used.¶ The EVPN binding will only be up and used as long as there is no PW to the same far end in the corresponding B-component. The EVPN bindings in the I-components will be brought down before the PW in the B-component is brought up.¶ The optimization procedures described in Section 3.5 can also be applied to this interconnect option.¶ 4.3.2. Multihoming Procedures on the GWs This model supports single-active multihoming on the GWs. All-active multihoming is not supported by this scenario.¶ The single-active multihoming procedures as described by [RFC8365] will be followed for the I-ES for each EVI instance connected to the B-component. Note that in this case, for a given EVI, all the EVPN bindings in the I-component are assigned to the I-ES. The non-DF GW for the I-ES will block the transmission and reception of all the I-component EVPN bindings for BUM and unicast traffic. When learning MACs from the WAN, the non-DF MUST NOT advertise EVPN MAC/IP routes for those MACs.¶ 4.4. EVPN-MPLS Interconnect for EVPN-Overlay Networks If EVPN for MPLS tunnels (referred to as \"EVPN-MPLS\" hereafter) are supported in the WAN, an end-to-end EVPN solution can be deployed. The following sections describe the proposed solution as well as its impact on the procedures from [RFC7432].¶ 4.4.1. Control plane Setup Procedures on the GWs The GWs MUST establish separate BGP sessions for sending/receiving EVPN routes to/from the DC and to/from the WAN. Normally, each GW will set up one BGP EVPN session to the DC RR (or two BGP EVPN sessions if there are redundant DC RRs) and one session to the WAN RR (or two sessions if there are redundant WAN RRs).¶ In order to facilitate separate BGP processes for DC and WAN, EVPN routes sent to the WAN SHOULD carry a different Route Distinguisher (RD) than the EVPN routes sent to the DC. In addition, although reusing the same value is possible, different route targets are expected to be handled for the same EVI in the WAN and the DC. Note that the EVPN service routes sent to the DC RRs will normally include a [RFC9012] BGP encapsulation extended community with a different tunnel type than the one sent to the WAN RRs.¶ As in the other discussed options, an I-ES and its assigned I-ESI will be configured on the GWs for multihoming. This I-ES represents the WAN EVPN-MPLS PEs to the DC but also the DC EVPN-Overlay NVEs to the WAN. Optionally, different I-ESI values are configured for representing the WAN and the DC. If different EVPN-Overlay networks are connected to the same group of GWs, each EVPN-Overlay network MUST get assigned a different I-ESI.¶ Received EVPN routes will never be reflected on the GWs but instead will be consumed and re‑advertised (if needed):¶ Ethernet A-D routes, ES routes, and Inclusive Multicast routes are consumed by the GWs and processed locally for the corresponding [RFC7432] procedures.¶ MAC/IP advertisement routes will be received and imported, and if they become active in the MAC-VRF, the information will be re-advertised as new routes with the following fields:¶ The RD will be the GW's RD for the MAC-VRF.¶ The ESI will be set to the I-ESI.¶ The Ethernet-tag value will be kept from the received NLRI the received NLRI.¶ The MAC length, MAC address, IP Length, and IP address values will be kept from the received NLRI.¶ The MPLS label will be a local 20-bit value (when sent to the WAN) or a DC-global 24-bit value (when sent to the DC for encapsulations using a VNI).¶ The appropriate Route Targets (RTs) and [RFC9012] BGP encapsulation extended community will be used according to [RFC8365].¶ The GWs will also generate the following local EVPN routes that will be sent to the DC and WAN, with their corresponding RTs and [RFC9012] BGP encapsulation extended community values:¶ ES route(s) for the I-ESI(s).¶ Ethernet A-D routes per ES and EVI for the I-ESI(s). The A-D per-EVI routes sent to the WAN and the DC will have consistent Ethernet-Tag values.¶ Inclusive Multicast routes with independent tunnel-type value for the WAN and DC. For example, a P2MP Label Switched Path (LSP) may be used in the WAN, whereas ingress replication may be used in the DC. The routes sent to the WAN and the DC will have a consistent Ethernet-Tag.¶ MAC/IP advertisement routes for MAC addresses learned in local attachment circuits. Note that these routes will not include the I-ESI value in the ESI field. These routes will include a zero ESI or a non-zero ESI for local multihomed Ethernet Segments (ES). The routes sent to the WAN and the DC will have a consistent Ethernet-Tag.¶ Assuming GW1 and GW2 are peer GWs of the same DC, each GW will generate two sets of the above local service routes: set-DC will be sent to the DC RRs and will include an A-D per EVI, Inclusive Multicast, and MAC/IP routes for the DC encapsulation and RT. Set-WAN will be sent to the WAN RRs and will include the same routes but using the WAN RT and encapsulation. GW1 and GW2 will receive each other's set-DC and set-WAN. This is the expected behavior on GW1 and GW2 for locally generated routes:¶ Inclusive multicast routes: When setting up the flooding lists for a given MAC-VRF, each GW will include its DC peer GW only in the EVPN-MPLS flooding list (by default) and not the EVPN-Overlay flooding list. That is, GW2 will import two Inclusive Multicast routes from GW1 (from set-DC and set-WAN) but will only consider one of the two, giving the set-WAN route higher priority. An administrative option MAY change this preference so that the set-DC route is selected first.¶ MAC/IP advertisement routes for local attachment circuits: As above, the GW will select only one, giving the route from the set-WAN a higher priority. As with the Inclusive multicast routes, an administrative option MAY change this priority.¶ 4.4.2. Data Plane Setup Procedures on the GWs The procedure explained at the end of the previous section will make sure there are no loops or packet duplication between the GWs of the same EVPN-Overlay network (for frames generated from local ACs), since only one EVPN binding per EVI (or per Ethernet Tag in the case of VLAN-aware bundle services) will be set up in the data plane between the two nodes. That binding will by default be added to the EVPN-MPLS flooding list.¶ As for the rest of the EVPN tunnel bindings, they will be added to one of the two flooding lists that each GW sets up for the same MAC-VRF:¶ EVPN-Overlay flooding list (composed of bindings to the remote NVEs or multicast tunnel to the NVEs).¶ EVPN-MPLS flooding list (composed of MP2P or LSM tunnel to the remote PEs).¶ Each flooding list will be part of a separate split-horizon group: the WAN split-horizon group or the DC split-horizon group. Traffic generated from a local AC can be flooded to both split-horizon groups. Traffic from a binding of a split-horizon group can be flooded to the other split-horizon group and local ACs, but never to a member of its own split-horizon group.¶ When either GW1 or GW2 receives a BUM frame on an MPLS tunnel, including an ESI label at the bottom of the stack, they will perform an ESI label lookup and split-horizon filtering as per [RFC7432], in case the ESI label identifies a local ESI (I-ESI or any other nonzero ESI).¶ 4.4.3. Multihoming Procedure Extensions on the GWs This model supports single-active as well as all-active multihoming.¶ All the [RFC7432] multihoming procedures for the DF election on I-ES(s), as well as the backup-path (single-active) and aliasing (all-active) procedures, will be followed on the GWs. Remote PEs in the EVPN-MPLS network will follow regular [RFC7432] aliasing or backup-path procedures for MAC/IP routes received from the GWs for the same I-ESI. So will NVEs in the EVPN-Overlay network for MAC/IP routes received with the same I-ESI.¶ As far as the forwarding plane is concerned, by default, the EVPN-Overlay network will have an analogous behavior to the access ACs in [RFC7432] multihomed Ethernet Segments.¶ The forwarding behavior on the GWs is described below:¶ Single-active multihoming; assuming a WAN split-horizon group (comprised of EVPN-MPLS bindings), a DC split-horizon group (comprised of EVPN-Overlay bindings), and local ACs on the GWs:¶ Forwarding behavior on the non-DF: The non-DF MUST block ingress and egress forwarding on the EVPN-Overlay bindings associated to the I-ES. The EVPN-MPLS network is considered to be the core network, and the EVPN-MPLS bindings to the remote PEs and GWs will be active.¶ Forwarding behavior on the DF: The DF MUST NOT forward BUM or unicast traffic received from a given split-horizon group to a member of its own split-horizon group. Forwarding to other split-horizon groups and local ACs is allowed (as long as the ACs are not part of an ES for which the node is non-DF). As per [RFC7432] and for split-horizon purposes, when receiving BUM traffic on the EVPN-Overlay bindings associated to an I-ES, the DF GW SHOULD add the I-ESI label when forwarding to the peer GW over EVPN-MPLS.¶ When receiving EVPN MAC/IP routes from the WAN, the non-DF MUST NOT reoriginate the EVPN routes and advertise them to the DC peers. In the same way, EVPN MAC/IP routes received from the DC MUST NOT be advertised to the WAN peers. This is consistent with [RFC7432] and allows the remote PE/NVEs to know who the primary GW is, based on the reception of the MAC/IP routes.¶ All-active multihoming; assuming a WAN split-horizon group (comprised of EVPN-MPLS bindings), a DC split-horizon group (comprised of EVPN-Overlay bindings), and local ACs on the GWs:¶ Forwarding behavior on the non-DF: The non-DF follows the same behavior as the non-DF in the single-active case, but only for BUM traffic. Unicast traffic received from a split-horizon group MUST NOT be forwarded to a member of its own split-horizon group but can be forwarded normally to the other split-horizon groups and local ACs. If a known unicast packet is identified as a \"flooded\" packet, the procedures for BUM traffic MUST be followed.¶ Forwarding behavior on the DF: The DF follows the same behavior as the DF in the single-active case, but only for BUM traffic. Unicast traffic received from a split-horizon group MUST NOT be forwarded to a member of its own split-horizon group but can be forwarded normally to the other split-horizon group and local ACs. If a known unicast packet is identified as a \"flooded\" packet, the procedures for BUM traffic MUST be followed. As per [RFC7432] and for split-horizon purposes, when receiving BUM traffic on the EVPN-Overlay bindings associated to an I-ES, the DF GW MUST add the I-ESI label when forwarding to the peer GW over EVPN-MPLS.¶ Contrary to the single-active multihoming case, both DF and non-DF reoriginate and advertise MAC/IP routes received from the WAN/DC peers, adding the corresponding I-ESI so that the remote PE/NVEs can perform regular aliasing, as per [RFC7432].¶ The example in Figure 3 illustrates the forwarding of BUM traffic originated from an NVE on a pair of all-active multihoming GWs.¶ |<--EVPN-Overlay--->|<--EVPN-MPLS-->| +---------+ +--------------+ +----+ BUM +---+ | |NVE1+----+----> | +-+-----+ | +----+ | | DF |GW1| | | | | | +-+-+ | | ++--+ | | | | +--> |PE1| | +--->X +-+-+ | ++--+ | NDF| | | | +----+ | |GW2<-+ | |NVE2+--+ +-+-+ | +----+ +--------+ | +------------+ v +--+ |CE| +--+ Figure 3: Multihoming BUM Forwarding GW2 is the non-DF for the I-ES and blocks the BUM forwarding. GW1 is the DF and forwards the traffic to PE1 and GW2. Packets sent to GW2 will include the ESI label for the I-ES. Based on the ESI label, GW2 identifies the packets as I-ES-generated packets and will only forward them to local ACs (CE in the example) and not back to the EVPN-Overlay network.¶ 4.4.4. Impact on MAC Mobility Procedures MAC Mobility procedures described in [RFC7432] are not modified by this document.¶ Note that an intra-DC MAC move still leaves the MAC attached to the same I-ES, so under the rules of [RFC7432], this is not considered a MAC Mobility event. Only when the MAC moves from the WAN domain to the DC domain (or from one DC to another) will the MAC be learned from a different ES, and the MAC Mobility procedures will kick in.¶ The sticky-bit indication in the MAC Mobility extended community MUST be propagated between domains.¶ 4.4.5. Gateway Optimizations All the Gateway optimizations described in Section 3.5 MAY be applied to the GWs when the interconnect is based on EVPN-MPLS.¶ In particular, the use of the Unknown MAC Route, as described in Section 3.5.1, solves some transient packet-duplication issues in cases of all-active multihoming, as explained below.¶ Consider the diagram in Figure 2 for EVPN-MPLS interconnect and all-active multihoming, and the following sequence:¶ (a) MAC Address M1 is advertised from NVE3 in EVI-1.¶ (b) GW3 and GW4 learn M1 for EVI-1 and re-advertise M1 to the WAN with I-ESI-2 in the ESI field.¶ (c) GW1 and GW2 learn M1 and install GW3/GW4 as next hops following the EVPN aliasing procedures.¶ (d) Before NVE1 learns M1, a packet arrives at NVE1 with destination M1. If the Unknown MAC Route had not been advertised into the DC, NVE1 would have flooded the packet throughout the DC, in particular to both GW1 and GW2. If the same VNI/VSID is used for both known unicast and BUM traffic, as is typically the case, there is no indication in the packet that it is a BUM packet, and both GW1 and GW2 would have forwarded it, creating packet duplication. However, because the Unknown MAC Route had been advertised into the DC, NVE1 will unicast the packet to either GW1 or GW2.¶ (e) Since both GW1 and GW2 know M1, the GW receiving the packet will forward it to either GW3 or GW4.¶ 4.4.6. Benefits of the EVPN-MPLS Interconnect Solution The \"DCI using ASBRs\" solution described in [RFC8365] and the GW solution with EVPN-MPLS interconnect may be seen as similar, since they both retain the EVPN attributes between Data Centers and throughout the WAN. However, the EVPN-MPLS interconnect solution on the GWs has significant benefits compared to the \"DCI using ASBRs\" solution:¶ As in any of the described GW models, this solution supports the connectivity of local attachment circuits on the GWs. This is not possible in a \"DCI using ASBRs\" solution.¶ Different data plane encapsulations can be supported in the DC and the WAN, while a uniform encapsulation is needed in the \"DCI using ASBRs\" solution.¶ Optimized multicast solution, with independent inclusive multicast trees in DC and WAN.¶ MPLS label aggregation: For the case where MPLS labels are signaled from the NVEs for MAC/IP advertisement routes, this solution provides label aggregation. A remote PE MAY receive a single label per GW MAC-VRF, as opposed to a label per NVE/MAC-VRF connected to the GW MAC-VRF. For instance, in Figure 2, PE would receive only one label for all the routes advertised for a given MAC-VRF from GW1, as opposed to a label per NVE/MAC-VRF.¶ The GW will not propagate MAC Mobility for the MACs moving within a DC. Mobility intra-DC is solved by all the NVEs in the DC. The MAC Mobility procedures on the GWs are only required in case of mobility across DCs.¶ Proxy-ARP/ND function on the DC GWs can be leveraged to reduce ARP/ND flooding in the DC or/and the WAN.¶ 4.5. PBB-EVPN Interconnect for EVPN-Overlay Networks PBB-EVPN [RFC7623] is yet another interconnect option. It requires the use of GWs where I-components and associated B-components are part of EVI instances.¶ 4.5.1. Control/Data Plane Setup Procedures on the GWs EVPN will run independently in both components, the I-component MAC-VRF and B-component MAC-VRF. Compared to [RFC7623], the DC customer MACs (C-MACs) are no longer learned in the data plane on the GW but in the control plane through EVPN running on the I-component. Remote C-MACs coming from remote PEs are still learned in the data plane. B-MACs in the B‑component will be assigned and advertised following the procedures described in [RFC7623].¶ An I-ES will be configured on the GWs for multihoming, but its I-ESI will only be used in the EVPN control plane for the I-component EVI. No unreserved ESIs will be used in the control plane of the B-component EVI, as per [RFC7623]. That is, the I-ES will be represented to the WAN PBB-EVPN PEs using shared or dedicated B-MACs.¶ The rest of the control plane procedures will follow [RFC7432] for the I-component EVI and [RFC7623] for the B-component EVI.¶ From the data plane perspective, the I-component and B-component EVPN bindings established to the same far end will be compared, and the I-component EVPN-Overlay binding will be kept down following the rules described in Section 4.3.1.¶ 4.5.2. Multihoming Procedures on the GWs This model supports single-active as well as all-active multihoming.¶ The forwarding behavior of the DF and non-DF will be changed based on the description outlined in Section 4.4.3, substituting the WAN split-horizon group for the B-component, and using [RFC7623] procedures for the traffic sent or received on the B-component.¶ 4.5.3. Impact on MAC Mobility Procedures C-MACs learned from the B-component will be advertised in EVPN within the I-component EVI scope. If the C-MAC was previously known in the I-component database, EVPN would advertise the C-MAC with a higher sequence number, as per [RFC7432]. From the perspective of Mobility and the related procedures described in [RFC7432], the C-MACs learned from the B-component are considered local.¶ 4.5.4. Gateway Optimizations All the considerations explained in Section 4.4.5 are applicable to the PBB-EVPN interconnect option.¶ 4.6. EVPN-VXLAN Interconnect for EVPN-Overlay Networks If EVPN for Overlay tunnels is supported in the WAN, and a GW function is required, an end-to-end EVPN solution can be deployed. While multiple Overlay tunnel combinations at the WAN and the DC are possible (MPLSoGRE, NVGRE, etc.), VXLAN is described here, given its popularity in the industry. This section focuses on the specific case of EVPN for VXLAN (EVPN-VXLAN hereafter) and the impact on the [RFC7432] procedures.¶ The procedures described in Section 4.4 apply to this section, too, only substituting EVPN-MPLS for EVPN-VXLAN control plane specifics and using [RFC8365] \"Local Bias\" procedures instead of Section 4.4.3. Since there are no ESI labels in VXLAN, GWs need to rely on \"Local Bias\" to apply split horizon on packets generated from the I-ES and sent to the peer GW.¶ This use case assumes that NVEs need to use the VNIs or VSIDs as globally unique identifiers within a Data Center, and a Gateway needs to be employed at the edge of the Data-Center network to translate the VNI or VSID when crossing the network boundaries. This GW function provides VNI and tunnel-IP-address translation. The use case in which local downstream-assigned VNIs or VSIDs can be used (like MPLS labels) is described by [RFC8365].¶ While VNIs are globally significant within each DC, there are two possibilities in the interconnect network:¶ Globally unique VNIs in the interconnect network. In this case, the GWs and PEs in the interconnect network will agree on a common VNI for a given EVI. The RT to be used in the interconnect network can be autoderived from the agreed-upon interconnect VNI. The VNI used inside each DC MAY be the same as the interconnect VNI.¶ Downstream-assigned VNIs in the interconnect network. In this case, the GWs and PEs MUST use the proper RTs to import/export the EVPN routes. Note that even if the VNI is downstream assigned in the interconnect network, and unlike option (a), it only identifies the <Ethernet Tag, GW> pair and not the <Ethernet Tag, egress PE> pair. The VNI used inside each DC MAY be the same as the interconnect VNI. GWs SHOULD support multiple VNI spaces per EVI (one per interconnect network they are connected to).¶ In both options, NVEs inside a DC only have to be aware of a single VNI space, and only GWs will handle the complexity of managing multiple VNI spaces. In addition to VNI translation above, the GWs will provide translation of the tunnel source IP for the packets generated from the NVEs, using their own IP address. GWs will use that IP address as the BGP next hop in all the EVPN updates to the interconnect network.¶ The following sections provide more details about these two options.¶ 4.6.1. Globally Unique VNIs in the Interconnect Network Considering Figure 2, if a host H1 in NVO-1 needs to communicate with a host H2 in NVO-2, and assuming that different VNIs are used in each DC for the same EVI (e.g., VNI-10 in NVO-1 and VNI-20 in NVO-2), then the VNIs MUST be translated to a common interconnect VNI (e.g., VNI-100) on the GWs. Each GW is provisioned with a VNI translation mapping so that it can translate the VNI in the control plane when sending BGP EVPN route updates to the interconnect network. In other words, GW1 and GW2 MUST be configured to map VNI-10 to VNI-100 in the BGP update messages for H1's MAC route. This mapping is also used to translate the VNI in the data plane in both directions: that is, VNI-10 to VNI-100 when the packet is received from NVO-1 and the reverse mapping from VNI-100 to VNI-10 when the packet is received from the remote NVO-2 network and needs to be forwarded to NVO-1.¶ The procedures described in Section 4.4 will be followed, considering that the VNIs advertised/received by the GWs will be translated accordingly.¶ 4.6.2. Downstream-Assigned VNIs in the Interconnect Network In this case, if a host H1 in NVO-1 needs to communicate with a host H2 in NVO-2, and assuming that different VNIs are used in each DC for the same EVI, e.g., VNI-10 in NVO-1 and VNI-20 in NVO-2, then the VNIs MUST be translated as in Section 4.6.1. However, in this case, there is no need to translate to a common interconnect VNI on the GWs. Each GW can translate the VNI received in an EVPN update to a locally assigned VNI advertised to the interconnect network. Each GW can use a different interconnect VNI; hence, this VNI does not need to be agreed upon on all the GWs and PEs of the interconnect network.¶ The procedures described in Section 4.4 will be followed, taking into account the considerations above for the VNI translation.¶ 5. Security Considerations This document applies existing specifications to a number of interconnect models. The security considerations included in those documents, such as [RFC7432], [RFC8365], [RFC7623], [RFC4761], and [RFC4762] apply to this document whenever those technologies are used.¶ As discussed, [RFC8365] discusses two main DCI solution groups: \"DCI using GWs\" and \"DCI using ASBRs\". This document specifies the solutions that correspond to the \"DCI using GWs\" group. It is important to note that the use of GWs provides a superior level of security on a per-tenant basis, compared to the use of ASBRs. This is due to the fact that GWs need to perform a MAC lookup on the frames being received from the WAN, and they apply security procedures, such as filtering of undesired frames, filtering of frames with a source MAC that matches a protected MAC in the DC, or application of MAC-duplication procedures defined in [RFC7432]. On ASBRs, though, traffic is forwarded based on a label or VNI swap, and there is usually no visibility of the encapsulated frames, which can carry malicious traffic.¶ In addition, the GW optimizations specified in this document provide additional protection of the DC tenant systems. For instance, the MAC-address advertisement control and Unknown MAC Route defined in Section 3.5.1 protect the DC NVEs from being overwhelmed with an excessive number of MAC/IP routes being learned on the GWs from the WAN. The ARP/ND flooding control described in Section 3.5.2 can reduce/suppress broadcast storms being injected from the WAN.¶ Finally, the reader should be aware of the potential security implications of designing a DCI with the decoupled interconnect solution (Section 3) or the integrated interconnect solution (Section 4). In the decoupled interconnect solution, the DC is typically easier to protect from the WAN, since each GW has a single logical link to one WAN PE, whereas in the Integrated solution, the GW has logical links to all the WAN PEs that are attached to the tenant. In either model, proper control plane and data plane policies should be put in place in the GWs in order to protect the DC from potential attacks coming from the WAN.¶ 6. IANA Considerations This document has no IANA actions.¶ 7. References 7.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4761] Kompella, K., Ed. and Y. Rekhter, Ed., \"Virtual Private LAN Service (VPLS) Using BGP for Auto-Discovery and Signaling\", RFC 4761, DOI 10.17487/RFC4761, January 2007, <https://www.rfc-editor.org/info/rfc4761>. [RFC4762] Lasserre, M., Ed. and V. Kompella, Ed., \"Virtual Private LAN Service (VPLS) Using Label Distribution Protocol (LDP) Signaling\", RFC 4762, DOI 10.17487/RFC4762, January 2007, <https://www.rfc-editor.org/info/rfc4762>. [RFC6074] Rosen, E., Davie, B., Radoaca, V., and W. Luo, \"Provisioning, Auto-Discovery, and Signaling in Layer 2 Virtual Private Networks (L2VPNs)\", RFC 6074, DOI 10.17487/RFC6074, January 2011, <https://www.rfc-editor.org/info/rfc6074>. [RFC7041] Balus, F., Ed., Sajassi, A., Ed., and N. Bitar, Ed., \"Extensions to the Virtual Private LAN Service (VPLS) Provider Edge (PE) Model for Provider Backbone Bridging\", RFC 7041, DOI 10.17487/RFC7041, November 2013, <https://www.rfc-editor.org/info/rfc7041>. [RFC7432] Sajassi, A., Ed., Aggarwal, R., Bitar, N., Isaac, A., Uttaro, J., Drake, J., and W. Henderickx, \"BGP MPLS-Based Ethernet VPN\", RFC 7432, DOI 10.17487/RFC7432, February 2015, <https://www.rfc-editor.org/info/rfc7432>. [RFC7543] Jeng, H., Jalil, L., Bonica, R., Patel, K., and L. Yong, \"Covering Prefixes Outbound Route Filter for BGP-4\", RFC 7543, DOI 10.17487/RFC7543, May 2015, <https://www.rfc-editor.org/info/rfc7543>. [RFC7623] Sajassi, A., Ed., Salam, S., Bitar, N., Isaac, A., and W. Henderickx, \"Provider Backbone Bridging Combined with Ethernet VPN (PBB-EVPN)\", RFC 7623, DOI 10.17487/RFC7623, September 2015, <https://www.rfc-editor.org/info/rfc7623>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8365] Sajassi, A., Ed., Drake, J., Ed., Bitar, N., Shekhar, R., Uttaro, J., and W. Henderickx, \"A Network Virtualization Overlay Solution Using Ethernet VPN (EVPN)\", RFC 8365, DOI 10.17487/RFC8365, March 2018, <https://www.rfc-editor.org/info/rfc8365>. [RFC9012] Patel, K., Van de Velde, G., Sangli, S., and J. Scudder, \"The BGP Tunnel Encapsulation Attribute\", RFC 9012, DOI 10.17487/RFC9012, April 2021, <https://www.rfc-editor.org/info/rfc9012>. 7.2. Informative References [IEEE.802.1AG] IEEE, \"IEEE Standard for Local and Metropolitan Area Networks Virtual Bridged Local Area Networks Amendment 5: Connectivity Fault Management\", IEEE standard 802.1ag-2007, January 2008. [IEEE.802.1Q] IEEE, \"IEEE Standard for Local and metropolitan area networks--Bridges and Bridged Networks\", IEEE standard 802.1Q-2014, DOI 10.1109/IEEESTD.2014.6991462, December 2014, <https://doi.org/10.1109/IEEESTD.2014.6991462>. [RFC3031] Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol Label Switching Architecture\", RFC 3031, DOI 10.17487/RFC3031, January 2001, <https://www.rfc-editor.org/info/rfc3031>. [RFC4023] Worster, T., Rekhter, Y., and E. Rosen, Ed., \"Encapsulating MPLS in IP or Generic Routing Encapsulation (GRE)\", RFC 4023, DOI 10.17487/RFC4023, March 2005, <https://www.rfc-editor.org/info/rfc4023>. [RFC4684] Marques, P., Bonica, R., Fang, L., Martini, L., Raszuk, R., Patel, K., and J. Guichard, \"Constrained Route Distribution for Border Gateway Protocol/MultiProtocol Label Switching (BGP/MPLS) Internet Protocol (IP) Virtual Private Networks (VPNs)\", RFC 4684, DOI 10.17487/RFC4684, November 2006, <https://www.rfc-editor.org/info/rfc4684>. [RFC6870] Muley, P., Ed. and M. Aissaoui, Ed., \"Pseudowire Preferential Forwarding Status Bit\", RFC 6870, DOI 10.17487/RFC6870, February 2013, <https://www.rfc-editor.org/info/rfc6870>. [RFC7348] Mahalingam, M., Dutt, D., Duda, K., Agarwal, P., Kreeger, L., Sridhar, T., Bursell, M., and C. Wright, \"Virtual eXtensible Local Area Network (VXLAN): A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks\", RFC 7348, DOI 10.17487/RFC7348, August 2014, <https://www.rfc-editor.org/info/rfc7348>. [RFC7637] Garg, P., Ed. and Y. Wang, Ed., \"NVGRE: Network Virtualization Using Generic Routing Encapsulation\", RFC 7637, DOI 10.17487/RFC7637, September 2015, <https://www.rfc-editor.org/info/rfc7637>. [VIRTUAL-ES] Sajassi, A., Brissette, P., Schell, R., Drake, J. E., and J. Rabadan, \"EVPN Virtual Ethernet Segment\", Work in Progress, Internet-Draft, draft-ietf-bess-evpn-virtual-eth-segment-06, 9 March 2020, <https://tools.ietf.org/html/draft-ietf-bess-evpn-virtual-eth-segment-06>. [Y.1731] ITU-T, \"OAM functions and mechanisms for Ethernet based networks\", ITU-T Recommendation Y.1731, August 2019. Acknowledgments The authors would like to thank Neil Hart, Vinod Prabhu, and Kiran Nagaraj for their valuable comments and feedback. We would also like to thank Martin Vigoureux and Alvaro Retana for their detailed reviews and comments.¶ Contributors In addition to the authors listed on the front page, the following coauthors have also contributed to this document:¶ Ravi Shekhar Juniper Networks Anil Lohiya Juniper Networks Wen Lin Juniper Networks Florin Balus Cisco Patrice Brissette Cisco Senad Palislamovic Nokia Dennis Cai Alibaba Authors' Addresses Jorge Rabadan (editor) Nokia 777 E. Middlefield Road Mountain View, CA 94043 United States of America Email: jorge.rabadan@nokia.com Senthil Sathappan Nokia Email: senthil.sathappan@nokia.com Wim Henderickx Nokia Email: wim.henderickx@nokia.com Ali Sajassi Cisco Email: sajassi@cisco.com John Drake Juniper Email: jdrake@juniper.net"
    },
    {
        "Number": "9016",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Flow and Service Information Model for Deterministic Networking (DetNet)",
        "Authors": [
            "B. Varga",
            "J. Farkas",
            "R. Cummings",
            "Y. Jiang",
            "D. Fedyk"
        ],
        "Date": "2021-03",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.",
        "Keywords": [
            "DetNet",
            "Flow and Service Information Model"
        ],
        "Content": "RFC 9016: Flow and Service Information Model for Deterministic Networking (DetNet) RFC 9016 DetNet Flow Information Model March 2021 Varga, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9016 Category: Informational Published: March 2021 ISSN: 2070-1721 Authors: B. Varga Ericsson J. Farkas Ericsson R. Cummings National Instruments Y. Jiang Huawei D. Fedyk LabN Consulting RFC 9016 Flow and Service Information Model for Deterministic Networking (DetNet) Abstract This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9016.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Goals 1.2.  Non-Goals 2.  Terminology 2.1.  Terms Used in This Document 2.2.  Abbreviations 2.3.  Naming Conventions 3.  DetNet Domain and Its Modeling 3.1.  DetNet Service Overview 3.2.  Reference Points Used in Modeling 3.3.  Information Elements 4.  App-Flow-Related Parameters 4.1.  App-Flow Characteristics 4.2.  App-Flow Requirements 5.  DetNet Flow-Related Parameters 5.1.  Management ID of the DetNet Flow 5.2.  Payload Type of the DetNet Flow 5.3.  Format of the DetNet Flow 5.4.  Identification and Specification of DetNet Flows 5.4.1.  DetNet MPLS Flow Identification and Specification 5.4.2.  DetNet IP Flow Identification and Specification 5.5.  Traffic Specification of the DetNet Flow 5.6.  Endpoints of the DetNet Flow 5.7.  Rank of the DetNet Flow 5.8.  Status of the DetNet Flow 5.9.  Requirements of the DetNet Flow 5.9.1.  Minimum Bandwidth of the DetNet Flow 5.9.2.  Maximum Latency of the DetNet Flow 5.9.3.  Maximum Latency Variation of the DetNet Flow 5.9.4.  Maximum Loss of the DetNet Flow 5.9.5.  Maximum Consecutive Loss of the DetNet Flow 5.9.6.  Maximum Misordering Tolerance of the DetNet Flow 5.10. BiDir Requirement of the DetNet Flow 6.  DetNet Service-Related Parameters 6.1.  Management ID of the DetNet Service 6.2.  Delivery Type of the DetNet Service 6.3.  Delivery Profile of the DetNet Service 6.3.1.  Minimum Bandwidth of the DetNet Service 6.3.2.  Maximum Latency of the DetNet Service 6.3.3.  Maximum Latency Variation of the DetNet Service 6.3.4.  Maximum Loss of the DetNet Service 6.3.5.  Maximum Consecutive Loss of the DetNet Service 6.3.6.  Maximum Misordering Tolerance of the DetNet Service 6.4.  Connectivity Type of the DetNet Service 6.5.  BiDir Requirement of the DetNet Service 6.6.  Rank of the DetNet Service 6.7.  Status of the DetNet Service 7.  Flow-Specific Operations 7.1.  Join Operation 7.2.  Leave Operation 7.3.  Modify Operation 8.  Summary 9.  IANA Considerations 10. Security Considerations 11. References 11.1.  Normative References 11.2.  Informative References Authors' Addresses 1. Introduction Deterministic Networking (DetNet) provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low packet loss rates and assured maximum end-to-end delivery latency. A description of the general background and concepts of DetNet can be found in [RFC8655].¶ This document describes the DetNet flow and service information model. For reference, [RFC3444] describes the rationale behind information models in general. This document describes the flow and service information models for operators and users to understand DetNet services and for implementors as a guide to the functionality required by DetNet services.¶ The DetNet architecture treats the DetNet-related data plane functions decomposed into two sub-layers: a service sub-layer and a forwarding sub-layer. The service sub-layer is used to provide DetNet service protection and reordering. The forwarding sub-layer provides resource allocation (to ensure low loss, assured latency, and limited out-of-order delivery) and leverages traffic engineering mechanisms.¶ DetNet service utilizes IP or MPLS, and DetNet is currently defined for IP and MPLS networks, as shown in Figure 1, which is a reprint of Figure 2 from [RFC8938]. IEEE 802.1 Time-Sensitive Networking (TSN) utilizes Ethernet and is defined over Ethernet networks. A DetNet flow includes one or more application-level flow (App-flow) as payload. App-flows can be Ethernet, MPLS, or IP flows, which impacts which header fields are utilized to identify a flow. DetNet flows are identified by the DetNet encapsulation of App-flow(s) (e.g., MPLS labels, IP 6-tuples, etc.). In some scenarios, App-flow and DetNet flow look similar on the wire (e.g., Layer 3 (L3) App-flow over a DetNet IP network).¶ +-----+ | TSN | +-------+ +-+-----+-+ | DN IP | | DN MPLS | +--+--+----+----+ +-+---+-----+-+ | TSN | DN MPLS | | TSN | DN IP | +-----+---------+ +-----+-------+ Figure 1: DetNet Service Examples as per Data Plane Framework As shown in Figure 1 and as described in [RFC8938], a DetNet flow can be treated as an App-flow, e.g., at DetNet flow aggregation or in a sub-network that interconnects DetNet nodes.¶ The DetNet flow and service information model provided by this document contains both DetNet-flow- and App-flow-specific information in an integrated fashion.¶ In a given network scenario, three information models can be distinguished:¶ Flow information models that describe characteristics of data flows. These models describe, in detail, all relevant aspects of a flow that are needed to support the flow properly by the network between the source and the destination(s).¶ Service information models that describe characteristics of services being provided for data flows over a network. These models can be treated as an information model that is network operator independent.¶ Configuration information models that describe, in detail, the settings required on network nodes to provide proper service to a data flow.¶ Service and flow information models are used between the user and the network operator. Configuration information models are used between the management/control plane entity of the network and the network nodes. They are shown in Figure 2.¶ User Network Operator flow/service /\\ info model +---+ / \\ <---------------> | X | management/control ---- +-+-+ plane entity ^ | configuration | info model +------------+ v | | +-+ | v network +-+ v +-+ nodes +-+ +-+ +-+ Figure 2: Usage of Information Models (Flow, Service, and Configuration) The DetNet flow and service information model is based on [RFC8655] and the concept of the data model specified by [IEEE8021Qcc]. In addition to the TSN data model, [IEEE8021Qcc] also specifies configuration of TSN features (e.g., traffic scheduling specified by [IEEE8021Qbv]). The common architecture and flow information model allow configured features to be consistent in certain deployment scenarios, e.g., when the network that provides the DetNet service includes both L3 and L2 network segments.¶ 1.1. Goals As expressed in the DetNet WG Charter [IETFDetNet], the DetNet WG collaborates with IEEE 802.1 TSN in order to define a common architecture for both Layers 2 and 3. This is beneficial for several reasons, e.g., in order to simplify implementations and maintain consistency across diverse networks. The flow and service information models are also aligned for those reasons. Therefore, the DetNet flow and service information models described in this document are based on [IEEE8021Qcc], which is an amendment to [IEEE8021Q].¶ This document specifies flow and service information models only.¶ 1.2. Non-Goals This document does not specify flow data models or DetNet configuration. Therefore, the goals of this document differ from the goals of [IEEE8021Qcc], which also specifies the TSN data model and configuration of certain TSN features.¶ The DetNet-specific YANG data model is described in [DETNET-YANG].¶ 2. Terminology 2.1. Terms Used in This Document This document uses the terminology established in the DetNet architecture [RFC8655] and the DetNet data plane framework [RFC8938]. The reader is assumed to be familiar with these documents and any terminology defined therein. The DetNet <=> TSN dictionary of [RFC8655] is used to perform translation from [IEEE8021Qcc] to this document.¶ The following terminology is used in accordance with [RFC8655]:¶ App-flow The payload (data) carried over a DetNet service.¶ DetNet flow A sequence of packets that conform uniquely to a flow identifier and to which the DetNet service is to be provided. It includes any DetNet headers added to support the DetNet service and forwarding sub-layers.¶ The following terminology is introduced in this document:¶ Source Reference point for an App-flow, where the flow starts.¶ Destination Reference point for an App-flow, where the flow terminates.¶ DN Ingress Reference point for the start of a DetNet flow. Networking technology-specific encapsulation may be added here to the served App-flow(s).¶ DN Egress Reference point for the end of a DetNet flow. Networking technology-specific encapsulation may be removed here from the served App-flow(s).¶ 2.2. Abbreviations The following abbreviations are used in this document:¶ DetNet Deterministic Networking¶ DN DetNet¶ MPLS Multiprotocol Label Switching¶ PSN Packet Switched Network¶ TSN Time-Sensitive Networking¶ 2.3. Naming Conventions The following naming conventions were used for naming information model components in this document. It is recommended that extensions of the model use the same conventions.¶ Descriptive names are used.¶ Names start with uppercase letters.¶ Composed names use capital letters for the first letter of each component. All other letters are lowercase, even for abbreviations. Exceptions are made for abbreviations containing a mixture of lowercase and capital letters, such as IPv6. Example composed names are SourceMacAddress and DestinationIPv6Address.¶ 3. DetNet Domain and Its Modeling 3.1. DetNet Service Overview The DetNet service can be defined as a service that provides a capability to carry a unicast or a multicast data flow for an application with constrained requirements on network performance, e.g., low packet loss rate and/or latency.¶ Figures 5 and 8 in [RFC8655] show the DetNet service-related reference points and main components.¶ 3.2. Reference Points Used in Modeling From a service-design perspective, a fundamental question is the location of the service/flow endpoints, i.e., where the service/flow starts and ends.¶ App-flow-specific reference points are the source (where it starts) and the destination (where it terminates). Similarly, a DetNet flow has reference points termed \"DN Ingress\" (where a DetNet flow starts) and \"DN Egress\" (where a DetNet flow ends). These reference points may coexist in the same node (e.g., in a DetNet IP end system). DN Ingress and DN Egress reference points are intermediate reference points for a served App-flow.¶ In this document, all reference points are assumed to be packet-based reference points. A DN Ingress may add and a DN Egress may remove networking technology-specific encapsulation to/from the served App-flow(s) (e.g., MPLS label(s), UDP, and IP headers).¶ 3.3. Information Elements The DetNet flow information model and the service information model rely on three groups of information elements:¶ App-flow-related parameters: These describe the App-flow characteristics (e.g., identification, encapsulation, traffic specification, endpoints, status, etc.) and the App-flow service expectations (e.g., delay, loss, etc.).¶ DetNet flow-related parameters: These describe the DetNet flow characteristics (e.g., identification, format, traffic specification, endpoints, rank, etc.).¶ DetNet service-related parameters: These describe the expected service characteristics (e.g., delivery type, connectivity delay/loss, status, rank, etc.).¶ In the information model, a DetNet flow contains one or more (aggregated) App-flows (N:1 mapping). During DetNet aggregation, the aggregated DetNet flows are treated simply as App-flows and the aggregate is the DetNet flow, which provides N:1 mapping. Similarly, there is an aggregated many-to-one relationship for the DetNet flow(s) to the DetNet service.¶ 4. App-Flow-Related Parameters When DetNet service is required by time-/loss-sensitive application(s) running on an end system during communication with its peer(s), the resulting data exchange has various requirements on delay and/or loss parameters.¶ 4.1. App-Flow Characteristics App-flow characteristics are described by the following parameters:¶ FlowID: a unique (management) identifier of the App-flow, which can be used to define the N:1 mapping of App-flows to a DetNet flow¶ FlowType: set by the encapsulation format of the flow, which can be Ethernet (TSN), MPLS, or IP¶ DataFlowSpecification: a flow descriptor, defining which packets belongs to a flow, using specific packet header fields, such as src-addr, dst-addr, label, VLAN-ID, etc.¶ TrafficSpecification: a flow descriptor, defining traffic parameters, such as packet size, transmission time interval, and maximum packets per time interval¶ FlowEndpoints: delineates the start and end reference points of the App-flow by pointing to the source interface/node and destination interface(s)/node(s)¶ FlowStatus: indicates the status of the App-flow with respect to the establishment of the flow by the connected network, e.g., ready, failed, etc.¶ FlowRank: indicates the rank of this flow relative to other flows in the connected network¶ Note: When defining the N:1 mapping of App-flows to a DetNet flow, the App-flows must have the same FlowType and different DataFlowSpecification parameters.¶ 4.2. App-Flow Requirements App-flow requirements are described by the following parameters:¶ FlowRequirements: defines the attributes of the App-flow regarding bandwidth, latency, latency variation, loss, and misordering tolerance¶ FlowBiDir: defines the data path requirement of the App-flow whether it must share the same data path and physical path for both directions through the network, e.g., to provide congruent paths in the two directions¶ 5. DetNet Flow-Related Parameters The data model specified by [IEEE8021Qcc] describes data flows using TSN service as periodic flows with fixed packet size (i.e., Constant Bitrate (CBR) flows) or with variable packet size. The same concept is applied for flows using DetNet service.¶ Latency and loss parameters are correlated because the effect of late delivery can result in data loss for an application. However, not all applications require hard limits on both latency and loss. For example, some real-time applications allow graceful degradation if loss happens (e.g., sample-based data processing and media distribution). Some other applications may require high-bandwidth connections that make use of packet replication techniques that are economically challenging or even impossible. Some applications may not tolerate loss but are not delay sensitive (e.g., bufferless sensors). Time- or loss-sensitive applications may have somewhat special requirements, especially for loss (e.g., no loss over two consecutive communication cycles, very low outage time, etc.).¶ DetNet flows have the following attributes:¶ DnFlowID (Section 5.1)¶ DnPayloadType (Section 5.2)¶ DnFlowFormat (Section 5.3)¶ DnFlowSpecification (Section 5.4)¶ DnTrafficSpecification (Section 5.5)¶ DnFlowEndpoints (Section 5.6)¶ DnFlowRank (Section 5.7)¶ DnFlowStatus (Section 5.8)¶ DetNet flows have the following requirement attributes:¶ DnFlowRequirements (Section 5.9)¶ DnFlowBiDir (Section 5.10)¶ Flow attributes are described in the following sections.¶ 5.1. Management ID of the DetNet Flow A unique (management) identifier is needed for each DetNet flow within the DetNet domain. It is specified by DnFlowID. It can be used to define the N:1 mapping of DetNet flows to a DetNet service.¶ 5.2. Payload Type of the DetNet Flow The DnPayloadType attribute is set according to the encapsulated App-flow format. The attribute can be Ethernet, MPLS, or IP.¶ 5.3. Format of the DetNet Flow The DnFlowFormat attribute is set according to the DetNet PSN technology. The attribute can be MPLS or IP.¶ 5.4. Identification and Specification of DetNet Flows Identification options for DetNet flows at the Ingress/Egress and within the DetNet domain are specified as follows; see Section 5.4.1 for DetNet MPLS flows and Section 5.4.2 for DetNet IP flows.¶ 5.4.1. DetNet MPLS Flow Identification and Specification The identification of DetNet MPLS flows within the DetNet domain is based on the MPLS context in the service information model. The attributes are specific to the MPLS forwarding paradigm within the DetNet domain [RFC8964]. DetNet MPLS flows can be identified and specified by the following attributes:¶ SLabel¶ FLabelStack¶ 5.4.2. DetNet IP Flow Identification and Specification DetNet IP flows can be identified and specified by the following attributes [RFC8939]:¶ SourceIpAddress¶ DestinationIpAddress¶ IPv6FlowLabel¶ Dscp¶ Protocol¶ SourcePort¶ DestinationPort¶ IPSecSpi¶ The IP 6-tuple that is used for DetNet IP flow identification consists of items a, b, d, e, f, and g. Items c and h are additional attributes that can be used for DetNet flow identification in addition to the 6-tuple. The 6-tuple and use of wild cards for these attributes are specified in [RFC8939].¶ 5.5. Traffic Specification of the DetNet Flow The DnTrafficSpecification attributes specify how the DN Ingress transmits packets for the DetNet flow. This is effectively the promise/request of the DN Ingress to the network. The network uses this traffic specification to allocate resources and adjust queue parameters in network nodes.¶ TrafficSpecification has the following attributes:¶ Interval: the period of time in which the traffic specification is specified¶ MaxPacketsPerInterval: the maximum number of packets that the Ingress will transmit in one Interval¶ MaxPayloadSize: the maximum payload size that the Ingress will transmit¶ MinPayloadSize: the minimum payload size that the Ingress will transmit¶ MinPacketsPerInterval: the minimum number of packets that the Ingress will transmit in one Interval¶ These attributes can be used to describe any type of traffic (e.g., CBR, Variable Bitrate (VBR), etc.) and can be used during resource allocation to represent worst-case scenarios. Intervals are specified as an integer number of nanoseconds. PayloadSizes are specified in octets.¶ Flows exceeding the traffic specification (i.e., having more traffic than defined by the maximum attributes) may receive a different network behavior than the DetNet network has been engineered for. Excess traffic due to malicious or malfunctioning devices can be prevented or mitigated (e.g., through the use of existing mechanisms, such as policing and shaping).¶ When MinPayloadSize and MinPacketsPerInterval parameters are used, all packets less than the MinPayloadSize will be counted as being of the size MinPayloadSize during packet processing when packet size matters, e.g., when policing; all flows having less than MinPacketsPerInterval will be counted as having MinPacketsPerInterval when the number of packets per interval matters, e.g., during resource reservation. However, flows having less than MinPacketsPerInterval may result in a different network behavior than the DetNet network has been engineered for. MinPayloadSize and MinPacketsPerInterval parameters, for example, may be used when engineering the latency bounds of a DetNet flow when Packet Ordering Function (POF) is applied to the given DetNet flow.¶ Further optional attributes can be considered to achieve more efficient resource allocation. Such optional attributes might be worth for flows with soft requirements (i.e., the flow is only loss sensitive or only delay sensitive but not both delay and loss sensitive). Possible options about how to extend DnTrafficSpecification attributes is for further discussion.¶ 5.6. Endpoints of the DetNet Flow The DnFlowEndpoints attribute defines the start and end reference points of the DetNet flow by pointing to the ingress interface/node and egress interface(s)/node(s). Depending on the network scenario, it defines an interface or a node. Interface can be defined, for example, if the App-flow is a TSN Stream, and it is received over a well-defined User-to-Network Interface (UNI). For example, for App-flows with MPLS encapsulation, defining an ingress node is more common when a per-platform label space is used.¶ 5.7. Rank of the DetNet Flow The DnFlowRank attribute provides the rank of this flow relative to other flows in the DetNet domain. Rank (range: 0-255) is used by the DetNet domain to decide which flows can and cannot exist when network resources reach their limit. Rank is used to help to determine which flows can be bumped (i.e., removed from node configuration thereby releasing its resources) if, for example, a port of a node becomes oversubscribed (e.g., due to network reconfiguration). DnFlowRank value 0 is the highest priority.¶ 5.8. Status of the DetNet Flow The DnFlowStatus attribute provides the status of the DetNet flow with respect to the establishment of the flow by the DetNet domain.¶ DnFlowStatus includes the following attributes:¶ DnIngressStatus is an enumeration for the status of the flow's Ingress reference point:¶ None: No Ingress.¶ Ready: Ingress is ready.¶ Failed: Ingress failed.¶ OutOfService: Administratively blocked.¶ DnEgressStatus is an enumeration for the status of the flow's Egress reference points:¶ None: No Egress.¶ Ready: All Egresses are ready.¶ PartialFailed: One or more Egress is ready, and one or more Egress failed. The DetNet flow can be used if the Ingress is Ready.¶ Failed: All Egresses failed.¶ OutOfService: All Egresses are administratively blocked.¶ FailureCode is a nonzero code that specifies the error if the DetNet flow encounters a failure (e.g., packet replication and elimination is requested but not possible or DnIngressStatus is Failed, DnEgressStatus is Failed, or DnEgressStatus is PartialFailed).¶ Defining FailureCodes for DetNet is out of scope for this document. Table 46-1 of [IEEE8021Qcc] describes TSN failure codes.¶ 5.9. Requirements of the DetNet Flow The DnFlowRequirements attribute specifies requirements to ensure the service level desired for the DetNet flow.¶ DnFlowRequirements includes the following attributes:¶ MinBandwidth (Section 5.9.1)¶ MaxLatency (Section 5.9.2)¶ MaxLatencyVariation (Section 5.9.3)¶ MaxLoss (Section 5.9.4)¶ MaxConsecutiveLossTolerance (Section 5.9.5)¶ MaxMisordering (Section 5.9.6)¶ 5.9.1. Minimum Bandwidth of the DetNet Flow MinBandwidth is the minimum bandwidth that has to be guaranteed for the DetNet flow. MinBandwidth is specified in octets per second.¶ 5.9.2. Maximum Latency of the DetNet Flow MaxLatency is the maximum latency from Ingress to Egress(es) for a single packet of the DetNet flow. MaxLatency is specified as an integer number of nanoseconds.¶ 5.9.3. Maximum Latency Variation of the DetNet Flow MaxLatencyVariation is the difference between the minimum and the maximum end-to-end, one-way latency. MaxLatencyVariation is specified as an integer number of nanoseconds.¶ 5.9.4. Maximum Loss of the DetNet Flow MaxLoss defines the maximum Packet Loss Rate (PLR) requirement for the DetNet flow between the Ingress and Egress(es) and the loss measurement interval.¶ 5.9.5. Maximum Consecutive Loss of the DetNet Flow Some applications have special loss requirements, such as MaxConsecutiveLossTolerance. The maximum consecutive loss tolerance parameter describes the maximum number of consecutive packets whose loss can be tolerated. The maximum consecutive loss tolerance can be measured, for example, based on sequence number.¶ 5.9.6. Maximum Misordering Tolerance of the DetNet Flow MaxMisordering describes the tolerable maximum number of packets that can be received out of order. The value zero for the maximum allowed misordering indicates that in-order delivery is required; misordering cannot be tolerated.¶ The maximum allowed misordering can be measured, for example, based on sequence numbers. When a packet arrives at the egress after a packet with a higher sequence number, the difference between the sequence number values cannot be bigger than \"MaxMisordering + 1\".¶ 5.10. BiDir Requirement of the DetNet Flow The DnFlowBiDir attribute defines the requirement that the flow and the corresponding reverse direction flow must share the same path (links and nodes) through the routed or switch network in the DetNet domain, e.g., to provide congruent paths in the two directions that share fate and path characteristics.¶ 6. DetNet Service-Related Parameters The DetNet service has the following attributes:¶ DnServiceID (Section 6.1)¶ DnServiceDeliveryType (Section 6.2)¶ DnServiceDeliveryProfile (Section 6.3)¶ DNServiceConnectivity (Section 6.4)¶ DnServiceBiDir (Section 6.5)¶ DnServiceRank (Section 6.6)¶ DnServiceStatus (Section 6.7)¶ Service attributes are described in the following sections.¶ 6.1. Management ID of the DetNet Service The DnServiceId attribute is a unique (management) identifier for each DetNet service within the DetNet domain. It can be used to define the many-to-one mapping of DetNet flows to a DetNet service.¶ 6.2. Delivery Type of the DetNet Service The DnServiceDeliveryType attribute is set according to the payload of the served DetNet flow (i.e., the encapsulated App-flow format). The attribute can be Ethernet, MPLS, or IP.¶ 6.3. Delivery Profile of the DetNet Service The DnServiceDeliveryProfile attribute specifies the delivery profile to ensure proper serving of the DetNet flow.¶ DnServiceDeliveryProfile includes the following attributes:¶ MinBandwidth (Section 6.3.1)¶ MaxLatency (Section 6.3.2)¶ MaxLatencyVariation (Section 6.3.3)¶ MaxLoss (Section 6.3.4)¶ MaxConsecutiveLossTolerance (Section 6.3.5)¶ MaxMisordering (Section 6.3.6)¶ 6.3.1. Minimum Bandwidth of the DetNet Service MinBandwidth is the minimum bandwidth that has to be guaranteed for the DetNet service. MinBandwidth is specified in octets per second and excludes additional DetNet header (if any).¶ 6.3.2. Maximum Latency of the DetNet Service MaxLatency is the maximum latency from Ingress to Egress(es) for a single packet of the DetNet flow. MaxLatency is specified as an integer number of nanoseconds.¶ 6.3.3. Maximum Latency Variation of the DetNet Service MaxLatencyVariation is the difference between the minimum and the maximum end-to-end, one-way latency. MaxLatencyVariation is specified as an integer number of nanoseconds.¶ 6.3.4. Maximum Loss of the DetNet Service MaxLoss defines the maximum Packet Loss Rate (PLR) parameter for the DetNet service between the Ingress and Egress(es) of the DetNet domain.¶ 6.3.5. Maximum Consecutive Loss of the DetNet Service Some applications have a special loss requirement, such as MaxConsecutiveLossTolerance. The maximum consecutive loss tolerance parameter describes the maximum number of consecutive packets whose loss can be tolerated. The maximum consecutive loss tolerance can be measured, for example, based on sequence number.¶ 6.3.6. Maximum Misordering Tolerance of the DetNet Service MaxMisordering describes the tolerable maximum number of packets that can be received out of order. The maximum allowed misordering can be measured, for example, based on sequence number. The value zero for the maximum allowed misordering indicates that in-order delivery is required; misordering cannot be tolerated.¶ 6.4. Connectivity Type of the DetNet Service Two connectivity types are distinguished: point-to-point (p2p) and point-to-multipoint (p2mp). Connectivity type p2mp may be created by a forwarding function (e.g., p2mp LSP). (Note that from a service perspective, mp2mp connectivity can be treated as a superposition of p2mp connections.)¶ 6.5. BiDir Requirement of the DetNet Service The DnServiceBiDir attribute defines the requirement that the flow and the corresponding reverse direction flow must share the same path (links and nodes) through the routed or switch network in the DetNet domain, e.g., to provide congruent paths in the two directions that share fate and path characteristics.¶ 6.6. Rank of the DetNet Service The DnServiceRank attribute provides the rank of a service instance relative to other services in the DetNet domain. DnServiceRank (range: 0-255) is used by the network in case of network resource limitation scenarios. DnServiceRank value 0 is the highest priority.¶ 6.7. Status of the DetNet Service The DnServiceStatus information group includes elements that specify the status of the service-specific state of the DetNet domain. This information group informs the user whether or not the service is ready for use.¶ DnServiceStatus includes the following attributes:¶ DnServiceIngressStatus is an enumeration for the status of the service's Ingress:¶ None: No Ingress.¶ Ready: Ingress is ready.¶ Failed: Ingress failed.¶ OutOfService: Administratively blocked.¶ DnServiceEgressStatus is an enumeration for the status of the service's Egress:¶ None: No Egress.¶ Ready: All Egresses are ready.¶ PartialFailed: One or more Egress is ready, and one or more Egress failed. The DetNet flow can be used if the Ingress is Ready.¶ Failed: All Egresses failed.¶ OutOfService: Administratively blocked.¶ DnServiceFailureCode is a nonzero code that specifies the error if the DetNet service encounters a failure (e.g., packet replication and elimination is requested but not possible or DnServiceIngressStatus is Failed, DnServiceEgressStatus is Failed, or DnServiceEgressStatus is PartialFailed).¶ Defining DnServiceFailureCodes for DetNet service is out of scope for this document. Table 46-1 of [IEEE8021Qcc] describes TSN failure codes.¶ 7. Flow-Specific Operations The DetNet flow information model relies on three high-level information groups:¶ DnIngress: The DnIngress information group includes elements that specify the source for a single DetNet flow. This information group is applied from the user of the DetNet service to the network.¶ DnEgress: The DnEgress information group includes elements that specify the destination for a single DetNet flow. This information group is applied from the user of the DetNet service to the network.¶ DnFlowStatus: The DnFlowStatus information group includes elements that specify the status of the flow in the network. This information group is applied from the network to the user of the DetNet service. This information group informs the user whether or not the DetNet flow is ready for use.¶ There are three possible operations for each DetNet flow with respect to its DetNet service at a DN Ingress or a DN Egress (similar to App-flows at a source or a destination):¶ Join: DN Ingress/DN Egress intends to join the flow.¶ Leave: DN Ingress/DN Egress intends to leave the flow.¶ Modify: DN Ingress/DN Egress intends to change the flow.¶ 7.1. Join Operation For the join operation, the DnFlowSpecification, DnFlowRank, DnFlowEndpoint, and DnTrafficSpecification are included within the DnIngress or DnEgress information groups. For the join operation, the DnServiceRequirements groups can be included.¶ 7.2. Leave Operation For the leave operation, the DnFlowSpecification and DnFlowEndpoint are included within the DnIngress or DnEgress information groups.¶ 7.3. Modify Operation For the modify operation, the DnFlowSpecification, DnFlowRank, DnFlowEndpoint, and DnTrafficSpecification are included within the DnIngress or DnEgress information group. For the join operation, the DnServiceRequirements groups can be included.¶ The Modify operation can be considered to address cases when a flow is slightly changed, e.g., only MaxPayloadSize (Section 5.5) has been changed. The advantage of having a Modify is that it allows initiation of a change of flow spec while leaving the current flow operating until the change is accepted. If there is no linkage between the Join and the Leave, then while figuring out whether the new flow spec can be supported, the controller entity has to assume that the resources committed to the current flow are in use. By using Modify, the controller entity knows that the resources supporting the current flow can be available for supporting the altered flow. Modify is considered to be an optional operation due to possible controller plane limitations.¶ 8. Summary This document describes the DetNet flow information model and the service information model for DetNet IP networks and DetNet MPLS networks. These models are used as input for creating the DetNet-specific YANG module.¶ 9. IANA Considerations This document has no IANA actions.¶ 10. Security Considerations The external interfaces of the DetNet domain need to be subject to appropriate confidentiality. Additionally, knowledge of which flows/services are provided to a customer or delivered by a network operator may supply information that can be used in a variety of security attacks. Security considerations for DetNet are described in detail in [DETNET-SECURITY]. General security considerations are described in [RFC8655]. This document discusses modeling the information, not how it is exchanged.¶ 11. References 11.1. Normative References [IEEE8021Qcc] IEEE, \"IEEE Standard for Local and Metropolitan Area Networks--Bridges and Bridged Networks -- Amendment 31: Stream Reservation Protocol (SRP) Enhancements and Performance Improvements\", DOI 10.1109/IEEESTD.2018.8514112, IEEE 802.1Qcc-2018, October 2013, <https://ieeexplore.ieee.org/document/8514112/>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8939] Varga, B., Ed., Farkas, J., Berger, L., Fedyk, D., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane: IP\", RFC 8939, DOI 10.17487/RFC8939, November 2020, <https://www.rfc-editor.org/info/rfc8939>. [RFC8964] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., Bryant, S., and J. Korhonen, \"Deterministic Networking (DetNet) Data Plane: MPLS\", RFC 8964, DOI 10.17487/RFC8964, January 2021, <https://www.rfc-editor.org/info/rfc8964>. 11.2. Informative References [DETNET-SECURITY] Grossman, E., Mizrahi, T., and A. J. Hacker, \"Deterministic Networking (DetNet) Security Considerations\", Work in Progress, Internet-Draft, draft-ietf-detnet-security-16, 2 March 2021, <https://tools.ietf.org/html/draft-ietf-detnet-security-16>. [DETNET-YANG] Geng, X., Chen, M., Ryoo, Y., Fedyk, D., Rahman, R., and Z. Li, \"Deterministic Networking (DetNet) YANG Model\", Work in Progress, Internet-Draft, draft-ietf-detnet-yang-11, 19 February 2021, <https://tools.ietf.org/html/draft-ietf-detnet-yang-11>. [IEEE8021Q] IEEE, \"IEEE Standard for Local and Metropolitan Area Networks--Bridges and Bridged Networks\", DOI 10.1109/IEEESTD.2018.8403927, IEEE 802.1Q-2018, July 2018, <https://ieeexplore.ieee.org/document/8403927>. [IEEE8021Qbv] IEEE, \"IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic\", DOI 10.1109/IEEESTD.2016.8613095, IEEE 802.1Qbv-2015, March 2016, <https://ieeexplore.ieee.org/document/8613095>. [IETFDetNet] IETF, \"Deterministic Networking (detnet)\", <https://datatracker.ietf.org/wg/detnet/charter/>. [RFC3444] Pras, A. and J. Schoenwaelder, \"On the Difference between Information Models and Data Models\", RFC 3444, DOI 10.17487/RFC3444, January 2003, <https://www.rfc-editor.org/info/rfc3444>. [RFC8938] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane Framework\", RFC 8938, DOI 10.17487/RFC8938, November 2020, <https://www.rfc-editor.org/info/rfc8938>. Authors' Addresses Balázs Varga Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: balazs.a.varga@ericsson.com János Farkas Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: janos.farkas@ericsson.com Rodney Cummings National Instruments Bldg. C 11500 N. Mopac Expwy Austin, TX 78759-3504 United States of America Email: rodney.cummings@ni.com Yuanlong Jiang Huawei Bantian, Longgang district Shenzhen 518129 China Email: jiangyuanlong@huawei.com Don Fedyk LabN Consulting, L.L.C. Email: dfedyk@labn.net"
    },
    {
        "Number": "9017",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Special-Purpose Label Terminology",
        "Authors": [
            "L. Andersson",
            "K. Kompella",
            "A. Farrel"
        ],
        "Date": "2021-04",
        "More Info": "Updates RFC 3032, RFC 7274",
        "Status": "Proposed Standard",
        "Abstract": "This document discusses and recommends terminology that may be used when MPLS Special-Purpose Labels (SPLs) are specified and documented.  This document applies that terminology change to the relevant IANA registry and also clarifies the use of the Entropy Label Indicator (7) when immediately preceded by the Extension Label (15).   This document updates RFCs 3032 and 7274.",
        "Keywords": [
            "MPLS",
            "Extended Special-Purpose Label",
            "Base Special-Purpose Label",
            "Reserved Label",
            "Entropy Label Indicator"
        ],
        "Content": "RFC 9017: Special-Purpose Label Terminology RFC 9017 SPL Terminology April 2021 Andersson, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9017 Updates: 3032, 7274 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: L. Andersson Bronze Dragon Consulting K. Kompella Juniper Networks A. Farrel Old Dog Consulting RFC 9017 Special-Purpose Label Terminology Abstract This document discusses and recommends terminology that may be used when MPLS Special-Purpose Labels (SPLs) are specified and documented.¶ This document applies that terminology change to the relevant IANA registry and also clarifies the use of the Entropy Label Indicator (7) when immediately preceded by the Extension Label (15).¶ This document updates RFCs 3032 and 7274.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9017.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Terminology 2.  Background 2.1.  GMPLS Special-Purpose Labels 3.  Terminology and Abbreviations 4.  Clarification on Handling of the Entropy Label Indicator 5.  Security Considerations 6.  IANA Considerations 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgements Contributors Authors' Addresses 1. Introduction RFC 7274 [RFC7274] made some changes to the terminology used for MPLS Special-Purpose Labels but did not define consistent terminology.¶ One thing that RFC 7274 did was to deprecate the use of the term \"reserved labels\" when describing a range of labels allocated from a registry maintained by IANA. The term \"Reserved\" in such a registry means \"set aside, not to be used\", but that range of labels was available for allocation according to the policies set out in that registry. The name \"Special-Purpose Labels\" was introduced in RFC 7274 in place of the previous term, and the abbreviation \"SPL\" was recommended.¶ At the time of writing the first draft version of this document, the IETF was in the process of allocating the very first SPLs from the Extended SPL (eSPL) range [RFC8595]. This document discusses and recommends terminology and abbreviations to be used when talking about and documenting Special-Purpose Labels.¶ This document updates RFC 3032 [RFC3032] and RFC 7274 [RFC7274] in that it changes the terminology for both Base SPLs (previously referred to simply as \"Special-Purpose Labels\") and Extended SPLs.¶ This document applies that terminology change to the relevant IANA registry and also clarifies the use of the Entropy Label Indicator (7) when immediately preceded by the Extension Label (15).¶ 1.1. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2. Background Two sets of SPLs are defined for use in MPLS:¶ The range 0-15 (Base Special-Purpose Labels (bSPLs) as described in this document) is specified in RFC 3032 [RFC3032].¶ The range 0-1048575 of eSPLs is specified in RFC 7274 [RFC7274].¶ The values 0-15 have been reserved and are never to be allocated.¶ The values 16-239 are available for allocation.¶ The values 240-255 are for experimental use.¶ The values 256-1048575 are currently not available for allocation. A Standards Track RFC would be needed to change this rule, and that RFC would need to define the ranges that are made available for allocation and the registration policy for those ranges.¶ 2.1. GMPLS Special-Purpose Labels Note that IANA maintains a registry that is called \"Special-Purpose Generalized Label Values\". Labels in that registry have special meaning when present in certain signaling objects, are 32 bits long, and are not to be confused with MPLS forwarding-plane labels. This document does not make any changes to the GMPLS registry or to how labels from that registry are described.¶ 3. Terminology and Abbreviations Prior to the publication of this document, IANA maintained a name space for \"Special-Purpose Multiprotocol Label Switching (MPLS) Label Values\" code points [SPL-NAME-SPACE]. Within this name space, there are two registries. One was called the \"Special-Purpose MPLS Label Values\" registry [bSPL]. The other was called the \"Extended Special-Purpose MPLS Label Values\" registry [eSPL].¶ The difference in the name of the name space and the first registry is only that the MPLS abbreviation is expanded. This document makes no change to the name of the name space itself (i.e., \"Special-Purpose Multiprotocol Label Switching (MPLS) Label Values\"). This document changes the name of the first registry to \"Base Special-Purpose MPLS Label Values\" but leaves the name of the latter registry unchanged as \"Extended Special-Purpose MPLS Label Values\".¶ The following conventions will be used in specifications and when talking about SPLs.¶ Collectively, the two (unrelated) ranges (0-15 and 16-1048575) are known as \"Special-Purpose Labels\" (SPLs).¶ SPLs from the range 0-15 are called \"Base Special-Purpose Labels\" (bSPLs).¶ SPLs from the range 16-1048575 are called \"Extended Special-Purpose Labels\" (eSPLs). (Note that the reserved values 0-15 from the \"Extended Special-Purpose MPLS Label Values\" registry do not need a name, as they are not available for allocation and MUST NOT be used.)¶ The combination of the Extension Label (XL) (value 15, which is a bSPL and is also called the \"xSPL\") and an eSPL is called a \"Composite Special-Purpose Label\" (cSPL).¶ This results in label stacks such as the examples shown in Figures 1 and 2.¶ 0 31 | MPLS Label Stack entry | +--------+--------+--------+--------+ | MPLS Label Stack entry | +--------+--------+--------+--------+ bSPL | Base SPL | +--------+--------+--------+--------+ | MPLS Label Stack entry (cont.) | Figure 1: Example of Label Stack 0 31 | MPLS Label Stack entry | +--------+--------+--------+--------+ | MPLS Label Stack entry | +--------+--------+--------+--------+ xSPL | Extension Label (XL) | <--+ +--------+--------+--------+--------+ |--- cSPL eSPL | Extended SPL | <--+ +--------+--------+--------+--------+ | MPLS Label Stack entry (cont.) | Figure 2: Example of Label Stack 4. Clarification on Handling of the Entropy Label Indicator Section 3.1 of [RFC7274] contains two paragraphs that describe the handling of the Entropy Label Indicator (label 7). These paragraphs have introduced some confusion about whether the Entropy Label Indicator can be present when immediately preceded by the Extension Label. This document updates [RFC7274] by replacing those paragraphs as follows.¶ OLD¶ Values 0-15 of the \"Extended Special-Purpose MPLS Label Values\" registry are set aside as reserved. Furthermore, values 0-6 and 8-15 MUST NOT appear in the data plane following an XL; an LSR processing a packet with an XL at the top of the label stack followed by a label with value 0-6 or 8-15 MUST drop the packet.¶ Label 7 (when received) retains its meaning as Entropy Label Indicator (ELI) whether a regular special-purpose label or an ESPL; this is because of backwards compatibility with existing implemented and deployed code and hardware that looks for the ELI without verifying if the previous label is XL or not. However, when an LSR inserts an entropy label, it MUST insert the ELI as a regular special-purpose label, not as an ESPL.¶ NEW¶ Values 0-15 of the \"Extended Special-Purpose MPLS Label Values\" registry are set aside as reserved. Furthermore, an implementation MUST NOT place a label with a value in the range 0-15 in the label stack immediately following an XL; an LSR processing a packet with an XL at the top of the label stack immediately followed by a label with a value in the range 0-15 MUST drop the packet.¶ When inspecting a label stack to find an Entropy Label Indicator (ELI -- label 7), a preexisting implementation may fail to inspect the previous label and thus not notice that it is an XL. Such systems can continue to process the entropy information and forward the packet when the previous label is an XL without causing harm. However, the packet will be dropped when the XL reaches the top of the stack at another LSR.¶ END¶ 5. Security Considerations This document describes the terminology to be used when describing and specifying the use of SPLs. It does not affect forwarding in the MPLS data plane, nor does it have any effect on how Label Switched Paths are established by an MPLS control plane or by a centralized controller.¶ This document does not aim to describe existing implementations of SPLs or potential vulnerabilities of SPLs.¶ 6. IANA Considerations IANA has changed the name of the registry once called \"Special-Purpose MPLS Label Values\" to now be called \"Base Special-Purpose MPLS Label Values\" [bSPL].¶ IANA has also updated the \"Base Special-Purpose MPLS Label Values\" registry by changing the description for value 15 from \"Extension Label\" to \"Extension Label (XL)\" and also adding this document as a reference.¶ Table 1: Updated Entry for Value 15 in the \"Base Special-Purpose MPLS Label Values\" Registry Value Description Reference 15 Extension Label (XL) RFC 7274, RFC 9017 7. References 7.1. Normative References [bSPL] IANA, \"Base Special-Purpose MPLS Label Values\", <https://www.iana.org/assignments/mpls-label-values/>. [eSPL] IANA, \"Extended Special-Purpose MPLS Label Values\", <https://www.iana.org/assignments/mpls-label-values/>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3032] Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y., Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack Encoding\", RFC 3032, DOI 10.17487/RFC3032, January 2001, <https://www.rfc-editor.org/info/rfc3032>. [RFC7274] Kompella, K., Andersson, L., and A. Farrel, \"Allocating and Retiring Special-Purpose MPLS Labels\", RFC 7274, DOI 10.17487/RFC7274, June 2014, <https://www.rfc-editor.org/info/rfc7274>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [SPL-NAME-SPACE] IANA, \"Special-Purpose Multiprotocol Label Switching (MPLS) Label Values\", <https://www.iana.org/assignments/mpls-label-values/>. 7.2. Informative References [RFC8595] Farrel, A., Bryant, S., and J. Drake, \"An MPLS-Based Forwarding Plane for Service Function Chaining\", RFC 8595, DOI 10.17487/RFC8595, June 2019, <https://www.rfc-editor.org/info/rfc8595>. Acknowledgements We would like to thank the Routing Directorate reviewer, Eric Gray, for a detailed, careful, and insightful review, and Tom Petch for pointing out several issues of clarity.¶ Contributors The following individual contributed text to this document:¶ Stewart Bryant Futurewei Technologies Inc. Email: stewart.bryant@gmail.com Authors' Addresses Loa Andersson Bronze Dragon Consulting Email: loa@pi.nu Kireeti Kompella Juniper Networks Email: kireeti@juniper.net Adrian Farrel Old Dog Consulting Email: adrian@olddog.co.uk"
    },
    {
        "Number": "9001",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Using TLS to Secure QUIC",
        "Authors": [
            "M. Thomson",
            "Ed.",
            "S. Turner",
            "Ed."
        ],
        "Date": "2021-05",
        "More Info": "Errata",
        "Status": "Proposed Standard",
        "Abstract": "This document describes how Transport Layer Security (TLS) is used to secure QUIC.",
        "Keywords": [
            "crypto",
            "opportunistic encryption",
            "plaintext quic"
        ],
        "Content": "RFC 9001: Using TLS to Secure QUIC RFC 9001 Using TLS to Secure QUIC May 2021 Thomson & Turner Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9001 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: M. Thomson, Ed. Mozilla S. Turner, Ed. sn3rd RFC 9001 Using TLS to Secure QUIC Abstract This document describes how Transport Layer Security (TLS) is used to secure QUIC.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9001.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Notational Conventions 2.1.  TLS Overview 3.  Protocol Overview 4.  Carrying TLS Messages 4.1.  Interface to TLS 4.1.1.  Handshake Complete 4.1.2.  Handshake Confirmed 4.1.3.  Sending and Receiving Handshake Messages 4.1.4.  Encryption Level Changes 4.1.5.  TLS Interface Summary 4.2.  TLS Version 4.3.  ClientHello Size 4.4.  Peer Authentication 4.5.  Session Resumption 4.6.  0-RTT 4.6.1.  Enabling 0-RTT 4.6.2.  Accepting and Rejecting 0-RTT 4.6.3.  Validating 0-RTT Configuration 4.7.  HelloRetryRequest 4.8.  TLS Errors 4.9.  Discarding Unused Keys 4.9.1.  Discarding Initial Keys 4.9.2.  Discarding Handshake Keys 4.9.3.  Discarding 0-RTT Keys 5.  Packet Protection 5.1.  Packet Protection Keys 5.2.  Initial Secrets 5.3.  AEAD Usage 5.4.  Header Protection 5.4.1.  Header Protection Application 5.4.2.  Header Protection Sample 5.4.3.  AES-Based Header Protection 5.4.4.  ChaCha20-Based Header Protection 5.5.  Receiving Protected Packets 5.6.  Use of 0-RTT Keys 5.7.  Receiving Out-of-Order Protected Packets 5.8.  Retry Packet Integrity 6.  Key Update 6.1.  Initiating a Key Update 6.2.  Responding to a Key Update 6.3.  Timing of Receive Key Generation 6.4.  Sending with Updated Keys 6.5.  Receiving with Different Keys 6.6.  Limits on AEAD Usage 6.7.  Key Update Error Code 7.  Security of Initial Messages 8.  QUIC-Specific Adjustments to the TLS Handshake 8.1.  Protocol Negotiation 8.2.  QUIC Transport Parameters Extension 8.3.  Removing the EndOfEarlyData Message 8.4.  Prohibit TLS Middlebox Compatibility Mode 9.  Security Considerations 9.1.  Session Linkability 9.2.  Replay Attacks with 0-RTT 9.3.  Packet Reflection Attack Mitigation 9.4.  Header Protection Analysis 9.5.  Header Protection Timing Side Channels 9.6.  Key Diversity 9.7.  Randomness 10. IANA Considerations 11. References 11.1.  Normative References 11.2.  Informative References Appendix A.  Sample Packet Protection A.1.  Keys A.2.  Client Initial A.3.  Server Initial A.4.  Retry A.5.  ChaCha20-Poly1305 Short Header Packet Appendix B.  AEAD Algorithm Analysis B.1.  Analysis of AEAD_AES_128_GCM and AEAD_AES_256_GCM Usage Limits B.1.1.  Confidentiality Limit B.1.2.  Integrity Limit B.2.  Analysis of AEAD_AES_128_CCM Usage Limits Contributors Authors' Addresses 1. Introduction This document describes how QUIC [QUIC-TRANSPORT] is secured using TLS [TLS13].¶ TLS 1.3 provides critical latency improvements for connection establishment over previous versions. Absent packet loss, most new connections can be established and secured within a single round trip; on subsequent connections between the same client and server, the client can often send application data immediately, that is, using a zero round-trip setup.¶ This document describes how TLS acts as a security component of QUIC.¶ 2. Notational Conventions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ This document uses the terminology established in [QUIC-TRANSPORT].¶ For brevity, the acronym TLS is used to refer to TLS 1.3, though a newer version could be used; see Section 4.2.¶ 2.1. TLS Overview TLS provides two endpoints with a way to establish a means of communication over an untrusted medium (for example, the Internet). TLS enables authentication of peers and provides confidentiality and integrity protection for messages that endpoints exchange.¶ Internally, TLS is a layered protocol, with the structure shown in Figure 1.¶ +-------------+------------+--------------+---------+ Content | | | Application | | Layer | Handshake | Alerts | Data | ... | | | | | | +-------------+------------+--------------+---------+ Record | | Layer | Records | | | +---------------------------------------------------+ Figure 1: TLS Layers Each content-layer message (e.g., handshake, alerts, and application data) is carried as a series of typed TLS records by the record layer. Records are individually cryptographically protected and then transmitted over a reliable transport (typically TCP), which provides sequencing and guaranteed delivery.¶ The TLS authenticated key exchange occurs between two endpoints: client and server. The client initiates the exchange and the server responds. If the key exchange completes successfully, both client and server will agree on a secret. TLS supports both pre-shared key (PSK) and Diffie-Hellman over either finite fields or elliptic curves ((EC)DHE) key exchanges. PSK is the basis for Early Data (0-RTT); the latter provides forward secrecy (FS) when the (EC)DHE keys are destroyed. The two modes can also be combined to provide forward secrecy while using the PSK for authentication.¶ After completing the TLS handshake, the client will have learned and authenticated an identity for the server, and the server is optionally able to learn and authenticate an identity for the client. TLS supports X.509 [RFC5280] certificate-based authentication for both server and client. When PSK key exchange is used (as in resumption), knowledge of the PSK serves to authenticate the peer.¶ The TLS key exchange is resistant to tampering by attackers, and it produces shared secrets that cannot be controlled by either participating peer.¶ TLS provides two basic handshake modes of interest to QUIC:¶ A full 1-RTT handshake, in which the client is able to send application data after one round trip and the server immediately responds after receiving the first handshake message from the client.¶ A 0-RTT handshake, in which the client uses information it has previously learned about the server to send application data immediately. This application data can be replayed by an attacker, so 0-RTT is not suitable for carrying instructions that might initiate any action that could cause unwanted effects if replayed.¶ A simplified TLS handshake with 0-RTT application data is shown in Figure 2.¶ Client Server ClientHello (0-RTT Application Data) --------> ServerHello {EncryptedExtensions} {Finished} <-------- [Application Data] {Finished} --------> [Application Data] <-------> [Application Data] () Indicates messages protected by Early Data (0-RTT) Keys {} Indicates messages protected using Handshake Keys [] Indicates messages protected using Application Data (1-RTT) Keys Figure 2: TLS Handshake with 0-RTT Figure 2 omits the EndOfEarlyData message, which is not used in QUIC; see Section 8.3. Likewise, neither ChangeCipherSpec nor KeyUpdate messages are used by QUIC. ChangeCipherSpec is redundant in TLS 1.3; see Section 8.4. QUIC has its own key update mechanism; see Section 6.¶ Data is protected using a number of encryption levels:¶ Initial keys¶ Early data (0-RTT) keys¶ Handshake keys¶ Application data (1-RTT) keys¶ Application data can only appear in the early data and application data levels. Handshake and alert messages may appear in any level.¶ The 0-RTT handshake can be used if the client and server have previously communicated. In the 1-RTT handshake, the client is unable to send protected application data until it has received all of the handshake messages sent by the server.¶ 3. Protocol Overview QUIC [QUIC-TRANSPORT] assumes responsibility for the confidentiality and integrity protection of packets. For this it uses keys derived from a TLS handshake [TLS13], but instead of carrying TLS records over QUIC (as with TCP), TLS handshake and alert messages are carried directly over the QUIC transport, which takes over the responsibilities of the TLS record layer, as shown in Figure 3.¶ +--------------+--------------+ +-------------+ | TLS | TLS | | QUIC | | Handshake | Alerts | | Applications| | | | | (h3, etc.) | +--------------+--------------+-+-------------+ | | | QUIC Transport | | (streams, reliability, congestion, etc.) | | | +---------------------------------------------+ | | | QUIC Packet Protection | | | +---------------------------------------------+ Figure 3: QUIC Layers QUIC also relies on TLS for authentication and negotiation of parameters that are critical to security and performance.¶ Rather than a strict layering, these two protocols cooperate: QUIC uses the TLS handshake; TLS uses the reliability, ordered delivery, and record layer provided by QUIC.¶ At a high level, there are two main interactions between the TLS and QUIC components:¶ The TLS component sends and receives messages via the QUIC component, with QUIC providing a reliable stream abstraction to TLS.¶ The TLS component provides a series of updates to the QUIC component, including (a) new packet protection keys to install and (b) state changes such as handshake completion, the server certificate, etc.¶ Figure 4 shows these interactions in more detail, with the QUIC packet protection being called out specially.¶ +------------+ +------------+ | |<---- Handshake Messages ----->| | | |<- Validate 0-RTT Parameters ->| | | |<--------- 0-RTT Keys ---------| | | QUIC |<------- Handshake Keys -------| TLS | | |<--------- 1-RTT Keys ---------| | | |<------- Handshake Done -------| | +------------+ +------------+ | ^ | Protect | Protected v | Packet +------------+ | QUIC | | Packet | | Protection | +------------+ Figure 4: QUIC and TLS Interactions Unlike TLS over TCP, QUIC applications that want to send data do not send it using TLS Application Data records. Rather, they send it as QUIC STREAM frames or other frame types, which are then carried in QUIC packets.¶ 4. Carrying TLS Messages QUIC carries TLS handshake data in CRYPTO frames, each of which consists of a contiguous block of handshake data identified by an offset and length. Those frames are packaged into QUIC packets and encrypted under the current encryption level. As with TLS over TCP, once TLS handshake data has been delivered to QUIC, it is QUIC's responsibility to deliver it reliably. Each chunk of data that is produced by TLS is associated with the set of keys that TLS is currently using. If QUIC needs to retransmit that data, it MUST use the same keys even if TLS has already updated to newer keys.¶ Each encryption level corresponds to a packet number space. The packet number space that is used determines the semantics of frames. Some frames are prohibited in different packet number spaces; see Section 12.5 of [QUIC-TRANSPORT].¶ Because packets could be reordered on the wire, QUIC uses the packet type to indicate which keys were used to protect a given packet, as shown in Table 1. When packets of different types need to be sent, endpoints SHOULD use coalesced packets to send them in the same UDP datagram.¶ Table 1: Encryption Keys by Packet Type Packet Type Encryption Keys PN Space Initial Initial secrets Initial 0-RTT Protected 0-RTT Application data Handshake Handshake Handshake Retry Retry N/A Version Negotiation N/A N/A Short Header 1-RTT Application data Section 17 of [QUIC-TRANSPORT] shows how packets at the various encryption levels fit into the handshake process.¶ 4.1. Interface to TLS As shown in Figure 4, the interface from QUIC to TLS consists of four primary functions:¶ Sending and receiving handshake messages¶ Processing stored transport and application state from a resumed session and determining if it is valid to generate or accept 0-RTT data¶ Rekeying (both transmit and receive)¶ Updating handshake state¶ Additional functions might be needed to configure TLS. In particular, QUIC and TLS need to agree on which is responsible for validation of peer credentials, such as certificate validation [RFC5280].¶ 4.1.1. Handshake Complete In this document, the TLS handshake is considered complete when the TLS stack has reported that the handshake is complete. This happens when the TLS stack has both sent a Finished message and verified the peer's Finished message. Verifying the peer's Finished message provides the endpoints with an assurance that previous handshake messages have not been modified. Note that the handshake does not complete at both endpoints simultaneously. Consequently, any requirement that is based on the completion of the handshake depends on the perspective of the endpoint in question.¶ 4.1.2. Handshake Confirmed In this document, the TLS handshake is considered confirmed at the server when the handshake completes. The server MUST send a HANDSHAKE_DONE frame as soon as the handshake is complete. At the client, the handshake is considered confirmed when a HANDSHAKE_DONE frame is received.¶ Additionally, a client MAY consider the handshake to be confirmed when it receives an acknowledgment for a 1-RTT packet. This can be implemented by recording the lowest packet number sent with 1-RTT keys and comparing it to the Largest Acknowledged field in any received 1-RTT ACK frame: once the latter is greater than or equal to the former, the handshake is confirmed.¶ 4.1.3. Sending and Receiving Handshake Messages In order to drive the handshake, TLS depends on being able to send and receive handshake messages. There are two basic functions on this interface: one where QUIC requests handshake messages and one where QUIC provides bytes that comprise handshake messages.¶ Before starting the handshake, QUIC provides TLS with the transport parameters (see Section 8.2) that it wishes to carry.¶ A QUIC client starts TLS by requesting TLS handshake bytes from TLS. The client acquires handshake bytes before sending its first packet. A QUIC server starts the process by providing TLS with the client's handshake bytes.¶ At any time, the TLS stack at an endpoint will have a current sending encryption level and a receiving encryption level. TLS encryption levels determine the QUIC packet type and keys that are used for protecting data.¶ Each encryption level is associated with a different sequence of bytes, which is reliably transmitted to the peer in CRYPTO frames. When TLS provides handshake bytes to be sent, they are appended to the handshake bytes for the current encryption level. The encryption level then determines the type of packet that the resulting CRYPTO frame is carried in; see Table 1.¶ Four encryption levels are used, producing keys for Initial, 0-RTT, Handshake, and 1-RTT packets. CRYPTO frames are carried in just three of these levels, omitting the 0-RTT level. These four levels correspond to three packet number spaces: Initial and Handshake encrypted packets use their own separate spaces; 0-RTT and 1-RTT packets use the application data packet number space.¶ QUIC takes the unprotected content of TLS handshake records as the content of CRYPTO frames. TLS record protection is not used by QUIC. QUIC assembles CRYPTO frames into QUIC packets, which are protected using QUIC packet protection.¶ QUIC CRYPTO frames only carry TLS handshake messages. TLS alerts are turned into QUIC CONNECTION_CLOSE error codes; see Section 4.8. TLS application data and other content types cannot be carried by QUIC at any encryption level; it is an error if they are received from the TLS stack.¶ When an endpoint receives a QUIC packet containing a CRYPTO frame from the network, it proceeds as follows:¶ If the packet uses the current TLS receiving encryption level, sequence the data into the input flow as usual. As with STREAM frames, the offset is used to find the proper location in the data sequence. If the result of this process is that new data is available, then it is delivered to TLS in order.¶ If the packet is from a previously installed encryption level, it MUST NOT contain data that extends past the end of previously received data in that flow. Implementations MUST treat any violations of this requirement as a connection error of type PROTOCOL_VIOLATION.¶ If the packet is from a new encryption level, it is saved for later processing by TLS. Once TLS moves to receiving from this encryption level, saved data can be provided to TLS. When TLS provides keys for a higher encryption level, if there is data from a previous encryption level that TLS has not consumed, this MUST be treated as a connection error of type PROTOCOL_VIOLATION.¶ Each time that TLS is provided with new data, new handshake bytes are requested from TLS. TLS might not provide any bytes if the handshake messages it has received are incomplete or it has no data to send.¶ The content of CRYPTO frames might either be processed incrementally by TLS or buffered until complete messages or flights are available. TLS is responsible for buffering handshake bytes that have arrived in order. QUIC is responsible for buffering handshake bytes that arrive out of order or for encryption levels that are not yet ready. QUIC does not provide any means of flow control for CRYPTO frames; see Section 7.5 of [QUIC-TRANSPORT].¶ Once the TLS handshake is complete, this is indicated to QUIC along with any final handshake bytes that TLS needs to send. At this stage, the transport parameters that the peer advertised during the handshake are authenticated; see Section 8.2.¶ Once the handshake is complete, TLS becomes passive. TLS can still receive data from its peer and respond in kind, but it will not need to send more data unless specifically requested -- either by an application or QUIC. One reason to send data is that the server might wish to provide additional or updated session tickets to a client.¶ When the handshake is complete, QUIC only needs to provide TLS with any data that arrives in CRYPTO streams. In the same manner that is used during the handshake, new data is requested from TLS after providing received data.¶ 4.1.4. Encryption Level Changes As keys at a given encryption level become available to TLS, TLS indicates to QUIC that reading or writing keys at that encryption level are available.¶ The availability of new keys is always a result of providing inputs to TLS. TLS only provides new keys after being initialized (by a client) or when provided with new handshake data.¶ However, a TLS implementation could perform some of its processing asynchronously. In particular, the process of validating a certificate can take some time. While waiting for TLS processing to complete, an endpoint SHOULD buffer received packets if they might be processed using keys that are not yet available. These packets can be processed once keys are provided by TLS. An endpoint SHOULD continue to respond to packets that can be processed during this time.¶ After processing inputs, TLS might produce handshake bytes, keys for new encryption levels, or both.¶ TLS provides QUIC with three items as a new encryption level becomes available:¶ A secret¶ An Authenticated Encryption with Associated Data (AEAD) function¶ A Key Derivation Function (KDF)¶ These values are based on the values that TLS negotiates and are used by QUIC to generate packet and header protection keys; see Section 5 and Section 5.4.¶ If 0-RTT is possible, it is ready after the client sends a TLS ClientHello message or the server receives that message. After providing a QUIC client with the first handshake bytes, the TLS stack might signal the change to 0-RTT keys. On the server, after receiving handshake bytes that contain a ClientHello message, a TLS server might signal that 0-RTT keys are available.¶ Although TLS only uses one encryption level at a time, QUIC may use more than one level. For instance, after sending its Finished message (using a CRYPTO frame at the Handshake encryption level) an endpoint can send STREAM data (in 1-RTT encryption). If the Finished message is lost, the endpoint uses the Handshake encryption level to retransmit the lost message. Reordering or loss of packets can mean that QUIC will need to handle packets at multiple encryption levels. During the handshake, this means potentially handling packets at higher and lower encryption levels than the current encryption level used by TLS.¶ In particular, server implementations need to be able to read packets at the Handshake encryption level at the same time as the 0-RTT encryption level. A client could interleave ACK frames that are protected with Handshake keys with 0-RTT data, and the server needs to process those acknowledgments in order to detect lost Handshake packets.¶ QUIC also needs access to keys that might not ordinarily be available to a TLS implementation. For instance, a client might need to acknowledge Handshake packets before it is ready to send CRYPTO frames at that encryption level. TLS therefore needs to provide keys to QUIC before it might produce them for its own use.¶ 4.1.5. TLS Interface Summary Figure 5 summarizes the exchange between QUIC and TLS for both client and server. Solid arrows indicate packets that carry handshake data; dashed arrows show where application data can be sent. Each arrow is tagged with the encryption level used for that transmission.¶ Client Server ====== ====== Get Handshake Initial -------------> Install tx 0-RTT keys 0-RTT - - - - - - - -> Handshake Received Get Handshake <------------- Initial Install rx 0-RTT keys Install Handshake keys Get Handshake <----------- Handshake Install tx 1-RTT keys <- - - - - - - - 1-RTT Handshake Received (Initial) Install Handshake keys Handshake Received (Handshake) Get Handshake Handshake -----------> Handshake Complete Install 1-RTT keys 1-RTT - - - - - - - -> Handshake Received Handshake Complete Handshake Confirmed Install rx 1-RTT keys <--------------- 1-RTT (HANDSHAKE_DONE) Handshake Confirmed Figure 5: Interaction Summary between QUIC and TLS Figure 5 shows the multiple packets that form a single \"flight\" of messages being processed individually, to show what incoming messages trigger different actions. This shows multiple \"Get Handshake\" invocations to retrieve handshake messages at different encryption levels. New handshake messages are requested after incoming packets have been processed.¶ Figure 5 shows one possible structure for a simple handshake exchange. The exact process varies based on the structure of endpoint implementations and the order in which packets arrive. Implementations could use a different number of operations or execute them in other orders.¶ 4.2. TLS Version This document describes how TLS 1.3 [TLS13] is used with QUIC.¶ In practice, the TLS handshake will negotiate a version of TLS to use. This could result in a version of TLS newer than 1.3 being negotiated if both endpoints support that version. This is acceptable provided that the features of TLS 1.3 that are used by QUIC are supported by the newer version.¶ Clients MUST NOT offer TLS versions older than 1.3. A badly configured TLS implementation could negotiate TLS 1.2 or another older version of TLS. An endpoint MUST terminate the connection if a version of TLS older than 1.3 is negotiated.¶ 4.3. ClientHello Size The first Initial packet from a client contains the start or all of its first cryptographic handshake message, which for TLS is the ClientHello. Servers might need to parse the entire ClientHello (e.g., to access extensions such as Server Name Identification (SNI) or Application-Layer Protocol Negotiation (ALPN)) in order to decide whether to accept the new incoming QUIC connection. If the ClientHello spans multiple Initial packets, such servers would need to buffer the first received fragments, which could consume excessive resources if the client's address has not yet been validated. To avoid this, servers MAY use the Retry feature (see Section 8.1 of [QUIC-TRANSPORT]) to only buffer partial ClientHello messages from clients with a validated address.¶ QUIC packet and framing add at least 36 bytes of overhead to the ClientHello message. That overhead increases if the client chooses a Source Connection ID field longer than zero bytes. Overheads also do not include the token or a Destination Connection ID longer than 8 bytes, both of which might be required if a server sends a Retry packet.¶ A typical TLS ClientHello can easily fit into a 1200-byte packet. However, in addition to the overheads added by QUIC, there are several variables that could cause this limit to be exceeded. Large session tickets, multiple or large key shares, and long lists of supported ciphers, signature algorithms, versions, QUIC transport parameters, and other negotiable parameters and extensions could cause this message to grow.¶ For servers, in addition to connection IDs and tokens, the size of TLS session tickets can have an effect on a client's ability to connect efficiently. Minimizing the size of these values increases the probability that clients can use them and still fit their entire ClientHello message in their first Initial packet.¶ The TLS implementation does not need to ensure that the ClientHello is large enough to meet QUIC's requirements for datagrams that carry Initial packets; see Section 14.1 of [QUIC-TRANSPORT]. QUIC implementations use PADDING frames or packet coalescing to ensure that datagrams are large enough.¶ 4.4. Peer Authentication The requirements for authentication depend on the application protocol that is in use. TLS provides server authentication and permits the server to request client authentication.¶ A client MUST authenticate the identity of the server. This typically involves verification that the identity of the server is included in a certificate and that the certificate is issued by a trusted entity (see for example [RFC2818]).¶ Note: Where servers provide certificates for authentication, the size of the certificate chain can consume a large number of bytes. Controlling the size of certificate chains is critical to performance in QUIC as servers are limited to sending 3 bytes for every byte received prior to validating the client address; see Section 8.1 of [QUIC-TRANSPORT]. The size of a certificate chain can be managed by limiting the number of names or extensions; using keys with small public key representations, like ECDSA; or by using certificate compression [COMPRESS].¶ A server MAY request that the client authenticate during the handshake. A server MAY refuse a connection if the client is unable to authenticate when requested. The requirements for client authentication vary based on application protocol and deployment.¶ A server MUST NOT use post-handshake client authentication (as defined in Section 4.6.2 of [TLS13]) because the multiplexing offered by QUIC prevents clients from correlating the certificate request with the application-level event that triggered it (see [HTTP2-TLS13]). More specifically, servers MUST NOT send post-handshake TLS CertificateRequest messages, and clients MUST treat receipt of such messages as a connection error of type PROTOCOL_VIOLATION.¶ 4.5. Session Resumption QUIC can use the session resumption feature of TLS 1.3. It does this by carrying NewSessionTicket messages in CRYPTO frames after the handshake is complete. Session resumption can be used to provide 0-RTT and can also be used when 0-RTT is disabled.¶ Endpoints that use session resumption might need to remember some information about the current connection when creating a resumed connection. TLS requires that some information be retained; see Section 4.6.1 of [TLS13]. QUIC itself does not depend on any state being retained when resuming a connection unless 0-RTT is also used; see Section 7.4.1 of [QUIC-TRANSPORT] and Section 4.6.1. Application protocols could depend on state that is retained between resumed connections.¶ Clients can store any state required for resumption along with the session ticket. Servers can use the session ticket to help carry state.¶ Session resumption allows servers to link activity on the original connection with the resumed connection, which might be a privacy issue for clients. Clients can choose not to enable resumption to avoid creating this correlation. Clients SHOULD NOT reuse tickets as that allows entities other than the server to correlate connections; see Appendix C.4 of [TLS13].¶ 4.6. 0-RTT The 0-RTT feature in QUIC allows a client to send application data before the handshake is complete. This is made possible by reusing negotiated parameters from a previous connection. To enable this, 0-RTT depends on the client remembering critical parameters and providing the server with a TLS session ticket that allows the server to recover the same information.¶ This information includes parameters that determine TLS state, as governed by [TLS13], QUIC transport parameters, the chosen application protocol, and any information the application protocol might need; see Section 4.6.3. This information determines how 0-RTT packets and their contents are formed.¶ To ensure that the same information is available to both endpoints, all information used to establish 0-RTT comes from the same connection. Endpoints cannot selectively disregard information that might alter the sending or processing of 0-RTT.¶ [TLS13] sets a limit of seven days on the time between the original connection and any attempt to use 0-RTT. There are other constraints on 0-RTT usage, notably those caused by the potential exposure to replay attack; see Section 9.2.¶ 4.6.1. Enabling 0-RTT The TLS early_data extension in the NewSessionTicket message is defined to convey (in the max_early_data_size parameter) the amount of TLS 0-RTT data the server is willing to accept. QUIC does not use TLS early data. QUIC uses 0-RTT packets to carry early data. Accordingly, the max_early_data_size parameter is repurposed to hold a sentinel value 0xffffffff to indicate that the server is willing to accept QUIC 0-RTT data. To indicate that the server does not accept 0-RTT data, the early_data extension is omitted from the NewSessionTicket. The amount of data that the client can send in QUIC 0-RTT is controlled by the initial_max_data transport parameter supplied by the server.¶ Servers MUST NOT send the early_data extension with a max_early_data_size field set to any value other than 0xffffffff. A client MUST treat receipt of a NewSessionTicket that contains an early_data extension with any other value as a connection error of type PROTOCOL_VIOLATION.¶ A client that wishes to send 0-RTT packets uses the early_data extension in the ClientHello message of a subsequent handshake; see Section 4.2.10 of [TLS13]. It then sends application data in 0-RTT packets.¶ A client that attempts 0-RTT might also provide an address validation token if the server has sent a NEW_TOKEN frame; see Section 8.1 of [QUIC-TRANSPORT].¶ 4.6.2. Accepting and Rejecting 0-RTT A server accepts 0-RTT by sending an early_data extension in the EncryptedExtensions; see Section 4.2.10 of [TLS13]. The server then processes and acknowledges the 0-RTT packets that it receives.¶ A server rejects 0-RTT by sending the EncryptedExtensions without an early_data extension. A server will always reject 0-RTT if it sends a TLS HelloRetryRequest. When rejecting 0-RTT, a server MUST NOT process any 0-RTT packets, even if it could. When 0-RTT was rejected, a client SHOULD treat receipt of an acknowledgment for a 0-RTT packet as a connection error of type PROTOCOL_VIOLATION, if it is able to detect the condition.¶ When 0-RTT is rejected, all connection characteristics that the client assumed might be incorrect. This includes the choice of application protocol, transport parameters, and any application configuration. The client therefore MUST reset the state of all streams, including application state bound to those streams.¶ A client MAY reattempt 0-RTT if it receives a Retry or Version Negotiation packet. These packets do not signify rejection of 0-RTT.¶ 4.6.3. Validating 0-RTT Configuration When a server receives a ClientHello with the early_data extension, it has to decide whether to accept or reject 0-RTT data from the client. Some of this decision is made by the TLS stack (e.g., checking that the cipher suite being resumed was included in the ClientHello; see Section 4.2.10 of [TLS13]). Even when the TLS stack has no reason to reject 0-RTT data, the QUIC stack or the application protocol using QUIC might reject 0-RTT data because the configuration of the transport or application associated with the resumed session is not compatible with the server's current configuration.¶ QUIC requires additional transport state to be associated with a 0-RTT session ticket. One common way to implement this is using stateless session tickets and storing this state in the session ticket. Application protocols that use QUIC might have similar requirements regarding associating or storing state. This associated state is used for deciding whether 0-RTT data must be rejected. For example, HTTP/3 settings [QUIC-HTTP] determine how 0-RTT data from the client is interpreted. Other applications using QUIC could have different requirements for determining whether to accept or reject 0-RTT data.¶ 4.7. HelloRetryRequest The HelloRetryRequest message (see Section 4.1.4 of [TLS13]) can be used to request that a client provide new information, such as a key share, or to validate some characteristic of the client. From the perspective of QUIC, HelloRetryRequest is not differentiated from other cryptographic handshake messages that are carried in Initial packets. Although it is in principle possible to use this feature for address verification, QUIC implementations SHOULD instead use the Retry feature; see Section 8.1 of [QUIC-TRANSPORT].¶ 4.8. TLS Errors If TLS experiences an error, it generates an appropriate alert as defined in Section 6 of [TLS13].¶ A TLS alert is converted into a QUIC connection error. The AlertDescription value is added to 0x0100 to produce a QUIC error code from the range reserved for CRYPTO_ERROR; see Section 20.1 of [QUIC-TRANSPORT]. The resulting value is sent in a QUIC CONNECTION_CLOSE frame of type 0x1c.¶ QUIC is only able to convey an alert level of \"fatal\". In TLS 1.3, the only existing uses for the \"warning\" level are to signal connection close; see Section 6.1 of [TLS13]. As QUIC provides alternative mechanisms for connection termination and the TLS connection is only closed if an error is encountered, a QUIC endpoint MUST treat any alert from TLS as if it were at the \"fatal\" level.¶ QUIC permits the use of a generic code in place of a specific error code; see Section 11 of [QUIC-TRANSPORT]. For TLS alerts, this includes replacing any alert with a generic alert, such as handshake_failure (0x0128 in QUIC). Endpoints MAY use a generic error code to avoid possibly exposing confidential information.¶ 4.9. Discarding Unused Keys After QUIC has completed a move to a new encryption level, packet protection keys for previous encryption levels can be discarded. This occurs several times during the handshake, as well as when keys are updated; see Section 6.¶ Packet protection keys are not discarded immediately when new keys are available. If packets from a lower encryption level contain CRYPTO frames, frames that retransmit that data MUST be sent at the same encryption level. Similarly, an endpoint generates acknowledgments for packets at the same encryption level as the packet being acknowledged. Thus, it is possible that keys for a lower encryption level are needed for a short time after keys for a newer encryption level are available.¶ An endpoint cannot discard keys for a given encryption level unless it has received all the cryptographic handshake messages from its peer at that encryption level and its peer has done the same. Different methods for determining this are provided for Initial keys (Section 4.9.1) and Handshake keys (Section 4.9.2). These methods do not prevent packets from being received or sent at that encryption level because a peer might not have received all the acknowledgments necessary.¶ Though an endpoint might retain older keys, new data MUST be sent at the highest currently available encryption level. Only ACK frames and retransmissions of data in CRYPTO frames are sent at a previous encryption level. These packets MAY also include PADDING frames.¶ 4.9.1. Discarding Initial Keys Packets protected with Initial secrets (Section 5.2) are not authenticated, meaning that an attacker could spoof packets with the intent to disrupt a connection. To limit these attacks, Initial packet protection keys are discarded more aggressively than other keys.¶ The successful use of Handshake packets indicates that no more Initial packets need to be exchanged, as these keys can only be produced after receiving all CRYPTO frames from Initial packets. Thus, a client MUST discard Initial keys when it first sends a Handshake packet and a server MUST discard Initial keys when it first successfully processes a Handshake packet. Endpoints MUST NOT send Initial packets after this point.¶ This results in abandoning loss recovery state for the Initial encryption level and ignoring any outstanding Initial packets.¶ 4.9.2. Discarding Handshake Keys An endpoint MUST discard its Handshake keys when the TLS handshake is confirmed (Section 4.1.2).¶ 4.9.3. Discarding 0-RTT Keys 0-RTT and 1-RTT packets share the same packet number space, and clients do not send 0-RTT packets after sending a 1-RTT packet (Section 5.6).¶ Therefore, a client SHOULD discard 0-RTT keys as soon as it installs 1-RTT keys as they have no use after that moment.¶ Additionally, a server MAY discard 0-RTT keys as soon as it receives a 1-RTT packet. However, due to packet reordering, a 0-RTT packet could arrive after a 1-RTT packet. Servers MAY temporarily retain 0-RTT keys to allow decrypting reordered packets without requiring their contents to be retransmitted with 1-RTT keys. After receiving a 1-RTT packet, servers MUST discard 0-RTT keys within a short time; the RECOMMENDED time period is three times the Probe Timeout (PTO, see [QUIC-RECOVERY]). A server MAY discard 0-RTT keys earlier if it determines that it has received all 0-RTT packets, which can be done by keeping track of missing packet numbers.¶ 5. Packet Protection As with TLS over TCP, QUIC protects packets with keys derived from the TLS handshake, using the AEAD algorithm [AEAD] negotiated by TLS.¶ QUIC packets have varying protections depending on their type:¶ Version Negotiation packets have no cryptographic protection.¶ Retry packets use AEAD_AES_128_GCM to provide protection against accidental modification and to limit the entities that can produce a valid Retry; see Section 5.8.¶ Initial packets use AEAD_AES_128_GCM with keys derived from the Destination Connection ID field of the first Initial packet sent by the client; see Section 5.2.¶ All other packets have strong cryptographic protections for confidentiality and integrity, using keys and algorithms negotiated by TLS.¶ This section describes how packet protection is applied to Handshake packets, 0-RTT packets, and 1-RTT packets. The same packet protection process is applied to Initial packets. However, as it is trivial to determine the keys used for Initial packets, these packets are not considered to have confidentiality or integrity protection. Retry packets use a fixed key and so similarly lack confidentiality and integrity protection.¶ 5.1. Packet Protection Keys QUIC derives packet protection keys in the same way that TLS derives record protection keys.¶ Each encryption level has separate secret values for protection of packets sent in each direction. These traffic secrets are derived by TLS (see Section 7.1 of [TLS13]) and are used by QUIC for all encryption levels except the Initial encryption level. The secrets for the Initial encryption level are computed based on the client's initial Destination Connection ID, as described in Section 5.2.¶ The keys used for packet protection are computed from the TLS secrets using the KDF provided by TLS. In TLS 1.3, the HKDF-Expand-Label function described in Section 7.1 of [TLS13] is used with the hash function from the negotiated cipher suite. All uses of HKDF-Expand-Label in QUIC use a zero-length Context.¶ Note that labels, which are described using strings, are encoded as bytes using ASCII [ASCII] without quotes or any trailing NUL byte.¶ Other versions of TLS MUST provide a similar function in order to be used with QUIC.¶ The current encryption level secret and the label \"quic key\" are input to the KDF to produce the AEAD key; the label \"quic iv\" is used to derive the Initialization Vector (IV); see Section 5.3. The header protection key uses the \"quic hp\" label; see Section 5.4. Using these labels provides key separation between QUIC and TLS; see Section 9.6.¶ Both \"quic key\" and \"quic hp\" are used to produce keys, so the Length provided to HKDF-Expand-Label along with these labels is determined by the size of keys in the AEAD or header protection algorithm. The Length provided with \"quic iv\" is the minimum length of the AEAD nonce or 8 bytes if that is larger; see [AEAD].¶ The KDF used for initial secrets is always the HKDF-Expand-Label function from TLS 1.3; see Section 5.2.¶ 5.2. Initial Secrets Initial packets apply the packet protection process, but use a secret derived from the Destination Connection ID field from the client's first Initial packet.¶ This secret is determined by using HKDF-Extract (see Section 2.2 of [HKDF]) with a salt of 0x38762cf7f55934b34d179ae6a4c80cadccbb7f0a and the input keying material (IKM) of the Destination Connection ID field. This produces an intermediate pseudorandom key (PRK) that is used to derive two separate secrets for sending and receiving.¶ The secret used by clients to construct Initial packets uses the PRK and the label \"client in\" as input to the HKDF-Expand-Label function from TLS [TLS13] to produce a 32-byte secret. Packets constructed by the server use the same process with the label \"server in\". The hash function for HKDF when deriving initial secrets and keys is SHA-256 [SHA].¶ This process in pseudocode is:¶ initial_salt = 0x38762cf7f55934b34d179ae6a4c80cadccbb7f0a initial_secret = HKDF-Extract(initial_salt, client_dst_connection_id) client_initial_secret = HKDF-Expand-Label(initial_secret, \"client in\", \"\", Hash.length) server_initial_secret = HKDF-Expand-Label(initial_secret, \"server in\", \"\", Hash.length) ¶ The connection ID used with HKDF-Expand-Label is the Destination Connection ID in the Initial packet sent by the client. This will be a randomly selected value unless the client creates the Initial packet after receiving a Retry packet, where the Destination Connection ID is selected by the server.¶ Future versions of QUIC SHOULD generate a new salt value, thus ensuring that the keys are different for each version of QUIC. This prevents a middlebox that recognizes only one version of QUIC from seeing or modifying the contents of packets from future versions.¶ The HKDF-Expand-Label function defined in TLS 1.3 MUST be used for Initial packets even where the TLS versions offered do not include TLS 1.3.¶ The secrets used for constructing subsequent Initial packets change when a server sends a Retry packet to use the connection ID value selected by the server. The secrets do not change when a client changes the Destination Connection ID it uses in response to an Initial packet from the server.¶ Note: The Destination Connection ID field could be any length up to 20 bytes, including zero length if the server sends a Retry packet with a zero-length Source Connection ID field. After a Retry, the Initial keys provide the client no assurance that the server received its packet, so the client has to rely on the exchange that included the Retry packet to validate the server address; see Section 8.1 of [QUIC-TRANSPORT].¶ Appendix A contains sample Initial packets.¶ 5.3. AEAD Usage The Authenticated Encryption with Associated Data (AEAD) function (see [AEAD]) used for QUIC packet protection is the AEAD that is negotiated for use with the TLS connection. For example, if TLS is using the TLS_AES_128_GCM_SHA256 cipher suite, the AEAD_AES_128_GCM function is used.¶ QUIC can use any of the cipher suites defined in [TLS13] with the exception of TLS_AES_128_CCM_8_SHA256. A cipher suite MUST NOT be negotiated unless a header protection scheme is defined for the cipher suite. This document defines a header protection scheme for all cipher suites defined in [TLS13] aside from TLS_AES_128_CCM_8_SHA256. These cipher suites have a 16-byte authentication tag and produce an output 16 bytes larger than their input.¶ An endpoint MUST NOT reject a ClientHello that offers a cipher suite that it does not support, or it would be impossible to deploy a new cipher suite. This also applies to TLS_AES_128_CCM_8_SHA256.¶ When constructing packets, the AEAD function is applied prior to applying header protection; see Section 5.4. The unprotected packet header is part of the associated data (A). When processing packets, an endpoint first removes the header protection.¶ The key and IV for the packet are computed as described in Section 5.1. The nonce, N, is formed by combining the packet protection IV with the packet number. The 62 bits of the reconstructed QUIC packet number in network byte order are left-padded with zeros to the size of the IV. The exclusive OR of the padded packet number and the IV forms the AEAD nonce.¶ The associated data, A, for the AEAD is the contents of the QUIC header, starting from the first byte of either the short or long header, up to and including the unprotected packet number.¶ The input plaintext, P, for the AEAD is the payload of the QUIC packet, as described in [QUIC-TRANSPORT].¶ The output ciphertext, C, of the AEAD is transmitted in place of P.¶ Some AEAD functions have limits for how many packets can be encrypted under the same key and IV; see Section 6.6. This might be lower than the packet number limit. An endpoint MUST initiate a key update (Section 6) prior to exceeding any limit set for the AEAD that is in use.¶ 5.4. Header Protection Parts of QUIC packet headers, in particular the Packet Number field, are protected using a key that is derived separately from the packet protection key and IV. The key derived using the \"quic hp\" label is used to provide confidentiality protection for those fields that are not exposed to on-path elements.¶ This protection applies to the least significant bits of the first byte, plus the Packet Number field. The four least significant bits of the first byte are protected for packets with long headers; the five least significant bits of the first byte are protected for packets with short headers. For both header forms, this covers the reserved bits and the Packet Number Length field; the Key Phase bit is also protected for packets with a short header.¶ The same header protection key is used for the duration of the connection, with the value not changing after a key update (see Section 6). This allows header protection to be used to protect the key phase.¶ This process does not apply to Retry or Version Negotiation packets, which do not contain a protected payload or any of the fields that are protected by this process.¶ 5.4.1. Header Protection Application Header protection is applied after packet protection is applied (see Section 5.3). The ciphertext of the packet is sampled and used as input to an encryption algorithm. The algorithm used depends on the negotiated AEAD.¶ The output of this algorithm is a 5-byte mask that is applied to the protected header fields using exclusive OR. The least significant bits of the first byte of the packet are masked by the least significant bits of the first mask byte, and the packet number is masked with the remaining bytes. Any unused bytes of mask that might result from a shorter packet number encoding are unused.¶ Figure 6 shows a sample algorithm for applying header protection. Removing header protection only differs in the order in which the packet number length (pn_length) is determined (here \"^\" is used to represent exclusive OR).¶ mask = header_protection(hp_key, sample) pn_length = (packet[0] & 0x03) + 1 if (packet[0] & 0x80) == 0x80: # Long header: 4 bits masked packet[0] ^= mask[0] & 0x0f else: # Short header: 5 bits masked packet[0] ^= mask[0] & 0x1f # pn_offset is the start of the Packet Number field. packet[pn_offset:pn_offset+pn_length] ^= mask[1:1+pn_length] Figure 6: Header Protection Pseudocode Specific header protection functions are defined based on the selected cipher suite; see Section 5.4.3 and Section 5.4.4.¶ Figure 7 shows an example long header packet (Initial) and a short header packet (1-RTT). Figure 7 shows the fields in each header that are covered by header protection and the portion of the protected packet payload that is sampled.¶ Initial Packet { Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 0, Reserved Bits (2), # Protected Packet Number Length (2), # Protected Version (32), DCID Len (8), Destination Connection ID (0..160), SCID Len (8), Source Connection ID (0..160), Token Length (i), Token (..), Length (i), Packet Number (8..32), # Protected Protected Payload (0..24), # Skipped Part Protected Payload (128), # Sampled Part Protected Payload (..) # Remainder } 1-RTT Packet { Header Form (1) = 0, Fixed Bit (1) = 1, Spin Bit (1), Reserved Bits (2), # Protected Key Phase (1), # Protected Packet Number Length (2), # Protected Destination Connection ID (0..160), Packet Number (8..32), # Protected Protected Payload (0..24), # Skipped Part Protected Payload (128), # Sampled Part Protected Payload (..), # Remainder } Figure 7: Header Protection and Ciphertext Sample Before a TLS cipher suite can be used with QUIC, a header protection algorithm MUST be specified for the AEAD used with that cipher suite. This document defines algorithms for AEAD_AES_128_GCM, AEAD_AES_128_CCM, AEAD_AES_256_GCM (all these AES AEADs are defined in [AEAD]), and AEAD_CHACHA20_POLY1305 (defined in [CHACHA]). Prior to TLS selecting a cipher suite, AES header protection is used (Section 5.4.3), matching the AEAD_AES_128_GCM packet protection.¶ 5.4.2. Header Protection Sample The header protection algorithm uses both the header protection key and a sample of the ciphertext from the packet Payload field.¶ The same number of bytes are always sampled, but an allowance needs to be made for the removal of protection by a receiving endpoint, which will not know the length of the Packet Number field. The sample of ciphertext is taken starting from an offset of 4 bytes after the start of the Packet Number field. That is, in sampling packet ciphertext for header protection, the Packet Number field is assumed to be 4 bytes long (its maximum possible encoded length).¶ An endpoint MUST discard packets that are not long enough to contain a complete sample.¶ To ensure that sufficient data is available for sampling, packets are padded so that the combined lengths of the encoded packet number and protected payload is at least 4 bytes longer than the sample required for header protection. The cipher suites defined in [TLS13] -- other than TLS_AES_128_CCM_8_SHA256, for which a header protection scheme is not defined in this document -- have 16-byte expansions and 16-byte header protection samples. This results in needing at least 3 bytes of frames in the unprotected payload if the packet number is encoded on a single byte, or 2 bytes of frames for a 2-byte packet number encoding.¶ The sampled ciphertext can be determined by the following pseudocode:¶ # pn_offset is the start of the Packet Number field. sample_offset = pn_offset + 4 sample = packet[sample_offset..sample_offset+sample_length] ¶ Where the packet number offset of a short header packet can be calculated as:¶ pn_offset = 1 + len(connection_id) ¶ And the packet number offset of a long header packet can be calculated as:¶ pn_offset = 7 + len(destination_connection_id) + len(source_connection_id) + len(payload_length) if packet_type == Initial: pn_offset += len(token_length) + len(token) ¶ For example, for a packet with a short header, an 8-byte connection ID, and protected with AEAD_AES_128_GCM, the sample takes bytes 13 to 28 inclusive (using zero-based indexing).¶ Multiple QUIC packets might be included in the same UDP datagram. Each packet is handled separately.¶ 5.4.3. AES-Based Header Protection This section defines the packet protection algorithm for AEAD_AES_128_GCM, AEAD_AES_128_CCM, and AEAD_AES_256_GCM. AEAD_AES_128_GCM and AEAD_AES_128_CCM use 128-bit AES in Electronic Codebook (ECB) mode. AEAD_AES_256_GCM uses 256-bit AES in ECB mode. AES is defined in [AES].¶ This algorithm samples 16 bytes from the packet ciphertext. This value is used as the input to AES-ECB. In pseudocode, the header protection function is defined as:¶ header_protection(hp_key, sample): mask = AES-ECB(hp_key, sample) ¶ 5.4.4. ChaCha20-Based Header Protection When AEAD_CHACHA20_POLY1305 is in use, header protection uses the raw ChaCha20 function as defined in Section 2.4 of [CHACHA]. This uses a 256-bit key and 16 bytes sampled from the packet protection output.¶ The first 4 bytes of the sampled ciphertext are the block counter. A ChaCha20 implementation could take a 32-bit integer in place of a byte sequence, in which case, the byte sequence is interpreted as a little-endian value.¶ The remaining 12 bytes are used as the nonce. A ChaCha20 implementation might take an array of three 32-bit integers in place of a byte sequence, in which case, the nonce bytes are interpreted as a sequence of 32-bit little-endian integers.¶ The encryption mask is produced by invoking ChaCha20 to protect 5 zero bytes. In pseudocode, the header protection function is defined as:¶ header_protection(hp_key, sample): counter = sample[0..3] nonce = sample[4..15] mask = ChaCha20(hp_key, counter, nonce, {0,0,0,0,0}) ¶ 5.5. Receiving Protected Packets Once an endpoint successfully receives a packet with a given packet number, it MUST discard all packets in the same packet number space with higher packet numbers if they cannot be successfully unprotected with either the same key, or -- if there is a key update -- a subsequent packet protection key; see Section 6. Similarly, a packet that appears to trigger a key update but cannot be unprotected successfully MUST be discarded.¶ Failure to unprotect a packet does not necessarily indicate the existence of a protocol error in a peer or an attack. The truncated packet number encoding used in QUIC can cause packet numbers to be decoded incorrectly if they are delayed significantly.¶ 5.6. Use of 0-RTT Keys If 0-RTT keys are available (see Section 4.6.1), the lack of replay protection means that restrictions on their use are necessary to avoid replay attacks on the protocol.¶ Of the frames defined in [QUIC-TRANSPORT], the STREAM, RESET_STREAM, STOP_SENDING, and CONNECTION_CLOSE frames are potentially unsafe for use with 0-RTT as they carry application data. Application data that is received in 0-RTT could cause an application at the server to process the data multiple times rather than just once. Additional actions taken by a server as a result of processing replayed application data could have unwanted consequences. A client therefore MUST NOT use 0-RTT for application data unless specifically requested by the application that is in use.¶ An application protocol that uses QUIC MUST include a profile that defines acceptable use of 0-RTT; otherwise, 0-RTT can only be used to carry QUIC frames that do not carry application data. For example, a profile for HTTP is described in [HTTP-REPLAY] and used for HTTP/3; see Section 10.9 of [QUIC-HTTP].¶ Though replaying packets might result in additional connection attempts, the effect of processing replayed frames that do not carry application data is limited to changing the state of the affected connection. A TLS handshake cannot be successfully completed using replayed packets.¶ A client MAY wish to apply additional restrictions on what data it sends prior to the completion of the TLS handshake.¶ A client otherwise treats 0-RTT keys as equivalent to 1-RTT keys, except that it cannot send certain frames with 0-RTT keys; see Section 12.5 of [QUIC-TRANSPORT].¶ A client that receives an indication that its 0-RTT data has been accepted by a server can send 0-RTT data until it receives all of the server's handshake messages. A client SHOULD stop sending 0-RTT data if it receives an indication that 0-RTT data has been rejected.¶ A server MUST NOT use 0-RTT keys to protect packets; it uses 1-RTT keys to protect acknowledgments of 0-RTT packets. A client MUST NOT attempt to decrypt 0-RTT packets it receives and instead MUST discard them.¶ Once a client has installed 1-RTT keys, it MUST NOT send any more 0-RTT packets.¶ Note: 0-RTT data can be acknowledged by the server as it receives it, but any packets containing acknowledgments of 0-RTT data cannot have packet protection removed by the client until the TLS handshake is complete. The 1-RTT keys necessary to remove packet protection cannot be derived until the client receives all server handshake messages.¶ 5.7. Receiving Out-of-Order Protected Packets Due to reordering and loss, protected packets might be received by an endpoint before the final TLS handshake messages are received. A client will be unable to decrypt 1-RTT packets from the server, whereas a server will be able to decrypt 1-RTT packets from the client. Endpoints in either role MUST NOT decrypt 1-RTT packets from their peer prior to completing the handshake.¶ Even though 1-RTT keys are available to a server after receiving the first handshake messages from a client, it is missing assurances on the client state:¶ The client is not authenticated, unless the server has chosen to use a pre-shared key and validated the client's pre-shared key binder; see Section 4.2.11 of [TLS13].¶ The client has not demonstrated liveness, unless the server has validated the client's address with a Retry packet or other means; see Section 8.1 of [QUIC-TRANSPORT].¶ Any received 0-RTT data that the server responds to might be due to a replay attack.¶ Therefore, the server's use of 1-RTT keys before the handshake is complete is limited to sending data. A server MUST NOT process incoming 1-RTT protected packets before the TLS handshake is complete. Because sending acknowledgments indicates that all frames in a packet have been processed, a server cannot send acknowledgments for 1-RTT packets until the TLS handshake is complete. Received packets protected with 1-RTT keys MAY be stored and later decrypted and used once the handshake is complete.¶ Note: TLS implementations might provide all 1-RTT secrets prior to handshake completion. Even where QUIC implementations have 1-RTT read keys, those keys are not to be used prior to completing the handshake.¶ The requirement for the server to wait for the client Finished message creates a dependency on that message being delivered. A client can avoid the potential for head-of-line blocking that this implies by sending its 1-RTT packets coalesced with a Handshake packet containing a copy of the CRYPTO frame that carries the Finished message, until one of the Handshake packets is acknowledged. This enables immediate server processing for those packets.¶ A server could receive packets protected with 0-RTT keys prior to receiving a TLS ClientHello. The server MAY retain these packets for later decryption in anticipation of receiving a ClientHello.¶ A client generally receives 1-RTT keys at the same time as the handshake completes. Even if it has 1-RTT secrets, a client MUST NOT process incoming 1-RTT protected packets before the TLS handshake is complete.¶ 5.8. Retry Packet Integrity Retry packets (see Section 17.2.5 of [QUIC-TRANSPORT]) carry a Retry Integrity Tag that provides two properties: it allows the discarding of packets that have accidentally been corrupted by the network, and only an entity that observes an Initial packet can send a valid Retry packet.¶ The Retry Integrity Tag is a 128-bit field that is computed as the output of AEAD_AES_128_GCM [AEAD] used with the following inputs:¶ The secret key, K, is 128 bits equal to 0xbe0c690b9f66575a1d766b54e368c84e.¶ The nonce, N, is 96 bits equal to 0x461599d35d632bf2239825bb.¶ The plaintext, P, is empty.¶ The associated data, A, is the contents of the Retry Pseudo-Packet, as illustrated in Figure 8:¶ The secret key and the nonce are values derived by calling HKDF-Expand-Label using 0xd9c9943e6101fd200021506bcc02814c73030f25c79d71ce876eca876e6fca8e as the secret, with labels being \"quic key\" and \"quic iv\" (Section 5.1).¶ Retry Pseudo-Packet { ODCID Length (8), Original Destination Connection ID (0..160), Header Form (1) = 1, Fixed Bit (1) = 1, Long Packet Type (2) = 3, Unused (4), Version (32), DCID Len (8), Destination Connection ID (0..160), SCID Len (8), Source Connection ID (0..160), Retry Token (..), } Figure 8: Retry Pseudo-Packet The Retry Pseudo-Packet is not sent over the wire. It is computed by taking the transmitted Retry packet, removing the Retry Integrity Tag, and prepending the two following fields:¶ ODCID Length: The ODCID Length field contains the length in bytes of the Original Destination Connection ID field that follows it, encoded as an 8-bit unsigned integer.¶ Original Destination Connection ID: The Original Destination Connection ID contains the value of the Destination Connection ID from the Initial packet that this Retry is in response to. The length of this field is given in ODCID Length. The presence of this field ensures that a valid Retry packet can only be sent by an entity that observes the Initial packet.¶ 6. Key Update Once the handshake is confirmed (see Section 4.1.2), an endpoint MAY initiate a key update.¶ The Key Phase bit indicates which packet protection keys are used to protect the packet. The Key Phase bit is initially set to 0 for the first set of 1-RTT packets and toggled to signal each subsequent key update.¶ The Key Phase bit allows a recipient to detect a change in keying material without needing to receive the first packet that triggered the change. An endpoint that notices a changed Key Phase bit updates keys and decrypts the packet that contains the changed value.¶ Initiating a key update results in both endpoints updating keys. This differs from TLS where endpoints can update keys independently.¶ This mechanism replaces the key update mechanism of TLS, which relies on KeyUpdate messages sent using 1-RTT encryption keys. Endpoints MUST NOT send a TLS KeyUpdate message. Endpoints MUST treat the receipt of a TLS KeyUpdate message as a connection error of type 0x010a, equivalent to a fatal TLS alert of unexpected_message; see Section 4.8.¶ Figure 9 shows a key update process, where the initial set of keys used (identified with @M) are replaced by updated keys (identified with @N). The value of the Key Phase bit is indicated in brackets [].¶ Initiating Peer Responding Peer @M [0] QUIC Packets ... Update to @N @N [1] QUIC Packets --------> Update to @N ... QUIC Packets [1] @N <-------- QUIC Packets [1] @N containing ACK <-------- ... Key Update Permitted @N [1] QUIC Packets containing ACK for @N packets --------> Key Update Permitted ... Figure 9: Key Update 6.1. Initiating a Key Update Endpoints maintain separate read and write secrets for packet protection. An endpoint initiates a key update by updating its packet protection write secret and using that to protect new packets. The endpoint creates a new write secret from the existing write secret as performed in Section 7.2 of [TLS13]. This uses the KDF function provided by TLS with a label of \"quic ku\". The corresponding key and IV are created from that secret as defined in Section 5.1. The header protection key is not updated.¶ For example, to update write keys with TLS 1.3, HKDF-Expand-Label is used as:¶ secret_<n+1> = HKDF-Expand-Label(secret_<n>, \"quic ku\", \"\", Hash.length) ¶ The endpoint toggles the value of the Key Phase bit and uses the updated key and IV to protect all subsequent packets.¶ An endpoint MUST NOT initiate a key update prior to having confirmed the handshake (Section 4.1.2). An endpoint MUST NOT initiate a subsequent key update unless it has received an acknowledgment for a packet that was sent protected with keys from the current key phase. This ensures that keys are available to both peers before another key update can be initiated. This can be implemented by tracking the lowest packet number sent with each key phase and the highest acknowledged packet number in the 1-RTT space: once the latter is higher than or equal to the former, another key update can be initiated.¶ Note: Keys of packets other than the 1-RTT packets are never updated; their keys are derived solely from the TLS handshake state.¶ The endpoint that initiates a key update also updates the keys that it uses for receiving packets. These keys will be needed to process packets the peer sends after updating.¶ An endpoint MUST retain old keys until it has successfully unprotected a packet sent using the new keys. An endpoint SHOULD retain old keys for some time after unprotecting a packet sent using the new keys. Discarding old keys too early can cause delayed packets to be discarded. Discarding packets will be interpreted as packet loss by the peer and could adversely affect performance.¶ 6.2. Responding to a Key Update A peer is permitted to initiate a key update after receiving an acknowledgment of a packet in the current key phase. An endpoint detects a key update when processing a packet with a key phase that differs from the value used to protect the last packet it sent. To process this packet, the endpoint uses the next packet protection key and IV. See Section 6.3 for considerations about generating these keys.¶ If a packet is successfully processed using the next key and IV, then the peer has initiated a key update. The endpoint MUST update its send keys to the corresponding key phase in response, as described in Section 6.1. Sending keys MUST be updated before sending an acknowledgment for the packet that was received with updated keys. By acknowledging the packet that triggered the key update in a packet protected with the updated keys, the endpoint signals that the key update is complete.¶ An endpoint can defer sending the packet or acknowledgment according to its normal packet sending behavior; it is not necessary to immediately generate a packet in response to a key update. The next packet sent by the endpoint will use the updated keys. The next packet that contains an acknowledgment will cause the key update to be completed. If an endpoint detects a second update before it has sent any packets with updated keys containing an acknowledgment for the packet that initiated the key update, it indicates that its peer has updated keys twice without awaiting confirmation. An endpoint MAY treat such consecutive key updates as a connection error of type KEY_UPDATE_ERROR.¶ An endpoint that receives an acknowledgment that is carried in a packet protected with old keys where any acknowledged packet was protected with newer keys MAY treat that as a connection error of type KEY_UPDATE_ERROR. This indicates that a peer has received and acknowledged a packet that initiates a key update, but has not updated keys in response.¶ 6.3. Timing of Receive Key Generation Endpoints responding to an apparent key update MUST NOT generate a timing side-channel signal that might indicate that the Key Phase bit was invalid (see Section 9.5). Endpoints can use randomized packet protection keys in place of discarded keys when key updates are not yet permitted. Using randomized keys ensures that attempting to remove packet protection does not result in timing variations, and results in packets with an invalid Key Phase bit being rejected.¶ The process of creating new packet protection keys for receiving packets could reveal that a key update has occurred. An endpoint MAY generate new keys as part of packet processing, but this creates a timing signal that could be used by an attacker to learn when key updates happen and thus leak the value of the Key Phase bit.¶ Endpoints are generally expected to have current and next receive packet protection keys available. For a short period after a key update completes, up to the PTO, endpoints MAY defer generation of the next set of receive packet protection keys. This allows endpoints to retain only two sets of receive keys; see Section 6.5.¶ Once generated, the next set of packet protection keys SHOULD be retained, even if the packet that was received was subsequently discarded. Packets containing apparent key updates are easy to forge, and while the process of key update does not require significant effort, triggering this process could be used by an attacker for DoS.¶ For this reason, endpoints MUST be able to retain two sets of packet protection keys for receiving packets: the current and the next. Retaining the previous keys in addition to these might improve performance, but this is not essential.¶ 6.4. Sending with Updated Keys An endpoint never sends packets that are protected with old keys. Only the current keys are used. Keys used for protecting packets can be discarded immediately after switching to newer keys.¶ Packets with higher packet numbers MUST be protected with either the same or newer packet protection keys than packets with lower packet numbers. An endpoint that successfully removes protection with old keys when newer keys were used for packets with lower packet numbers MUST treat this as a connection error of type KEY_UPDATE_ERROR.¶ 6.5. Receiving with Different Keys For receiving packets during a key update, packets protected with older keys might arrive if they were delayed by the network. Retaining old packet protection keys allows these packets to be successfully processed.¶ As packets protected with keys from the next key phase use the same Key Phase value as those protected with keys from the previous key phase, it is necessary to distinguish between the two if packets protected with old keys are to be processed. This can be done using packet numbers. A recovered packet number that is lower than any packet number from the current key phase uses the previous packet protection keys; a recovered packet number that is higher than any packet number from the current key phase requires the use of the next packet protection keys.¶ Some care is necessary to ensure that any process for selecting between previous, current, and next packet protection keys does not expose a timing side channel that might reveal which keys were used to remove packet protection. See Section 9.5 for more information.¶ Alternatively, endpoints can retain only two sets of packet protection keys, swapping previous for next after enough time has passed to allow for reordering in the network. In this case, the Key Phase bit alone can be used to select keys.¶ An endpoint MAY allow a period of approximately the Probe Timeout (PTO; see [QUIC-RECOVERY]) after promoting the next set of receive keys to be current before it creates the subsequent set of packet protection keys. These updated keys MAY replace the previous keys at that time. With the caveat that PTO is a subjective measure -- that is, a peer could have a different view of the RTT -- this time is expected to be long enough that any reordered packets would be declared lost by a peer even if they were acknowledged and short enough to allow a peer to initiate further key updates.¶ Endpoints need to allow for the possibility that a peer might not be able to decrypt packets that initiate a key update during the period when the peer retains old keys. Endpoints SHOULD wait three times the PTO before initiating a key update after receiving an acknowledgment that confirms that the previous key update was received. Failing to allow sufficient time could lead to packets being discarded.¶ An endpoint SHOULD retain old read keys for no more than three times the PTO after having received a packet protected using the new keys. After this period, old read keys and their corresponding secrets SHOULD be discarded.¶ 6.6. Limits on AEAD Usage This document sets usage limits for AEAD algorithms to ensure that overuse does not give an adversary a disproportionate advantage in attacking the confidentiality and integrity of communications when using QUIC.¶ The usage limits defined in TLS 1.3 exist for protection against attacks on confidentiality and apply to successful applications of AEAD protection. The integrity protections in authenticated encryption also depend on limiting the number of attempts to forge packets. TLS achieves this by closing connections after any record fails an authentication check. In comparison, QUIC ignores any packet that cannot be authenticated, allowing multiple forgery attempts.¶ QUIC accounts for AEAD confidentiality and integrity limits separately. The confidentiality limit applies to the number of packets encrypted with a given key. The integrity limit applies to the number of packets decrypted within a given connection. Details on enforcing these limits for each AEAD algorithm follow below.¶ Endpoints MUST count the number of encrypted packets for each set of keys. If the total number of encrypted packets with the same key exceeds the confidentiality limit for the selected AEAD, the endpoint MUST stop using those keys. Endpoints MUST initiate a key update before sending more protected packets than the confidentiality limit for the selected AEAD permits. If a key update is not possible or integrity limits are reached, the endpoint MUST stop using the connection and only send stateless resets in response to receiving packets. It is RECOMMENDED that endpoints immediately close the connection with a connection error of type AEAD_LIMIT_REACHED before reaching a state where key updates are not possible.¶ For AEAD_AES_128_GCM and AEAD_AES_256_GCM, the confidentiality limit is 223 encrypted packets; see Appendix B.1. For AEAD_CHACHA20_POLY1305, the confidentiality limit is greater than the number of possible packets (262) and so can be disregarded. For AEAD_AES_128_CCM, the confidentiality limit is 221.5 encrypted packets; see Appendix B.2. Applying a limit reduces the probability that an attacker can distinguish the AEAD in use from a random permutation; see [AEBounds], [ROBUST], and [GCM-MU].¶ In addition to counting packets sent, endpoints MUST count the number of received packets that fail authentication during the lifetime of a connection. If the total number of received packets that fail authentication within the connection, across all keys, exceeds the integrity limit for the selected AEAD, the endpoint MUST immediately close the connection with a connection error of type AEAD_LIMIT_REACHED and not process any more packets.¶ For AEAD_AES_128_GCM and AEAD_AES_256_GCM, the integrity limit is 252 invalid packets; see Appendix B.1. For AEAD_CHACHA20_POLY1305, the integrity limit is 236 invalid packets; see [AEBounds]. For AEAD_AES_128_CCM, the integrity limit is 221.5 invalid packets; see Appendix B.2. Applying this limit reduces the probability that an attacker can successfully forge a packet; see [AEBounds], [ROBUST], and [GCM-MU].¶ Endpoints that limit the size of packets MAY use higher confidentiality and integrity limits; see Appendix B for details.¶ Future analyses and specifications MAY relax confidentiality or integrity limits for an AEAD.¶ Any TLS cipher suite that is specified for use with QUIC MUST define limits on the use of the associated AEAD function that preserves margins for confidentiality and integrity. That is, limits MUST be specified for the number of packets that can be authenticated and for the number of packets that can fail authentication. Providing a reference to any analysis upon which values are based -- and any assumptions used in that analysis -- allows limits to be adapted to varying usage conditions.¶ 6.7. Key Update Error Code The KEY_UPDATE_ERROR error code (0x0e) is used to signal errors related to key updates.¶ 7. Security of Initial Messages Initial packets are not protected with a secret key, so they are subject to potential tampering by an attacker. QUIC provides protection against attackers that cannot read packets but does not attempt to provide additional protection against attacks where the attacker can observe and inject packets. Some forms of tampering -- such as modifying the TLS messages themselves -- are detectable, but some -- such as modifying ACKs -- are not.¶ For example, an attacker could inject a packet containing an ACK frame to make it appear that a packet had not been received or to create a false impression of the state of the connection (e.g., by modifying the ACK Delay). Note that such a packet could cause a legitimate packet to be dropped as a duplicate. Implementations SHOULD use caution in relying on any data that is contained in Initial packets that is not otherwise authenticated.¶ It is also possible for the attacker to tamper with data that is carried in Handshake packets, but because that sort of tampering requires modifying TLS handshake messages, any such tampering will cause the TLS handshake to fail.¶ 8. QUIC-Specific Adjustments to the TLS Handshake Certain aspects of the TLS handshake are different when used with QUIC.¶ QUIC also requires additional features from TLS. In addition to negotiation of cryptographic parameters, the TLS handshake carries and authenticates values for QUIC transport parameters.¶ 8.1. Protocol Negotiation QUIC requires that the cryptographic handshake provide authenticated protocol negotiation. TLS uses Application-Layer Protocol Negotiation [ALPN] to select an application protocol. Unless another mechanism is used for agreeing on an application protocol, endpoints MUST use ALPN for this purpose.¶ When using ALPN, endpoints MUST immediately close a connection (see Section 10.2 of [QUIC-TRANSPORT]) with a no_application_protocol TLS alert (QUIC error code 0x0178; see Section 4.8) if an application protocol is not negotiated. While [ALPN] only specifies that servers use this alert, QUIC clients MUST use error 0x0178 to terminate a connection when ALPN negotiation fails.¶ An application protocol MAY restrict the QUIC versions that it can operate over. Servers MUST select an application protocol compatible with the QUIC version that the client has selected. The server MUST treat the inability to select a compatible application protocol as a connection error of type 0x0178 (no_application_protocol). Similarly, a client MUST treat the selection of an incompatible application protocol by a server as a connection error of type 0x0178.¶ 8.2. QUIC Transport Parameters Extension QUIC transport parameters are carried in a TLS extension. Different versions of QUIC might define a different method for negotiating transport configuration.¶ Including transport parameters in the TLS handshake provides integrity protection for these values.¶ enum { quic_transport_parameters(0x39), (65535) } ExtensionType; ¶ The extension_data field of the quic_transport_parameters extension contains a value that is defined by the version of QUIC that is in use.¶ The quic_transport_parameters extension is carried in the ClientHello and the EncryptedExtensions messages during the handshake. Endpoints MUST send the quic_transport_parameters extension; endpoints that receive ClientHello or EncryptedExtensions messages without the quic_transport_parameters extension MUST close the connection with an error of type 0x016d (equivalent to a fatal TLS missing_extension alert, see Section 4.8).¶ Transport parameters become available prior to the completion of the handshake. A server might use these values earlier than handshake completion. However, the value of transport parameters is not authenticated until the handshake completes, so any use of these parameters cannot depend on their authenticity. Any tampering with transport parameters will cause the handshake to fail.¶ Endpoints MUST NOT send this extension in a TLS connection that does not use QUIC (such as the use of TLS with TCP defined in [TLS13]). A fatal unsupported_extension alert MUST be sent by an implementation that supports this extension if the extension is received when the transport is not QUIC.¶ Negotiating the quic_transport_parameters extension causes the EndOfEarlyData to be removed; see Section 8.3.¶ 8.3. Removing the EndOfEarlyData Message The TLS EndOfEarlyData message is not used with QUIC. QUIC does not rely on this message to mark the end of 0-RTT data or to signal the change to Handshake keys.¶ Clients MUST NOT send the EndOfEarlyData message. A server MUST treat receipt of a CRYPTO frame in a 0-RTT packet as a connection error of type PROTOCOL_VIOLATION.¶ As a result, EndOfEarlyData does not appear in the TLS handshake transcript.¶ 8.4. Prohibit TLS Middlebox Compatibility Mode Appendix D.4 of [TLS13] describes an alteration to the TLS 1.3 handshake as a workaround for bugs in some middleboxes. The TLS 1.3 middlebox compatibility mode involves setting the legacy_session_id field to a 32-byte value in the ClientHello and ServerHello, then sending a change_cipher_spec record. Both field and record carry no semantic content and are ignored.¶ This mode has no use in QUIC as it only applies to middleboxes that interfere with TLS over TCP. QUIC also provides no means to carry a change_cipher_spec record. A client MUST NOT request the use of the TLS 1.3 compatibility mode. A server SHOULD treat the receipt of a TLS ClientHello with a non-empty legacy_session_id field as a connection error of type PROTOCOL_VIOLATION.¶ 9. Security Considerations All of the security considerations that apply to TLS also apply to the use of TLS in QUIC. Reading all of [TLS13] and its appendices is the best way to gain an understanding of the security properties of QUIC.¶ This section summarizes some of the more important security aspects specific to the TLS integration, though there are many security-relevant details in the remainder of the document.¶ 9.1. Session Linkability Use of TLS session tickets allows servers and possibly other entities to correlate connections made by the same client; see Section 4.5 for details.¶ 9.2. Replay Attacks with 0-RTT As described in Section 8 of [TLS13], use of TLS early data comes with an exposure to replay attack. The use of 0-RTT in QUIC is similarly vulnerable to replay attack.¶ Endpoints MUST implement and use the replay protections described in [TLS13], however it is recognized that these protections are imperfect. Therefore, additional consideration of the risk of replay is needed.¶ QUIC is not vulnerable to replay attack, except via the application protocol information it might carry. The management of QUIC protocol state based on the frame types defined in [QUIC-TRANSPORT] is not vulnerable to replay. Processing of QUIC frames is idempotent and cannot result in invalid connection states if frames are replayed, reordered, or lost. QUIC connections do not produce effects that last beyond the lifetime of the connection, except for those produced by the application protocol that QUIC serves.¶ TLS session tickets and address validation tokens are used to carry QUIC configuration information between connections, specifically, to enable a server to efficiently recover state that is used in connection establishment and address validation. These MUST NOT be used to communicate application semantics between endpoints; clients MUST treat them as opaque values. The potential for reuse of these tokens means that they require stronger protections against replay.¶ A server that accepts 0-RTT on a connection incurs a higher cost than accepting a connection without 0-RTT. This includes higher processing and computation costs. Servers need to consider the probability of replay and all associated costs when accepting 0-RTT.¶ Ultimately, the responsibility for managing the risks of replay attacks with 0-RTT lies with an application protocol. An application protocol that uses QUIC MUST describe how the protocol uses 0-RTT and the measures that are employed to protect against replay attack. An analysis of replay risk needs to consider all QUIC protocol features that carry application semantics.¶ Disabling 0-RTT entirely is the most effective defense against replay attack.¶ QUIC extensions MUST either describe how replay attacks affect their operation or prohibit the use of the extension in 0-RTT. Application protocols MUST either prohibit the use of extensions that carry application semantics in 0-RTT or provide replay mitigation strategies.¶ 9.3. Packet Reflection Attack Mitigation A small ClientHello that results in a large block of handshake messages from a server can be used in packet reflection attacks to amplify the traffic generated by an attacker.¶ QUIC includes three defenses against this attack. First, the packet containing a ClientHello MUST be padded to a minimum size. Second, if responding to an unverified source address, the server is forbidden to send more than three times as many bytes as the number of bytes it has received (see Section 8.1 of [QUIC-TRANSPORT]). Finally, because acknowledgments of Handshake packets are authenticated, a blind attacker cannot forge them. Put together, these defenses limit the level of amplification.¶ 9.4. Header Protection Analysis [NAN] analyzes authenticated encryption algorithms that provide nonce privacy, referred to as \"Hide Nonce\" (HN) transforms. The general header protection construction in this document is one of those algorithms (HN1). Header protection is applied after the packet protection AEAD, sampling a set of bytes (sample) from the AEAD output and encrypting the header field using a pseudorandom function (PRF) as follows:¶ protected_field = field XOR PRF(hp_key, sample) ¶ The header protection variants in this document use a pseudorandom permutation (PRP) in place of a generic PRF. However, since all PRPs are also PRFs [IMC], these variants do not deviate from the HN1 construction.¶ As hp_key is distinct from the packet protection key, it follows that header protection achieves AE2 security as defined in [NAN] and therefore guarantees privacy of field, the protected packet header. Future header protection variants based on this construction MUST use a PRF to ensure equivalent security guarantees.¶ Use of the same key and ciphertext sample more than once risks compromising header protection. Protecting two different headers with the same key and ciphertext sample reveals the exclusive OR of the protected fields. Assuming that the AEAD acts as a PRF, if L bits are sampled, the odds of two ciphertext samples being identical approach 2-L/2, that is, the birthday bound. For the algorithms described in this document, that probability is one in 264.¶ To prevent an attacker from modifying packet headers, the header is transitively authenticated using packet protection; the entire packet header is part of the authenticated additional data. Protected fields that are falsified or modified can only be detected once the packet protection is removed.¶ 9.5. Header Protection Timing Side Channels An attacker could guess values for packet numbers or Key Phase and have an endpoint confirm guesses through timing side channels. Similarly, guesses for the packet number length can be tried and exposed. If the recipient of a packet discards packets with duplicate packet numbers without attempting to remove packet protection, they could reveal through timing side channels that the packet number matches a received packet. For authentication to be free from side channels, the entire process of header protection removal, packet number recovery, and packet protection removal MUST be applied together without timing and other side channels.¶ For the sending of packets, construction and protection of packet payloads and packet numbers MUST be free from side channels that would reveal the packet number or its encoded size.¶ During a key update, the time taken to generate new keys could reveal through timing side channels that a key update has occurred. Alternatively, where an attacker injects packets, this side channel could reveal the value of the Key Phase on injected packets. After receiving a key update, an endpoint SHOULD generate and save the next set of receive packet protection keys, as described in Section 6.3. By generating new keys before a key update is received, receipt of packets will not create timing signals that leak the value of the Key Phase.¶ This depends on not doing this key generation during packet processing, and it can require that endpoints maintain three sets of packet protection keys for receiving: for the previous key phase, for the current key phase, and for the next key phase. Endpoints can instead choose to defer generation of the next receive packet protection keys until they discard old keys so that only two sets of receive keys need to be retained at any point in time.¶ 9.6. Key Diversity In using TLS, the central key schedule of TLS is used. As a result of the TLS handshake messages being integrated into the calculation of secrets, the inclusion of the QUIC transport parameters extension ensures that the handshake and 1-RTT keys are not the same as those that might be produced by a server running TLS over TCP. To avoid the possibility of cross-protocol key synchronization, additional measures are provided to improve key separation.¶ The QUIC packet protection keys and IVs are derived using a different label than the equivalent keys in TLS.¶ To preserve this separation, a new version of QUIC SHOULD define new labels for key derivation for packet protection key and IV, plus the header protection keys. This version of QUIC uses the string \"quic\". Other versions can use a version-specific label in place of that string.¶ The initial secrets use a key that is specific to the negotiated QUIC version. New QUIC versions SHOULD define a new salt value used in calculating initial secrets.¶ 9.7. Randomness QUIC depends on endpoints being able to generate secure random numbers, both directly for protocol values such as the connection ID, and transitively via TLS. See [RFC4086] for guidance on secure random number generation.¶ 10. IANA Considerations IANA has registered a codepoint of 57 (or 0x39) for the quic_transport_parameters extension (defined in Section 8.2) in the \"TLS ExtensionType Values\" registry [TLS-REGISTRIES].¶ The Recommended column for this extension is marked Yes. The TLS 1.3 Column includes CH (ClientHello) and EE (EncryptedExtensions).¶ Table 2: TLS ExtensionType Values Registry Entry Value Extension Name TLS 1.3 Recommended Reference 57 quic_transport_parameters CH, EE Y This document 11. References 11.1. Normative References [AEAD] McGrew, D., \"An Interface and Algorithms for Authenticated Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008, <https://www.rfc-editor.org/info/rfc5116>. [AES] \"Advanced encryption standard (AES)\", National Institute of Standards and Technology report, DOI 10.6028/nist.fips.197, November 2001, <https://doi.org/10.6028/nist.fips.197>. [ALPN] Friedl, S., Popov, A., Langley, A., and E. Stephan, \"Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension\", RFC 7301, DOI 10.17487/RFC7301, July 2014, <https://www.rfc-editor.org/info/rfc7301>. [CHACHA] Nir, Y. and A. Langley, \"ChaCha20 and Poly1305 for IETF Protocols\", RFC 8439, DOI 10.17487/RFC8439, June 2018, <https://www.rfc-editor.org/info/rfc8439>. [HKDF] Krawczyk, H. and P. Eronen, \"HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\", RFC 5869, DOI 10.17487/RFC5869, May 2010, <https://www.rfc-editor.org/info/rfc5869>. [QUIC-RECOVERY] Iyengar, J., Ed. and I. Swett, Ed., \"QUIC Loss Detection and Congestion Control\", RFC 9002, DOI 10.17487/RFC9002, May 2021, <https://www.rfc-editor.org/info/rfc9002>. [QUIC-TRANSPORT] Iyengar, J., Ed. and M. Thomson, Ed., \"QUIC: A UDP-Based Multiplexed and Secure Transport\", RFC 9000, DOI 10.17487/RFC9000, May 2021, <https://www.rfc-editor.org/info/rfc9000>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <https://www.rfc-editor.org/info/rfc4086>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [SHA] Dang, Q., \"Secure Hash Standard\", National Institute of Standards and Technology report, DOI 10.6028/nist.fips.180-4, July 2015, <https://doi.org/10.6028/nist.fips.180-4>. [TLS-REGISTRIES] Salowey, J. and S. Turner, \"IANA Registry Updates for TLS and DTLS\", RFC 8447, DOI 10.17487/RFC8447, August 2018, <https://www.rfc-editor.org/info/rfc8447>. [TLS13] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>. 11.2. Informative References [AEBounds] Luykx, A. and K. Paterson, \"Limits on Authenticated Encryption Use in TLS\", 28 August 2017, <https://www.isg.rhul.ac.uk/~kp/TLS-AEbounds.pdf>. [ASCII] Cerf, V., \"ASCII format for network interchange\", STD 80, RFC 20, DOI 10.17487/RFC0020, October 1969, <https://www.rfc-editor.org/info/rfc20>. [CCM-ANALYSIS] Jonsson, J., \"On the Security of CTR + CBC-MAC\", Selected Areas in Cryptography, SAC 2002, Lecture Notes in Computer Science, vol 2595, pp. 76-93, DOI 10.1007/3-540-36492-7_7, 2003, <https://doi.org/10.1007/3-540-36492-7_7>. [COMPRESS] Ghedini, A. and V. Vasiliev, \"TLS Certificate Compression\", RFC 8879, DOI 10.17487/RFC8879, December 2020, <https://www.rfc-editor.org/info/rfc8879>. [GCM-MU] Hoang, V., Tessaro, S., and A. Thiruvengadam, \"The Multi-user Security of GCM, Revisited: Tight Bounds for Nonce Randomization\", CCS '18: Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pp. 1429-1440, DOI 10.1145/3243734.3243816, 2018, <https://doi.org/10.1145/3243734.3243816>. [HTTP-REPLAY] Thomson, M., Nottingham, M., and W. Tarreau, \"Using Early Data in HTTP\", RFC 8470, DOI 10.17487/RFC8470, September 2018, <https://www.rfc-editor.org/info/rfc8470>. [HTTP2-TLS13] Benjamin, D., \"Using TLS 1.3 with HTTP/2\", RFC 8740, DOI 10.17487/RFC8740, February 2020, <https://www.rfc-editor.org/info/rfc8740>. [IMC] Katz, J. and Y. Lindell, \"Introduction to Modern Cryptography, Second Edition\", ISBN 978-1466570269, 6 November 2014. [NAN] Bellare, M., Ng, R., and B. Tackmann, \"Nonces Are Noticed: AEAD Revisited\", Advances in Cryptology - CRYPTO 2019, Lecture Notes in Computer Science, vol 11692, pp. 235-265, DOI 10.1007/978-3-030-26948-7_9, 2019, <https://doi.org/10.1007/978-3-030-26948-7_9>. [QUIC-HTTP] Bishop, M., Ed., \"Hypertext Transfer Protocol Version 3 (HTTP/3)\", Work in Progress, Internet-Draft, draft-ietf-quic-http-34, 2 February 2021, <https://tools.ietf.org/html/draft-ietf-quic-http-34>. [RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, DOI 10.17487/RFC2818, May 2000, <https://www.rfc-editor.org/info/rfc2818>. [RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280, May 2008, <https://www.rfc-editor.org/info/rfc5280>. [ROBUST] Fischlin, M., Günther, F., and C. Janson, \"Robust Channels: Handling Unreliable Networks in the Record Layers of QUIC and DTLS 1.3\", 16 May 2020, <https://eprint.iacr.org/2020/718>. Appendix A. Sample Packet Protection This section shows examples of packet protection so that implementations can be verified incrementally. Samples of Initial packets from both client and server plus a Retry packet are defined. These packets use an 8-byte client-chosen Destination Connection ID of 0x8394c8f03e515708. Some intermediate values are included. All values are shown in hexadecimal.¶ A.1. Keys The labels generated during the execution of the HKDF-Expand-Label function (that is, HkdfLabel.label) and part of the value given to the HKDF-Expand function in order to produce its output are:¶ client in: 00200f746c73313320636c69656e7420696e00¶ server in: 00200f746c7331332073657276657220696e00¶ quic key: 00100e746c7331332071756963206b657900¶ quic iv: 000c0d746c733133207175696320697600¶ quic hp: 00100d746c733133207175696320687000¶ The initial secret is common:¶ initial_secret = HKDF-Extract(initial_salt, cid) = 7db5df06e7a69e432496adedb0085192 3595221596ae2ae9fb8115c1e9ed0a44 ¶ The secrets for protecting client packets are:¶ client_initial_secret = HKDF-Expand-Label(initial_secret, \"client in\", \"\", 32) = c00cf151ca5be075ed0ebfb5c80323c4 2d6b7db67881289af4008f1f6c357aea key = HKDF-Expand-Label(client_initial_secret, \"quic key\", \"\", 16) = 1f369613dd76d5467730efcbe3b1a22d iv = HKDF-Expand-Label(client_initial_secret, \"quic iv\", \"\", 12) = fa044b2f42a3fd3b46fb255c hp = HKDF-Expand-Label(client_initial_secret, \"quic hp\", \"\", 16) = 9f50449e04a0e810283a1e9933adedd2 ¶ The secrets for protecting server packets are:¶ server_initial_secret = HKDF-Expand-Label(initial_secret, \"server in\", \"\", 32) = 3c199828fd139efd216c155ad844cc81 fb82fa8d7446fa7d78be803acdda951b key = HKDF-Expand-Label(server_initial_secret, \"quic key\", \"\", 16) = cf3a5331653c364c88f0f379b6067e37 iv = HKDF-Expand-Label(server_initial_secret, \"quic iv\", \"\", 12) = 0ac1493ca1905853b0bba03e hp = HKDF-Expand-Label(server_initial_secret, \"quic hp\", \"\", 16) = c206b8d9b9f0f37644430b490eeaa314 ¶ A.2. Client Initial The client sends an Initial packet. The unprotected payload of this packet contains the following CRYPTO frame, plus enough PADDING frames to make a 1162-byte payload:¶ 060040f1010000ed0303ebf8fa56f129 39b9584a3896472ec40bb863cfd3e868 04fe3a47f06a2b69484c000004130113 02010000c000000010000e00000b6578 616d706c652e636f6dff01000100000a 00080006001d00170018001000070005 04616c706e0005000501000000000033 00260024001d00209370b2c9caa47fba baf4559fedba753de171fa71f50f1ce1 5d43e994ec74d748002b000302030400 0d0010000e0403050306030203080408 050806002d00020101001c0002400100 3900320408ffffffffffffffff050480 00ffff07048000ffff08011001048000 75300901100f088394c8f03e51570806 048000ffff ¶ The unprotected header indicates a length of 1182 bytes: the 4-byte packet number, 1162 bytes of frames, and the 16-byte authentication tag. The header includes the connection ID and a packet number of 2:¶ c300000001088394c8f03e5157080000449e00000002 ¶ Protecting the payload produces output that is sampled for header protection. Because the header uses a 4-byte packet number encoding, the first 16 bytes of the protected payload is sampled and then applied to the header as follows:¶ sample = d1b1c98dd7689fb8ec11d242b123dc9b mask = AES-ECB(hp, sample)[0..4] = 437b9aec36 header[0] ^= mask[0] & 0x0f = c0 header[18..21] ^= mask[1..4] = 7b9aec34 header = c000000001088394c8f03e5157080000449e7b9aec34 ¶ The resulting protected packet is:¶ c000000001088394c8f03e5157080000 449e7b9aec34d1b1c98dd7689fb8ec11 d242b123dc9bd8bab936b47d92ec356c 0bab7df5976d27cd449f63300099f399 1c260ec4c60d17b31f8429157bb35a12 82a643a8d2262cad67500cadb8e7378c 8eb7539ec4d4905fed1bee1fc8aafba1 7c750e2c7ace01e6005f80fcb7df6212 30c83711b39343fa028cea7f7fb5ff89 eac2308249a02252155e2347b63d58c5 457afd84d05dfffdb20392844ae81215 4682e9cf012f9021a6f0be17ddd0c208 4dce25ff9b06cde535d0f920a2db1bf3 62c23e596d11a4f5a6cf3948838a3aec 4e15daf8500a6ef69ec4e3feb6b1d98e 610ac8b7ec3faf6ad760b7bad1db4ba3 485e8a94dc250ae3fdb41ed15fb6a8e5 eba0fc3dd60bc8e30c5c4287e53805db 059ae0648db2f64264ed5e39be2e20d8 2df566da8dd5998ccabdae053060ae6c 7b4378e846d29f37ed7b4ea9ec5d82e7 961b7f25a9323851f681d582363aa5f8 9937f5a67258bf63ad6f1a0b1d96dbd4 faddfcefc5266ba6611722395c906556 be52afe3f565636ad1b17d508b73d874 3eeb524be22b3dcbc2c7468d54119c74 68449a13d8e3b95811a198f3491de3e7 fe942b330407abf82a4ed7c1b311663a c69890f4157015853d91e923037c227a 33cdd5ec281ca3f79c44546b9d90ca00 f064c99e3dd97911d39fe9c5d0b23a22 9a234cb36186c4819e8b9c5927726632 291d6a418211cc2962e20fe47feb3edf 330f2c603a9d48c0fcb5699dbfe58964 25c5bac4aee82e57a85aaf4e2513e4f0 5796b07ba2ee47d80506f8d2c25e50fd 14de71e6c418559302f939b0e1abd576 f279c4b2e0feb85c1f28ff18f58891ff ef132eef2fa09346aee33c28eb130ff2 8f5b766953334113211996d20011a198 e3fc433f9f2541010ae17c1bf202580f 6047472fb36857fe843b19f5984009dd c324044e847a4f4a0ab34f719595de37 252d6235365e9b84392b061085349d73 203a4a13e96f5432ec0fd4a1ee65accd d5e3904df54c1da510b0ff20dcc0c77f cb2c0e0eb605cb0504db87632cf3d8b4 dae6e705769d1de354270123cb11450e fc60ac47683d7b8d0f811365565fd98c 4c8eb936bcab8d069fc33bd801b03ade a2e1fbc5aa463d08ca19896d2bf59a07 1b851e6c239052172f296bfb5e724047 90a2181014f3b94a4e97d117b4381303 68cc39dbb2d198065ae3986547926cd2 162f40a29f0c3c8745c0f50fba3852e5 66d44575c29d39a03f0cda721984b6f4 40591f355e12d439ff150aab7613499d bd49adabc8676eef023b15b65bfc5ca0 6948109f23f350db82123535eb8a7433 bdabcb909271a6ecbcb58b936a88cd4e 8f2e6ff5800175f113253d8fa9ca8885 c2f552e657dc603f252e1a8e308f76f0 be79e2fb8f5d5fbbe2e30ecadd220723 c8c0aea8078cdfcb3868263ff8f09400 54da48781893a7e49ad5aff4af300cd8 04a6b6279ab3ff3afb64491c85194aab 760d58a606654f9f4400e8b38591356f bf6425aca26dc85244259ff2b19c41b9 f96f3ca9ec1dde434da7d2d392b905dd f3d1f9af93d1af5950bd493f5aa731b4 056df31bd267b6b90a079831aaf579be 0a39013137aac6d404f518cfd4684064 7e78bfe706ca4cf5e9c5453e9f7cfd2b 8b4c8d169a44e55c88d4a9a7f9474241 e221af44860018ab0856972e194cd934 ¶ A.3. Server Initial The server sends the following payload in response, including an ACK frame, a CRYPTO frame, and no PADDING frames:¶ 02000000000600405a020000560303ee fce7f7b37ba1d1632e96677825ddf739 88cfc79825df566dc5430b9a045a1200 130100002e00330024001d00209d3c94 0d89690b84d08a60993c144eca684d10 81287c834d5311bcf32bb9da1a002b00 020304 ¶ The header from the server includes a new connection ID and a 2-byte packet number encoding for a packet number of 1:¶ c1000000010008f067a5502a4262b50040750001 ¶ As a result, after protection, the header protection sample is taken starting from the third protected byte:¶ sample = 2cd0991cd25b0aac406a5816b6394100 mask = 2ec0d8356a header = cf000000010008f067a5502a4262b5004075c0d9 ¶ The final protected packet is then:¶ cf000000010008f067a5502a4262b500 4075c0d95a482cd0991cd25b0aac406a 5816b6394100f37a1c69797554780bb3 8cc5a99f5ede4cf73c3ec2493a1839b3 dbcba3f6ea46c5b7684df3548e7ddeb9 c3bf9c73cc3f3bded74b562bfb19fb84 022f8ef4cdd93795d77d06edbb7aaf2f 58891850abbdca3d20398c276456cbc4 2158407dd074ee ¶ A.4. Retry This shows a Retry packet that might be sent in response to the Initial packet in Appendix A.2. The integrity check includes the client-chosen connection ID value of 0x8394c8f03e515708, but that value is not included in the final Retry packet:¶ ff000000010008f067a5502a4262b574 6f6b656e04a265ba2eff4d829058fb3f 0f2496ba ¶ A.5. ChaCha20-Poly1305 Short Header Packet This example shows some of the steps required to protect a packet with a short header. This example uses AEAD_CHACHA20_POLY1305.¶ In this example, TLS produces an application write secret from which a server uses HKDF-Expand-Label to produce four values: a key, an IV, a header protection key, and the secret that will be used after keys are updated (this last value is not used further in this example).¶ secret = 9ac312a7f877468ebe69422748ad00a1 5443f18203a07d6060f688f30f21632b key = HKDF-Expand-Label(secret, \"quic key\", \"\", 32) = c6d98ff3441c3fe1b2182094f69caa2e d4b716b65488960a7a984979fb23e1c8 iv = HKDF-Expand-Label(secret, \"quic iv\", \"\", 12) = e0459b3474bdd0e44a41c144 hp = HKDF-Expand-Label(secret, \"quic hp\", \"\", 32) = 25a282b9e82f06f21f488917a4fc8f1b 73573685608597d0efcb076b0ab7a7a4 ku = HKDF-Expand-Label(secret, \"quic ku\", \"\", 32) = 1223504755036d556342ee9361d25342 1a826c9ecdf3c7148684b36b714881f9 ¶ The following shows the steps involved in protecting a minimal packet with an empty Destination Connection ID. This packet contains a single PING frame (that is, a payload of just 0x01) and has a packet number of 654360564. In this example, using a packet number of length 3 (that is, 49140 is encoded) avoids having to pad the payload of the packet; PADDING frames would be needed if the packet number is encoded on fewer bytes.¶ pn = 654360564 (decimal) nonce = e0459b3474bdd0e46d417eb0 unprotected header = 4200bff4 payload plaintext = 01 payload ciphertext = 655e5cd55c41f69080575d7999c25a5bfb ¶ The resulting ciphertext is the minimum size possible. One byte is skipped to produce the sample for header protection.¶ sample = 5e5cd55c41f69080575d7999c25a5bfb mask = aefefe7d03 header = 4cfe4189 ¶ The protected packet is the smallest possible packet size of 21 bytes.¶ packet = 4cfe4189655e5cd55c41f69080575d7999c25a5bfb ¶ Appendix B. AEAD Algorithm Analysis This section documents analyses used in deriving AEAD algorithm limits for AEAD_AES_128_GCM, AEAD_AES_128_CCM, and AEAD_AES_256_GCM. The analyses that follow use symbols for multiplication (*), division (/), and exponentiation (^), plus parentheses for establishing precedence. The following symbols are also used:¶ t: The size of the authentication tag in bits. For these ciphers, t is 128.¶ n: The size of the block function in bits. For these ciphers, n is 128.¶ k: The size of the key in bits. This is 128 for AEAD_AES_128_GCM and AEAD_AES_128_CCM; 256 for AEAD_AES_256_GCM.¶ l: The number of blocks in each packet (see below).¶ q: The number of genuine packets created and protected by endpoints. This value is the bound on the number of packets that can be protected before updating keys.¶ v: The number of forged packets that endpoints will accept. This value is the bound on the number of forged packets that an endpoint can reject before updating keys.¶ o: The amount of offline ideal cipher queries made by an adversary.¶ The analyses that follow rely on a count of the number of block operations involved in producing each message. This analysis is performed for packets of size up to 211 (l = 27) and 216 (l = 212). A size of 211 is expected to be a limit that matches common deployment patterns, whereas the 216 is the maximum possible size of a QUIC packet. Only endpoints that strictly limit packet size can use the larger confidentiality and integrity limits that are derived using the smaller packet size.¶ For AEAD_AES_128_GCM and AEAD_AES_256_GCM, the message length (l) is the length of the associated data in blocks plus the length of the plaintext in blocks.¶ For AEAD_AES_128_CCM, the total number of block cipher operations is the sum of the following: the length of the associated data in blocks, the length of the ciphertext in blocks, the length of the plaintext in blocks, plus 1. In this analysis, this is simplified to a value of twice the length of the packet in blocks (that is, 2l = 28 for packets that are limited to 211 bytes, or 2l = 213 otherwise). This simplification is based on the packet containing all of the associated data and ciphertext. This results in a one to three block overestimation of the number of operations per packet.¶ B.1. Analysis of AEAD_AES_128_GCM and AEAD_AES_256_GCM Usage Limits [GCM-MU] specifies concrete bounds for AEAD_AES_128_GCM and AEAD_AES_256_GCM as used in TLS 1.3 and QUIC. This section documents this analysis using several simplifying assumptions:¶ The number of ciphertext blocks an attacker uses in forgery attempts is bounded by v * l, which is the number of forgery attempts multiplied by the size of each packet (in blocks).¶ The amount of offline work done by an attacker does not dominate other factors in the analysis.¶ The bounds in [GCM-MU] are tighter and more complete than those used in [AEBounds], which allows for larger limits than those described in [TLS13].¶ B.1.1. Confidentiality Limit For confidentiality, Theorem (4.3) in [GCM-MU] establishes that, for a single user that does not repeat nonces, the dominant term in determining the distinguishing advantage between a real and random AEAD algorithm gained by an attacker is:¶ 2 * (q * l)^2 / 2^n ¶ For a target advantage of 2-57, this results in the relation:¶ q <= 2^35 / l ¶ Thus, endpoints that do not send packets larger than 211 bytes cannot protect more than 228 packets in a single connection without causing an attacker to gain a more significant advantage than the target of 2-57. The limit for endpoints that allow for the packet size to be as large as 216 is instead 223.¶ B.1.2. Integrity Limit For integrity, Theorem (4.3) in [GCM-MU] establishes that an attacker gains an advantage in successfully forging a packet of no more than the following:¶ (1 / 2^(8 * n)) + ((2 * v) / 2^(2 * n)) + ((2 * o * v) / 2^(k + n)) + (n * (v + (v * l)) / 2^k) ¶ The goal is to limit this advantage to 2-57. For AEAD_AES_128_GCM, the fourth term in this inequality dominates the rest, so the others can be removed without significant effect on the result. This produces the following approximation:¶ v <= 2^64 / l ¶ Endpoints that do not attempt to remove protection from packets larger than 211 bytes can attempt to remove protection from at most 257 packets. Endpoints that do not restrict the size of processed packets can attempt to remove protection from at most 252 packets.¶ For AEAD_AES_256_GCM, the same term dominates, but the larger value of k produces the following approximation:¶ v <= 2^192 / l ¶ This is substantially larger than the limit for AEAD_AES_128_GCM. However, this document recommends that the same limit be applied to both functions as either limit is acceptably large.¶ B.2. Analysis of AEAD_AES_128_CCM Usage Limits TLS [TLS13] and [AEBounds] do not specify limits on usage for AEAD_AES_128_CCM. However, any AEAD that is used with QUIC requires limits on use that ensure that both confidentiality and integrity are preserved. This section documents that analysis.¶ [CCM-ANALYSIS] is used as the basis of this analysis. The results of that analysis are used to derive usage limits that are based on those chosen in [TLS13].¶ For confidentiality, Theorem 2 in [CCM-ANALYSIS] establishes that an attacker gains a distinguishing advantage over an ideal pseudorandom permutation (PRP) of no more than the following:¶ (2l * q)^2 / 2^n ¶ The integrity limit in Theorem 1 in [CCM-ANALYSIS] provides an attacker a strictly higher advantage for the same number of messages. As the targets for the confidentiality advantage and the integrity advantage are the same, only Theorem 1 needs to be considered.¶ Theorem 1 establishes that an attacker gains an advantage over an ideal PRP of no more than the following:¶ v / 2^t + (2l * (v + q))^2 / 2^n ¶ As t and n are both 128, the first term is negligible relative to the second, so that term can be removed without a significant effect on the result.¶ This produces a relation that combines both encryption and decryption attempts with the same limit as that produced by the theorem for confidentiality alone. For a target advantage of 2-57, this results in the following:¶ v + q <= 2^34.5 / l ¶ By setting q = v, values for both confidentiality and integrity limits can be produced. Endpoints that limit packets to 211 bytes therefore have both confidentiality and integrity limits of 226.5 packets. Endpoints that do not restrict packet size have a limit of 221.5.¶ Contributors The IETF QUIC Working Group received an enormous amount of support from many people. The following people provided substantive contributions to this document:¶ Adam Langley¶ Alessandro Ghedini¶ Christian Huitema¶ Christopher Wood¶ David Schinazi¶ Dragana Damjanovic¶ Eric Rescorla¶ Felix Günther¶ Ian Swett¶ Jana Iyengar¶ 奥 一穂 (Kazuho Oku)¶ Marten Seemann¶ Martin Duke¶ Mike Bishop¶ Mikkel Fahnøe Jørgensen¶ Nick Banks¶ Nick Harper¶ Roberto Peon¶ Rui Paulo¶ Ryan Hamilton¶ Victor Vasiliev¶ Authors' Addresses Martin Thomson (editor) Mozilla Email: mt@lowentropy.net Sean Turner (editor) sn3rd Email: sean@sn3rd.com"
    },
    {
        "Number": "9020",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "YANG Data Model for Segment Routing",
        "Authors": [
            "S. Litkowski",
            "Y. Qu",
            "A. Lindem",
            "P. Sarkar",
            "J. Tantsura"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document defines three YANG data models.  The first is for Segment Routing (SR) configuration and operation, which is to be augmented by different Segment Routing data planes.  The next is a YANG data model that defines a collection of generic types and groupings for SR.  The third module defines the configuration and operational states for the Segment Routing MPLS data plane.",
        "Keywords": [
            "mpls"
        ],
        "Content": "RFC 9020: YANG Data Model for Segment Routing RFC 9020 SR YANG Data Model May 2021 Litkowski, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9020 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: S. Litkowski Cisco Systems Y. Qu Futurewei A. Lindem Cisco Systems P. Sarkar VMware, Inc J. Tantsura Juniper Networks RFC 9020 YANG Data Model for Segment Routing Abstract This document defines three YANG data models. The first is for Segment Routing (SR) configuration and operation, which is to be augmented by different Segment Routing data planes. The next is a YANG data model that defines a collection of generic types and groupings for SR. The third module defines the configuration and operational states for the Segment Routing MPLS data plane.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9020.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology and Notation 2.1.  Tree Diagram 2.2.  Prefixes in Data Node Names 3.  Design of the Data Model 4.  Configuration 5.  IGP Control-Plane Configuration 5.1.  IGP Interface Configuration 5.1.1.  Adjacency SID (Adj-SID) Properties 5.1.1.1.  Bundling 5.1.1.2.  Protection 6.  State Data 7.  Notifications 8.  YANG Modules 8.1.  YANG Module for Segment Routing 8.2.  YANG Module for Segment Routing Common Types 8.3.  YANG Module for Segment Routing MPLS 9.  Security Considerations 10. IANA Considerations 11. References 11.1.  Normative References 11.2.  Informative References Appendix A.  Configuration Examples A.1.  SR-MPLS with IPv4 A.2.  SR-MPLS with IPv6 Acknowledgements Authors' Addresses 1. Introduction This document defines three YANG data models [RFC7950]. The first one is for Segment Routing (SR) [RFC8402] configuration and operation. This document does not define the IGP extensions to support SR, but the second module defines generic groupings to be reused by IGP extension modules. The reason for this design choice is to not require implementations to support all IGP extensions. For example, an implementation may support the IS-IS extension but not the OSPF extension. The third YANG data model defines a module that is intended to be used on network elements to configure or operate the SR MPLS data plane [RFC8660].¶ The YANG modules in this document conform to the Network Management Datastore Architecture (NMDA) [RFC8342].¶ 2. Terminology and Notation The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2.1. Tree Diagram Tree diagrams used in this document follow the notation defined in [RFC8340].¶ 2.2. Prefixes in Data Node Names In this document, names of data nodes, actions, and other data model objects are often used without a prefix, as long as it is clear from the context in which YANG module each name is defined. Otherwise, names are prefixed using the standard prefix associated with the corresponding YANG module, as shown in Table 1.¶ Table 1: Prefixes and Corresponding YANG Modules Prefix YANG module Reference if ietf-interfaces [RFC8343] rt ietf-routing [RFC8349] rt-types ietf-routing-types [RFC8294] yang ietf-yang-types [RFC6991] inet ietf-inet-types [RFC6991] 3. Design of the Data Model The ietf-segment-routing YANG module augments the routing container in the ietf-routing model [RFC8349] and defines generic SR configuration and operational state. This module is augmented by modules supporting different data planes.¶ Module ietf-segment-routing-mpls augments ietf-segment-routing and supports SR-MPLS data plane configuration and operational state.¶ Module ietf-segment-routing-common defines generic types and groupings that SHOULD be reused by IGP extension modules.¶ module: ietf-segment-routing augment /rt:routing: +--rw segment-routing module: ietf-segment-routing-mpls augment /rt:routing/sr:segment-routing: +--rw sr-mpls +--rw bindings | +--rw mapping-server {mapping-server}? | | +--rw policy* [name] | | +--rw name string | | +--rw entries | | +--rw mapping-entry* [prefix algorithm] | | +--rw prefix inet:ip-prefix | | +--rw value-type? enumeration | | +--rw start-sid uint32 | | +--rw range? uint32 | | +--rw algorithm identityref | +--rw connected-prefix-sid-map | | +--rw connected-prefix-sid* [prefix algorithm] | | +--rw prefix inet:ip-prefix | | +--rw value-type? enumeration | | +--rw start-sid uint32 | | +--rw range? uint32 | | +--rw algorithm identityref | | +--rw last-hop-behavior? enumeration | +--rw local-prefix-sid | +--rw local-prefix-sid* [prefix algorithm] | +--rw prefix inet:ip-prefix | +--rw value-type? enumeration | +--rw start-sid uint32 | +--rw range? uint32 | +--rw algorithm identityref +--rw srgb | +--rw srgb* [lower-bound upper-bound] | +--rw lower-bound uint32 | +--rw upper-bound uint32 +--rw srlb | +--rw srlb* [lower-bound upper-bound] | +--rw lower-bound uint32 | +--rw upper-bound uint32 +--ro label-blocks* [] | +--ro lower-bound? uint32 | +--ro upper-bound? uint32 | +--ro size? uint32 | +--ro free? uint32 | +--ro used? uint32 | +--ro scope? enumeration +--ro sid-db +--ro sid* [target sid source source-protocol binding-type] +--ro target string +--ro sid uint32 +--ro algorithm? uint8 +--ro source inet:ip-address +--ro used? boolean +--ro source-protocol -> /rt:routing /control-plane-protocols /control-plane-protocol/name +--ro binding-type enumeration +--ro scope? enumeration notifications: +---n segment-routing-srgb-collision | +--ro srgb-collisions* [] | +--ro lower-bound? uint32 | +--ro upper-bound? uint32 | +--ro routing-protocol? -> /rt:routing | /control-plane-protocols | /control-plane-protocol/name | +--ro originating-rtr-id? router-or-system-id +---n segment-routing-global-sid-collision | +--ro received-target? string | +--ro new-sid-rtr-id? router-or-system-id | +--ro original-target? string | +--ro original-sid-rtr-id? router-or-system-id | +--ro index? uint32 | +--ro routing-protocol? -> /rt:routing | /control-plane-protocols | /control-plane-protocol/name +---n segment-routing-index-out-of-range +--ro received-target? string +--ro received-index? uint32 +--ro routing-protocol? -> /rt:routing /control-plane-protocols /control-plane-protocol/name ¶ 4. Configuration The module ietf-segment-routing-mpls augments the \"/rt:routing/sr:segment-routing:\" with an sr-mpls container. This container defines all the configuration parameters related to the SR MPLS data plane.¶ The sr-mpls configuration is split into global configuration and interface configuration.¶ The global configuration includes:¶ Bindings: Defines Prefix to Segment Identifier (Prefix-SID) mappings. The operator can control advertisement of Prefix-SIDs independently for IPv4 and IPv6. Two types of mappings are available:¶ Mapping-server: Maps prefixes that are not local to a SID. Configuration of bindings does not automatically allow advertisement of those bindings. Advertisement must be controlled by each routing-protocol instance (see Section 5). Multiple mapping policies may be defined.¶ Connected prefixes: Maps connected prefixes to a SID. Advertisement of the mapping will be done by IGP when enabled for SR (see Section 5). The SID value can be expressed as an index (default) or an absolute value. The \"last-hop-behavior\" configuration dictates the MPLS Penultimate Hop Popping (PHP) behavior: \"explicit-null\", \"php\", or \"non-php\".¶ Segment Routing Global Block (SRGB): Defines a list of label blocks represented by a pair of lower-bound/upper-bound labels. The SRGB is also agnostic to the control plane used. So, all local routing-protocol instances will have to advertise the same SRGB.¶ Segment Routing Local Block (SRLB): Defines a list of label blocks represented by a pair of lower-bound/upper-bound labels reserved for local SIDs.¶ 5. IGP Control-Plane Configuration Support of SR extensions for a particular IGP control plane is achieved by augmenting routing-protocol configuration with SR extensions. This augmentation SHOULD be part of the routing-protocol YANG modules as not to create any dependency for implementations to support SR extensions for all routing protocols.¶ This module defines groupings that SHOULD be used by IGP SR modules.¶ The \"sr-control-plane\" grouping defines the generic global configuration for the IGP.¶ The \"enabled\" leaf enables SR extensions for the routing-protocol instance.¶ The \"bindings\" container controls the routing-protocol instance's advertisement of local bindings and the processing of received bindings.¶ 5.1. IGP Interface Configuration The interface configuration is part of the \"igp-interface\" grouping and includes Adjacency SID (Adj-SID) properties.¶ 5.1.1. Adjacency SID (Adj-SID) Properties 5.1.1.1. Bundling In case of parallel IP links between routers, an additional Adj-SID [RFC8402] may be advertised representing more than one adjacency (i.e., a bundle of adjacencies). The \"advertise-adj-group-sid\" configuration controls for which group(s) an additional Adj-SID is advertised.¶ The \"advertise-adj-group-sid\" is a list of group IDs. Each group ID will identify interfaces that are bundled together.¶ +-------+ +------+ | | ------- L1 ---- | | | R1 | ------- L2 ---- | R2 | | | ------- L3 ---- | | | | ------- L4 ---- | | +-------+ +------+ ¶ In the figure above, R1 and R2 are interconnected by four links. A routing protocol adjacency is established on each link. The operator would like to create Adj-SIDs that represent bundles of links. We can imagine two different bundles: L1/L2 and L3/L4. To achieve this behavior, the operator will configure a \"group-id\" X for interfaces L1 and L2 and a \"group-id\" Y for interfaces L3 and L4. This will result in R1 advertising an additional Adj-SID for each adjacency. For example, an Adj-SID with a value of 400 will be added to L1 and L2, and an Adj-SID with a value of 500 will be added to L3 and L4. As L1/L2 and L3/L4 do not share the same \"group-id\", a different SID value will be allocated.¶ 5.1.1.2. Protection The \"advertise-protection\" defines how protection for an interface is advertised. It does not control the activation or deactivation of protection. If the \"single\" option is used, a single Adj-SID will be advertised for the interface. If the interface is protected, the B-Flag for the Adj-SID advertisement will be set. If the \"dual\" option is used and if the interface is protected, two Adj-SIDs will be advertised for the interface adjacencies. One Adj-SID will always have the B-Flag set, and the other will have the B-Flag clear. This option is intended to be used in the case of traffic engineering where a path must use either protected segments or unprotected segments.¶ 6. State Data The operational state contains information reflecting the usage of allocated SRGB labels.¶ It also includes a list of all global SIDs, their associated bindings, and other information, such as the associated source protocol and algorithm.¶ 7. Notifications The model defines the following notifications for SR.¶ segment-routing-srgb-collision: Raised when control-plane-advertised SRGB blocks have conflicts¶ segment-routing-global-sid-collision: Raised when a control-plane-advertised index is already associated with another target (in this version, the only defined targets are IPv4 and IPv6 prefixes)¶ segment-routing-index-out-of-range: Raised when a control-plane-advertised index falls outside the range of SRGBs configured for the network device¶ 8. YANG Modules There are three YANG modules included in this document.¶ The following RFCs are not referenced in the document text but are referenced in the ietf-segment-routing.yang, ietf-segment-routing-common.yang, and/or ietf-segment-routing-mpls.yang modules: [RFC6991], [RFC8294], [RFC8661], [RFC8665], [RFC8667], [RFC8669], and [RFC8814].¶ 8.1. YANG Module for Segment Routing ietf-segment-routing.yang: This module defines a generic framework for Segment Routing (SR), and it is to be augmented by models for different SR data planes.¶ <CODE BEGINS> file \"ietf-segment-routing@2021-05-26.yang\" module ietf-segment-routing { yang-version 1.1; namespace \"urn:ietf:params:xml:ns:yang:ietf-segment-routing\"; prefix sr; import ietf-routing { prefix rt; reference \"RFC 8349: A YANG Data Model for Routing Management (NMDA Version)\"; } organization \"IETF SPRING - SPRING Working Group\"; contact \"WG Web: <https://datatracker.ietf.org/wg/spring/> WG List: <mailto:spring@ietf.org> Author: Stephane Litkowski <mailto:slitkows.ietf@gmail.com> Author: Yingzhen Qu <mailto:yingzhen.qu@futurewei.com> Author: Acee Lindem <mailto:acee@cisco.com> Author: Pushpasis Sarkar <mailto:pushpasis.ietf@gmail.com> Author: Jeff Tantsura <jefftant.ietf@gmail.com> \"; description \"This YANG module defines a generic framework for Segment Routing (SR). It is to be augmented by models for different SR data planes. This YANG module conforms to the Network Management Datastore Architecture (NMDA), as described in RFC 8242. The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here. Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info). This version of this YANG module is part of RFC 9020; see the RFC itself for full legal notices.\"; reference \"RFC 9020: YANG Data Model for Segment Routing.\"; revision 2021-05-26 { description \"Initial version\"; reference \"RFC 9020: YANG Data Model for Segment Routing.\"; } augment \"/rt:routing\" { description \"This module augments the routing data model (RFC 8349) with Segment Routing (SR).\"; container segment-routing { description \"Segment Routing configuration. This container is to be augmented by models for different SR data planes.\"; reference \"RFC 8402: Segment Routing Architecture.\"; } } } <CODE ENDS>¶ 8.2. YANG Module for Segment Routing Common Types ietf-segment-routing-common.yang: This module defines a collection of generic types and groupings for SR, as defined in [RFC8402].¶ <CODE BEGINS> file \"ietf-segment-routing-common@2021-05-26.yang\" module ietf-segment-routing-common { yang-version 1.1; namespace \"urn:ietf:params:xml:ns:yang:ietf-segment-routing-common\"; prefix sr-cmn; import ietf-inet-types { prefix inet; reference \"RFC 6991: Common YANG Data Types\"; } organization \"IETF SPRING - SPRING Working Group\"; contact \"WG Web: <https://datatracker.ietf.org/wg/spring/> WG List: <mailto:spring@ietf.org> Author: Stephane Litkowski <mailto:slitkows.ietf@gmail.com> Author: Yingzhen Qu <mailto:yingzhen.qu@futurewei.com> Author: Acee Lindem <mailto:acee@cisco.com> Author: Pushpasis Sarkar <mailto:pushpasis.ietf@gmail.com> Author: Jeff Tantsura <jefftant.ietf@gmail.com> \"; description \"This YANG module defines a collection of generic types and groupings for Segment Routing (SR), as described in RFC 8402. This YANG module conforms to the Network Management Datastore Architecture (NMDA), as described in RFC 8242. The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here. Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info). This version of this YANG module is part of RFC 9020; see the RFC itself for full legal notices.\"; reference \"RFC 9020: YANG Data Model for Segment Routing\"; revision 2021-05-26 { description \"Initial version\"; reference \"RFC 9020: YANG Data Model for Segment Routing\"; } feature sid-last-hop-behavior { description \"Configurable last-hop behavior.\"; reference \"RFC 8660: Segment Routing with the MPLS Data Plane\"; } identity prefix-sid-algorithm { description \"Base identity for prefix-sid algorithm.\"; reference \"RFC 8402: Segment Routing Architecture\"; } identity prefix-sid-algorithm-shortest-path { base prefix-sid-algorithm; description \"Shortest Path First (SPF) Prefix-SID algorithm. This is the default algorithm.\"; } identity prefix-sid-algorithm-strict-spf { base prefix-sid-algorithm; description \"This algorithm mandates that the packet is forwarded according to the ECMP-aware SPF algorithm.\"; } grouping srlr { description \"Grouping for SR Label Range configuration.\"; leaf lower-bound { type uint32; description \"Lower value in the label range.\"; } leaf upper-bound { type uint32; must '../lower-bound < ../upper-bound' { error-message \"The upper-bound must be greater than the lower-bound.\"; description \"The value must be greater than lower-bound.\"; } description \"Upper value in the label range.\"; } } grouping srgb { description \"Grouping for SR Global Label Range.\"; list srgb { key \"lower-bound upper-bound\"; ordered-by user; description \"List of global blocks to be advertised.\"; uses srlr; } } grouping srlb { description \"Grouping for SR Local Block Range.\"; list srlb { key \"lower-bound upper-bound\"; ordered-by user; description \"List of SRLBs.\"; uses srlr; } } grouping sid-value-type { description \"Defines how the SID value is expressed.\"; leaf value-type { type enumeration { enum index { description \"The value will be interpreted as an index.\"; } enum absolute { description \"The value will become interpreted as an absolute value.\"; } } default \"index\"; description \"This leaf defines how the value must be interpreted.\"; } } grouping prefix-sid { description \"This grouping defines configuration of a Prefix-SID.\"; leaf prefix { type inet:ip-prefix; description \"Connected Prefix-SID.\"; } uses prefix-sid-attributes; } grouping ipv4-sid { description \"Grouping for an IPv4 Prefix-SID.\"; leaf prefix { type inet:ipv4-prefix; description \"Connected IPv4 Prefix-SID.\"; } uses prefix-sid-attributes; } grouping ipv6-sid { description \"Grouping for an IPv6 Prefix-SID.\"; leaf prefix { type inet:ipv6-prefix; description \"Connected IPv6 Prefix-SID.\"; } uses prefix-sid-attributes; } grouping last-hop-behavior { description \"Defines last-hop behavior.\"; leaf last-hop-behavior { if-feature \"sid-last-hop-behavior\"; type enumeration { enum explicit-null { description \"Use explicit-null for the SID.\"; } enum no-php { description \"Do not use MPLS Penultimate Hop Popping (PHP) for the SID.\"; } enum php { description \"Use MPLS PHP for the SID.\"; } } description \"Configure last-hop behavior.\"; } } grouping prefix-sid-attributes { description \"Grouping for Segment Routing (SR) prefix attributes.\"; uses sid-value-type; leaf start-sid { type uint32; mandatory true; description \"Value associated with prefix. The value must be interpreted in the context of sid-value-type.\"; } leaf range { type uint32; description \"Indicates how many SIDs can be allocated.\"; } leaf algorithm { type identityref { base prefix-sid-algorithm; } description \"Prefix-SID algorithm.\"; } } } <CODE ENDS>¶ 8.3. YANG Module for Segment Routing MPLS ietf-segment-routing-mpls.yang: This module defines the configuration and operational states for the Segment Routing MPLS data plane.¶ <CODE BEGINS> file \"ietf-segment-routing-mpls@2021-05-26.yang\" module ietf-segment-routing-mpls { yang-version 1.1; namespace \"urn:ietf:params:xml:ns:yang:ietf-segment-routing-mpls\"; prefix sr-mpls; import ietf-inet-types { prefix inet; reference \"RFC 6991: Common YANG Data Types\"; } import ietf-routing { prefix rt; reference \"RFC 8349: A YANG Data Model for Routing Management (NMDA Version)\"; } import ietf-routing-types { prefix rt-types; reference \"RFC 8294: Common YANG Data Types for the Routing Area\"; } import ietf-segment-routing { prefix sr; reference \"RFC 9020: YANG Data Model for Segment Routing\"; } import ietf-segment-routing-common { prefix sr-cmn; reference \"RFC 9020: YANG Data Model for Segment Routing\"; } organization \"IETF SPRING - SPRING Working Group\"; contact \"WG Web: <https://datatracker.ietf.org/wg/spring/> WG List: <mailto:spring@ietf.org> Author: Stephane Litkowski <mailto:slitkows.ietf@gmail.com> Author: Yingzhen Qu <mailto:yingzhen.qu@futurewei.com> Author: Acee Lindem <mailto:acee@cisco.com> Author: Pushpasis Sarkar <mailto:pushpasis.ietf@gmail.com> Author: Jeff Tantsura <jefftant.ietf@gmail.com> \"; description \"This YANG module defines a generic configuration model for the Segment Routing MPLS data plane. This YANG module conforms to the Network Management Datastore Architecture (NMDA), as described in RFC 8242. The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here. Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info). This version of this YANG module is part of RFC 9020; see the RFC itself for full legal notices.\"; reference \"RFC 9020: YANG Data Model for Segment Routing\"; revision 2021-05-26 { description \"Initial version\"; reference \"RFC 9020: YANG Data Model for Segment Routing\"; } feature mapping-server { description \"Support for Segment Routing Mapping Server (SRMS).\"; reference \"RFC 8661: Segment Routing MPLS Interworking with LDP\"; } feature protocol-srgb { description \"Support for per-protocol Segment Routing Global Block (SRGB) configuration.\"; reference \"RFC 8660: Segment Routing with the MPLS Data Plane\"; } typedef system-id { type string { pattern '[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}\\.[0-9A-Fa-f]{4}'; } description \"This type defines an IS-IS system-id using a pattern. An example system-id is 0143.0438.AEF0.\"; } typedef router-or-system-id { type union { type rt-types:router-id; type system-id; } description \"OSPF/BGP router-id or IS-IS system ID.\"; } grouping sr-control-plane { description \"Defines protocol configuration.\"; container segment-routing { description \"Segment Routing global configuration.\"; leaf enabled { type boolean; default \"false\"; description \"Enables Segment Routing control-plane protocol extensions.\"; } container bindings { if-feature \"mapping-server\"; description \"Control of binding advertisement and reception.\"; container advertise { description \"Control advertisement of local mappings in binding TLVs.\"; leaf-list policies { type leafref { path \"/rt:routing/sr:segment-routing/sr-mpls:sr-mpls\" + \"/sr-mpls:bindings/sr-mpls:mapping-server\" + \"/sr-mpls:policy/sr-mpls:name\"; } description \"List of binding advertisement policies.\"; } } leaf receive { type boolean; default \"true\"; description \"Allow the reception and usage of binding TLVs.\"; } } } } grouping igp-interface { description \"Grouping for IGP interface configuration.\"; container segment-routing { description \"Container for SR interface configuration.\"; container adjacency-sid { description \"Adjacency SID (Adj-SID) configuration.\"; reference \"RFC 8660: Segment Routing with the MPLS Data Plane\"; list adj-sids { key \"value\"; uses sr-cmn:sid-value-type; leaf value { type uint32; description \"Value of the Adj-SID.\"; } leaf protected { type boolean; default \"false\"; description \"It is used to protect the Adj-SID, e.g., using IP Fast Reroute (IPFRR) or MPLS-FRR.\"; } leaf weight { type uint8; description \"The load-balancing factor over parallel adjacencies.\"; reference \"RFC 8402: Segment Routing Architecture RFC 8665: OSPF Extensions for Segment Routing RFC 8667: IS-IS Extensions for Segment Routing\"; } description \"List of Adj-SIDs and their configuration.\"; } list advertise-adj-group-sid { key \"group-id\"; description \"Control advertisement of S-flag or G-flag. Enable advertisement of a common Adj-SID for parallel links.\"; reference \"RFC 8665: OSPF Extensions for Segment Routing, Section 6.1 RFC 8667: IS-IS Extensions for Segment Routing, Section 2.2.1\"; leaf group-id { type uint32; description \"The value is an internal value to identify a group-ID. Interfaces with the same group-ID will be bundled together.\"; } } leaf advertise-protection { type enumeration { enum single { description \"A single Adj-SID is associated with the adjacency and reflects the protection configuration.\"; } enum dual { description \"Two Adj-SIDs will be associated with the adjacency if the interface is protected. In this case, one Adj-SID will be advertised with the backup-flag set and the other with the backup-flag clear. In the case where protection is not configured, a single Adj-SID will be advertised with the backup-flag clear.\"; } } description \"If set, the Adj-SID refers to a protected adjacency.\"; reference \"RFC 8665: OSPF Extensions for Segment Routing, Section 6.1 RFC 8667: IS-IS Extensions for Segment Routing, Section 2.2.1\"; } } } } augment \"/rt:routing/sr:segment-routing\" { description \"This augments the routing data model (RFC 8349) with Segment Routing (SR) using the MPLS data plane.\"; container sr-mpls { description \"Segment Routing global configuration and operational state.\"; container bindings { description \"List of bindings.\"; container mapping-server { if-feature \"mapping-server\"; description \"Configuration of mapping-server local entries.\"; list policy { key \"name\"; description \"List mapping-server policies.\"; leaf name { type string; description \"Name of the mapping policy.\"; } container entries { description \"IPv4/IPv6 mapping entries.\"; list mapping-entry { key \"prefix algorithm\"; description \"Mapping entries.\"; uses sr-cmn:prefix-sid; } } } } container connected-prefix-sid-map { description \"Prefix-SID configuration.\"; list connected-prefix-sid { key \"prefix algorithm\"; description \"List of mappings of Prefix-SIDs to IPv4/IPv6 local prefixes.\"; uses sr-cmn:prefix-sid; uses sr-cmn:last-hop-behavior; } } container local-prefix-sid { description \"Local SID configuration.\"; list local-prefix-sid { key \"prefix algorithm\"; description \"List of local IPv4/IPv6 Prefix-SIDs.\"; uses sr-cmn:prefix-sid; } } } container srgb { description \"Global SRGB configuration.\"; uses sr-cmn:srgb; } container srlb { description \"Segment Routing Local Block (SRLB) configuration.\"; uses sr-cmn:srlb; } list label-blocks { config false; description \"List of label blocks currently in use.\"; leaf lower-bound { type uint32; description \"Lower bound of the label block.\"; } leaf upper-bound { type uint32; description \"Upper bound of the label block.\"; } leaf size { type uint32; description \"Number of indexes in the block.\"; } leaf free { type uint32; description \"Number of free indexes in the block.\"; } leaf used { type uint32; description \"Number of indexes in use in the block.\"; } leaf scope { type enumeration { enum global { description \"Global SID.\"; } enum local { description \"Local SID.\"; } } description \"Scope of this label block.\"; } } container sid-db { config false; description \"List of prefix and SID associations.\"; list sid { key \"target sid source source-protocol binding-type\"; ordered-by system; description \"SID binding.\"; leaf target { type string; description \"Defines the target of the binding. It can be a prefix or something else.\"; } leaf sid { type uint32; description \"Index associated with the prefix.\"; } leaf algorithm { type uint8; description \"Algorithm to be used for the Prefix-SID.\"; reference \"RFC 8665: OSPF Extensions for Segment Routing RFC 8667: IS-IS Extensions for Segment Routing RFC 8669: Segment Routing Prefix Segment Identifier Extensions to BGP\"; } leaf source { type inet:ip-address; description \"IP address of the router that owns the binding.\"; } leaf used { type boolean; description \"Indicates if the binding is installed in the forwarding plane.\"; } leaf source-protocol { type leafref { path \"/rt:routing/rt:control-plane-protocols/\" + \"rt:control-plane-protocol/rt:name\"; } description \"Routing protocol that owns the binding.\"; } leaf binding-type { type enumeration { enum prefix-sid { description \"Binding is learned from a Prefix-SID.\"; } enum binding-tlv { description \"Binding is learned from a binding TLV.\"; } } description \"Type of binding.\"; } leaf scope { type enumeration { enum global { description \"Global SID.\"; } enum local { description \"Local SID.\"; } } description \"SID scoping.\"; } } } } } notification segment-routing-srgb-collision { description \"This notification is sent when SRGB blocks received from different routers collide.\"; list srgb-collisions { description \"List of SRGB blocks that collide.\"; leaf lower-bound { type uint32; description \"Lower value in the block.\"; } leaf upper-bound { type uint32; description \"Upper value in the block.\"; } leaf routing-protocol { type leafref { path \"/rt:routing/rt:control-plane-protocols/\" + \"rt:control-plane-protocol/rt:name\"; } description \"Routing protocol reference for SRGB collision.\"; } leaf originating-rtr-id { type router-or-system-id; description \"Originating router ID of this SRGB block.\"; } } } notification segment-routing-global-sid-collision { description \"This notification is sent when a new mapping is learned containing a mapping where the SID is already used. The notification generation must be throttled with at least a 5-second gap between notifications.\"; leaf received-target { type string; description \"Target received in the router advertisement that caused the SID collision.\"; } leaf new-sid-rtr-id { type router-or-system-id; description \"Router ID that advertised the colliding SID.\"; } leaf original-target { type string; description \"Target already available in the database with the same SID as the received target.\"; } leaf original-sid-rtr-id { type router-or-system-id; description \"Router ID for the router that originally advertised the colliding SID, i.e., the instance in the database.\"; } leaf index { type uint32; description \"Value of the index used by two different prefixes.\"; } leaf routing-protocol { type leafref { path \"/rt:routing/rt:control-plane-protocols/\" + \"rt:control-plane-protocol/rt:name\"; } description \"Routing protocol reference for colliding SID.\"; } } notification segment-routing-index-out-of-range { description \"This notification is sent when a binding is received containing a segment index that is out of the local configured ranges. The notification generation must be throttled with at least a 5-second gap between notifications.\"; leaf received-target { type string; description \"A human-readable string representing the target received in the protocol-specific advertisement corresponding to the out-of-range index.\"; } leaf received-index { type uint32; description \"Value of the index received.\"; } leaf routing-protocol { type leafref { path \"/rt:routing/rt:control-plane-protocols/\" + \"rt:control-plane-protocol/rt:name\"; } description \"Routing protocol reference for out-of-range indexed.\"; } } } <CODE ENDS>¶ 9. Security Considerations The YANG modules specified in this document define a schema for data that is designed to be accessed via network management protocols, such as NETCONF [RFC6241] or RESTCONF [RFC8040]. The lowest NETCONF layer is the secure transport layer, and the mandatory-to-implement secure transport is Secure Shell (SSH) [RFC6242]. The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement secure transport is TLS [RFC8446].¶ The Network Configuration Access Control Model (NACM) [RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.¶ There are a number of data nodes defined in the modules that are writable/creatable/deletable (i.e., config true, which is the default). These data nodes may be considered sensitive or vulnerable in some network environments. Write operations (e.g., edit-config) to these data nodes without proper protection can have a negative effect on network operations. These are the subtrees and data nodes and their sensitivity/vulnerability:¶ /segment-routing¶ /segment-routing/mpls¶ /segment-routing/mpls/bindings -- Modification to the local bindings could result in a Denial-of-Service (DoS) attack. An attacker may also try to create segment conflicts (using the same segment identifier for different purposes) to redirect traffic within the trusted domain. However, the traffic will remain within the trusted domain. Redirection could be used to route the traffic to compromised nodes within the trusted domain or to avoid certain security functions (e.g., firewall). Refer to Section 8.1 of [RFC8402] for a discussion of the SR-MPLS trusted domain.¶ /segment-routing/mpls/srgb -- Modification of the Segment Routing Global Block (SRGB) could be used to mount a DoS attack. For example, if the SRGB size is reduced to a very small value, a lot of existing segments could no longer be installed leading to a traffic disruption.¶ /segment-routing/mpls/srlb -- Modification of the Segment Routing Local Block (SRLB) could be used to mount a DoS attack similar to those applicable to the SRGB.¶ Some of the readable data nodes in these YANG modules may be considered sensitive or vulnerable in some network environments. It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes. These are the subtrees and data nodes and their sensitivity/vulnerability:¶ /segment-routing/mpls/bindings -- Knowledge of these data nodes can be used to attack the local router with a Denial-of-Service (DoS) attack.¶ /segment-routing/mpls/sid-db -- Knowledge of these data nodes can be used to attack the other routers in the SR domain with either a Denial-of-Service (DoS) attack or redirection traffic destined for those routers.¶ 10. IANA Considerations This document registers a URI in the \"IETF XML Registry\" [RFC3688]. Following the format in [RFC3688], the following registration is requested to be made:¶ ID: yang:ietf-segment-routing-common¶ URI: urn:ietf:params:xml:ns:yang:ietf-segment-routing-common¶ Registrant Contact: The IESG.¶ XML: N/A, the requested URI is an XML namespace.¶ ID: yang:ietf-segment-routing¶ URI: urn:ietf:params:xml:ns:yang:ietf-segment-routing¶ Registrant Contact: The IESG.¶ XML: N/A, the requested URI is an XML namespace.¶ ID: yang:ietf-segment-routing-mpls¶ URI: urn:ietf:params:xml:ns:yang:ietf-segment-routing-mpls¶ Registrant Contact: The IESG.¶ XML: N/A, the requested URI is an XML namespace.¶ This document registers YANG modules in the \"YANG Module Names\" registry [RFC6020].¶ Name: ietf-segment-routing-common¶ Maintained by IANA: N¶ Namespace: urn:ietf:params:xml:ns:yang:ietf-segment-routing-common¶ Prefix: sr-cmn¶ Reference: RFC 9020¶ Name: ietf-segment-routing¶ Maintained by IANA: N¶ Namespace: urn:ietf:params:xml:ns:yang:ietf-segment-routing¶ Prefix: sr¶ Reference: RFC 9020¶ Name: ietf-segment-routing-mpls¶ Maintained by IANA: N¶ Namespace: urn:ietf:params:xml:ns:yang:ietf-segment-routing-mpls¶ Prefix: sr-mpls¶ Reference: RFC 9020¶ 11. References 11.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, DOI 10.17487/RFC3688, January 2004, <https://www.rfc-editor.org/info/rfc3688>. [RFC6020] Bjorklund, M., Ed., \"YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)\", RFC 6020, DOI 10.17487/RFC6020, October 2010, <https://www.rfc-editor.org/info/rfc6020>. [RFC6241] Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed., and A. Bierman, Ed., \"Network Configuration Protocol (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011, <https://www.rfc-editor.org/info/rfc6241>. [RFC6242] Wasserman, M., \"Using the NETCONF Protocol over Secure Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011, <https://www.rfc-editor.org/info/rfc6242>. [RFC6991] Schoenwaelder, J., Ed., \"Common YANG Data Types\", RFC 6991, DOI 10.17487/RFC6991, July 2013, <https://www.rfc-editor.org/info/rfc6991>. [RFC7950] Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\", RFC 7950, DOI 10.17487/RFC7950, August 2016, <https://www.rfc-editor.org/info/rfc7950>. [RFC8040] Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017, <https://www.rfc-editor.org/info/rfc8040>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8294] Liu, X., Qu, Y., Lindem, A., Hopps, C., and L. Berger, \"Common YANG Data Types for the Routing Area\", RFC 8294, DOI 10.17487/RFC8294, December 2017, <https://www.rfc-editor.org/info/rfc8294>. [RFC8341] Bierman, A. and M. Bjorklund, \"Network Configuration Access Control Model\", STD 91, RFC 8341, DOI 10.17487/RFC8341, March 2018, <https://www.rfc-editor.org/info/rfc8341>. [RFC8342] Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K., and R. Wilton, \"Network Management Datastore Architecture (NMDA)\", RFC 8342, DOI 10.17487/RFC8342, March 2018, <https://www.rfc-editor.org/info/rfc8342>. [RFC8343] Bjorklund, M., \"A YANG Data Model for Interface Management\", RFC 8343, DOI 10.17487/RFC8343, March 2018, <https://www.rfc-editor.org/info/rfc8343>. [RFC8349] Lhotka, L., Lindem, A., and Y. Qu, \"A YANG Data Model for Routing Management (NMDA Version)\", RFC 8349, DOI 10.17487/RFC8349, March 2018, <https://www.rfc-editor.org/info/rfc8349>. [RFC8402] Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L., Decraene, B., Litkowski, S., and R. Shakir, \"Segment Routing Architecture\", RFC 8402, DOI 10.17487/RFC8402, July 2018, <https://www.rfc-editor.org/info/rfc8402>. [RFC8446] Rescorla, E., \"The Transport Layer Security (TLS) Protocol Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018, <https://www.rfc-editor.org/info/rfc8446>. [RFC8660] Bashandy, A., Ed., Filsfils, C., Ed., Previdi, S., Decraene, B., Litkowski, S., and R. Shakir, \"Segment Routing with the MPLS Data Plane\", RFC 8660, DOI 10.17487/RFC8660, December 2019, <https://www.rfc-editor.org/info/rfc8660>. [RFC8661] Bashandy, A., Ed., Filsfils, C., Ed., Previdi, S., Decraene, B., and S. Litkowski, \"Segment Routing MPLS Interworking with LDP\", RFC 8661, DOI 10.17487/RFC8661, December 2019, <https://www.rfc-editor.org/info/rfc8661>. [RFC8665] Psenak, P., Ed., Previdi, S., Ed., Filsfils, C., Gredler, H., Shakir, R., Henderickx, W., and J. Tantsura, \"OSPF Extensions for Segment Routing\", RFC 8665, DOI 10.17487/RFC8665, December 2019, <https://www.rfc-editor.org/info/rfc8665>. [RFC8667] Previdi, S., Ed., Ginsberg, L., Ed., Filsfils, C., Bashandy, A., Gredler, H., and B. Decraene, \"IS-IS Extensions for Segment Routing\", RFC 8667, DOI 10.17487/RFC8667, December 2019, <https://www.rfc-editor.org/info/rfc8667>. [RFC8669] Previdi, S., Filsfils, C., Lindem, A., Ed., Sreekantiah, A., and H. Gredler, \"Segment Routing Prefix Segment Identifier Extensions for BGP\", RFC 8669, DOI 10.17487/RFC8669, December 2019, <https://www.rfc-editor.org/info/rfc8669>. [RFC8814] Tantsura, J., Chunduri, U., Talaulikar, K., Mirsky, G., and N. Triantafillis, \"Signaling Maximum SID Depth (MSD) Using the Border Gateway Protocol - Link State\", RFC 8814, DOI 10.17487/RFC8814, August 2020, <https://www.rfc-editor.org/info/rfc8814>. [W3C.REC-xml11-20060816] Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., Yergeau, F., and J. Cowan, \"Extensible Markup Language (XML) 1.1 (Second Edition)\", World Wide Web Consortium Recommendation REC-xml11-20060816, 16 August 2006, <https://www.w3.org/TR/2006/REC-xml11-20060816>. 11.2. Informative References [RFC8340] Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\", BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018, <https://www.rfc-editor.org/info/rfc8340>. [RFC8792] Watsen, K., Auerswald, E., Farrel, A., and Q. Wu, \"Handling Long Lines in Content of Internet-Drafts and RFCs\", RFC 8792, DOI 10.17487/RFC8792, June 2020, <https://www.rfc-editor.org/info/rfc8792>. Appendix A. Configuration Examples Note: '\\' line wrapping per [RFC8792].¶ A.1. SR-MPLS with IPv4 The following is an XML [W3C.REC-xml11-20060816] example using the SR-MPLS YANG modules with IPv4 addresses.¶ <routing xmlns=\"urn:ietf:params:xml:ns:yang:ietf-routing\"> <segment-routing xmlns=\"urn:ietf:params:xml:ns:yang:ietf-segment-routing\"> <sr-mpls xmlns=\"urn:ietf:params:xml:ns:yang:ietf-segment-routing-mpls\"> <bindings> <mapping-server> <policy> <name>mapping 1</name> <entries> <mapping-entry> <prefix>198.51.100.0/24</prefix> <algorithm xmlns:sr-cmn=\"urn:ietf:params:xml:ns:yang\\ :ietf-segment-routing-common\">\\ sr-cmn:prefix-sid-algorithm-shortest-path\\ </algorithm> <start-sid>200</start-sid> <range>100</range> </mapping-entry> </entries> </policy> </mapping-server> <connected-prefix-sid-map> <connected-prefix-sid> <prefix>192.0.2.0/24</prefix> <algorithm xmlns:sr-cmn=\"urn:ietf:params:xml:ns:yang:\\ ietf-segment-routing-common\">\\ sr-cmn:prefix-sid-algorithm-strict-spf</algorithm> <start-sid>100</start-sid> <range>1</range> <last-hop-behavior>php</last-hop-behavior> </connected-prefix-sid> </connected-prefix-sid-map> </bindings> <srgb> <srgb> <lower-bound>45000</lower-bound> <upper-bound>55000</upper-bound> </srgb> </srgb> </sr-mpls> </segment-routing> </routing> ¶ The following is the same example using JSON format.¶ { \"ietf-routing:routing\": { \"ietf-segment-routing:segment-routing\": { \"ietf-segment-routing-mpls:sr-mpls\": { \"bindings\": { \"mapping-server\": { \"policy\": [ { \"name\": \"mapping 1\", \"entries\": { \"mapping-entry\": [ { \"prefix\": \"198.51.100.0/24\", \"algorithm\": \"ietf-segment-routing-common:\\ prefix-sid-algorithm-shortest-path\", \"start-sid\": 200, \"range\": 100 } ] } } ] }, \"connected-prefix-sid-map\": { \"connected-prefix-sid\": [ { \"prefix\": \"192.0.2.0/24\", \"algorithm\": \"ietf-segment-routing-common:\\ prefix-sid-algorithm-strict-spf\", \"start-sid\": 100, \"range\": 1, \"last-hop-behavior\": \"php\" } ] } }, \"srgb\": { \"srgb\": [ { \"lower-bound\": 45000, \"upper-bound\": 55000 } ] } } } } } ¶ A.2. SR-MPLS with IPv6 The following is an XML [W3C.REC-xml11-20060816] example using the SR-MPLS YANG modules with IPv6 addresses.¶ <routing xmlns=\"urn:ietf:params:xml:ns:yang:ietf-routing\"> <segment-routing xmlns=\"urn:ietf:params:xml:ns:yang:ietf-segment-routing\"> <sr-mpls xmlns=\"urn:ietf:params:xml:ns:yang:ietf-segment-routing-mpls\"> <bindings> <mapping-server> <policy> <name>mapping 1</name> <entries> <mapping-entry> <prefix>2001:db8:aaaa:bbbb::/64</prefix> <algorithm xmlns:sr-cmn=\"urn:ietf:params:xml:ns:yang\\ :ietf-segment-routing-common\">\\ sr-cmn:prefix-sid-algorithm-shortest-path\\ </algorithm> <start-sid>200</start-sid> <range>100</range> </mapping-entry> </entries> </policy> </mapping-server> <connected-prefix-sid-map> <connected-prefix-sid> <prefix>2001:db8:aaaa:cccc::/64</prefix> <algorithm xmlns:sr-cmn=\"urn:ietf:params:xml:ns:yang:\\ ietf-segment-routing-common\">\\ sr-cmn:prefix-sid-algorithm-strict-spf</algorithm> <start-sid>100</start-sid> <range>1</range> <last-hop-behavior>php</last-hop-behavior> </connected-prefix-sid> </connected-prefix-sid-map> </bindings> <srgb> <srgb> <lower-bound>45000</lower-bound> <upper-bound>55000</upper-bound> </srgb> </srgb> </sr-mpls> </segment-routing> </routing> ¶ The following is the same example using JSON format.¶ { \"ietf-routing:routing\": { \"ietf-segment-routing:segment-routing\": { \"ietf-segment-routing-mpls:sr-mpls\": { \"bindings\": { \"mapping-server\": { \"policy\": [ { \"name\": \"mapping 1\", \"entries\": { \"mapping-entry\": [ { \"prefix\": \"2001:db8:aaaa:bbbb::/64\", \"algorithm\": \"ietf-segment-routing-common:\\ prefix-sid-algorithm-shortest-path\", \"start-sid\": 200, \"range\": 100 } ] } } ] }, \"connected-prefix-sid-map\": { \"connected-prefix-sid\": [ { \"prefix\": \"2001:db8:aaaa:cccc::/64\", \"algorithm\": \"ietf-segment-routing-common:\\ prefix-sid-algorithm-strict-spf\", \"start-sid\": 100, \"range\": 1, \"last-hop-behavior\": \"php\" } ] } }, \"srgb\": { \"srgb\": [ { \"lower-bound\": 45000, \"upper-bound\": 55000 } ] } } } } } ¶ Acknowledgements The authors would like to thank Derek Yeung, Greg Hankins, Hannes Gredler, Uma Chunduri, Jeffrey Zhang, Shradda Hedge, and Les Ginsberg for their contributions.¶ Thanks to Ladislav Lhotka and Tom Petch for their thorough reviews and helpful comments.¶ The authors would like to thank Benjamin Kaduk, Alvaro Retana, and Roman Danyliw for IESG review and comments.¶ Authors' Addresses Stephane Litkowski Cisco Systems Email: slitkows.ietf@gmail.com Yingzhen Qu Futurewei Email: yingzhen.qu@futurewei.com Acee Lindem Cisco Systems 301 Mindenhall Way Cary, NC 27513 United States of America Email: acee@cisco.com Pushpasis Sarkar VMware, Inc Email: pushpasis.ietf@gmail.com Jeff Tantsura Juniper Networks Email: jefftant.ietf@gmail.com"
    },
    {
        "Number": "9015",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "BGP Control Plane for the Network Service Header in Service Function Chaining",
        "Authors": [
            "A. Farrel",
            "J. Drake",
            "E. Rosen",
            "J. Uttaro",
            "L. Jalil"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document describes the use of BGP as a control plane for networks that support service function chaining.  The document introduces a new BGP address family called the \"Service Function Chain (SFC) Address Family Identifier / Subsequent Address Family Identifier\" (SFC AFI/SAFI) with two Route Types.  One Route Type is originated by a node to advertise that it hosts a particular instance of a specified service function.  This Route Type also provides \"instructions\" on how to send a packet to the hosting node in a way that indicates that the service function has to be applied to the packet.  The other Route Type is used by a controller to advertise the paths of \"chains\" of service functions and give a unique designator to each such path so that they can be used in conjunction with the Network Service Header (NSH) defined in RFC 8300.  This document adopts the service function chaining architecture described in RFC 7665.",
        "Keywords": [
            "Service Function Chaining",
            "Service Function Chain",
            "Network Service Header",
            "Service Function",
            "Service Function Forwarder",
            "Service Function Path",
            "Service Function Path Route",
            "Service Function Instance",
            "Service Function Instance Route",
            "Service Function Type",
            "Control Plane"
        ],
        "Content": "RFC 9015: BGP Control Plane for the Network Service Header in Service Function Chaining RFC 9015 BGP for NSH SFC June 2021 Farrel, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9015 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: A. Farrel Old Dog Consulting J. Drake Juniper Networks E. Rosen Juniper Networks J. Uttaro AT&T L. Jalil Verizon RFC 9015 BGP Control Plane for the Network Service Header in Service Function Chaining Abstract This document describes the use of BGP as a control plane for networks that support service function chaining. The document introduces a new BGP address family called the \"Service Function Chain (SFC) Address Family Identifier / Subsequent Address Family Identifier\" (SFC AFI/SAFI) with two Route Types. One Route Type is originated by a node to advertise that it hosts a particular instance of a specified service function. This Route Type also provides \"instructions\" on how to send a packet to the hosting node in a way that indicates that the service function has to be applied to the packet. The other Route Type is used by a controller to advertise the paths of \"chains\" of service functions and give a unique designator to each such path so that they can be used in conjunction with the Network Service Header (NSH) defined in RFC 8300.¶ This document adopts the service function chaining architecture described in RFC 7665.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9015.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 1.2.  Terminology 2.  Overview 2.1.  Overview of Service Function Chaining 2.2.  Control Plane Overview 3.  BGP SFC Routes 3.1.  Service Function Instance Route (SFIR) 3.1.1.  SFIR Pool Identifier Extended Community 3.1.2.  MPLS Mixed Swapping/Stacking Extended Community 3.2.  Service Function Path Route (SFPR) 3.2.1.  The SFP Attribute 3.2.2.  General Rules for the SFP Attribute 4.  Mode of Operation 4.1.  Route Targets 4.2.  Service Function Instance Routes 4.3.  Service Function Path Routes 4.4.  Classifier Operation 4.5.  Service Function Forwarder Operation 4.5.1.  Processing with \"Gaps\" in the SI Sequence 5.  Selection within Service Function Paths 6.  Looping, Jumping, and Branching 6.1.  Protocol Control of Looping, Jumping, and Branching 6.2.  Implications for Forwarding State 7.  Advanced Topics 7.1.  Correlating Service Function Path Instances 7.2.  Considerations for Stateful Service Functions 7.3.  VPN Considerations and Private Service Functions 7.4.  Flow Specification for SFC Classifiers 7.5.  Choice of Data Plane SPI/SI Representation 7.5.1.  MPLS Representation of the SPI/SI 7.6.  MPLS Label Swapping/Stacking Operation 7.7.  Support for MPLS-Encapsulated NSH Packets 8.  Examples 8.1.  Example Explicit SFP with No Choices 8.2.  Example SFP with Choice of SFIs 8.3.  Example SFP with Open Choice of SFIs 8.4.  Example SFP with Choice of SFTs 8.5.  Example Correlated Bidirectional SFPs 8.6.  Example Correlated Asymmetrical Bidirectional SFPs 8.7.  Example Looping in an SFP 8.8.  Example Branching in an SFP 8.9.  Examples of SFPs with Stateful Service Functions 8.9.1.  Forward and Reverse Choice Made at the SFF 8.9.2.  Parallel End-to-End SFPs with Shared SFF 8.9.3.  Parallel End-to-End SFPs with Separate SFFs 8.9.4.  Parallel SFPs Downstream of the Choice 8.10. Examples Using IPv6 Addressing 8.10.1.  Example Explicit SFP with No Choices 8.10.2.  Example SFP with Choice of SFIs 8.10.3.  Example SFP with Open Choice of SFIs 8.10.4.  Example SFP with Choice of SFTs 9.  Security Considerations 10. IANA Considerations 10.1.  New BGP AF/SAFI 10.2.  \"SFP attribute\" BGP Path Attribute 10.3.  \"SFP Attribute TLVs\" Registry 10.4.  \"SFP Association Type\" Registry 10.5.  \"Service Function Chaining Service Function Types\" Registry 10.6.  Flow Specification for SFC Classifiers 10.7.  New BGP Transitive Extended Community Type 10.8.  \"SFC Extended Community Sub-Types\" Registry 10.9.  New SPI/SI Representation Sub-TLV 10.10. \"SFC SPI/SI Representation Flags\" Registry 11. References 11.1.  Normative References 11.2.  Informative References Acknowledgements Contributors Authors' Addresses 1. Introduction As described in [RFC7498], the delivery of end-to-end services can require a packet to pass through a series of Service Functions (SFs) -- e.g., WAN and application accelerators, Deep Packet Inspection (DPI) engines, firewalls, TCP optimizers, and server load balancers -- in a specified order; this is termed \"service function chaining\". There are a number of issues associated with deploying and maintaining service function chaining in production networks, which are described below.¶ Historically, if a packet needed to travel through a particular service chain, the nodes hosting the service functions of that chain were placed in the network topology in such a way that the packet could not reach its ultimate destination without first passing through all the service functions in the proper order. This need to place the service functions at particular topological locations limited the ability to adapt a service function chain to changes in network topology (e.g., link or node failures), network utilization, or offered service load. These topological restrictions on where the service functions could be placed raised the following issues:¶ The process of configuring or modifying a service function chain is operationally complex and may require changes to the network topology.¶ Alternate or redundant service functions may need to be co-located with the primary service functions.¶ When there is more than one path between source and destination, forwarding may be asymmetric, and it may be difficult to support bidirectional service function chains using simple routing methodologies and protocols without adding mechanisms for traffic steering or traffic engineering.¶ In order to address these issues, the service function chaining architecture describes service function chains that are built in their own overlay network (the service function overlay network), coexisting with other overlay networks, over a common underlay network [RFC7665]. A service function chain is a sequence of service functions through which packet flows that satisfy specified criteria will pass.¶ This document describes the use of BGP as a control plane for networks that support service function chaining. The document introduces a new BGP address family called the \"Service Function Chain (SFC) Address Family Identifier / Subsequent Address Family Identifier\" (SFC AFI/SAFI) with two Route Types. One Route Type is originated by a node to advertise that it hosts a particular instance of a specified service function. This Route Type also provides \"instructions\" on how to send a packet to the hosting node in a way that indicates that the service function has to be applied to the packet. The other Route Type is used by a controller (a centralized network component responsible for planning and coordinating service function chaining within the network) to advertise the paths of \"chains\" of service functions and give a unique designator to each such path so that they can be used in conjunction with the Network Service Header (NSH) [RFC8300].¶ This document adopts the service function chaining architecture described in [RFC7665].¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 1.2. Terminology This document uses the following terms from [RFC7665]:¶ Bidirectional Service Function Chain¶ Classifier¶ Service Function (SF)¶ Service Function Chain (SFC)¶ Service Function Forwarder (SFF)¶ Service Function Instance (SFI)¶ Service Function Path (SFP)¶ SFC branching¶ Additionally, this document uses the following terms from [RFC8300]:¶ Network Service Header (NSH)¶ Service Index (SI)¶ Service Path Identifier (SPI)¶ This document introduces the following terms:¶ Service Function Instance Route (SFIR): A new BGP Route Type advertised by the node that hosts an SFI to describe the SFI and to announce the way to forward a packet to the node through the underlay network.¶ Service Function Overlay Network: The logical network comprised of classifiers, SFFs, and SFIs that are connected by paths or tunnels through underlay transport networks.¶ Service Function Path Route (SFPR): A new BGP Route Type originated by controllers to advertise the details of each SFP.¶ Service Function Type (SFT): An indication of the function and features of an SFI.¶ 2. Overview This section provides an overview of service function chaining in general and the control plane defined in this document. After reading this section, readers may find it helpful to look through Section 8 for some simple worked examples.¶ 2.1. Overview of Service Function Chaining In [RFC8300], a Service Function Chain (SFC) is an ordered list of Service Functions (SFs). A Service Function Path (SFP) is an indication of which instances of SFs are acceptable to be traversed in an instantiation of an SFC in a service function overlay network. The Service Path Identifier (SPI) is a 24-bit number that identifies a specific SFP, and a Service Index (SI) is an 8-bit number that identifies a specific point in that path. In the context of a particular SFP (identified by an SPI), an SI represents a particular service function and indicates the order of that SF in the SFP.¶ Within the context of a specific SFP, an SI references a set of one or more SFs. Each of those SFs may be supported by one or more Service Function Instances (SFIs). Thus, an SI may represent a choice of SFIs of one or more service function types. By deploying multiple SFIs for a single SF, one can provide load balancing and redundancy.¶ A special functional element, called a \"classifier\", is located at each ingress point to a service function overlay network. It assigns the packets of a given packet flow to a specific SFP. This may be done by comparing specific fields in a packet's header with local policy, which may be customer/network/service specific. The classifier picks an SFP and sets the SPI accordingly; it then sets the SI to the value of the SI for the first hop in the SFP, and then prepends a Network Service Header (NSH) [RFC8300] containing the assigned SPI/SI to that packet. Note that the classifier and the node that hosts the first SF in an SFP need not be located at the same point in the service function overlay network.¶ Note that the presence of the NSH can make it difficult for nodes in the underlay network to locate the fields in the original packet that would normally be used to constrain equal-cost multipath (ECMP) forwarding. Therefore, it is recommended that the node prepending the NSH also provide some form of entropy indicator that can be used in the underlay network. How this indicator is generated and supplied, and how an SFF generates a new entropy indicator when it forwards a packet to the next SFF, are out of the scope of this document.¶ The Service Function Forwarder (SFF) receives a packet from the previous node in an SFP, removes the packet's link layer or tunnel encapsulation, and hands the packet and the NSH to the SFI for processing. The SFI has no knowledge of the SFP.¶ When the SFF receives the packet and the NSH back from the SFI, it must select the next SFI along the path using the SPI and SI in the NSH and potentially choosing between multiple SFIs (possibly of different SFTs), as described in Section 5. In the normal case, the SPI remains unchanged, and the SI will have been decremented to indicate the next SF along the path. But other possibilities exist if the SF makes other changes to the NSH through a process of reclassification:¶ The SI in the NSH may indicate:¶ A previous SF in the path; this is known as \"looping\" (see Section 6).¶ An SF further down the path; this is known as \"jumping\" (again see Section 6).¶ The SPI and the SI may point to an SF on a different SFP; this is known as \"branching\" (see Section 6).¶ Such modifications are limited to within the same service function overlay network. That is, an SPI is known within the scope of service function overlay network. Furthermore, the new SI value is interpreted in the context of the SFP identified by the SPI.¶ As described in [RFC8300], an SPI that is unknown or not valid is treated as an error, and the SFF drops the packet; such errors should be logged, and such logs are subject to rate limits.¶ Also, as described in [RFC8300], an SFF receiving an SI that is unknown in the context of the SPI can reduce the value to the next meaningful SI value in the SFP indicated by the SPI. If no such value exists, or if the SFF does not support reducing the SI, the SFF drops the packet and should log the event; such logs are also subject to rate limits.¶ The SFF then selects an SFI that provides the SF denoted by the SPI/SI and forwards the packet to the SFF that supports that SFI.¶ [RFC8300] makes it clear that the intended scope is for use within a single provider's operational domain.¶ This document adopts the service function chaining architecture described in [RFC7665] and adds a control plane to support the functions, as described in Section 2.2. An essential component of this solution is the controller. This is a network component responsible for planning SFPs within the network. It gathers information about the availability of SFIs and SFFs, instructs the control plane about the SFPs to be programmed, and instructs the classifiers how to assign traffic flows to individual SFPs.¶ 2.2. Control Plane Overview To accomplish the function described in Section 2.1, this document introduces the Service Function Type (SFT), which is the category of SF that is supported by an SFF (such as \"firewall\"). An IANA registry of service function types is introduced in Section 10.5 and is consistent with types used in other work, such as [BGP-LS-SR]. An SFF may support SFs of multiple different SFTs, and it may support multiple SFIs of each SF.¶ The registry of SFT values (see Section 10.5) is split into three ranges with assignment policies per [RFC8126]:¶ The special-purpose SFT values range is assigned through Standards Action. Values in that range are used for special SFC operations and do not apply to the types of SF that may form part of the SFP.¶ The First Come First Served range tracks assignments of SFT values made by any party that defines an SF type. Reference through an Internet-Draft is desirable, but not required.¶ The Private Use range is not tracked by IANA and is primarily intended for use in private networks where the meaning of the SFT values is locally tracked and under the control of a local administrator.¶ It is envisaged that the majority of SFT values used will be assigned from the First Come First Served space in the registry. This will ensure interoperability, especially in situations where software and hardware from different vendors are deployed in the same networks, or when networks are merged. However, operators of private networks may choose to develop their own SFs and manage the configuration and operation of their network through their own list of SFT values.¶ This document also introduces a new BGP AFI/SAFI (values 31 and 9, respectively) for \"SFC Routes\". Two SFC Route Types are defined by this document: the Service Function Instance Route (SFIR) and the Service Function Path Route (SFPR). As detailed in Section 3, the Route Type is indicated by a subfield in the Network Layer Reachability Information (NLRI).¶ The SFIR is advertised by the node that provides access to the service function instance (i.e., the SFF). The SFIR describes a particular instance of a particular SF (i.e., an SFI) and the way to forward a packet to it through the underlay network, i.e., IP address and encapsulation information.¶ The SFPRs are originated by controllers. One SFPR is originated for each SFP. The SFPR specifies:¶ the SPI of the path,¶ the sequence of SFTs and/or SFIs of which the path consists, and¶ for each such SFT or SFI, the SI that represents it in the identified path.¶ This approach assumes that there is an underlay network that provides connectivity between SFFs and controllers and that the SFFs are grouped to form one or more service function overlay networks through which SFPs are built. We assume that the controllers have BGP connectivity to all SFFs and all classifiers within each service function overlay network.¶ When choosing the next SFI in a path, the SFF uses the SPI and SI as well as the SFT to choose among the SFIs, applying, for example, a load-balancing algorithm or direct knowledge of the underlay network topology, as described in Section 4.¶ The SFF then encapsulates the packet using the encapsulation specified by the SFIR of the selected SFI and forwards the packet. See Figure 1.¶ Thus, the SFF can be seen as a portal in the underlay network through which a particular SFI is reached.¶ Figure 1 shows a reference model for the service function chaining architecture. There are four SFFs (SFF-1 through SFF-4) connected by tunnels across the underlay network. Packets arrive at a classifier and are channeled along SFPs to destinations reachable through SFF-4.¶ SFF-1 and SFF-4 each have one instance of one SF attached (SFa and SFe). SFF-2 has two types of SF attached: one instance of one (SFc) and three instances of the other (SFb). SFF-3 has just one instance of an SF (SFd), but in this case, the type of SFd is the same type as SFb (SFTx).¶ This figure demonstrates how load balancing can be achieved by creating several SFPs that satisfy the same SFC. Suppose an SFC needs to include SFa, an SF of type SFTx, and SFc. A number of SFPs can be constructed using any instance of SFb or using SFd. Load balancing may be applied at two places:¶ The classifier may distribute different flows onto different SFPs to share the load in the network and across SFIs.¶ SFF-2 may distribute different flows (on the same SFP) to different instances of SFb to share the processing load.¶ Note that, for convenience and clarity, Figure 1 shows only a few tunnels between SFFs. There could be a full mesh of such tunnels, or more likely, a selection of tunnels connecting key SFFs to enable the construction of SFPs and balance load and traffic in the network. Further, the figure does not show any controllers; these would each have BGP connectivity to the classifier and all of the SFFs.¶ Packets | | | ------------ | | | Classifier | | | ------+----- | ---+--- --------- ------- | | Tunnel | | | | | SFF-1 |===============| SFF-2 |=========| SFF-4 | | | | | | | | | -+-----+- | | | | ,,,,,,,,,,,,,,/,, \\ | | | | ' .........../. ' ..\\...... | | | | ' : SFb / : ' : \\ SFc : | | | | ' : ---+- : ' : --+-- : | | | | ' : -| SFI | : ' : | SFI | : | | | | ' : -| ----- : ' : ----- : | | | | ' : | ----- : ' ......... | | | | ' : ----- : ' | | | | ' ............. ' | |--- Dests | | ' ' | |--- Dests | | ' ......... ' | | | | ' : ----- : ' | | | | ' : | SFI | : ' | | | | ' : --+-- : ' | | | | ' :SFd | : ' | | | | ' ....|.... ' | | | | ' | ' | | | | ' SFTx | ' | | | | ',,,,,,,,|,,,,,,,,' | | | | | | | | | ---+--- | | | | | | | | | |======| SFF-3 |====================| | ---+--- | | ---+--- | ------- | ....|.... ....|.... : | SFa: : | SFe: : --+-- : : --+-- : : | SFI | : : | SFI | : : ----- : : ----- : ......... ......... Figure 1: The Service Function Chaining Architecture Reference Model As previously noted, [RFC8300] makes it clear that the mechanisms it defines are intended for use within a single provider's operational domain. This reduces the requirements on the control plane function.¶ Section 5.2 of [RFC7665] sets out the functions provided by a control plane for a service function chaining network. The functions are broken down into six items, the first four of which are completely covered by the mechanisms described in this document:¶ Visibility of all SFs and the SFFs through which they are reached.¶ Computation of SFPs and programming into the network.¶ Selection of SFIs explicitly in the SFP or dynamically within the network.¶ Programming of SFFs with forwarding path information.¶ The fifth and sixth items in the list in RFC 7665 concern the use of metadata. These are more peripheral to the control plane mechanisms defined in this document but are discussed in Section 4.4.¶ 3. BGP SFC Routes This document defines a new AFI/SAFI for BGP, known as \"SFC\", with an NLRI that is described in this section.¶ The format of the SFC NLRI is shown in Figure 2.¶ +---------------------------------------+ | Route Type (2 octets) | +---------------------------------------+ | Length (2 octets) | +---------------------------------------+ | Route Type specific (variable) | +---------------------------------------+ Figure 2: The Format of the SFC NLRI The \"Route Type\" field determines the encoding of the rest of the Route Type specific SFC NLRI.¶ The \"Length\" field indicates the length, in octets, of the \"Route Type specific\" field of the SFC NLRI.¶ This document defines the following Route Types:¶ Service Function Instance Route (SFIR)¶ Service Function Path Route (SFPR)¶ An SFIR is used to identify an SFI. An SFPR defines a sequence of SFs (each of which has at least one instance advertised in an SFIR) that form an SFP.¶ The detailed encoding and procedures for these Route Types are described in subsequent sections.¶ The SFC NLRI is carried in BGP [RFC4271] using BGP Multiprotocol Extensions [RFC4760] with an Address Family Identifier (AFI) of 31 and a Subsequent Address Family Identifier (SAFI) of 9. The \"NLRI\" field in the MP_REACH_NLRI/MP_UNREACH_NLRI attribute contains the SFC NLRI, encoded as specified above.¶ In order for two BGP speakers to exchange SFC NLRIs, they MUST use BGP capabilities advertisements to ensure that they both are capable of properly processing such NLRIs. This is done as specified in [RFC4760], by using capability code 1 (Multiprotocol BGP) with an AFI of 31 and a SAFI of 9.¶ The \"nexthop\" field of the MP_REACH_NLRI attribute of the SFC NLRI MUST be set to a loopback address of the advertising SFF.¶ 3.1. Service Function Instance Route (SFIR) Figure 3 shows the Route Type specific NLRI of the SFIR.¶ +--------------------------------------------+ | Route Distinguisher (RD) (8 octets) | +--------------------------------------------+ | Service Function Type (2 octets) | +--------------------------------------------+ Figure 3: SFIR Route Type Specific NLRI [RFC4364] defines a Route Distinguisher (RD) as consisting of a two-byte \"Type\" field and a six-byte \"Value\" field, and it defines RD types 0, 1, and 2. In this specification, the RD (used for the SFIR) MUST be of type 0, 1, or 2.¶ If two SFIRs are originated from different administrative domains (within the same provider's operational domain), they MUST have different RDs. In particular, SFIRs from different VPNs (for different service function overlay networks) MUST have different RDs, and those RDs MUST be different from any non-VPN SFIRs.¶ The SFT identifies the functions/features an SF can offer, e.g., classifier, firewall, load balancer. There may be several SFIs that can perform a given service function. Each node hosting an SFI MUST originate an SFIR for each type of SF that it hosts (as indicated by the SFT value), and it MAY advertise an SFIR for each instance of each type of SF. A minimal advertisement allows construction of valid SFPs and leaves the selection of SFIs to the local SFF; a detailed advertisement may have scaling concerns but allows a controller that constructs an SFP to make an explicit choice of SFI.¶ Note that a node may advertise all its SFIs of one SFT in one shot using normal BGP UPDATE packing. That is, all of the SFIRs in an Update share a common Tunnel Encapsulation and Route Target (RT) attribute. See also Section 3.2.1.¶ The SFIR representing a given SFI will contain an NLRI with \"RD\" field set to an RD as specified above, and with the \"SFT\" field set to identify that SFI's SFT. The values for the \"SFT\" field are taken from a registry administered by IANA (see Section 10). A BGP UPDATE containing one or more SFIRs MUST also include a tunnel encapsulation attribute [RFC9012]. If a data packet needs to be sent to an SFI identified in one of the SFIRs, it will be encapsulated as specified by the tunnel encapsulation attribute and then transmitted through the underlay network.¶ Note that the tunnel encapsulation attribute MUST contain sufficient information to allow the advertising SFF to identify the overlay or VPN network that a received packet is transiting. This is because the [SPI, SI] in a received packet is specific to a particular overlay or VPN network.¶ 3.1.1. SFIR Pool Identifier Extended Community This document defines a new transitive Extended Community [RFC4360] of type 0x0b called the \"SFC Extended Community\". When used with Sub-Type 1, this is called the \"SFIR Pool Identifier extended community\". It MAY be included in SFIR advertisements, and it is used to indicate the identity of a pool of SFIRs to which an SFIR belongs. Since an SFIR may be a member of more than one pool, multiple of these extended communities may be present on a single SFIR advertisement.¶ SFIR pools allow SFIRs to be grouped for any purpose. Possible uses include control plane scalability and stability. A pool identifier may be included in an SFPR to indicate a set of SFIs that are acceptable at a specific point on an SFP (see Sections 3.2.1.3 and 4.3).¶ The SFIR Pool Identifier Extended Community is encoded in 8 octets as shown in Figure 4.¶ +--------------------------------------------+ | Type = 0x0b (1 octet) | +--------------------------------------------+ | Sub-Type = 1 (1 octet) | +--------------------------------------------+ | SFIR Pool Identifier value (6 octets) | +--------------------------------------------+ Figure 4: The SFIR Pool Identifier Extended Community The SFIR Pool Identifier value is encoded in a 6-octet field in network byte order, and the value is unique within the scope of an overlay network. This means that pool identifiers need to be centrally managed, which is consistent with the assignment of SFIs to pools.¶ 3.1.2. MPLS Mixed Swapping/Stacking Extended Community As noted in Section 3.1.1, this document defines a new transitive Extended Community of type 0x0b called the \"SFC Extended Community\". When used with Sub-Type 2, this is called the \"MPLS Mixed Swapping/Stacking Labels Extended Community\". The community is encoded as shown in Figure 5. It contains a pair of MPLS labels: an SFC Context Label and an SF Label, as described in [RFC8595]. Each label is 20 bits encoded in a 3-octet (24-bit) field with 4 trailing bits that MUST be set to zero.¶ +--------------------------------------------+ | Type = 0x0b (1 octet) | +--------------------------------------------| | Sub-Type = 2 (1 octet) | +--------------------------------------------| | SFC Context Label (3 octets) | +--------------------------------------------| | SF Label (3 octets) | +--------------------------------------------+ Figure 5: The MPLS Mixed Swapping/Stacking Labels Extended Community Note that it is assumed that each SFF has one or more globally unique SFC Context Labels and that the context-label space and the SPI-address space are disjoint. In other words, a label value cannot be used to indicate both an SFC context and an SPI, and it can be determined from knowledge of the label spaces whether a label indicates an SFC context or an SPI.¶ If an SFF supports SFP Traversal with an MPLS Label Stack, it MUST include this Extended Community with the SFIRs that it advertises.¶ See Section 7.6 for a description of how this Extended Community is used.¶ 3.2. Service Function Path Route (SFPR) Figure 6 shows the Route Type specific NLRI of the SFPR.¶ +-----------------------------------------------+ | Route Distinguisher (RD) (8 octets) | +-----------------------------------------------+ | Service Path Identifier (SPI) (3 octets) | +-----------------------------------------------+ Figure 6: SFPR Route Type Specific NLRI [RFC4364] defines a Route Distinguisher (RD) as consisting of a two-byte \"Type\" field and a six-byte \"Value\" field, and it defines RD types 0, 1, and 2. In this specification, the RD (used for the SFPR) MUST be of type 0, 1, or 2.¶ All SFPs MUST be associated with an RD. The association of an SFP with an RD is determined by provisioning. If two SFPRs are originated from different controllers, they MUST have different RDs. Additionally, SFPRs from different VPNs (i.e., in different service function overlay networks) MUST have different RDs, and those RDs MUST be different from any non-VPN SFPRs.¶ The Service path identifier is defined in [RFC8300] and is the value to be placed in the \"Service Path Identifier\" field of the NSH of any packet sent on this SFP. It is expected that one or more controllers will originate these routes in order to configure a service function overlay network.¶ The SFP is described in a new BGP Path attribute, the SFP attribute. Section 3.2.1 shows the format of that attribute.¶ 3.2.1. The SFP Attribute [RFC4271] defines BGP Path attributes. This document introduces a new Optional Transitive Path attribute called the \"SFP attribute\", with value 37. The first SFP attribute MUST be processed, and subsequent instances MUST be ignored.¶ The common fields of the SFP attribute are set as follows:¶ The Optional bit is set to 1 to indicate that this is an optional attribute.¶ The Transitive bit is set to 1 to indicate that this is a transitive attribute.¶ The Extended Length bit is set if the length of the SFP attribute is encoded in one octet (set to 0) or two octets (set to 1), as described in [RFC4271].¶ The Attribute Type Code is set to 37.¶ The content of the SFP attribute is a series of Type-Length-Value (TLV) constructs. Some TLVs may include Sub-TLVs. All TLVs and Sub-TLVs have a common format:¶ Type: A single octet indicating the type of the SFP attribute TLV. Values are taken from the registry described in Section 10.3.¶ Length: A two-octet field indicating the length of the data following the \"Length\" field, counted in octets.¶ Value: The contents of the TLV.¶ The formats of the TLVs defined in this document are shown in the following sections. The presence rules and meanings are as follows.¶ The SFP attribute contains a sequence of zero or more Association TLVs. That is, the Association TLV is OPTIONAL. Each Association TLV provides an association between this SFPR and another SFPR. Each associated SFPR is indicated using the RD with which it is advertised (we say the SFPR-RD to avoid ambiguity).¶ The SFP attribute contains a sequence of one or more Hop TLVs. Each Hop TLV contains all of the information about a single hop in the SFP.¶ Each Hop TLV contains an SI value and a sequence of one or more SFT TLVs. Each SFT TLV contains an SFI reference for each instance of an SF that is allowed at this hop of the SFP for the specific SFT. Each SFI is indicated using the RD with which it is advertised (we say the SFIR-RD to avoid ambiguity).¶ Section 6 of [RFC4271] describes the handling of malformed BGP attributes, or those that are in error in some way. [RFC7606] revises BGP error handling specifically for the UPDATE message, provides guidelines for the authors of documents defining new attributes, and revises the error-handling procedures for a number of existing attributes. This document introduces the SFP attribute and so defines error handling as follows:¶ When parsing a message, an unknown Attribute Type Code or a length that suggests that the attribute is longer than the remaining message is treated as a malformed message, and the \"treat-as-withdraw\" approach is used as per [RFC7606].¶ When parsing a message that contains an SFP attribute, the following cases constitute errors:¶ Optional bit is set to 0 in the SFP attribute.¶ Transitive bit is set to 0 in the SFP attribute.¶ Unknown \"TLV Type\" field found in the SFP attribute.¶ TLV length that suggests the TLV extends beyond the end of the SFP attribute.¶ Association TLV contains an unknown SFPR-RD.¶ No Hop TLV found in the SFP attribute.¶ No Sub-TLV found in a Hop TLV.¶ Unknown SFIR-RD found in an SFT TLV.¶ The errors listed above are treated as follows:¶ 1, 2, 4, 6, 7: The attribute MUST be treated as malformed and the \"treat-as-withdraw\" approach used as per [RFC7606].¶ 3: Unknown TLVs MUST be ignored, and message processing MUST continue.¶ 5, 8: The absence of an RD with which to correlate is nothing more than a soft error. The receiver SHOULD store the information from the SFP attribute until a corresponding advertisement is received.¶ 3.2.1.1. The Association TLV The Association TLV is an optional TLV in the SFP attribute. It MAY be present multiple times. Each occurrence provides an association with another SFP as advertised in another SFPR. The format of the Association TLV is shown in Figure 7.¶ +--------------------------------------------+ | Type = 1 (1 octet) | +--------------------------------------------| | Length (2 octets) | +--------------------------------------------| | Association Type (1 octet) | +--------------------------------------------| | Associated SFPR-RD (8 octets) | +--------------------------------------------| | Associated SPI (3 octets) | +--------------------------------------------+ Figure 7: The Format of the Association TLV The fields are as follows:¶ \"Type\" is set to 1 to indicate an Association TLV.¶ \"Length\" indicates the length in octets of the \"Association Type\" and \"Associated SFPR-RD\" fields. The value of the \"Length\" field is 12.¶ The \"Association Type\" field indicates the type of association. The values are tracked in an IANA registry (see Section 10.4). Only one value is defined in this document: Type 1 indicates association of two unidirectional SFPs to form a bidirectional SFP. An SFP attribute SHOULD NOT contain more than one Association TLV with Association Type 1; if more than one is present, the first one MUST be processed, and subsequent instances MUST be ignored. Note that documents that define new association types must also define the presence rules for Association TLVs of the new type.¶ The Associated SFPR-RD contains the RD of the associated SFP as advertised in an SFPR.¶ The Associated SPI contains the SPI of the associated SFP as advertised in an SFPR.¶ Association TLVs with unknown Association Type values SHOULD be ignored. Association TLVs that contain an Associated SFPR-RD value equal to the RD of the SFPR in which they are contained SHOULD be ignored. If the Associated SPI is not equal to the SPI advertised in the SFPR indicated by the Associated SFPR-RD, then the Association TLV SHOULD be ignored. In all three of these cases, an implementation MAY reject the SFP attribute as malformed and use the \"treat-as-withdraw\" approach per [RFC7606]; however, implementors are cautioned that such an approach may make an implementation less flexible in the event of future extensions to this protocol.¶ Note that when two SFPRs reference each other using the Association TLV, one SFPR advertisement will be received before the other. Therefore, processing of an association MUST NOT be rejected simply because the Associated SFPR-RD is unknown.¶ Further discussion of correlation of SFPRs is provided in Section 7.1.¶ 3.2.1.2. The Hop TLV There is one Hop TLV in the SFP attribute for each hop in the SFP. The format of the Hop TLV is shown in Figure 8. At least one Hop TLV MUST be present in an SFP attribute.¶ +--------------------------------------------+ | Type = 2 (1 octet) | +--------------------------------------------| | Length (2 octets) | +--------------------------------------------| | Service Index (1 octet) | +--------------------------------------------| | Hop Details (variable) | +--------------------------------------------+ Figure 8: The Format of the Hop TLV The fields are as follows:¶ \"Type\" is set to 2 to indicate a Hop TLV.¶ \"Length\" indicates the length, in octets, of the \"Service Index\" and \"Hop Details\" fields.¶ The Service Index is defined in [RFC8300] and is the value found in the \"Service Index\" field of the NSH that an SFF will use to look up to which next SFI a packet is to be sent.¶ The \"Hop Details\" field consists of a sequence of one or more Sub-TLVs.¶ Each hop of the SFP may demand that a specific type of SF is executed, and that type is indicated in Sub-TLVs of the Hop TLV. At least one Sub-TLV MUST be present. This document defines the SFT Sub-TLV (see Section 3.2.1.3) and the MPLS Swapping/Stacking Sub-TLV (see Section 3.2.1.4); other Sub-TLVs may be defined in future. The SFT Sub-TLV provides a list of which types of SF are acceptable at a specific hop, and for each type it allows a degree of control to be imposed on the choice of SFIs of that particular type. The MPLS Swapping/Stacking Sub-TLV indicates the type of SFC encoding to use in an MPLS label stack.¶ If no Hop TLV is present in an SFP attribute, it is a malformed attribute.¶ 3.2.1.3. The SFT Sub-TLV The SFT Sub-TLV MAY be included in the list of Sub-TLVs of the Hop TLV. The format of the SFT Sub-TLV is shown in Figure 9. The Hop Sub-TLV contains a list of SFIR-RD values each taken from the advertisement of an SFI. Together they form a list of acceptable SFIs of the indicated type.¶ +--------------------------------------------+ | Type = 3 (1 octet) | +--------------------------------------------| | Length (2 octets) | +--------------------------------------------| | Service Function Type (2 octets) | +--------------------------------------------| | SFIR-RD List (variable) | +--------------------------------------------+ Figure 9: The Format of the SFT Sub-TLV The fields are as follows:¶ \"Type\" is set to 3 to indicate an SFT Sub-TLV.¶ \"Length\" indicates the length, in octets, of the \"Service Function Type\" and \"SFIR-RD List\" fields.¶ The SFT value indicates the category (type) of SF that is to be executed at this hop. The types are as advertised for the SFs supported by the SFFs. SFT values in the range 1-31 are special-purpose SFT values and have meanings defined by the documents that describe them -- the value \"Change Sequence\" is defined in Section 6.1 of this document.¶ The hop description is further qualified beyond the specification of the SFTs by listing, for each SFT in each hop, the SFIs that may be used at the hop. The SFIs are identified using the SFIR-RDs from the advertisements of the SFIs in the SFIRs. Note that if the list contains one or more SFIR Pool Identifiers, then for each, the SFIR-RD list is effectively expanded to include the SFIR-RD of each SFIR advertised with that SFIR Pool Identifier. An SFIR-RD of value zero has special meaning, as described in Section 5. Each entry in the list is eight octets long, and the number of entries in the list can be deduced from the value of the \"Length\" field.¶ Note that an SFIR-RD is of type 0, 1, or 2 (as described in Section 3.1). Thus, the high-order octet of an RD found in an SFIR-RD List always has a value of 0x00. However, the high-order octet of an SFIR Pool Identifier (an Extended Community with \"Type\" field 0x0b) will always have a nonzero value. This allows the node processing the SFIR-RD list to distinguish between the two types of list entry.¶ 3.2.1.4. MPLS Swapping/Stacking Sub-TLV The MPLS Swapping/Stacking Sub-TLV (Type value 4) is a zero-length Sub-TLV that is OPTIONAL in the Hop TLV and is used when the data representation is MPLS (see Section 7.5). When present, it indicates to the classifier imposing an MPLS label stack that the current hop is to use an {SFC Context Label, SF label} rather than an {SPI, SF} label pair. See Section 7.6 for more details.¶ 3.2.1.5. SFP Traversal With MPLS Label Stack TLV The SFP Traversal With MPLS Label Stack TLV (Type value 5) is a zero-length TLV that can be carried in the SFP attribute and indicates to the classifier and the SFFs on the SFP that an MPLS label stack with label swapping/stacking is to be used for packets traversing the SFP. All of the SFFs specified at each of the SFP's hops MUST have advertised an MPLS Mixed Swapping/Stacking Extended Community (see Section 3.1.2) for the SFP to be considered usable.¶ 3.2.2. General Rules for the SFP Attribute It is possible for the same SFI, as described by an SFIR, to be used in multiple SFPRs.¶ When two SFPRs have the same SPI but different SFPR-RDs, there can be three cases:¶ Two or more controllers are originating SFPRs for the same SFP. In this case, the content of the SFPRs is identical, and the duplication is to ensure receipt and provide controller redundancy.¶ There is a transition in content of the advertised SFP, and the advertisements may originate from one or more controllers. In this case, the content of the SFPRs will be different.¶ The reuse of an SPI may result from a configuration error.¶ There is no way in any of these cases for the receiving SFF to know which SFPR to process, and the SFPRs could be received in any order. At any point in time, when multiple SFPRs have the same SPI but different SFPR-RDs, the SFF MUST use the SFPR with the numerically lowest SFPR-RD when interpreting the RDs as 8-octet integers in network byte order. The SFF SHOULD log this occurrence to assist with debugging.¶ Furthermore, a controller that wants to change the content of an SFP is RECOMMENDED to use a new SPI and so create a new SFP onto which the classifiers can transition packet flows before the SFPR for the old SFP is withdrawn. This avoids any race conditions with SFPR advertisements.¶ Additionally, a controller SHOULD NOT reuse an SPI after it has withdrawn the SFPR that used it until at least a configurable amount of time has passed. This timer SHOULD have a default of one hour.¶ 4. Mode of Operation This document describes the use of BGP as a control plane to create and manage a service function overlay network.¶ 4.1. Route Targets The main feature introduced by this document is the ability to create multiple service function overlay networks through the use of Route Targets (RTs) [RFC4364].¶ Every BGP UPDATE containing an SFIR or SFPR carries one or more RTs. The RT carried by a particular SFIR or SFPR is determined by the provisioning of the route's originator.¶ Every node in a service function overlay network is configured with one or more import RTs. Thus, each SFF will import only the SFPRs with matching RTs, allowing the construction of multiple service function overlay networks or the instantiation of SFCs within a Layer 3 Virtual Private Network (L3VPN) or Ethernet VPN (EVPN) instance (see Section 7.3). An SFF that has a presence in multiple service function overlay networks (i.e., one that imports more than one RT) will usually maintain separate forwarding state for each overlay network.¶ 4.2. Service Function Instance Routes The SFIR (see Section 3.1) is used to advertise the existence and location of a specific SFI; it consists of:¶ The RT as just described.¶ A Service Function Type (SFT) that is the type of service function that is provided (such as \"firewall\").¶ A Route Distinguisher (RD) that is unique to a specific overlay.¶ 4.3. Service Function Path Routes The SFPR (see Section 3.2) describes a specific path of an SFC. The SFPR contains the Service Path Identifier (SPI) used to identify the SFP in the NSH in the data plane. It also contains a sequence of Service Indexes (SIs). Each SI identifies a hop in the SFP, and each hop is a choice between one or more SFIs.¶ As described in this document, each SFP route is identified in the service function overlay network by an RD and an SPI. The SPI is unique within a single VPN instance supported by the underlay network.¶ The SFPR advertisement comprises:¶ An RT as described in Section 4.1.¶ A tuple that identifies the SFPR.¶ An RD that identifies an advertisement of an SFPR.¶ The SPI that uniquely identifies this path within the VPN instance distinguished by the RD. This SPI also appears in the NSH.¶ A series of SIs. Each SI is used in the context of a particular SPI and identifies one or more SFs (distinguished by their SFTs). For each SF, it identifies a set of SFIs that instantiate the SF. The values of the SI indicate the order in which the SFs are to be executed in the SFP that is represented by the SPI.¶ The SI is used in the NSH to identify the entries in the SFP. Note that the SI values have meaning only relative to a specific path. They have no semantic other than to indicate the order of SFs within the path and are assumed to be monotonically decreasing from the start to the end of the path [RFC8300].¶ Each SI is associated with a set of one or more SFIs that can be used to provide the indexed SF within the path. Each member of the set comprises:¶ The RD used in an SFIR advertisement of the SFI.¶ The SFT that indicates the type of function as used in the same SFIR advertisement of the SFI.¶ This may be summarized as follows, where the notations \"SFPR-RD\" and \"SFIR-RD\" are used to distinguish the two different RDs, and where \"*\" indicates a multiplier:¶ RT, {SFPR-RD, SPI}, m * {SI, {n * {SFT, p * SFIR-RD} } } ¶ Where:¶ RT: Route Target¶ SFPR-RD: The Route Descriptor of the SFPR advertisement¶ SPI: Service Path Identifier used in the NSH¶ m: The number of hops in the SFP¶ n: The number of choices of SFT for a specific hop¶ p: The number of choices of SFI for a given SFT in a specific hop¶ SI: Service Index used in the NSH to indicate a specific hop¶ SFT: The Service Function Type used in the same advertisement of the SFIR¶ SFIR-RD: The Route Descriptor used in an advertisement of the SFIR¶ That is, there can be multiple SFTs at a given hop, as described in Section 5.¶ Note that the values of SI are from the set {255, ..., 1} and are monotonically decreasing within the SFP. SIs MUST appear in order within the SFPR (i.e., monotonically decreasing) and MUST NOT appear more than once. Gaps MAY appear in the sequence, as described in Section 4.5.1. Malformed SFPRs MUST be discarded and MUST cause any previous instance of the SFPR (same SFPR-RD and SPI) to be discarded.¶ Note that if the SFIR-RD list in an SFT TLV contains one or more SFIR Pool Identifiers, then in the above expression, \"p\" is the sum of the number of individual SFIR-RD values and the sum for each SFIR Pool Identifier of the number of SFIRs advertised with that SFIR Pool Identifier. In other words, the list of SFIR-RD values is effectively expanded to include the SFIR-RD of each SFIR advertised with each SFIR Pool Identifier in the SFIR-RD list.¶ The choice of SFI is explained further in Section 5. Note that an SFIR-RD value of zero has special meaning, as described in that section.¶ 4.4. Classifier Operation As shown in Figure 1, the classifier is a component that is used to assign packets to an SFP.¶ The classifier is responsible for determining to which packet flow a packet belongs. The mechanism it uses to achieve that classification is out of the scope of this document but might include inspection of the packet header. The classifier has been instructed (by the controller or through some other configuration mechanism -- see Section 7.4) which flows are to be assigned to which SFPs, and so it can impose an NSH on each packet and initialize the NSH with the SPI of the selected SFP and the SI of its first hop.¶ Note that instructions delivered to the classifier may include information about the metadata to encode (and the format for that encoding) on packets that are classified by the classifier to a particular SFP. As mentioned in Section 2.2, this corresponds to the fifth element of control plane functionality described in [RFC7665]. Such instructions fall outside the scope of this specification (but see Section 7.4), as do instructions to other service function chaining elements on how to interpret metadata (as described in the sixth element of control plane functionality described in [RFC7665]).¶ 4.5. Service Function Forwarder Operation Each packet sent to an SFF is transmitted encapsulated in an NSH. The NSH includes an SPI and SI: the SPI indicates the SFPR advertisement that announced the SFP; the tuple SPI/SI indicates a specific hop in a specific path and maps to the RD/SFT of a particular SFIR advertisement.¶ When an SFF gets an SFPR advertisement, it will first determine whether to import the route by examining the RT. If the SFPR is imported, the SFF then determines whether it is on the SFP by looking for its own SFIR-RDs or any SFIR-RD with value zero in the SFPR. For each occurrence in the SFP, the SFF creates forwarding state for incoming packets and forwarding state for outgoing packets that have been processed by the specified SFI.¶ The SFF creates local forwarding state for packets that it receives from other SFFs. This state makes the association between the SPI/SI in the NSH of the received packet and one or more specific local SFIs, as identified by the SFIR-RD/SFT. If there are multiple local SFIs that match, this is because a single advertisement was made for a set of equivalent SFIs, and the SFF may use local policy (such as load balancing) to determine to which SFI to forward a received packet.¶ The SFF also creates next-hop forwarding state for packets received back from the local SFI that need to be forwarded to the next hop in the SFP. There may be a choice of next hops, as described in Section 4.3. The SFF could install forwarding state for all potential next hops or it could choose to only install forwarding state for a subset of the potential next hops. If a choice is made, then it will be as described in Section 5.¶ The installed forwarding state may change over time, reacting to changes in the underlay network and the availability of particular SFIs. Note that the forwarding state describes how one SFF sends packets to another SFF, but not how those packets are routed through the underlay network. SFFs may be connected by tunnels across the underlay, or packets may be sent addressed to the next SFF and routed through the underlay. In any case, transmission across the underlay requires encapsulation of packets with a header for transport in the underlay network.¶ Note that SFFs only create and store forwarding state for the SFPs on which they are included. They do not retain state for all SFPs advertised.¶ An SFF may also install forwarding state to support looping, jumping, and branching. The protocol mechanism for explicit control of looping, jumping, and branching uses a specific reserved SFT value at a given hop of an SFPR and is described in Section 6.1.¶ 4.5.1. Processing with \"Gaps\" in the SI Sequence The behavior of an SF, as described in [RFC8300], is to decrement the value of the \"SI\" field in the NSH by one before returning a packet to the local SFF for further processing. This means that there is a good reason to assume that the SFP is composed of a series of SFs, each indicated by an SI value one less than the previous.¶ However, there is an advantage to having nonsuccessive SIs in an SPI. Consider the case where an SPI needs to be modified by the insertion or removal of an SF. In the latter case, this would lead to a \"gap\" in the sequence of SIs, and in the former case, this could only be achieved if a gap already existed into which the new SF with its new SI value could be inserted. Otherwise, all \"downstream\" SFs would need to be renumbered.¶ Now, of course, such renumbering could be performed, but it would lead to a significant disruption to the SFC as all the SFFs along the SFP were \"reprogrammed\". Thus, to achieve dynamic modification of an SFP (and even in-service modification), it is desirable to be able to make these modifications without changing the SIs of the elements that were present before the modification. This will produce much more consistent/predictable behavior during the convergence period, where otherwise the change would need to be fully propagated.¶ Another approach says that any change to an SFP simply creates a new SFP that can be assigned a new SPI. All that would be needed would be to give a new instruction to the classifier, and traffic would be switched to the new SFP that contains the new set of SFs. This approach is practical but neglects to consider that the SFP may be referenced by other SFPs (through \"branch\" instructions) and used by many classifiers. In those cases, the corresponding configuration resulting from a change in SPI may have wide ripples and create scope for errors that are hard to trace.¶ Therefore, while this document requires that the SI values in an SFP are monotonically decreasing, it makes no assumption that the SI values are sequential. Configuration tools may apply that rule, but they are not required to. To support this, an SFF SHOULD process as follows when it receives a packet:¶ If the SI indicates a known entry in the SFP, the SFF MUST process the packet as normal, looking up the SI and determining to which local SFI to deliver the packet.¶ If the SI does not match an entry in the SFP, the SFF MUST reduce the SI value to the next (smaller) value present in the SFP and process the packet using that SI.¶ If there is no smaller SI (i.e., if the end of the SFP has been reached), the SFF MUST treat the SI value as not valid, as described in [RFC8300].¶ This makes the behavior described in this document a superset of the function in [RFC8300]. That is, an implementation that strictly follows RFC 8300 in performing SI decrements in units of one is perfectly in line with the mechanisms defined in this document.¶ SFF implementations MAY choose to only support contiguous SI values in an SFP. Such an implementation will not support receiving an SI value that is not present in the SFP and will discard the packets as described in [RFC8300].¶ 5. Selection within Service Function Paths As described in Section 2, the SPI/SI in the NSH passed back from an SFI to the SFF may leave the SFF with a choice of next-hop SFTs and a choice of SFIs for each SFT. That is, the SPI indicates an SFPR, and the SI indicates an entry in that SFPR. Each entry in an SFPR is a set of one or more SFT/SFIR-RD pairs. The SFF MUST choose one of these, identify the SFF that supports the chosen SFI, and send the packet to that next-hop SFF.¶ The choice be may offered for load balancing across multiple SFIs, or for discrimination between different actions necessary at a specific hop in the SFP. Different SFT values may exist at a given hop in an SFP to support several cases:¶ There may be multiple instances of similar service functions that are distinguished by different SFT values. For example, firewalls made by vendor A and vendor B may need to be identified by different SFT values because, while they have similar functionality, their behavior is not identical. Then, some SFPs may limit the choice of SF at a given hop by specifying the SFT for vendor A, but other SFPs might not need to control which vendor's SF is used and so can indicate that either SFT can be used.¶ There may be an obvious branch needed in an SFP, such as the processing after a firewall where admitted packets continue along the SFP, but suspect packets are diverted to a \"penalty box\". In this case, the next hop in the SFP will be indicated with two different SFT values.¶ In the typical case, the SFF chooses a next-hop SFF by looking at the set of all SFFs that support the SFs identified by the SI (that set having been advertised in individual SFIR advertisements), finding the one or more that are \"nearest\" in the underlay network, and choosing between next-hop SFFs using its own load-balancing algorithm.¶ An SFI may influence this choice process by passing additional information back, along with the packet and NSH. This information may influence local policy at the SFF to either cause it to favor a next-hop SFF (perhaps selecting one that is not nearest in the underlay) or influence the load-balancing algorithm.¶ This selection applies to the normal case but also applies in the case of looping, jumping, and branching (see Section 6).¶ Suppose an SFF in a particular service function overlay network (identified by a particular import RT, RT-z) needs to forward an NSH-encapsulated packet whose SPI is SPI-x and whose SI is SI-y. It does the following:¶ It looks for an installed SFPR that carries RT-z and has SPI-x in its NLRI. If there is none, then such packets cannot be forwarded.¶ From the SFP attribute of that SFPR, it finds the Hop TLV with SI value set to SI-y. If there is no such Hop TLV, then such packets cannot be forwarded.¶ It then finds the \"relevant\" set of SFIRs by going through the list of SFT TLVs contained in the Hop TLV as follows:¶ An SFIR is relevant if it carries RT-z, the SFT in its NLRI matches the SFT value in one of the SFT TLVs, and the RD value in its NLRI matches an entry in the list of SFIR-RDs in that SFT TLV.¶ If an entry in the SFIR-RD list of an SFT TLV contains the value zero, then an SFIR is relevant if it carries RT-z and the SFT in its NLRI matches the SFT value in that SFT TLV. That is, any SFIR in the service function overlay network defined by RT-z and with the correct SFT is relevant.¶ If a pool identifier is in use, then an SFIR is relevant if it is a member of the pool.¶ Each of the relevant SFIRs identifies a single SFI and contains a tunnel encapsulation attribute that specifies how to send a packet to that SFI. For a particular packet, the SFF chooses a particular SFI from the set of relevant SFIRs. This choice is made according to local policy.¶ A typical policy might be to figure out the set of SFIs that are closest and load balance among them. But this is not the only possible policy.¶ Thus, at any point in time when an SFF selects its next hop, it chooses from the intersection of the set of next-hop RDs contained in the SFPR and the RDs contained in the SFF's local set of SFIRs (i.e., according to the determination of \"relevance\", above). If the intersection is null, the SFPR is unusable. Similarly, when this condition applies on the controller that originated the SFPR, it SHOULD either withdraw the SFPR or re-advertise it with a new set of RDs for the affected hop.¶ 6. Looping, Jumping, and Branching As described in Section 2, an SFI or an SFF may cause a packet to \"loop back\" to a previous SF on a path in order that a sequence of functions may be re-executed. This is simply achieved by replacing the SI in the NSH with a higher value, instead of decreasing it as would normally be the case, to determine the next hop in the path.¶ Section 2 also describes how an SFI or SFF may cause a packet to \"jump forward\" to an SF on a path that is not the immediate next SF in the SFP. This is simply achieved by replacing the SI in the NSH with a lower value than would be achieved by decreasing it by the normal amount.¶ A more complex option to move packets from one SFP to another is described in [RFC8300] and Section 2, where it is termed \"branching\". This mechanism allows an SFI or SFF to make a choice of downstream treatments for packets based on local policy and the output of the local SF. Branching is achieved by changing the SPI in the NSH to indicate the new path and setting the SI to indicate the point in the path at which the packets enter.¶ Note that the NSH does not include a marker to indicate whether a specific packet has been around a loop before. Therefore, the use of NSH metadata [RFC8300] may be required in order to prevent infinite loops.¶ 6.1. Protocol Control of Looping, Jumping, and Branching If the SFT value in an SFT TLV in an SFPR has the special-purpose SFT value \"Change Sequence\" (see Section 10), then this is an indication that the SFF may make a loop, jump, or branch according to local policy and information returned by the local SFI.¶ In this case, the SPI and SI of the next hop are encoded in the eight bytes of an entry in the SFIR-RD list as follows:¶ 3 bytes SPI¶ 1 byte SI¶ 4 bytes Reserved (SHOULD be set to zero and ignored)¶ If the SI in this encoding is not part of the SFPR indicated by the SPI in this encoding, then this is an explicit error that SHOULD be detected by the SFF when it parses the SFPR. The SFPR SHOULD NOT cause any forwarding state to be installed in the SFF, and packets received with the SPI that indicates this SFPR SHOULD be silently discarded.¶ If the SPI in this encoding is unknown, the SFF SHOULD NOT install any forwarding state for this SFPR but MAY hold the SFPR pending receipt of another SFPR that does use the encoded SPI.¶ If the SPI matches the current SPI for the path, this is a loop or jump. In this case, if the SI is greater than or equal to the current SI, it is a loop. If the SPI matches and the SI is less than the next SI, it is a jump.¶ If the SPI indicates another path, this is a branch, and the SI indicates the point at which to enter that path.¶ The Change Sequence SFT is just another SFT that may appear in a set of SFI/SFT tuples within an SI and is selected as described in Section 5.¶ Note that special-purpose SFTs MUST NOT be advertised in SFIRs. If such an SFIR is received, it SHOULD be ignored.¶ 6.2. Implications for Forwarding State Support for looping and jumping requires that the SFF has forwarding state established to an SFF that provides access to an instance of the appropriate SF. This means that the SFF must have seen the relevant SFIR advertisements and mush have known that it needed to create the forwarding state. This is a matter of local configuration and implementation; for example, an implementation could be configured to install forwarding state for specific looping/jumping.¶ Support for branching requires that the SFF has forwarding state established to an SFF that provides access to an instance of the appropriate entry SF on the other SFP. This means that the SFF must have seen the relevant SFIR and SFPR advertisements and known that it needed to create the forwarding state. This is a matter of local configuration and implementation; for example, an implementation could be configured to install forwarding state for specific branching (identified by SPI and SI).¶ 7. Advanced Topics This section highlights several advanced topics introduced elsewhere in this document.¶ 7.1. Correlating Service Function Path Instances It is often useful to create bidirectional SFPs to enable packet flows to traverse the same set of SFs, but in the reverse order. However, packets on SFPs in the data plane (per [RFC8300]) do not contain a direction indicator, so each direction must use a different SPI.¶ As described in Section 3.2.1.1, an SFPR can contain one or more correlators encoded in Association TLVs. If the Association Type indicates \"Bidirectional SFP\", then the SFP advertised in the SFPR is one direction of a bidirectional pair of SFPs, where the other in the pair is advertised in the SFPR with RD as carried in the \"Associated SFPR-RD\" field of the Association TLV. The SPI carried in the \"Associated SPI\" field of the Association TLV provides a cross-check against the SPI advertised in the SFPR with RD as carried in the \"Associated SFPR-RD\" field of the Association TLV.¶ As noted in Section 3.2.1.1, when SFPRs reference each other, one SFPR advertisement will be received before the other. Therefore, processing of an association will require that the first SFPR not be rejected simply because the Associated SFPR-RD it carries is unknown. However, the SFP defined by the first SFPR is valid and SHOULD be available for use as a unidirectional SFP, even in the absence of an advertisement of its partner.¶ Furthermore, in error cases where SFPR-a associates with SFPR-b, but SFPR-b associates with SFPR-c such that a bidirectional pair of SFPs cannot be formed, the individual SFPs are still valid and SHOULD be available for use as unidirectional SFPs. An implementation SHOULD log this situation, because it represents a controller error.¶ Usage of a bidirectional SFP may be programmed into the classifiers by the controller. Alternatively, a classifier may look at incoming packets on a bidirectional packet flow, extract the SPI from the received NSH, and look up the SFPR to find the reverse-direction SFP to use when it sends packets.¶ See Section 8 for an example of how this works.¶ 7.2. Considerations for Stateful Service Functions Some service functions are stateful. That means that they build and maintain state derived from configuration or the packet flows that they handle. In such cases, it can be important or necessary that all packets from a flow continue to traverse the same instance of a service function so that the state can be leveraged and does not need to be regenerated.¶ In the case of bidirectional SFPs, it may be necessary to traverse the same instances of a stateful service function in both directions. A firewall is a good example of such a service function.¶ This issue becomes a concern where there are multiple parallel instances of a service function and a determination of which one to use could normally be left to the SFF as a load-balancing or local-policy choice.¶ For the forward-direction SFP, the concern is that the same choice of SF is made for all packets of a flow under normal network conditions. It may be possible to guarantee that the load-balancing functions applied in the SFFs are stable and repeatable, but a controller that constructs SFPs might not want to trust to this. The controller can, in these cases, build a number of more specific SFPs, each traversing a specific instance of the stateful SFs. In this case, the load-balancing choice can be left up to the classifier. Thus, the classifier selects which instance of a stateful SF is used by a particular flow by selecting the SFP that the flow uses.¶ For bidirectional SFPs where the same instance of a stateful SF must be traversed in both directions, it is not enough to leave the choice of SFI as a local choice, even if the load balancing is stable, because coordination would be required between the decision points in the forward and reverse directions, and this may be hard to achieve in all cases except where it is the same SFF that makes the choice in both directions.¶ Note that this approach necessarily increases the amount of SFP state in the network (i.e., there are more SFPs). It is possible to mitigate this effect by careful construction of SFPs built from a concatenation of other SFPs.¶ Section 8.9 includes some simple examples of SFPs for stateful SFs.¶ 7.3. VPN Considerations and Private Service Functions Likely deployments include reserving specific instances of SFs for specific customers or allowing customers to deploy their own SFs within the network. Building SFs in such environments requires that suitable identifiers be used to ensure that SFFs distinguish which SFIs can be used and which cannot.¶ This problem is similar to a problem in the way that VPNs are supported and is solved in a similar way. The \"RT\" field is used to indicate a set of SFs from which all choices must be made.¶ 7.4. Flow Specification for SFC Classifiers [RFC8955] defines a set of BGP routes that can be used to identify the packets in a given flow using fields in the header of each packet, and a set of actions -- encoded as Extended Communities -- that can be used to disposition those packets. This document enables the use of these mechanisms by SFC classifiers by defining a new action Extended Community called \"Flow Specification for SFC Classifiers\", identified by the value 0x0d. Note that implementation of this section of this specification will be controllers or classifiers communicating with each other directly for the purpose of instructing the classifier how to place packets onto an SFP. So that the implementation of classifiers can be kept simple, and to avoid the confusion between the purposes of different Extended Communities, a controller MUST NOT include other action Extended Communities at the same time as a \"Flow Specification for SFC Classifiers\" Extended Community. A \"Flow Specification for SFC Classifiers\" Traffic Filtering Action Extended Community advertised with any other Traffic Filtering Action Extended Community MUST be treated as malformed in line with [RFC8955] and result in the flow-specification UPDATE message being handled as \"treat-as-withdraw\", according to [RFC7606], Section 2.¶ To put the flow specification into context, when multiple service function chaining overlays are present in one network, each FlowSpec update MUST be tagged with the route target of the overlay or VPN network for which it is intended.¶ This Extended Community is encoded as an 8-octet value, as shown in Figure 10.¶ 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type=0x80 | Sub-Type=0x0d | SPI | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SPI (cont.) | SI | SFT | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 10: The Format of the Flow Specification for SFC Classifiers Extended Community The Extended Community contains the Service Path Identifier (SPI), Service Index (SI), and Service Function Type (SFT), as defined elsewhere in this document. Thus, each action extended community defines the entry point (not necessarily the first hop) into a specific SFP. This allows, for example, different flows to enter the same SFP at different points.¶ Note that, according to [RFC8955], a given flow-specification update may include multiple of these action Extended Communities. If a given action extended community does not contain an installed SFPR with the specified {SPI, SI, SFT}, it MUST NOT be used for dispositioning the packets of the specified flow.¶ The normal case of packet classification for service function chaining will see a packet enter the SFP at its first hop. In this case, the SI in the Extended Community is superfluous, and the SFT may also be unnecessary. To allow these cases to be handled, a special meaning is assigned to an SI of zero (not a valid value) and an SFT of zero (a reserved value in the registry -- see Section 10.5).¶ If an SFC Classifiers Extended Community is received with SI = 0, then it means that the first hop of the SFP indicated by the SPI MUST be used.¶ If an SFC Classifiers Extended Community is received with SFT = 0, then there are two subcases:¶ If there is a choice of SFT in the hop indicated by the value of the SI (including SI = 0), then SFT = 0 means there is a free choice of which SFT to use, according to local policy).¶ If there is no choice of SFT in the hop indicated by the value of SI, then SFT = 0 means that the value of the SFT at that hop, as indicated in the SFPR for the indicated SPI, MUST be used.¶ One of the filters that the flow specification may describe is the VPN to which the traffic belongs. Additionally, as noted above, to put the indicated SPI into context when multiple SFC overlays are present in one network, each FlowSpec update MUST be tagged with the route target of the overlay or VPN network for which it is intended.¶ Note that future extensions might be made to the Flow Specification for SFC Classifiers Extended Community to provide instruction to the classifier about what metadata to add to packets that it classifies for forwarding on a specific SFP; however, that is outside the scope of this document.¶ 7.5. Choice of Data Plane SPI/SI Representation This document ties together the control and data planes of a service function chaining overlay network through the use of the SPI/SI that is nominally carried in the NSH of a given packet. However, in order to handle situations in which the NSH is not ubiquitously deployed, it is also possible to use alternative data plane representations of the SPI/SI by carrying the identical semantics in other protocol fields, such as MPLS labels [RFC8595].¶ This document defines a new Sub-TLV for the tunnel encapsulation attribute [RFC9012], the SPI/SI Representation Sub-TLV of type 16. This Sub-TLV MAY be present in each Tunnel TLV contained in a tunnel encapsulation attribute when the attribute is carried by an SFIR. The \"Value\" field of this Sub-TLV is a two-octet field of flags numbered counting from the most significant bit, each of which describes how the originating SFF expects to see the SPI/SI represented in the data plane for packets carried in the tunnels described by the Tunnel TLV.¶ The following bits are defined by this document and are tracked in an IANA registry described in Section 10.10:¶ Bit 0: If this bit is set, the NSH is to be used to carry the SPI/SI in the data plane.¶ Bit 1: If this bit is set, two labels in an MPLS label stack are to be used as described in Section 7.5.1.¶ If a given Tunnel TLV does not contain an SPI/SI Representation Sub-TLV, then it MUST be processed as if such a Sub-TLV is present with Bit 0 set and no other bits set. That is, the absence of the Sub-TLV SHALL be interpreted to mean that the NSH is to be used.¶ If a given Tunnel TLV contains an SPI/SI Representation Sub-TLV with a \"Value\" field that has no flag set, then the tunnel indicated by the Tunnel TLV MUST NOT be used for forwarding SFC packets. If a given Tunnel TLV contains an SPI/SI Representation Sub-TLV with both bit 0 and bit 1 set, then the tunnel indicated by the Tunnel TLV MUST NOT be used for forwarding SFC packets. The meaning and rules for the presence of other bits is to be defined in future documents, but implementations of this specification MUST set other bits to zero and ignore them on receipt.¶ If a given Tunnel TLV contains more than one SPI/SI Representation Sub-TLV, then the first one MUST be considered and subsequent instances MUST be ignored.¶ Note that the MPLS representation of the logical NSH may be used even if the tunnel is not an MPLS tunnel. Conversely, MPLS tunnels may be used to carry other encodings of the logical NSH (specifically, the NSH itself). It is a requirement that both ends of a tunnel over the underlay network know that the tunnel is used for service function chaining and know what form of NSH representation is used. The signaling mechanism described here allows coordination of this information.¶ 7.5.1. MPLS Representation of the SPI/SI If bit 1 is set in the SPI/SI Representation Sub-TLV, then labels in the MPLS label stack are used to indicate SFC forwarding and processing instructions to achieve the semantics of a logical NSH. The label stack is encoded as shown in [RFC8595].¶ 7.6. MPLS Label Swapping/Stacking Operation When a classifier constructs an MPLS label stack for an SFP, it starts with that SFP's last hop. If the last hop requires an {SPI, SI} label pair for label swapping, it pushes the SI (set to the SI value of the last hop) and the SFP's SPI onto the MPLS label stack. If the last hop requires a {context label, SFI label} label pair for label stacking, it selects a specific SFIR and pushes that SFIR's SFI label and context label onto the MPLS label stack.¶ The classifier then moves sequentially back through the SFP one hop at a time. For each hop, if the hop requires an {SPI, SI} and there is an {SPI, SI} at the top of the MPLS label stack, the SI is set to the SI value of the current hop. If there is not an {SPI, SI} at the top of the MPLS label stack, it pushes the SI (set to the SI value of the current hop) and the SFP's SPI onto the MPLS label stack.¶ If the hop requires a {context label, SFI label}, it selects a specific SFIR and pushes that SFIR's SFI label and context label onto the MPLS label stack.¶ 7.7. Support for MPLS-Encapsulated NSH Packets [RFC8596] describes how to transport SFC packets using the NSH over an MPLS transport network. Signaling that this approach is in use is supported by this document as follows:¶ A \"BGP Tunnel Encapsulation Attribute\" Sub-TLV is included with the codepoint 10 (representing \"MPLS Label Stack\") from the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry defined in [RFC9012].¶ An \"SFP Traversal With MPLS Label Stack\" TLV is included containing an \"SPI/SI Representation\" Sub-TLV with bit 0 set and bit 1 cleared.¶ In this case, the MPLS label stack constructed by the SFF to forward a packet to the next SFF on the SFP will consist of the labels needed to reach that SFF, and if label stacking is used, it will also include the labels advertised in the MPLS Label Stack Sub-TLV and the labels remaining in the stack needed to traverse the remainder of the SFP.¶ 8. Examples Most of the examples in this section use IPv4 addressing. But there is nothing special about IPv4 in the mechanisms described in this document, and they are equally applicable to IPv6. A few examples using IPv6 addressing are provided in Section 8.10.¶ Assume we have a service function overlay network with four SFFs (SFF1, SFF2, SFF3, and SFF4). The SFFs have addresses in the underlay network as follows:¶ SFF1 192.0.2.1 SFF2 192.0.2.2 SFF3 192.0.2.3 SFF4 192.0.2.4 ¶ Each SFF provides access to some SFIs from the four SFTs, SFT=41, SFT=42, SFT=43, and SFT=44, as follows:¶ SFF1 SFT=41 and SFT=42 SFF2 SFT=41 and SFT=43 SFF3 SFT=42 and SFT=44 SFF4 SFT=43 and SFT=44 ¶ The service function network also contains a controller with address 198.51.100.1.¶ This example service function overlay network is shown in Figure 11.¶ -------------- | Controller | | 198.51.100.1 | ------ ------ ------ ------ -------------- | SFI | | SFI | | SFI | | SFI | |SFT=41| |SFT=42| |SFT=41| |SFT=43| ------ ------ ------ ------ \\ / \\ / --------- --------- ---------- | SFF1 | | SFF2 | Packet --> | | |192.0.2.1| |192.0.2.2| Flows --> |Classifier| --------- --------- -->Dest | | --> ---------- --------- --------- | SFF3 | | SFF4 | |192.0.2.3| |192.0.2.4| --------- --------- / \\ / \\ ------ ------ ------ ------ | SFI | | SFI | | SFI | | SFI | |SFT=42| |SFT=44| |SFT=43| |SFT=44| ------ ------ ------ ------ Figure 11: Example Service Function Overlay Network The SFFs advertise routes to the SFIs they support. These advertisements contain RDs that are set according to the network operator's configuration model. In all of these IPv4 examples, we use RDs of Type 1 such that the available six octets are partitioned as four octets for the IPv4 address of the advertising SFF, and two octets that are a local index of the SFI. This scheme is chosen purely for convenience of documentation, and an operator is totally free to use any other scheme so long as it conforms to the definitions of SFIR and SFPR in Sections 3.1 and 3.2.¶ Thus, we see the following SFIRs advertised:¶ RD = 192.0.2.1/1, SFT = 41 RD = 192.0.2.1/2, SFT = 42 RD = 192.0.2.2/1, SFT = 41 RD = 192.0.2.2/2, SFT = 43 RD = 192.0.2.3/7, SFT = 42 RD = 192.0.2.3/8, SFT = 44 RD = 192.0.2.4/5, SFT = 43 RD = 192.0.2.4/6, SFT = 44 ¶ Note that the addressing used for communicating between SFFs is taken from the tunnel encapsulation attribute of the SFIR and not from the SFIR-RD.¶ 8.1. Example Explicit SFP with No Choices Consider the following SFPR.¶ SFP1: RD = 198.51.100.1/101, SPI = 15, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, RD = 192.0.2.2/2] ¶ The SFP consists of an SF of Type 41 located at SFF1, followed by an SF of Type 43 located at SFF2. This path is fully explicit, and each SFF is offered no choice in forwarding packets along the path.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (15). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 has no flexibility in the choice of SFF to support the next-hop SFI and will forward the packet to SFF2, which will send the packets to the SFI that supports SFT 43 before forwarding the packets to their destinations.¶ 8.2. Example SFP with Choice of SFIs SFP2: RD = 198.51.100.1/102, SPI = 16, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, {RD = 192.0.2.2/2, RD = 192.0.2.4/5 } ] ¶ In this example, the path also consists of an SF of Type 41 located at SFF1, and this is followed by an SF of Type 43. However, in this case, the SI = 250 contains a choice between the SFI located at SFF2 and the SFI located at SFF4.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (16). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a choice of next-hop SFFs to execute the next hop in the path. It can either forward packets to SFF2 or SFF4 to execute a function of Type 43. It uses its local load-balancing algorithm to make this choice. The chosen SFF will send the packets to the SFI that supports SFT 43 before forwarding the packets to their destinations.¶ 8.3. Example SFP with Open Choice of SFIs SFP3: RD = 198.51.100.1/103, SPI = 17, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 44, RD = 0] ¶ In this example, the path also consists of an SF of Type 41 located at SFF1, and this is followed by an SI with an RD of zero and SF of Type 44. This means that a choice can be made between any SFF that supports an SFI of Type 44.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (17). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a free choice of next-hop SFFs to execute the next hop in the path, selecting between all SFFs that support SFs of Type 44. Looking at the SFIRs it has received, SFF1 knows that SF Type 44 is supported by SFF3 and SFF4. SFF1 uses its local load-balancing algorithm to make this choice. The chosen SFF will send the packets to the SFI that supports SFT 44 before forwarding the packets to their destinations.¶ 8.4. Example SFP with Choice of SFTs SFP4: RD = 198.51.100.1/104, SPI = 18, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, {SFT = 43, RD = 192.0.2.2/2, SFT = 44, RD = 192.0.2.3/8 } ] ¶ This example provides a choice of SF type in the second hop in the path. The SI of 250 indicates a choice between SF Type 43 located at SF2 and SF Type 44 located at SF3.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (18). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a free choice of next-hop SFFs to execute the next hop in the path, selecting between all SFFs that support an SF of Type 43 and SFF3, which supports an SF of Type 44. These may be completely different functions that are to be executed dependent on specific conditions, or they may be similar functions identified with different type identifiers (such as firewalls from different vendors). SFF1 uses its local policy and load-balancing algorithm to make this choice and may use additional information passed back from the local SFI to help inform its selection. The chosen SFF will send the packets to the SFI that supports the chosen SFT before forwarding the packets to their destinations.¶ 8.5. Example Correlated Bidirectional SFPs SFP5: RD = 198.51.100.1/105, SPI = 19, Assoc-Type = 1, Assoc-RD = 198.51.100.1/106, Assoc-SPI = 20, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, RD = 192.0.2.2/2] SFP6: RD = 198.51.100.1/106, SPI = 20, Assoc-Type = 1, Assoc-RD = 198.51.100.1/105, Assoc-SPI = 19, [SI = 254, SFT = 43, RD = 192.0.2.2/2], [SI = 249, SFT = 41, RD = 192.0.2.1/1] ¶ This example demonstrates correlation of two SFPs to form a bidirectional SFP, as described in Section 7.1.¶ Two SFPRs are advertised by the controller. They have different SPIs (19 and 20), so they are known to be separate SFPs, but they both have Association TLVs with Association Type set to 1, indicating bidirectional SFPs. Each has an \"Associated SFPR-RD\" field containing the value of the other SFPR-RD to correlate the two SFPs as a bidirectional pair.¶ As can be seen from the SFPRs in this example, the paths are symmetric: the hops in SFP5 appear in the reverse order in SFP6.¶ 8.6. Example Correlated Asymmetrical Bidirectional SFPs SFP7: RD = 198.51.100.1/107, SPI = 21, Assoc-Type = 1, Assoc-RD = 198.51.100.1/108, Assoc-SPI = 22, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, RD = 192.0.2.2/2] SFP8: RD = 198.51.100.1/108, SPI = 22, Assoc-Type = 1, Assoc-RD = 198.51.100.1/107, Assoc-SPI = 21, [SI = 254, SFT = 44, RD = 192.0.2.4/6], [SI = 249, SFT = 41, RD = 192.0.2.1/1] ¶ Asymmetric bidirectional SFPs can also be created. This example shows a pair of SFPs with distinct SPIs (21 and 22) that are correlated in the same way as in the example in Section 8.5.¶ However, unlike in that example, the SFPs are different in each direction. Both paths include a hop of SF Type 41, but SFP7 includes a hop of SF Type 43 supported at SFF2, while SFP8 includes a hop of SF Type 44 supported at SFF4.¶ 8.7. Example Looping in an SFP SFP9: RD = 198.51.100.1/109, SPI = 23, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 44, RD = 192.0.2.4/5], [SI = 245, {SFT = 1, RD = {SPI=23, SI=255, Rsv=0}, SFT = 42, RD = 192.0.2.3/7 } ] ¶ Looping and jumping are described in Section 6. This example shows an SFP that contains an explicit loop-back instruction that is presented as a choice within an SFP hop.¶ The first two hops in the path (SI = 255 and SI = 250) are normal. That is, the packets will be delivered to SFF1 and SFF4 in turn for execution of SFs of Type 41 and 44, respectively.¶ The third hop (SI = 245) presents SFF4 with a choice of next hop. It can either forward the packets to SFF3 for an SF of Type 42 (the second choice) or it can loop back.¶ The loop-back entry in the SFPR for SI = 245 is indicated by the special-purpose SFT value 1 (\"Change Sequence\"). Within this hop, the RD is interpreted as encoding the SPI and SI of the next hop (see Section 6.1). In this case, the SPI is 23, which indicates that this is a loop or branch, i.e., the next hop is on the same SFP. The SI is set to 255; this is a higher number than the current SI (245), indicating a loop.¶ SFF4 must make a choice between these two next hops. The packet will be either forwarded to SFF3 with the NSH SI decreased to 245 or looped back to SFF1 with the NSH SI reset to 255. This choice will be made according to local policy, information passed back by the local SFI, and details in the packets' metadata that are used to prevent infinite looping.¶ 8.8. Example Branching in an SFP SFP10: RD = 198.51.100.1/110, SPI = 24, [SI = 254, SFT = 42, RD = 192.0.2.3/7], [SI = 249, SFT = 43, RD = 192.0.2.2/2] SFP11: RD = 198.51.100.1/111, SPI = 25, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 1, RD = {SPI=24, SI=254, Rsv=0}] ¶ Branching follows a similar procedure to that for looping (and jumping), as shown in Section 8.7. However, there are two SFPs involved.¶ SFP10 shows a normal path with packets forwarded to SFF3 and SFF2 for execution of service functions of Type 42 and 43, respectively.¶ SFP11 starts as normal (SFF1 for an SF of Type 41), but then SFF1 processes the next hop in the path and finds a \"Change Sequence\" special-purpose SFT. The \"SFIR-RD\" field includes an SPI of 24, which indicates SFP10, not the current SFP. The SI in the SFIR-RD is 254, so SFF1 knows that it must set the SPI/SI in the NSH to 24/254 and send the packets to the appropriate SFF, as advertised in the SFPR for SFP10 (that is, SFF3).¶ 8.9. Examples of SFPs with Stateful Service Functions This section provides some examples to demonstrate establishing SFPs when there is a choice of service functions at a particular hop, and where consistency of choice is required in both directions. The scenarios that give rise to this requirement are discussed in Section 7.2.¶ 8.9.1. Forward and Reverse Choice Made at the SFF Consider the topology shown in Figure 12. There are three SFFs arranged neatly in a line, and the middle one (SFF2) supports three SFIs all of SFT 42. These three instances can be used by SFF2 to load balance so that no one instance is swamped.¶ ------ ------ ------ ------ ------ | SFI | | SFIa | | SFIb | | SFIc | | SFI | |SFT=41| |SFT=42| |SFT=42| |SFT=42| |SFT=43| ------ ------\\ ------ /------ ------ \\ \\ | / / --------- --------- --------- ---------- | SFF1 | | SFF2 | | SFF3 | --> | |..|192.0.2.1|...|192.0.2.2|...|192.0.2.3|--> --> |Classifier| --------- --------- --------- | | ---------- Figure 12: Example Where Choice Is Made at the SFF This leads to the following SFIRs being advertised.¶ RD = 192.0.2.1/11, SFT = 41 RD = 192.0.2.2/11, SFT = 42 (for SFIa) RD = 192.0.2.2/12, SFT = 42 (for SFIb) RD = 192.0.2.2/13, SFT = 42 (for SFIc) RD = 192.0.2.3/11, SFT = 43 ¶ The controller can create a single forward SFP (SFP12), giving SFF2 the choice of which SFI to use to provide a function of SFT 42, as follows. The load-balancing choice between the three available SFIs is assumed to be within the capabilities of the SFF, and if the SFs are stateful, it is assumed that the SFF knows this and arranges load balancing in a stable, flow-dependent way.¶ SFP12: RD = 198.51.100.1/112, SPI = 26, Assoc-Type = 1, Assoc-RD = 198.51.100.1/113, Assoc-SPI = 27, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, {RD = 192.0.2.2/11, 192.0.2.2/12, 192.0.2.2/13 }], [SI = 253, SFT = 43, RD = 192.0.2.3/11] ¶ The reverse SFP (SFP13) in this case may also be created as shown below, using association with the forward SFP and giving the load-balancing choice to SFF2. This is safe, even in the case that the SFs of Type 42 are stateful, because SFF2 is doing the load balancing in both directions and can apply the same algorithm to ensure that packets associated with the same flow use the same SFI regardless of the direction of travel.¶ SFP13: RD = 198.51.100.1/113, SPI = 27, Assoc-Type = 1, Assoc-RD = 198.51.100.1/112, Assoc-SPI = 26, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, {RD = 192.0.2.2/11, 192.0.2.2/12, 192.0.2.2/13 }], [SI = 253, SFT = 41, RD = 192.0.2.1/11] ¶ How an SFF knows that an attached SFI is stateful is out of the scope of this document. It is assumed that this will form part of the process by which SFIs are registered as local to SFFs. Section 7.2 provides additional observations about the coordination of the use of stateful SFIs in the case of bidirectional SFPs.¶ In general, the problems of load balancing and the selection of the same SFIs in both directions of a bidirectional SFP can be addressed by using sufficiently precisely specified SFPs (specifying the exact SFIs to use) and suitable programming of the classifiers at each end of the SFPs to make sure that the matching pair of SFPs are used.¶ 8.9.2. Parallel End-to-End SFPs with Shared SFF The mechanism described in Section 8.9.1 might not be desirable because of the functional assumptions it places on SFF2 to be able to load balance with suitable flow identification, stability, and equality in both directions. Instead, it may be desirable to place the responsibility for flow classification in the classifier and let it determine load balancing with the implied choice of SFIs.¶ Consider the network graph as shown in Figure 12 and with the same set of SFIRs as listed in Section 8.9.1. In this case, the controller could specify three forward SFPs with their corresponding associated reverse SFPs. Each bidirectional pair of SFPs uses a different SFI for the SF of Type 42. The controller can instruct the classifier how to place traffic on the three bidirectional SFPs, or it can treat them as a group, leaving the classifier responsible for balancing the load.¶ SFP14: RD = 198.51.100.1/114, SPI = 28, Assoc-Type = 1, Assoc-RD = 198.51.100.1/117, Assoc-SPI = 31, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.2/11], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP15: RD = 198.51.100.1/115, SPI = 29, Assoc-Type = 1, Assoc-RD = 198.51.100.1/118, Assoc-SPI = 32, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.2/12], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP16: RD = 198.51.100.1/116, SPI = 30, Assoc-Type = 1, Assoc-RD = 198.51.100.1/119, Assoc-SPI = 33, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.2/13], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP17: RD = 198.51.100.1/117, SPI = 31, Assoc-Type = 1, Assoc-RD = 198.51.100.1/114, Assoc-SPI = 28, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.2/11], [SI = 253, SFT = 41, RD = 192.0.2.1/11] SFP18: RD = 198.51.100.1/118, SPI = 32, Assoc-Type = 1, Assoc-RD = 198.51.100.1/115, Assoc-SPI = 29, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.2/12], [SI = 253, SFT = 41, RD = 192.0.2.1/11] SFP19: RD = 198.51.100.1/119, SPI = 33, Assoc-Type = 1, Assoc-RD = 198.51.100.1/116, Assoc-SPI = 30, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.2/13], [SI = 253, SFT = 41, RD = 192.0.2.1/11] ¶ 8.9.3. Parallel End-to-End SFPs with Separate SFFs While the examples in Sections 8.9.1 and 8.9.2 place the choice of SFI as subtended from the same SFF, it is also possible that the SFIs are each subtended from a different SFF, as shown in Figure 13. In this case, it is harder to coordinate the choices for forward and reverse paths without some form of coordination between SFF1 and SFF3. Therefore, it would be normal to consider end-to-end parallel SFPs, as described in Section 8.9.2.¶ ------ | SFIa | |SFT=42| ------ ------ | | SFI | --------- |SFT=41| | SFF5 | ------ ..|192.0.2.5|.. | ..: --------- :.. ---------.: :.--------- ---------- | SFF1 | --------- | SFF3 | --> | |..|192.0.2.1|....| SFF6 |....|192.0.2.3| --> --> |Classifier| ---------: |192.0.2.6| :--------- | | : --------- : | ---------- : | : ------ : ------ : | SFI | :.. | SFIb | ..: |SFT=43| :.. |SFT=42| ..: ------ : ------ : :.---------.: | SFF7 | |192.0.2.7| --------- | ------ | SFIc | |SFT=42| ------ Figure 13: Second Example with Parallel End-to-End SFPs In this case, five SFIRs are advertised as follows:¶ RD = 192.0.2.1/11, SFT = 41 RD = 192.0.2.5/11, SFT = 42 (for SFIa) RD = 192.0.2.6/11, SFT = 42 (for SFIb) RD = 192.0.2.7/11, SFT = 42 (for SFIc) RD = 192.0.2.3/11, SFT = 43 ¶ In this case, the controller could specify three forward SFPs with their corresponding associated reverse SFPs. Each bidirectional pair of SFPs uses a different SFF and SFI for the middle hop (for an SF of Type 42). The controller can instruct the classifier how to place traffic on the three bidirectional SFPs, or it can treat them as a group, leaving the classifier responsible for balancing the load.¶ SFP20: RD = 198.51.100.1/120, SPI = 34, Assoc-Type = 1, Assoc-RD = 198.51.100.1/123, Assoc-SPI = 37, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.5/11], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP21: RD = 198.51.100.1/121, SPI = 35, Assoc-Type = 1, Assoc-RD = 198.51.100.1/124, Assoc-SPI = 38, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.6/11], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP22: RD = 198.51.100.1/122, SPI = 36, Assoc-Type = 1, Assoc-RD = 198.51.100.1/125, Assoc-SPI = 39, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.7/11], [SI = 253, SFT = 43, RD = 192.0.2.3/11] SFP23: RD = 198.51.100.1/123, SPI = 37, Assoc-Type = 1, Assoc-RD = 198.51.100.1/120, Assoc-SPI = 34, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.5/11], [SI = 253, SFT = 41, RD = 192.0.2.1/11] SFP24: RD = 198.51.100.1/124, SPI = 38, Assoc-Type = 1, Assoc-RD = 198.51.100.1/121, Assoc-SPI = 35, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.6/11], [SI = 253, SFT = 41, RD = 192.0.2.1/11] SFP25: RD = 198.51.100.1/125, SPI = 39, Assoc-Type = 1, Assoc-RD = 198.51.100.1/122, Assoc-SPI = 36, [SI = 255, SFT = 43, RD = 192.0.2.3/11], [SI = 254, SFT = 42, RD = 192.0.2.7/11], [SI = 253, SFT = 41, RD = 192.0.2.1/11] ¶ 8.9.4. Parallel SFPs Downstream of the Choice The mechanism of parallel SFPs demonstrated in Section 8.9.3 is perfectly functional and may be practical in many environments. However, there may be scaling concerns because of the large amount of state (knowledge of SFPs -- i.e., SFPR advertisements retained) if there is a very large number of possible SFIs (for example, tens of instances of the same stateful SF) or if there are multiple choices of stateful SF along a path. This situation may be mitigated using SFP fragments that are combined to form the end-to-end SFPs.¶ The example presented here is necessarily simplistic but should convey the basic principle. The example presented in Figure 14 is similar to that in Section 8.9.3 but with an additional first hop.¶ ------ | SFIa | |SFT=43| ------ ------ ------ | | SFI | | SFI | --------- |SFT=41| |SFT=42| | SFF5 | ------ ------ ..|192.0.2.5|.. | | ..: --------- :.. --------- ---------.: :.--------- ------ | SFF1 | | SFF2 | --------- | SFF3 | -->|Class-|.|192.0.2.1|.|192.0.2.2|....| SFF6 |....|192.0.2.3|--> -->| ifier| --------- ---------: |192.0.2.6| :--------- ------ : --------- : | : | : ------ : ------ : | SFI | :.. | SFIb | ..: |SFT=44| :.. |SFT=43| ..: ------ : ------ : :.---------.: | SFF7 | |192.0.2.7| --------- | ------ | SFIc | |SFT=43| ------ Figure 14: Example with Parallel SFPs Downstream of Choice The six SFIs are advertised as follows:¶ RD = 192.0.2.1/11, SFT = 41 RD = 192.0.2.2/11, SFT = 42 RD = 192.0.2.5/11, SFT = 43 (for SFIa) RD = 192.0.2.6/11, SFT = 43 (for SFIb) RD = 192.0.2.7/11, SFT = 43 (for SFIc) RD = 192.0.2.3/11, SFT = 44 ¶ SFF2 is the point at which a load-balancing choice must be made. So \"tail-end\" SFPs are constructed as follows. Each takes in a different SFF that provides access to an SF of Type 43.¶ SFP26: RD = 198.51.100.1/126, SPI = 40, Assoc-Type = 1, Assoc-RD = 198.51.100.1/130, Assoc-SPI = 44, [SI = 255, SFT = 43, RD = 192.0.2.5/11], [SI = 254, SFT = 44, RD = 192.0.2.3/11] SFP27: RD = 198.51.100.1/127, SPI = 41, Assoc-Type = 1, Assoc-RD = 198.51.100.1/131, Assoc-SPI = 45, [SI = 255, SFT = 43, RD = 192.0.2.6/11], [SI = 254, SFT = 44, RD = 192.0.2.3/11] SFP28: RD = 198.51.100.1/128, SPI = 42, Assoc-Type = 1, Assoc-RD = 198.51.100.1/132, Assoc-SPI = 46, [SI = 255, SFT = 43, RD = 192.0.2.7/11], [SI = 254, SFT = 44, RD = 192.0.2.3/11] ¶ Now an end-to-end SFP with load-balancing choice can be constructed as follows. The choice made by SFF2 is expressed in terms of entering one of the three \"tail-end\" SFPs.¶ SFP29: RD = 198.51.100.1/129, SPI = 43, [SI = 255, SFT = 41, RD = 192.0.2.1/11], [SI = 254, SFT = 42, RD = 192.0.2.2/11], [SI = 253, {SFT = 1, RD = {SPI=40, SI=255, Rsv=0}, RD = {SPI=41, SI=255, Rsv=0}, RD = {SPI=42, SI=255, Rsv=0} } ] ¶ Now, despite the load-balancing choice being made elsewhere than at the initial classifier, it is possible for the reverse SFPs to be well constructed without any ambiguity. The three reverse paths appear as follows.¶ SFP30: RD = 198.51.100.1/130, SPI = 44, Assoc-Type = 1, Assoc-RD = 198.51.100.1/126, Assoc-SPI = 40, [SI = 255, SFT = 44, RD = 192.0.2.4/11], [SI = 254, SFT = 43, RD = 192.0.2.5/11], [SI = 253, SFT = 42, RD = 192.0.2.2/11], [SI = 252, SFT = 41, RD = 192.0.2.1/11] SFP31: RD = 198.51.100.1/131, SPI = 45, Assoc-Type = 1, Assoc-RD = 198.51.100.1/127, Assoc-SPI = 41, [SI = 255, SFT = 44, RD = 192.0.2.4/11], [SI = 254, SFT = 43, RD = 192.0.2.6/11], [SI = 253, SFT = 42, RD = 192.0.2.2/11], [SI = 252, SFT = 41, RD = 192.0.2.1/11] SFP32: RD = 198.51.100.1/132, SPI = 46, Assoc-Type = 1, Assoc-RD = 198.51.100.1/128, Assoc-SPI = 42, [SI = 255, SFT = 44, RD = 192.0.2.4/11], [SI = 254, SFT = 43, RD = 192.0.2.7/11], [SI = 253, SFT = 42, RD = 192.0.2.2/11], [SI = 252, SFT = 41, RD = 192.0.2.1/11] ¶ 8.10. Examples Using IPv6 Addressing This section provides several examples using IPv6 addressing. As will be seen from the examples, there is nothing special or clever about using IPv6 addressing rather than IPv4 addressing.¶ The reference network for these IPv6 examples is based on that described at the top of Section 8 and shown in Figure 11.¶ Assume we have a service function overlay network with four SFFs (SFF1, SFF3, SFF3, and SFF4). The SFFs have addresses in the underlay network as follows:¶ SFF1 2001:db8::192:0:2:1 SFF2 2001:db8::192:0:2:2 SFF3 2001:db8::192:0:2:3 SFF4 2001:db8::192:0:2:4 ¶ Each SFF provides access to some SFIs from the four service function types SFT=41, SFT=42, SFT=43, and SFT=44, just as before:¶ SFF1 SFT=41 and SFT=42 SFF2 SFT=41 and SFT=43 SFF3 SFT=42 and SFT=44 SFF4 SFT=43 and SFT=44 ¶ The service function network also contains a controller with address 2001:db8::198:51:100:1.¶ This example service function overlay network is shown in Figure 15.¶ ------------------------ | Controller | | 2001:db8::198:51:100:1 | ------------------------ ------ ------ ------ ------ | SFI | | SFI | | SFI | | SFI | |SFT=41| |SFT=42| |SFT=41| |SFT=43| ------ ------ ------ ------ \\ / \\ / ------------------- ------------------- | SFF1 | | SFF2 | |2001:db8::192:0:2:1| |2001:db8::192:0:2:2| ------------------- ------------------- ---------- Packet --> | | --> Flows --> |Classifier| -->Dest | | --> ---------- ------------------- ------------------- | SFF3 | | SFF4 | |2001:db8::192:0:2:3| |2001:db8::192:0:2:4| ------------------- ------------------- / \\ / \\ ------ ------ ------ ------ | SFI | | SFI | | SFI | | SFI | |SFT=42| |SFT=44| |SFT=43| |SFT=44| ------ ------ ------ ------ Figure 15: Example Service Function Overlay Network The SFFs advertise routes to the SFIs they support. These advertisements contain RDs that are set according to the network operator's configuration model. Note that in an IPv6 network, the RD is not large enough to contain the full IPv6 address, as only six octets are available. So, in all of these IPv6 examples, we use RDs of Type 1 such that the available six octets are partitioned as four octets for an IPv4 address of the advertising SFF, and two octets that are a local index of the SFI. Furthermore, we have chosen an IPv6 addressing scheme so that the low-order four octets of the IPv6 address match an IPv4 address of the advertising node. This scheme is chosen purely for convenience of documentation, and an operator is totally free to use any other scheme so long as it conforms to the definitions of SFIR and SFPR in Sections 3.1 and 3.2.¶ Observant readers will notice that this makes the BGP advertisements shown in these examples exactly the same as in the previous examples. All that is different is that the advertising SFFs and controller have IPv6 addresses.¶ Thus, we see the following SFIRs advertised.¶ The SFFs advertise routes to the SFIs they support. So we see the following SFIRs:¶ RD = 192.0.2.1/1, SFT = 41 RD = 192.0.2.1/2, SFT = 42 RD = 192.0.2.2/1, SFT = 41 RD = 192.0.2.2/2, SFT = 43 RD = 192.0.2.3/7, SFT = 42 RD = 192.0.2.3/8, SFT = 44 RD = 192.0.2.4/5, SFT = 43 RD = 192.0.2.4/6, SFT = 44 ¶ Note that the addressing used for communicating between SFFs is taken from the tunnel encapsulation attribute of the SFIR and not from the SFIR-RD.¶ 8.10.1. Example Explicit SFP with No Choices Consider the following SFPR similar to that in Section 8.1.¶ SFP1: RD = 198.51.100.1/101, SPI = 15, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, RD = 192.0.2.2/2] ¶ The SFP consists of an SF of Type 41 located at SFF1, followed by an SF of Type 43 located at SFF2. This path is fully explicit, and each SFF is offered no choice in forwarding a packet along the path.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (15). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 has no flexibility in the choice of SFF to support the next-hop SFI and will forward the packet to SFF2, which will send the packets to the SFI that supports SFT 43 before forwarding the packets to their destinations.¶ 8.10.2. Example SFP with Choice of SFIs SFP2: RD = 198.51.100.1/102, SPI = 16, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 43, {RD = 192.0.2.2/2, RD = 192.0.2.4/5 } ] ¶ In this example, like that in Section 8.2, the path also consists of an SF of Type 41 located at SFF1, and this is followed by an SF of Type 43; but in this case, the SI = 250 contains a choice between the SFI located at SFF2 and the SFI located at SFF4.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (16). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a choice of next-hop SFFs to execute the next hop in the path. It can either forward packets to SFF2 or SFF4 to execute a function of Type 43. It uses its local load-balancing algorithm to make this choice. The chosen SFF will send the packets to the SFI that supports SFT 43 before forwarding the packets to their destinations.¶ 8.10.3. Example SFP with Open Choice of SFIs SFP3: RD = 198.51.100.1/103, SPI = 17, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, SFT = 44, RD = 0] ¶ In this example, like that in Section 8.3, the path also consists of an SF of Type 41 located at SFF1, and this is followed by an SI with an RD of zero and SF of Type 44. This means that a choice can be made between any SFF that supports an SFI of Type 44.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (17). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a free choice of next-hop SFFs to execute the next hop in the path, selecting between all SFFs that support SFs of Type 44. Looking at the SFIRs it has received, SFF1 knows that SF Type 44 is supported by SFF3 and SFF4. SFF1 uses its local load-balancing algorithm to make this choice. The chosen SFF will send the packets to the SFI that supports SFT 44 before forwarding the packets to their destinations.¶ 8.10.4. Example SFP with Choice of SFTs SFP4: RD = 198.51.100.1/104, SPI = 18, [SI = 255, SFT = 41, RD = 192.0.2.1/1], [SI = 250, {SFT = 43, RD = 192.0.2.2/2, SFT = 44, RD = 192.0.2.3/8 } ] ¶ This example, similar to that in Section 8.4, provides a choice of SF type in the second hop in the path. The SI of 250 indicates a choice between SF Type 43 located through SF2 and SF Type 44 located at SF3.¶ SFF1 will receive packets on the path from the classifier and will identify the path from the SPI (18). The initial SI will be 255, and so SFF1 will deliver the packets to the SFI for SFT 41.¶ When the packets are returned to SFF1 by the SFI, the SI will be decreased to 250 for the next hop. SFF1 now has a free choice of next-hop SFFs to execute the next hop in the path, selecting between all SFFs that support an SF of Type 43 and SFF3, which supports an SF of Type 44. These may be completely different functions that are to be executed dependent on specific conditions, or they may be similar functions identified with different type identifiers (such as firewalls from different vendors). SFF1 uses its local policy and load-balancing algorithm to make this choice, and it may use additional information passed back from the local SFI to help inform its selection. The chosen SFF will send the packets to the SFI that supports the chosen SFT before forwarding the packets to their destinations.¶ 9. Security Considerations The mechanisms in this document use BGP for the control plane. Hence, techniques such as those discussed in [RFC5925] can be used to help authenticate BGP sessions and, thus, the messages between BGP peers, making it harder to spoof updates (which could be used to install bogus SFPs or advertise false SIs) or withdrawals.¶ Further discussion of security considerations for BGP may be found in the BGP specification itself [RFC4271] and the security analysis for BGP [RFC4272]. [RFC5925] contains a discussion of the inappropriateness of the TCP MD5 signature option for protecting BGP sessions. [RFC6952] includes an analysis of BGP keying and authentication issues.¶ Additionally, this document depends on other documents that specify BGP Multiprotocol Extensions and the documents that define the attributes that are carried by BGP UPDATEs of the SFC AFI/SAFI. [RFC4760] observes that the use of AFI/SAFI does not change the underlying security issues inherent in the existing BGP. Relevant additional security measures are considered in [RFC9012].¶ This document does not fundamentally change the security behavior of BGP deployments, which depend considerably on the network operator's perception of risk in their network. It may be observed that the application of the mechanisms described in this document is scoped to a single domain, as implied by [RFC8300] and noted in Section 2.1 of this document. Applicability of BGP within a single domain may enable a network operator to make easier and more consistent decisions about what security measures to apply, and the domain boundary, which BGP enforces by definition, provides a safeguard that prevents leakage of SFC programming in either direction at the boundary.¶ Service function chaining provides a significant attack opportunity; packets can be diverted from their normal paths through the network, packets can be made to execute unexpected functions, and the functions that are instantiated in software can be subverted. However, this specification does not change the existence of service function chaining, and security issues specific to service function chaining are covered in [RFC7665] and [RFC8300].¶ This document defines a control plane for service function chaining. Clearly, this provides an attack vector for a service function chaining system, as an attack on this control plane could be used to make the system misbehave. Thus, the security of the BGP system is critically important to the security of the whole service function chaining system. The control plane mechanisms are very similar to those used for BGP/MPLS IP VPNs as described in [RFC4364], and so the security considerations in that document (Section 13) provide good guidance for securing service function chaining systems reliant on this specification. Of particular relevance is the need to securely distinguish between messages intended for the control of different SFC overlays, which is similar to the need to distinguish between different VPNs. Section 19 of [RFC7432] also provides useful guidance on the use of BGP in a similar environment.¶ Note that a component of a service function chaining system that uses the procedures described in this document also requires communications between a controller and the service function chaining network elements (specifically the SFFs and classifiers). This communication covers instructing the classifiers using BGP mechanisms (see Section 7.4); therefore, the use of BGP security is strongly recommended. But it also covers other mechanisms for programming the classifier and instructing the SFFs and SFs (for example, to bind SFs to an SFF, and to cause the establishment of tunnels between SFFs). This document does not cover these latter mechanisms, and so their security is out of scope, but it should be noted that these communications provide an attack vector on the service function chaining system, and so attention must be paid to ensuring that they are secure.¶ There is an intrinsic assumption in service function chaining systems that nodes that announce support for specific SFs actually offer those functions and that SFs are not, themselves, attacked or subverted. This is particularly important when the SFs are implemented as software that can be updated. Protection against this sort of concern forms part of the security of any service function chaining system and so is outside the scope of the control plane mechanisms described in this document.¶ Similarly, there is a vulnerability if a rogue or subverted controller announces SFPs, especially if that controller \"takes over\" an existing SFP and changes its contents. This corresponds to a rogue BGP speaker entering a routing system, or even a Route Reflector becoming subverted. Protection mechanisms, as above, include securing BGP sessions and protecting software loads on the controllers.¶ In an environment where there is concern that rogue controllers might be introduced to the network and inject false SFPRs or take over and change existing SFPRs, it is RECOMMENDED that each SFF and classifier be configured with the identities of authorized controllers. Thus, the announcement of an SFPR by any other BGP peer would be rejected.¶ Lastly, note that Section 3.2.2 makes two operational suggestions that have implications for the stability and security of the mechanisms described in this document:¶ That modifications to active SFPs not be made.¶ That SPIs not be immediately reused.¶ 10. IANA Considerations 10.1. New BGP AF/SAFI IANA maintains the \"Address Family Numbers\" registry. IANA has assigned a new Address Family Number from the \"Standards Action\" range called \"BGP SFC\" (31), with this document as a reference.¶ IANA maintains the \"Subsequent Address Family Identifiers (SAFI) Parameters\" registry. IANA has assigned a new SAFI value from the \"Standards Action\" range called \"BGP SFC\" (9), with this document as a reference.¶ 10.2. \"SFP attribute\" BGP Path Attribute IANA maintains a registry of \"Border Gateway Protocol (BGP) Parameters\" with a subregistry of \"BGP Path Attributes\". IANA has assigned a new Path attribute called \"SFP attribute\" with a value of 37 and with this document as a reference.¶ 10.3. \"SFP Attribute TLVs\" Registry IANA maintains a registry of \"Border Gateway Protocol (BGP) Parameters\". IANA has created a new subregistry called the \"SFP Attribute TLVs\" registry.¶ Valid values are in the range 0 to 65535.¶ Values 0 and 65535 are marked \"Reserved\".¶ Values 1 through 65534 are to be assigned according to the \"First Come First Served\" policy [RFC8126].¶ This document is a reference for this registry.¶ The registry tracks:¶ Type¶ Name¶ Reference¶ Registration Date¶ The registry is initially populated as follows:¶ Table 1: SFP Attribute TLVs Subregistry Initial Contents Type Name Reference Registration Date 1 Association TLV RFC 9015 2020-09-02 2 Hop TLV RFC 9015 2020-09-02 3 SFT TLV RFC 9015 2020-09-02 4 MPLS Swapping/Stacking RFC 9015 2020-09-02 5 SFP Traversal With MPLS RFC 9015 2020-09-02 10.4. \"SFP Association Type\" Registry IANA maintains a registry of \"Border Gateway Protocol (BGP) Parameters\". IANA has created a new subregistry called the \"SFP Association Type\" registry.¶ Valid values are in the range 0 to 65535.¶ Values 0 and 65535 are marked \"Reserved\".¶ Values 1 through 65534 are assigned according to the \"First Come First Served\" policy [RFC8126].¶ This document is given as a reference for this registry.¶ The new registry tracks:¶ Association Type¶ Name¶ Reference¶ Registration Date¶ The registry should initially be populated as follows:¶ Table 2: SFP Association Type Subregistry Initial Contents Association Type Name Reference Date 1 Bidirectional SFP RFC 9015 2020-09-02 10.5. \"Service Function Chaining Service Function Types\" Registry IANA has created a new top-level registry called \"Service Function Chaining Service Function Types\".¶ Valid values are in the range 0 to 65535.¶ Values 0 and 65535 are marked \"Reserved\".¶ Values 1 through 31 are to be assigned by \"Standards Action\" [RFC8126] and are referred to as the \"special-purpose SFT values\".¶ Values 32 through 64495 are to be assigned according to the \"First Come First Served\" policy [RFC8126].¶ Values 64496 through 65534 are for Private Use and are not to be recorded by IANA.¶ This document is given as a reference for this registry.¶ The registry tracks:¶ Value¶ Name¶ Reference¶ Registration Date¶ The registry is initially populated as follows.¶ Table 3: Service Function Chaining Service Function Types Registry Initial Contents Value Name Reference Date 0 Reserved RFC 9015 2020-09-02 1 Change Sequence RFC 9015 2020-09-02 2-31 Unassigned 32 Classifier RFC 9015, [BGP-LS-SR] 2020-09-02 33 Firewall RFC 9015, [BGP-LS-SR] 2020-09-02 34 Load balancer RFC 9015, [BGP-LS-SR] 2020-09-02 35 Deep packet inspection engine RFC 9015, [BGP-LS-SR] 2020-09-02 36 Penalty box RFC 9015, [RFC8300] 2020-09-02 37 WAN accelerator RFC 9015, [RFC7665], [RFC8300] 2020-09-02 38 Application accelerator RFC 9015, [RFC7665] 2020-09-02 39 TCP optimizer RFC 9015, [RFC7665] 2020-09-02 40 Network Address Translator RFC 9015, [RFC7665] 2020-09-02 41 NAT44 RFC 9015, [RFC7665], [RFC3022] 2020-09-02 42 NAT64 RFC 9015, [RFC7665], [RFC6146] 2020-09-02 43 NPTv6 RFC 9015, [RFC7665], [RFC6296] 2020-09-02 44 Lawful intercept RFC 9015, [RFC7665] 2020-09-02 45 HOST_ID injection RFC 9015, [RFC7665] 2020-09-02 46 HTTP header enrichment RFC 9015, [RFC7665] 2020-09-02 47 Caching engine RFC 9015, [RFC7665] 2020-09-02 48-64495 Unassigned 64496-65534 Reserved for Private Use 65535 Reserved, not to be allocated RFC 9015 2020-09-02 10.6. Flow Specification for SFC Classifiers IANA maintains a registry of \"Border Gateway Protocol (BGP) Extended Communities\" with a subregistry of \"Generic Transitive Experimental Use Extended Community Sub-Types\". IANA has assigned a new subtype as follows:¶ \"Flow Specification for SFC Classifiers\" with a value of 0x0d and with this document as the reference.¶ 10.7. New BGP Transitive Extended Community Type IANA maintains a registry of \"Border Gateway Protocol (BGP) Extended Communities\" with a subregistry of \"BGP Transitive Extended Community Types\". IANA has assigned a new type as follows:¶ SFC (Sub-Types are defined in the \"SFC Extended Community Sub-Types\" registry) with a value of 0x0b and with this document as the reference.¶ 10.8. \"SFC Extended Community Sub-Types\" Registry IANA maintains a registry of \"Border Gateway Protocol (BGP) Parameters\". IANA has created a new subregistry called the \"SFC Extended Community Sub-Types\" registry.¶ IANA has included the following note:¶ This registry contains values of the second octet (the \"Sub-Type\" field) of an extended community when the value of the first octet (the \"Type\" field) is set to 0x0b.¶ The allocation policy for this registry is First Come First Served.¶ Valid values are 0 to 255. The value 0 is reserved and should not be allocated.¶ IANA has populated this registry with the following entries:¶ Table 4: SFC Extended Community Sub-Types Subregistry Initial Contents Sub-Type Value Name Reference Date 0 Reserved RFC 9015 1 SFIR pool identifier RFC 9015 2020-09-02 2 MPLS Label Stack Mixed Swapping/Stacking Labels RFC 9015 2020-09-02 3-255 Unassigned 10.9. New SPI/SI Representation Sub-TLV IANA has assigned a codepoint from the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry for the \"SPI/SI Representation Sub-TLV\" with a value of 16 and with this document as the reference.¶ 10.10. \"SFC SPI/SI Representation Flags\" Registry IANA maintains the \"BGP Tunnel Encapsulation Attribute Sub-TLVs\" registry and has created an associated registry called the \"SFC SPI/SI Representation Flags\" registry.¶ Bits are to be assigned by Standards Action. The field is 16 bits long, and bits are counted from the most significant bit as bit zero.¶ IANA has populated the registry as follows:¶ Table 5: SFC SPI/SI Representation Flags Registry Initial Contents Value Name Reference 0 NSH data plane RFC 9015 1 MPLS data plane RFC 9015 11. References 11.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4271] Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A Border Gateway Protocol 4 (BGP-4)\", RFC 4271, DOI 10.17487/RFC4271, January 2006, <https://www.rfc-editor.org/info/rfc4271>. [RFC4360] Sangli, S., Tappan, D., and Y. Rekhter, \"BGP Extended Communities Attribute\", RFC 4360, DOI 10.17487/RFC4360, February 2006, <https://www.rfc-editor.org/info/rfc4360>. [RFC4364] Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private Networks (VPNs)\", RFC 4364, DOI 10.17487/RFC4364, February 2006, <https://www.rfc-editor.org/info/rfc4364>. [RFC4760] Bates, T., Chandra, R., Katz, D., and Y. Rekhter, \"Multiprotocol Extensions for BGP-4\", RFC 4760, DOI 10.17487/RFC4760, January 2007, <https://www.rfc-editor.org/info/rfc4760>. [RFC7432] Sajassi, A., Ed., Aggarwal, R., Bitar, N., Isaac, A., Uttaro, J., Drake, J., and W. Henderickx, \"BGP MPLS-Based Ethernet VPN\", RFC 7432, DOI 10.17487/RFC7432, February 2015, <https://www.rfc-editor.org/info/rfc7432>. [RFC7606] Chen, E., Ed., Scudder, J., Ed., Mohapatra, P., and K. Patel, \"Revised Error Handling for BGP UPDATE Messages\", RFC 7606, DOI 10.17487/RFC7606, August 2015, <https://www.rfc-editor.org/info/rfc7606>. [RFC7665] Halpern, J., Ed. and C. Pignataro, Ed., \"Service Function Chaining (SFC) Architecture\", RFC 7665, DOI 10.17487/RFC7665, October 2015, <https://www.rfc-editor.org/info/rfc7665>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8300] Quinn, P., Ed., Elzur, U., Ed., and C. Pignataro, Ed., \"Network Service Header (NSH)\", RFC 8300, DOI 10.17487/RFC8300, January 2018, <https://www.rfc-editor.org/info/rfc8300>. [RFC8595] Farrel, A., Bryant, S., and J. Drake, \"An MPLS-Based Forwarding Plane for Service Function Chaining\", RFC 8595, DOI 10.17487/RFC8595, June 2019, <https://www.rfc-editor.org/info/rfc8595>. [RFC8596] Malis, A., Bryant, S., Halpern, J., and W. Henderickx, \"MPLS Transport Encapsulation for the Service Function Chaining (SFC) Network Service Header (NSH)\", RFC 8596, DOI 10.17487/RFC8596, June 2019, <https://www.rfc-editor.org/info/rfc8596>. [RFC8955] Loibl, C., Hares, S., Raszuk, R., McPherson, D., and M. Bacher, \"Dissemination of Flow Specification Rules\", RFC 8955, DOI 10.17487/RFC8955, December 2020, <https://www.rfc-editor.org/info/rfc8955>. [RFC9012] Patel, K., Van de Velde, G., Sangli, S., and J. Scudder, \"The BGP Tunnel Encapsulation Attribute\", RFC 9012, DOI 10.17487/RFC9012, April 2021, <https://www.rfc-editor.org/info/rfc9012>. 11.2. Informative References [BGP-LS-SR] Dawra, G., Filsfils, C., Talaulikar, K., Clad, F., Bernier, D., Uttaro, J., Decraene, B., Elmalky, H., Xu, X., Guichard, J., and C. Li, \"BGP-LS Advertisement of Segment Routing Service Segments\", Work in Progress, Internet-Draft, draft-dawra-idr-bgp-ls-sr-service-segments-05, 15 February 2021, <https://tools.ietf.org/html/draft-dawra-idr-bgp-ls-sr-service-segments-05>. [RFC3022] Srisuresh, P. and K. Egevang, \"Traditional IP Network Address Translator (Traditional NAT)\", RFC 3022, DOI 10.17487/RFC3022, January 2001, <https://www.rfc-editor.org/info/rfc3022>. [RFC4272] Murphy, S., \"BGP Security Vulnerabilities Analysis\", RFC 4272, DOI 10.17487/RFC4272, January 2006, <https://www.rfc-editor.org/info/rfc4272>. [RFC5925] Touch, J., Mankin, A., and R. Bonica, \"The TCP Authentication Option\", RFC 5925, DOI 10.17487/RFC5925, June 2010, <https://www.rfc-editor.org/info/rfc5925>. [RFC6146] Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful NAT64: Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146, April 2011, <https://www.rfc-editor.org/info/rfc6146>. [RFC6296] Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix Translation\", RFC 6296, DOI 10.17487/RFC6296, June 2011, <https://www.rfc-editor.org/info/rfc6296>. [RFC6952] Jethanandani, M., Patel, K., and L. Zheng, \"Analysis of BGP, LDP, PCEP, and MSDP Issues According to the Keying and Authentication for Routing Protocols (KARP) Design Guide\", RFC 6952, DOI 10.17487/RFC6952, May 2013, <https://www.rfc-editor.org/info/rfc6952>. [RFC7498] Quinn, P., Ed. and T. Nadeau, Ed., \"Problem Statement for Service Function Chaining\", RFC 7498, DOI 10.17487/RFC7498, April 2015, <https://www.rfc-editor.org/info/rfc7498>. Acknowledgements Thanks to Tony Przygienda, Jeff Haas, and Andy Malis for helpful comments, and to Joel Halpern for discussions that improved this document. Yuanlong Jiang provided a useful review and caught some important issues. Stephane Litkowski did an exceptionally good and detailed Document Shepherd review.¶ Andy Malis contributed text that formed the basis of Section 7.7.¶ Brian Carpenter and Martin Vigoureux provided useful reviews during IETF Last Call. Thanks also to Sheng Jiang, Med Boucadair, Ravi Singh, Benjamin Kaduk, Roman Danyliw, Adam Roach, Alvaro Retana, Barry Leiba, and Murray Kucherawy for review comments. Ketan Talaulikar provided helpful discussion of the SFT codepoint registry. Ron Bonica kept us honest on the difference between an RD and an RT; Benjamin Kaduk kept us on message about the difference between an RD and an Extended Community.¶ Contributors Stuart Mackie Juniper Networks Email: wsmackie@juinper.net Keyur Patel Arrcus, Inc. Email: keyur@arrcus.com Avinash Lingala AT&T Email: ar977m@att.com Authors' Addresses Adrian Farrel Old Dog Consulting Email: adrian@olddog.co.uk John Drake Juniper Networks Email: jdrake@juniper.net Eric Rosen Juniper Networks Email: erosen52@gmail.com Jim Uttaro AT&T Email: ju1738@att.com Luay Jalil Verizon Email: luay.jalil@verizon.com"
    },
    {
        "Number": "9023",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Deterministic Networking (DetNet) Data Plane: IP over IEEE 802.1 Time-Sensitive Networking (TSN)",
        "Authors": [
            "B. Varga",
            "Ed.",
            "J. Farkas",
            "A. Malis",
            "S. Bryant"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document specifies the Deterministic Networking IP data plane when operating over a Time-Sensitive Networking (TSN) sub-network. This document does not define new procedures or processes.  Whenever this document makes statements or recommendations, these are taken from normative text in the referenced RFCs.",
        "Keywords": [],
        "Content": "RFC 9023: Deterministic Networking (DetNet) Data Plane: IP over IEEE 802.1 Time‑Sensitive Networking (TSN) RFC 9023 DetNet IP over TSN June 2021 Varga, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9023 Category: Informational Published: June 2021 ISSN: 2070-1721 Authors: B. Varga, Ed. Ericsson J. Farkas Ericsson A. Malis Malis Consulting S. Bryant Futurewei Technologies RFC 9023 Deterministic Networking (DetNet) Data Plane: IP over IEEE 802.1 Time‑Sensitive Networking (TSN) Abstract This document specifies the Deterministic Networking IP data plane when operating over a Time-Sensitive Networking (TSN) sub-network. This document does not define new procedures or processes. Whenever this document makes statements or recommendations, these are taken from normative text in the referenced RFCs.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9023.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Terms Used in This Document 2.2.  Abbreviations 3.  DetNet IP Data Plane Overview 4.  DetNet IP Flows over an IEEE 802.1 TSN Sub-network 4.1.  Functions for DetNet Flow to TSN Stream Mapping 4.2.  TSN Requirements of IP DetNet Nodes 4.3.  Service Protection within the TSN Sub-network 4.4.  Aggregation during DetNet Flow to TSN Stream Mapping 5.  Management and Control Implications 6.  Security Considerations 7.  IANA Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction Deterministic Networking (DetNet) is a service that can be offered by a network to DetNet flows. DetNet provides these flows extremely low packet-loss rates and assured maximum end-to-end delivery latency. General background and concepts of DetNet can be found in the DetNet Architecture [RFC8655].¶ [RFC8939] specifies the DetNet data plane operation for IP hosts and routers that provide DetNet service to IP-encapsulated data. This document focuses on the scenario where DetNet IP nodes are interconnected by a Time-Sensitive Networking (TSN) sub-network.¶ The DetNet Architecture decomposes the DetNet-related data plane functions into two sub-layers: a service sub-layer and a forwarding sub-layer. The service sub-layer is used to provide DetNet service protection and reordering. The forwarding sub-layer is used to provide congestion protection (low loss, assured latency, and limited reordering). As described in [RFC8939], no DetNet-specific headers are added to support DetNet IP flows. So, only the forwarding sub-layer functions can be supported inside the DetNet IP domain. Service protection can be provided on a per-sub-network basis as shown here for the IEEE 802.1 TSN sub-network scenario.¶ 2. Terminology 2.1. Terms Used in This Document This document uses the terminology and concepts established in the DetNet Architecture [RFC8655]. TSN-specific terms are defined by the TSN Task Group of the IEEE 802.1 Working Group. The reader is assumed to be familiar with these documents and their terminology.¶ 2.2. Abbreviations The following abbreviations are used in this document:¶ DetNet Deterministic Networking¶ FRER Frame Replication and Elimination for Redundancy (TSN function)¶ L2 Layer 2¶ L3 Layer 3¶ TSN Time-Sensitive Networking; TSN is a Task Group of the IEEE 802.1 Working Group.¶ 3. DetNet IP Data Plane Overview [RFC8939] describes how IP is used by DetNet nodes, i.e., hosts and routers, to identify DetNet flows and provide a DetNet service. From a data plane perspective, an end-to-end IP model is followed. DetNet uses flow identification based on a \"6-tuple\", where \"6-tuple\" refers to information carried in IP- and higher-layer protocol headers as defined in [RFC8939].¶ DetNet flow aggregation may be enabled via the use of wildcards, masks, prefixes, and ranges. IP tunnels may also be used to support flow aggregation. In these cases, it is expected that DetNet-aware intermediate nodes will provide DetNet service assurance on the aggregate through resource allocation and congestion control mechanisms.¶ Congestion protection, latency control, and the resource allocation (queuing, policing, and shaping) are supported using the underlying link / sub-net-specific mechanisms. Service protections (packet-replication and packet-elimination functions) are not provided at the IP DetNet layer end to end due to the lack of unified end-to-end sequencing information that would be available for intermediate nodes. However, such service protection can be provided per underlying L2 link and per sub-network.¶ DetNet routers ensure that DetNet service requirements are met per hop by allocating local resources, by both receiving and transmitting, and by mapping the service requirements of each flow to appropriate sub-network mechanisms. Such mappings are sub-network technology specific. DetNet nodes interconnected by a TSN sub-network are the primary focus of this document. The mapping of DetNet IP flows to TSN Streams and TSN protection mechanisms are covered in Section 4.¶ 4. DetNet IP Flows over an IEEE 802.1 TSN Sub-network This section covers how DetNet IP flows operate over an IEEE 802.1 TSN sub-network. Figure 1 illustrates such a scenario where two IP (DetNet) nodes are interconnected by a TSN sub-network. Dotted lines around the Service components of the IP (DetNet) nodes indicate that they are DetNet service aware but do not perform any DetNet service sub-layer function. Node-1 is single homed and Node-2 is dual homed to the TSN sub-network, and they are treated as Talker or Listener inside the TSN sub-network. Note that from the TSN perspective, dual-homed characteristics of Talker or Listener nodes are transparent to the IP Layer.¶ IP (DetNet) IP (DetNet) Node-1 Node-2 ............ ............ <--: Service :-- DetNet flow ---: Service :--> +----------+ +----------+ |Forwarding| |Forwarding| +--------.-+ <-TSN Str-> +-.-----.--+ \\ ,-------. / / +----[ TSN Sub-]---+ / [ Network ]--------+ `-------' <----------------- DetNet IP -----------------> Figure 1: DetNet-Enabled IP Network over a TSN Sub-network At the time of this writing, the Time-Sensitive Networking (TSN) Task Group of the IEEE 802.1 Working Group have defined (and are defining) a number of amendments to [IEEE8021Q] that provide zero congestion loss and bounded latency in bridged networks. Furthermore, [IEEE8021CB] defines frame replication and elimination functions for reliability that should prove both compatible with and useful to DetNet networks. All these functions have to identify flows that require TSN treatment.¶ TSN capabilities of the TSN sub-network are made available for IP (DetNet) flows via the protocol interworking function described in Annex C.5 of [IEEE8021CB]. For example, applied on the TSN edge port it can convert an ingress unicast IP (DetNet) flow to use a specific L2 multicast destination Media Access Control (MAC) address and a VLAN in order to forward the packet through a specific path inside the bridged network. A similar interworking function pair at the other end of the TSN sub-network would restore the packet to its original L2 destination MAC address and VLAN.¶ Placement of TSN functions depends on the TSN capabilities of nodes. IP (DetNet) nodes may or may not support TSN functions. For a given TSN Stream (i.e., a mapped DetNet flow), an IP (DetNet) node is treated as a Talker or a Listener inside the TSN sub-network.¶ 4.1. Functions for DetNet Flow to TSN Stream Mapping Mapping of a DetNet IP flow to a TSN Stream is provided via the combination of a passive and an active Stream identification function that operate at the frame level (Layer 2). The passive Stream identification function is used to catch the 6-tuple of a DetNet IP flow, and the active Stream identification function is used to modify the Ethernet header according to the ID of the mapped TSN Stream.¶ Clause 6.7 of [IEEE8021CB] defines an IP Stream identification function that can be used as a passive function for IP DetNet flows using UDP or TCP. Clause 6.8 of [IEEEP8021CBdb] defines a Mask-and-Match Stream identification function that can be used as a passive function for any IP DetNet flows.¶ Clause 6.6 of [IEEE8021CB] defines an Active Destination MAC and VLAN Stream identification function that can replace some Ethernet header fields: (1) the destination MAC address, (2) the VLAN-ID, and (3) priority parameters with alternate values. Replacement is provided for the frame passed down the stack from the upper layers or up the stack from the lower layers.¶ Active Destination MAC and VLAN Stream identification can be used within a Talker to set flow identity or within a Listener to recover the original addressing information. It can be used also in a TSN bridge that is providing translation as a proxy service for an End System.¶ 4.2. TSN Requirements of IP DetNet Nodes This section covers the required behavior of a TSN-aware DetNet node using a TSN sub-network. The implementation of TSN packet-processing functions must be compliant with the relevant IEEE 802.1 standards.¶ From the TSN sub-network perspective, DetNet IP nodes are treated as a Talker or Listener that may be (1) TSN unaware or (2) TSN aware.¶ In cases of TSN-unaware IP DetNet nodes, the TSN relay nodes within the TSN sub-network must modify the Ethernet encapsulation of the DetNet IP flow (e.g., MAC translation, VLAN-ID setting, sequence number addition, etc.) to allow proper TSN-specific handling inside the sub-network. There are no requirements defined for TSN-unaware IP DetNet nodes in this document.¶ IP (DetNet) nodes being TSN aware can be treated as a combination of a TSN-unaware Talker/Listener and a TSN relay, as shown in Figure 2. In such cases, the IP (DetNet) node must provide the TSN sub-network-specific Ethernet encapsulation over the link(s) towards the sub-network.¶ IP (DetNet) Node <----------------------------------> ............ <--: Service :-- DetNet flow ------------------ +----------+ |Forwarding| +----------+ +---------------+ | L2 | | L2 Relay with |<--- TSN --- | | | TSN function | Stream +-----.----+ +--.------.---.-+ \\__________/ \\ \\______ \\_________ TSN-unaware Talker / TSN Bridge Listener Relay <----- TSN Sub-network ----- <------- TSN-aware Tlk/Lstn -------> Figure 2: IP (DetNet) Node with TSN Functions A TSN-aware IP (DetNet) node implementation must support the Stream identification TSN component for recognizing flows.¶ A Stream identification component must be able to instantiate the following: (1) Active Destination MAC and VLAN Stream identification, (2) IP Stream identification, (3) Mask-and-Match Stream identification, and (4) the related managed objects in Clause 9 of [IEEE8021CB] and [IEEEP8021CBdb].¶ A TSN-aware IP (DetNet) node implementation must support the Sequencing function and the Sequence encode/decode function as defined in Clauses 7.4 and 7.6 of [IEEE8021CB] if FRER is used inside the TSN sub-network.¶ The Sequence encode/decode function must support the Redundancy tag (R-TAG) format as per Clause 7.8 of [IEEE8021CB].¶ A TSN-aware IP (DetNet) node implementation must support the Stream splitting function and the Individual recovery function as defined in Clauses 7.7 and 7.5 of [IEEE8021CB] when the node is a replication or elimination point for FRER.¶ 4.3. Service Protection within the TSN Sub-network TSN Streams supporting DetNet flows may use FRER as defined in Clause 8 of [IEEE8021CB] based on the loss service requirements of the TSN Stream, which is derived from the DetNet service requirements of the DetNet mapped flow. The specific operation of FRER is not modified by the use of DetNet and follows [IEEE8021CB].¶ The FRER function and the provided service recovery are available only within the TSN sub-network, as the TSN Stream ID and the TSN sequence number are not valid outside the sub-network. An IP (DetNet) node represents an L3 border and as such, it terminates all related information elements encoded in the L2 frames.¶ 4.4. Aggregation during DetNet Flow to TSN Stream Mapping Implementations of this document shall use management and control information to map a DetNet flow to a TSN Stream. N:1 mapping (aggregating DetNet flows in a single TSN Stream) shall be supported. The management or control function that provisions flow mapping shall ensure that adequate resources are allocated and configured to provide proper service requirements of the mapped flows.¶ 5. Management and Control Implications DetNet flows and TSN Stream-mapping-related information are required only for TSN-aware IP (DetNet) nodes. From the data plane perspective, there is no practical difference based on the origin of flow-mapping-related information (management plane or control plane).¶ The following summarizes the set of information that is needed to configure DetNet IP over TSN:¶ DetNet-IP-related configuration information according to the DetNet role of the DetNet IP node, as per [RFC8939].¶ TSN-related configuration information according to the TSN role of the DetNet IP node, as per [IEEE8021Q], [IEEE8021CB], and [IEEEP8021CBdb].¶ Mapping between DetNet IP flow(s) and TSN Stream(s). DetNet IP flow identification is summarized in Section 5.1 of [RFC8939] and includes all wildcards, port ranges, and the ability to ignore specific IP fields. Information on TSN Stream identification information is defined in [IEEE8021CB] and [IEEEP8021CBdb]. Note that managed objects for TSN Stream identification can be found in [IEEEP8021CBcv].¶ This information must be provisioned per DetNet flow.¶ Mappings between DetNet and TSN management and control planes are out of scope of this document. Some of the challenges are highlighted below.¶ TSN-aware IP DetNet nodes are members of both the DetNet domain and the TSN sub-network. Within the TSN sub-network, the TSN-aware IP (DetNet) node has a TSN-aware Talker/Listener role, so TSN-specific management and control plane functionalities must be implemented. There are many similarities in the management plane techniques used in DetNet and TSN, but that is not the case for the control plane protocols. For example, RSVP-TE and the Multiple Stream Registration Protocol (MSRP) of IEEE 802.1 behave differently. Therefore, management and control plane design is an important aspect of scenarios where mapping between DetNet and TSN is required.¶ In order to use a TSN sub-network between DetNet nodes, DetNet-specific information must be converted to TSN sub-network-specific information. DetNet flow ID and flow-related parameters/requirements must be converted to a TSN Stream ID and stream-related parameters/requirements. Note that, as the TSN sub-network is just a portion of the end-to-end DetNet path (i.e., single hop from an IP perspective), some parameters (e.g., delay) may differ significantly. Other parameters (like bandwidth) also may have to be tuned due to the L2 encapsulation used within the TSN sub-network.¶ In some cases, it may be challenging to determine some TSN Stream-related information. For example, on a TSN-aware IP (DetNet) node that acts as a Talker, it is quite obvious which DetNet node is the Listener of the mapped TSN Stream (i.e., the IP next-hop). However, it may not be trivial to locate the point/interface where that Listener is connected to the TSN sub-network. Such attributes may require interaction between control and management plane functions and between DetNet and TSN domains.¶ Mapping between DetNet flow identifiers and TSN Stream identifiers, if not provided explicitly, can be done by a TSN-aware IP (DetNet) node locally based on information provided for configuration of the TSN Stream identification functions (IP Stream identification, Mask-and-Match Stream identification, and the active Stream identification function).¶ Triggering the setup/modification of a TSN Stream in the TSN sub-network is an example where management and/or control plane interactions are required between the DetNet and TSN sub-network. TSN-unaware IP (DetNet) nodes make such a triggering even more complicated, as they are fully unaware of the sub-network and run independently.¶ Configuration of TSN-specific functions (e.g., FRER) inside the TSN sub-network is a TSN-domain-specific decision and may not be visible in the DetNet domain.¶ 6. Security Considerations Security considerations for DetNet are described in detail in [DETNET-SECURITY]. General security considerations are described in [RFC8655]. Considerations specific to the DetNet IP data plane are summarized in [RFC8939]. This section discusses security considerations that are specific to the DetNet IP-over-TSN sub-network scenario.¶ The sub-network between DetNet nodes needs to be subject to appropriate confidentiality. Additionally, knowledge of what DetNet/TSN services are provided by a sub-network may supply information that can be used in a variety of security attacks. The ability to modify information exchanges between connected DetNet nodes may result in bogus operations. Therefore, it is important that the interface between DetNet nodes and the TSN sub-network are subject to authorization, authentication, and encryption.¶ The TSN sub-network operates at Layer 2, so various security mechanisms defined by IEEE can be used to secure the connection between the DetNet nodes (e.g., encryption may be provided using MACsec [IEEE802.1AE-2018]).¶ 7. IANA Considerations This document has no IANA actions.¶ 8. References 8.1. Normative References [IEEE8021CB] IEEE, \"IEEE Standard for Local and metropolitan area networks--Frame Replication and Elimination for Reliability\", IEEE 802.1CB-2017, DOI 10.1109/IEEESTD.2017.8091139, October 2017, <https://standards.ieee.org/standard/802_1CB-2017.html>. [IEEEP8021CBdb] IEEE, \"Draft Standard for Local and metropolitan area networks -- Frame Replication and Elimination for Reliability -- Amendment: Extended Stream Identification Functions\", IEEE P802.1CBdb / D1.3, April 2021, <https://1.ieee802.org/tsn/802-1cbdb/>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8939] Varga, B., Ed., Farkas, J., Berger, L., Fedyk, D., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane: IP\", RFC 8939, DOI 10.17487/RFC8939, November 2020, <https://www.rfc-editor.org/info/rfc8939>. 8.2. Informative References [DETNET-SECURITY] Grossman, E., Ed., Mizrahi, T., and A. Hacker, \"Deterministic Networking (DetNet) Security Considerations\", Work in Progress, Internet-Draft, draft-ietf-detnet-security-16, March 2021, <https://tools.ietf.org/html/draft-ietf-detnet-security-16>. [IEEE802.1AE-2018] IEEE, \"IEEE Standard for Local and metropolitan area networks--Media Access Control (MAC) Security\", IEEE 802.1AE-2018, DOI 10.1109/IEEESTD.2018.8585421, December 2018, <https://ieeexplore.ieee.org/document/8585421>. [IEEE8021Q] IEEE, \"IEEE Standard for Local and Metropolitan Area Network--Bridges and Bridged Networks\", IEEE Std 802.1Q-2018, DOI 10.1109/IEEESTD.2018.8403927, July 2018, <https://ieeexplore.ieee.org/document/8403927>. [IEEEP8021CBcv] IEEE 802.1, \"Draft Standard for Local and metropolitan area networks--Frame Replication and Elimination for Reliability--Amendment: Information Model, YANG Data Model and Management Information Base Module\", IEEE P802.1CBcv, Draft 1.1, February 2021, <https://1.ieee802.org/tsn/802-1cbcv/>. Acknowledgements The authors wish to thank Norman Finn, Lou Berger, Craig Gunther, Christophe Mangin, and Jouni Korhonen for their various contributions to this work.¶ Authors' Addresses Balázs Varga (editor) Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: balazs.a.varga@ericsson.com János Farkas Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: janos.farkas@ericsson.com Andrew G. Malis Malis Consulting Email: agmalis@gmail.com Stewart Bryant Futurewei Technologies Email: sb@stewartbryant.com"
    },
    {
        "Number": "9026",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Multicast VPN Fast Upstream Failover",
        "Authors": [
            "T. Morin",
            "Ed.",
            "R. Kebler",
            "Ed.",
            "G. Mirsky",
            "Ed."
        ],
        "Date": "2021-04",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document defines Multicast Virtual Private Network (VPN) extensions and procedures that allow fast failover for upstream failures by allowing downstream Provider Edges (PEs) to consider the status of Provider-Tunnels (P-tunnels) when selecting the Upstream PE for a VPN multicast flow.  The fast failover is enabled by using \"Bidirectional Forwarding Detection (BFD) for Multipoint Networks\" (RFC 8562)  and the new BGP Attribute, BFD Discriminator.  Also, this document introduces a new BGP Community, Standby PE, extending BGP Multicast VPN (MVPN) routing so that a C-multicast route can be advertised toward a Standby Upstream PE.",
        "Keywords": [
            "BFD",
            "P2MP"
        ],
        "Content": "RFC 9026: Multicast VPN Fast Upstream Failover RFC 9026 MVPN Fast Upstream Failover April 2021 Morin, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9026 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: T. Morin, Ed. Orange R. Kebler, Ed. Juniper Networks G. Mirsky, Ed. ZTE Corp. RFC 9026 Multicast VPN Fast Upstream Failover Abstract This document defines Multicast Virtual Private Network (VPN) extensions and procedures that allow fast failover for upstream failures by allowing downstream Provider Edges (PEs) to consider the status of Provider-Tunnels (P-tunnels) when selecting the Upstream PE for a VPN multicast flow. The fast failover is enabled by using \"Bidirectional Forwarding Detection (BFD) for Multipoint Networks\" (RFC 8562) and the new BGP Attribute, BFD Discriminator. Also, this document introduces a new BGP Community, Standby PE, extending BGP Multicast VPN (MVPN) routing so that a C-multicast route can be advertised toward a Standby Upstream PE.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9026.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions Used in This Document 2.1.  Requirements Language 2.2.  Terminology 2.3.  Abbreviations 3.  UMH Selection Based on Tunnel Status 3.1.  Determining the Status of a Tunnel 3.1.1.  MVPN Tunnel Root Tracking 3.1.2.  PE-P Upstream Link Status 3.1.3.  P2MP RSVP-TE Tunnels 3.1.4.  Leaf-Initiated P-Tunnels 3.1.5.  (C-S,C-G) Counter Information 3.1.6.  BFD Discriminator Attribute 3.1.7.  BFD Discriminator per PE-CE Link 3.1.8.  Operational Considerations for Monitoring a P-Tunnel's Status 4.  Standby C-Multicast Route 4.1.  Downstream PE Behavior 4.2.  Upstream PE Behavior 4.3.  Reachability Determination 4.4.  Inter-AS 4.4.1.  Inter-AS Procedures for Downstream PEs, ASBR Fast Failover 4.4.2.  Inter-AS Procedures for ASBRs 5.  Hot Root Standby 6.  Duplicate Packets 7.  IANA Considerations 7.1.  Standby PE Community 7.2.  BFD Discriminator 7.3.  BFD Discriminator Optional TLV Type 8.  Security Considerations 9.  References 9.1.  Normative References 9.2.  Informative References Acknowledgments Contributors Authors' Addresses 1. Introduction It is assumed that the reader is familiar with the workings of multicast MPLS/BGP IP VPNs as described in [RFC6513] and [RFC6514].¶ In the context of multicast in BGP/MPLS VPNs [RFC6513], it is desirable to provide mechanisms allowing fast recovery of connectivity on different types of failures. This document addresses failures of elements in the provider network that are upstream of PEs connected to VPN sites with receivers.¶ Section 3 describes local procedures allowing an egress PE (a PE connected to a receiver site) to take into account the status of P-tunnels to determine the Upstream Multicast Hop (UMH) for a given (C-S,C-G). One of the optional methods uses [RFC8562] and the new BGP Attribute, BFD Discriminator. None of these methods provide a \"fast failover\" solution when used alone but can be used together with the mechanism described in Section 4 for a \"fast failover\" solution.¶ Section 4 describes an optional BGP extension, a new Standby PE Community, that can speed up failover by not requiring any Multicast VPN (MVPN) routing message exchange at recovery time.¶ Section 5 describes a \"hot root standby\" mechanism that can be used to improve failover time in MVPN. The approach combines mechanisms defined in Sections 3 and 4 and has similarities with the solution described in [RFC7431] to improve failover times when PIM routing is used in a network given some topology and metric constraints.¶ The procedures described in this document are optional and allow an operator to provide protection for multicast services in BGP/MPLS IP VPNs. An operator would enable these mechanisms using a method discussed in Section 3 combined with the redundancy provided by a standby PE connected to the multicast flow source. PEs that support these mechanisms would converge faster and thus provide a more stable multicast service. In the case that a BGP implementation does not recognize or is configured not to support the extensions defined in this document, the implementation will continue to provide the multicast service, as described in [RFC6513].¶ 2. Conventions Used in This Document 2.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2.2. Terminology The terminology used in this document is the terminology defined in [RFC6513] and [RFC6514].¶ The term \"upstream\" (lower case) throughout this document refers to links and nodes that are upstream to a PE connected to VPN sites with receivers of a multicast flow.¶ The term \"Upstream\" (capitalized) throughout this document refers to a PE or an Autonomous System Border Router (ASBR) at which (S,G) or (*,G) data packets enter the VPN backbone or the local AS when traveling through the VPN backbone.¶ 2.3. Abbreviations PMSI: P-Multicast Service Interface¶ I-PMSI: Inclusive PMSI¶ S-PMSI: Selective PMSI¶ x-PMSI: Either an I-PMSI or an S-PMSI¶ P-tunnel: Provider-Tunnel¶ UMH: Upstream Multicast Hop¶ VPN: Virtual Private Network¶ MVPN: Multicast VPN¶ RD: Route Distinguisher¶ RP: Rendezvous Point¶ NLRI: Network Layer Reachability Information¶ VRF: VPN Routing and Forwarding Table¶ MED: Multi-Exit Discriminator¶ P2MP: Point-to-Multipoint¶ 3. UMH Selection Based on Tunnel Status Section 5.1 of [RFC6513] describes procedures used by an MVPN downstream PE to determine the Upstream Multicast Hop (UMH) for a given (C-S,C-G).¶ For a given downstream PE and a given VRF, the P-tunnel corresponding to a given Upstream PE for a given (C-S,C-G) state is the S-PMSI tunnel advertised by that Upstream PE for that (C-S,C-G) and imported into that VRF or, if there isn't any such S-PMSI, the I-PMSI tunnel advertised by that PE and imported into that VRF.¶ The procedure described here is optional one, based on a downstream PE taking into account the status of P-tunnels rooted at each possible Upstream PE, for including or not including each given PE in the list of candidate UMHs for a given (C-S,C-G) state. If it is not possible to determine whether a P-tunnel's current status is Up, the state shall be considered \"not known to be Down\", and it may be treated as if it is Up so that attempts to use the tunnel are acceptable. The result is that, if a P-tunnel is Down (see Section 3.1), the PE that is the root of the P-tunnel will not be considered for UMH selection. This will result in the downstream PE failing over to use the next Upstream PE in the list of candidates. Some downstream PEs could arrive at a different conclusion regarding the tunnel's state because the failure impacts only a subset of branches. Because of that, the procedures of Section 9.1.1 of [RFC6513] are applicable when using I-PMSI P-tunnels. That document is a foundation for this document, and its processes all apply here.¶ There are three options specified in Section 5.1 of [RFC6513] for a downstream PE to select an Upstream PE.¶ The first two options select the Upstream PE from a candidate PE set based either on an IP address or a hashing algorithm. When used together with the optional procedure of considering the P-tunnel status as in this document, a candidate Upstream PE is included in the set if it either:¶ advertises an x-PMSI bound to a tunnel, where the specified tunnel's state is not known to be Down, or,¶ does not advertise any x-PMSI applicable to the given (C-S,C-G) but has associated a VRF Route Import BGP Extended Community to the unicast VPN route for S. That is necessary to avoid incorrectly invalidating a UMH PE that would use a policy where no I-PMSI is advertised for a given VRF and where only S-PMSIs are used. The S-PMSI can be advertised only after the Upstream PE receives a C-multicast route for (C-S,C-G) / (C-*,C-G) to be carried over the advertised S-PMSI.¶ If the resulting candidate set is empty, then the procedure is repeated without considering the P-tunnel status.¶ The third option uses the installed UMH Route (i.e., the \"best\" route towards the C-root) as the Selected UMH Route, and its originating PE is the selected Upstream PE. With the optional procedure of considering P-tunnel status as in this document, the Selected UMH Route is the best one among those whose originating PE's P-tunnel is not \"down\". If that does not exist, the installed UMH Route is selected regardless of the P-tunnel status.¶ 3.1. Determining the Status of a Tunnel Different factors can be considered to determine the \"status\" of a P-tunnel and are described in the following subsections. The optional procedures described in this section also handle the case when the downstream PEs do not all apply the same rules to define what the status of a P-tunnel is (please see Section 6), and some of them will produce a result that may be different for different downstream PEs. Thus, the \"status\" of a P-tunnel in this section is not a characteristic of the tunnel in itself but is the tunnel status, as seen from a particular downstream PE. Additionally, some of the following methods determine the ability of a downstream PE to receive traffic on the P-tunnel and not specifically on the status of the P-tunnel itself. That could be referred to as \"P-tunnel reception status\", but for simplicity, we will use the terminology of P-tunnel \"status\" for all of these methods.¶ Depending on the criteria used to determine the status of a P-tunnel, there may be an interaction with another resiliency mechanism used for the P-tunnel itself, and the UMH update may happen immediately or may need to be delayed. Each particular case is covered in each separate subsection below.¶ An implementation may support any combination of the methods described in this section and provide a network operator with control to choose which one to use in the particular deployment.¶ 3.1.1. MVPN Tunnel Root Tracking When determining if the status of a P-tunnel is Up, a condition to consider is whether the root of the tunnel, as specified in the x-PMSI Tunnel attribute, is reachable through unicast routing tables. In this case, the downstream PE can immediately update its UMH when the reachability condition changes.¶ That is similar to BGP next-hop tracking for VPN routes, except that the address considered is not the BGP next-hop address but the root address in the x-PMSI Tunnel attribute. BGP next-hop tracking monitors BGP next-hop address changes in the routing table. In general, when a change is detected, it performs a next-hop scan to find if any of the next hops in the BGP table is affected and updates it accordingly.¶ If BGP next-hop tracking is done for VPN routes and the root address of a given tunnel happens to be the same as the next-hop address in the BGP A-D Route advertising the tunnel, then checking, in unicast routing tables, whether the tunnel root is reachable will be unnecessary duplication and will thus not bring any specific benefit.¶ 3.1.2. PE-P Upstream Link Status When determining if the status of a P-tunnel is Up, a condition to consider is whether the last-hop link of the P-tunnel is Up. Conversely, if the last-hop link of the P-tunnel is Down, then this can be taken as an indication that the P-tunnel is Down.¶ Using this method when a fast restoration mechanism (such as MPLS Fast Reroute (FRR) [RFC4090]) is in place for the link requires careful consideration and coordination of defect detection intervals for the link and the tunnel. When using multi-layer protection, particular consideration must be given to the interaction of defect detections at different network layers. It is recommended to use longer detection intervals at the higher layers. Some recommendations suggest using a multiplier of 3 or larger, e.g., 10 msec detection for the link failure detection and at least 100 msec for the tunnel failure detection. In many cases, it is not practical to use both protection methods simultaneously because uncorrelated timers might cause unnecessary switchovers and destabilize the network.¶ 3.1.3. P2MP RSVP-TE Tunnels For P-tunnels of type P2MP MPLS-TE, the status of the P-tunnel is considered Up if the sub-LSP to this downstream PE is in the Up state. The determination of whether a P2MP RSVP-TE Label Switched Path (LSP) is in the Up state requires Path and Resv state for the LSP and is based on procedures specified in [RFC4875]. As a result, the downstream PE can immediately update its UMH when the reachability condition changes.¶ When using this method and if the signaling state for a P2MP TE LSP is removed (e.g., if the ingress of the P2MP TE LSP sends a PathTear message) or the P2MP TE LSP changes state from Up to Down as determined by procedures in [RFC4875], the status of the corresponding P-tunnel MUST be re-evaluated. If the P-tunnel transitions from Up to Down state, the Upstream PE that is the ingress of the P-tunnel MUST NOT be considered to be a valid candidate UMH.¶ 3.1.4. Leaf-Initiated P-Tunnels An Upstream PE MUST be removed from the UMH candidate list for a given (C-S,C-G) if the P-tunnel (I-PMSI or S-PMSI) for this (S,G) is leaf triggered (PIM, mLDP), but for some reason, internal to the protocol, the upstream one-hop branch of the tunnel from P to PE cannot be built. As a result, the downstream PE can immediately update its UMH when the reachability condition changes.¶ 3.1.5. (C-S,C-G) Counter Information In cases where the downstream node can be configured so that the maximum inter-packet time is known for all the multicast flows mapped on a P-tunnel, the local traffic counter information per (C-S,C-G) for traffic received on this P-tunnel can be used to determine the status of the P-tunnel.¶ When such a procedure is used, in the context where fast restoration mechanisms are used for the P-tunnels, a configurable timer MUST be set on the downstream PE to wait before updating the UMH to let the P-tunnel restoration mechanism execute its actions. Determining that a tunnel is probably down by waiting for enough packets to fail to arrive as expected is a heuristic and operational matter that depends on the maximum inter-packet time. A timeout of three seconds is a generally suitable default waiting period to ascertain that the tunnel is down, though other values would be needed for atypical conditions.¶ In cases where this mechanism is used in conjunction with the method described in Section 5, no prior knowledge of the rate or maximum inter-packet time on the multicast streams is required; downstream PEs can periodically compare actual packet reception statistics on the two P-tunnels to determine when one of them is down. The detailed specification of this mechanism is outside the scope of this document.¶ 3.1.6. BFD Discriminator Attribute The P-tunnel status may be derived from the status of a multipoint BFD session [RFC8562] whose discriminator is advertised along with an x-PMSI A-D Route. A P2MP BFD session can be instantiated using a mechanism other than the BFD Discriminator attribute, e.g., MPLS LSP Ping ([MPLS-P2MP-BFD]). The description of these methods is outside the scope of this document.¶ This document defines the format and ways of using a new BGP attribute called the \"BFD Discriminator\" (38). It is an optional transitive BGP attribute. Thus, it is expected that an implementation that does not recognize or is configured not to support this attribute, as if the attribute was unrecognized, follows procedures defined for optional transitive path attributes in Section 5 of [RFC4271]. See Section 7.2 for more information. The format of this attribute is shown in Figure 1.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+ | BFD Mode | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | BFD Discriminator | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ~ Optional TLVs ~ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 1: Format of the BFD Discriminator Attribute Where:¶ BFD Mode field is 1 octet long. This specification defines P2MP BFD Session as value 1 (Section 7.2).¶ BFD Discriminator field is 4 octets long.¶ Optional TLVs is the optional variable-length field that MAY be used in the BFD Discriminator attribute for future extensions. TLVs MAY be included in a sequential or nested manner. To allow for TLV nesting, it is advised to define a new TLV as a variable-length object. Figure 2 presents the Optional TLV format TLV that consists of:¶ Type: a 1-octet-long field that characterizes the interpretation of the Value field (Section 7.3)¶ Length: a 1-octet-long field equal to the length of the Value field in octets¶ Value: a variable-length field¶ All multibyte fields in TLVs defined in this specification are in network byte order.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | Value ... +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 2: Format of the Optional TLV An optional Source IP Address TLV is defined in this document. The Source IP Address TLV MUST be used when the value of the BFD Mode field's value is P2MP BFD Session. The BFD Discriminator attribute that does not include the Source IP Address TLV MUST be handled according to the \"attribute discard\" approach, as defined in [RFC7606]. For the Source IP Address TLV, fields are set as follows:¶ The Type field is set to 1 (Section 7.3).¶ The Length field is 4 for the IPv4 address family and 16 for the IPv6 address family. The TLV is considered malformed if the field is set to any other value.¶ The Value field contains the address associated with the MultipointHead of the P2MP BFD session.¶ The BFD Discriminator attribute MUST be considered malformed if its length is smaller than 11 octets or if Optional TLVs are present but not well formed. If the attribute is deemed to be malformed, the UPDATE message SHALL be handled using the approach of Attribute Discard per [RFC7606].¶ 3.1.6.1. Upstream PE Procedures To enable downstream PEs to track the P-tunnel status using a point-to-multipoint (P2MP) BFD session, the Upstream PE:¶ MUST initiate the BFD session and set bfd.SessionType = MultipointHead as described in [RFC8562];¶ when transmitting BFD Control packets MUST set the IP destination address of the inner IP header to the internal loopback address 127.0.0.1/32 for IPv4 [RFC1122]. For IPv6, it MUST use the loopback address ::1/128 [RFC4291];¶ MUST use the IP address included in the Source IP Address TLV of the BFD Discriminator attribute as the source IP address when transmitting BFD Control packets;¶ MUST include the BFD Discriminator attribute in the x-PMSI A-D Route with the value set to the My Discriminator value;¶ MUST periodically transmit BFD Control packets over the x-PMSI P-tunnel after the P-tunnel is considered established. Note that the methods to declare that a P-tunnel has been established are outside the scope of this specification.¶ If the tracking of the P-tunnel by using a P2MP BFD session is enabled after the x-PMSI A-D Route has been already advertised, the x-PMSI A-D Route MUST be resent with the only change between the previous advertisement and the new advertisement to be the inclusion of the BFD Discriminator attribute.¶ If the x-PMSI A-D Route is advertised with P-tunnel status tracked using the P2MP BFD session, and it is desired to stop tracking P-tunnel status using BFD, then:¶ the x-PMSI A-D Route MUST be resent with the only change between the previous advertisement and the new advertisement be the exclusion of the BFD Discriminator attribute;¶ the P2MP BFD session MUST be deleted. The session MAY be deleted after some configurable delay, which should have a reasonable default.¶ 3.1.6.2. Downstream PE Procedures Upon receiving the BFD Discriminator attribute in the x-PMSI A-D Route, the downstream PE:¶ MUST associate the received BFD Discriminator value with the P-tunnel originating from the Upstream PE and the IP address of the Upstream PE;¶ MUST create a P2MP BFD session and set bfd.SessionType = MultipointTail as described in [RFC8562];¶ to properly demultiplex BFD session, MUST use:¶ the IP address in the Source IP Address TLV included the BFD Discriminator attribute in the x-PMSI A-D Route;¶ the value of the BFD Discriminator field in the BFD Discriminator attribute;¶ the x-PMSI Tunnel Identifier [RFC6514] the BFD Control packet was received on.¶ After the state of the P2MP BFD session is up, i.e., bfd.SessionState == Up, the session state will then be used to track the health of the P-tunnel.¶ According to [RFC8562], if the downstream PE receives Down or AdminDown in the State field of the BFD Control packet, or if the Detection Timer associated with the BFD session expires, the BFD session is down, i.e., bfd.SessionState == Down. When the BFD session state is Down, then the P-tunnel associated with the BFD session MUST be considered down. If the site that contains C-S is connected to two or more PEs, a downstream PE will select one as its Primary Upstream PE, while others are considered to be Standby Upstream PEs. In such a scenario, when the P-tunnel is considered down, the downstream PE MAY initiate a switchover of the traffic from the Primary Upstream PE to the Standby Upstream PE only if the Standby Upstream PE is deemed to be in the Up state. That MAY be determined from the state of a P2MP BFD session with the Standby Upstream PE as the MultipointHead.¶ If the downstream PE's P-tunnel is already established when the downstream PE receives the new x-PMSI A-D Route with the BFD Discriminator attribute, the downstream PE MUST associate the value of the BFD Discriminator field with the P-tunnel and follow procedures listed above in this section if and only if the x-PMSI A-D Route was properly processed as per [RFC6514], and the BFD Discriminator attribute was validated.¶ If the downstream PE's P-tunnel is already established, its state being monitored by the P2MP BFD session set up using the BFD Discriminator attribute, and both the downstream PE receives the new x-PMSI A-D Route without the BFD Discriminator attribute and the x-PMSI A-D Route was processed without any error as per the relevant specifications, then:¶ The downstream PE MUST stop processing BFD Control packets for this P2MP BFD session;¶ The P2MP BFD session associated with the P-tunnel MUST be deleted. The session MAY be deleted after some configurable delay, which should have a reasonable default.¶ The downstream PE MUST NOT switch the traffic to the Standby Upstream PE.¶ 3.1.7. BFD Discriminator per PE-CE Link The following approach is defined in response to the detection by the Upstream PE of a PE-CE link failure. Even though the provider tunnel is still up, it is desired for the downstream PEs to switch to a backup Upstream PE. To achieve that, if the Upstream PE detects that its PE-CE link fails, it MUST set the bfd.LocalDiag of the P2MP BFD session to Concatenated Path Down or Reverse Concatenated Path Down (per Section 6.8.17 of [RFC5880]) unless it switches to a new PE-CE link within the time of bfd.DesiredMinTxInterval for the P2MP BFD session (in that case, the Upstream PE will start tracking the status of the new PE-CE link). When a downstream PE receives that bfd.LocalDiag code, it treats it as if the tunnel itself failed and tries to switch to a backup PE.¶ 3.1.8. Operational Considerations for Monitoring a P-Tunnel's Status Several methods to monitor the status of a P-tunnel are described in Section 3.1.¶ Tracking the root of an MVPN (Section 3.1.1) reveals the status of a P-tunnel based on the control plane information. Because, in general, the MPLS data plane is not fate sharing with the control plane, this method might produce false-positive or false-negative alarms, for example, resulting in tunnels that are considered Up but are not able to reach the root, or ones that are declared down prematurely. On the other hand, because BGP next-hop tracking is broadly supported and deployed, this method might be the easiest to deploy.¶ The method described in Section 3.1.2 monitors the state of the data plane but only for an egress P-PE link of a P-tunnel. As a result, network failures that affect upstream links might not be detected using this method and the MVPN convergence would be determined by the convergence of the BGP control plane.¶ Using the state change of a P2MP RSVP-TE LSP as the trigger to re-evaluate the status of the P-tunnel (Section 3.1.3) relies on the mechanism used to monitor the state of the P2MP LSP.¶ The method described in Section 3.1.4 is simple and is safe from causing false alarms, e.g., considering a tunnel operationally Up even though its data path has a defect or, conversely, declaring a tunnel failed when it is unaffected. But the method applies to a subset of MVPNs, those that use the leaf-triggered x-PMSI tunnels.¶ Though some MVPNs might be used to provide a multicast service with predictable inter-packet intervals (Section 3.1.5), the number of such cases seem limited.¶ Monitoring the status of a P-tunnel using a P2MP BFD session (Section 3.1.6) may produce the most accurate and expedient failure notification of all monitoring methods discussed. On the other hand, it requires careful consideration of the additional load of BFD sessions onto network and PE nodes. Operators should consider the rate of BFD Control packets transmitted by root PEs combined with the number of such PEs in the network. In addition, the number of P2MP BFD sessions per PE determines the amount of state information that a PE maintains.¶ 4. Standby C-Multicast Route The procedures described below are limited to the case where the site that contains C-S is connected to two or more PEs, though to simplify the description, the case of dual homing is described. In the case where more than two PEs are connected to the C-S site, selection of the Standby PE can be performed using one of the methods of selecting a UMH. Details of the selection are outside the scope of this document. The procedures require all the PEs of that MVPN to follow the same UMH selection procedure, as specified in [RFC6513], regardless of whether the PE selected based on its IP address, the hashing algorithm described in Section 5.1.3 of [RFC6513], or the Installed UMH Route. The consistency of the UMH selection method used among all PEs is expected to be provided by the management plane. The procedures assume that if a site of a given MVPN that contains C-S is dual homed to two PEs, then all the other sites of that MVPN would have two unicast VPN routes (VPN-IPv4 or VPN-IPv6) to C-S, each with its own RD.¶ As long as C-S is reachable via both PEs, a given downstream PE will select one of the PEs connected to C-S as its Upstream PE for C-S. We will refer to the other PE connected to C-S as the \"Standby Upstream PE\". Note that if the connectivity to C-S through the Primary Upstream PE becomes unavailable, then the PE will select the Standby Upstream PE as its Upstream PE for C-S. When the Primary PE later becomes available, the PE will select the Primary Upstream PE again as its Upstream PE. Such behavior is referred to as \"revertive\" behavior and MUST be supported. Non-revertive behavior refers to the behavior of continuing to select the backup PE as the UMH even after the Primary has come up. This non-revertive behavior MAY also be supported by an implementation and would be enabled through some configuration. Selection of the behavior, revertive or non-revertive, is an operational issue, but it MUST be consistent on all PEs in the given MVPN. While revertive is considered the default behavior, there might be cases where the switchover to the standby tunnel does not affect other services and provides the required quality of service. In this case, an operator might use non-revertive behavior to avoid unnecessary switchover and thus minimize disruption to the multicast service.¶ For readability, in the following subsections, the procedures are described for BGP C-multicast Source Tree Join routes, but they apply equally to BGP C-multicast Shared Tree Join routes for the case where the customer RP is dual homed (substitute \"C-RP\" to \"C-S\").¶ 4.1. Downstream PE Behavior When a (downstream) PE connected to some site of an MVPN needs to send a C-multicast route (C-S,C-G), then following the procedures specified in Section 11.1 of [RFC6514], the PE sends the C-multicast route with an RT that identifies the Upstream PE selected by the PE originating the route. As long as C-S is reachable via the Primary Upstream PE, the Upstream PE is the Primary Upstream PE. If C-S is reachable only via the Standby Upstream PE, then the Upstream PE is the Standby Upstream PE.¶ If C-S is reachable via both the Primary and the Standby Upstream PE, then in addition to sending the C-multicast route with an RT that identifies the Primary Upstream PE, the downstream PE also originates and sends a C-multicast route with an RT that identifies the Standby Upstream PE. The route that has the semantics of being a \"standby\" C-multicast route is further called a \"Standby BGP C-multicast route\", and is constructed as follows:¶ The NLRI is constructed as the C-multicast route with an RT that identifies the Primary Upstream PE, except that the RD is the same as if the C-multicast route was built using the Standby Upstream PE as the UMH (it will carry the RD associated to the unicast VPN route advertised by the Standby Upstream PE for S and a Route Target derived from the Standby Upstream PE's UMH route's VRF RT Import EC);¶ It MUST carry the \"Standby PE\" BGP Community (0xFFFF0009); see Section 7.1.¶ The Local Preference attribute of both the normal and the standby C-multicast route needs to be adjusted as follows: if a BGP peer receives two C-multicast routes with the same NLRI, one carrying the \"Standby PE\" community and the other one not carrying the \"Standby PE\" community, preference is given to the one not carrying the \"Standby PE\" community. Such a situation can happen when, for instance, due to transient unicast routing inconsistencies or lack of support of the Standby PE community, two different downstream PEs consider different Upstream PEs to be the primary one. In that case, without any precaution taken, both Upstream PEs would process a standby C-multicast route and possibly stop forwarding at the same time. For this purpose, routes that carry the Standby PE BGP Community must have the LOCAL_PREF attribute set to the value lower than the value specified as the LOCAL_PREF attribute for the route that does not carry the Standby PE BGP Community. The value of zero is RECOMMENDED.¶ Note that when a PE advertises such a Standby C-multicast join for a (C-S,C-G), it MUST join the corresponding P-tunnel.¶ If, at some later point, the PE determines that C-S is no longer reachable through the Primary Upstream PE, the Standby Upstream PE becomes the Upstream PE, and the PE resends the C-multicast route with the RT that identifies the Standby Upstream PE, except that now the route does not carry the Standby PE BGP Community (which results in replacing the old route with a new route, with the only difference between these routes being the absence of the Standby PE BGP Community). The new Upstream PE must set the LOCAL_PREF attribute for that C-multicast route to the same value as when the Standby PE BGP Community was included in the advertisement.¶ 4.2. Upstream PE Behavior When a PE supporting this specification receives a C-multicast route for a particular (C-S,C-G) for which all of the following are true:¶ the RT carried in the route results in importing the route into a particular VRF on the PE;¶ the route carries the Standby PE BGP Community; and¶ the PE determines (via a method of failure detection that is outside the scope of this document) that C-S is not reachable through some other PE (more details are in Section 4.3),¶ then the PE MAY install VRF PIM state corresponding to this Standby BGP C-multicast route (the result will be that a PIM Join message will be sent to the CE towards C-S, and that the PE will receive (C-S,C-G) traffic), and the PE MAY forward (C-S,C-G) traffic received by the PE to other PEs through a P-tunnel rooted at the PE.¶ Furthermore, irrespective of whether C-S carried in that route is reachable through some other PE:¶ based on local policy, as soon as the PE receives this Standby BGP C-multicast route, the PE MAY install VRF PIM state corresponding to this BGP Source Tree Join route (the result will be that Join messages will be sent to the CE toward C-S, and that the PE will receive (C-S,C-G) traffic); and¶ based on local policy, as soon as the PE receives this Standby BGP C-multicast route, the PE MAY forward (C-S,C-G) traffic to other PEs through a P-tunnel independently of the reachability of C-S through some other PE. (note that this implies also doing step a.)¶ Doing neither step a nor step b for a given (C-S,C-G) is called \"cold root standby\".¶ Doing step a but not step b for a given (C-S,C-G) is called \"warm root standby\".¶ Doing step b (which implies also doing step a) for a given (C-S,C-G) is called \"hot root standby\".¶ Note that, if an Upstream PE uses an S-PMSI-only policy, it shall advertise an S-PMSI for a (C-S,C-G) as soon as it receives a C-multicast route for (C-S,C-G), normal or Standby; that is, it shall not wait for receiving a non-Standby C-multicast route before advertising the corresponding S-PMSI.¶ Section 9.3.2 of [RFC6513] describes the procedures of sending a Source-Active A-D Route as a result of receiving the C-multicast route. These procedures MUST be followed for both the normal and Standby C-multicast routes.¶ 4.3. Reachability Determination The Standby Upstream PE can use the following information to determine that C-S can or cannot be reached through the Primary Upstream PE:¶ presence/absence of a unicast VPN route toward C-S¶ supposing that the Standby Upstream PE is the egress of the tunnel rooted at the Primary Upstream PE, the Standby Upstream PE can determine the reachability of C-S through the Primary Upstream PE based on the status of this tunnel, determined thanks to the same criteria as the ones described in Section 3.1 (without using the UMH selection procedures of Section 3);¶ other mechanisms¶ 4.4. Inter-AS If the non-segmented inter-AS approach is used, the procedures described in Section 4.1 through Section 4.3 can be applied.¶ When MVPNs are used in an inter-AS context with the segmented inter-AS approach described in Section 9.2 of [RFC6514], the procedures in this section can be applied.¶ Prerequisites for the procedures described below to be applied for a source of a given MVPN are:¶ that any PE of this MVPN receives two or more Inter-AS I-PMSI A-D Routes advertised by the AS of the source¶ that these Inter-AS I-PMSI A-D Routes have distinct Route Distinguishers (as described in item \"(2)\" of Section 9.2 of [RFC6514]).¶ As an example, these conditions will be satisfied when the source is dual homed to an AS that connects to the receiver AS through two ASBR using autoconfigured RDs.¶ 4.4.1. Inter-AS Procedures for Downstream PEs, ASBR Fast Failover The following procedure is applied by downstream PEs of an AS, for a source S in a remote AS.¶ In additional to choosing an Inter-AS I-PMSI A-D Route advertised from the AS of the source to construct a C-multicast route, as described in Section 11.1.3 of [RFC6514], a downstream PE will choose a second Inter-AS I-PMSI A-D Route advertised from the AS of the source and use this route to construct and advertise a Standby C-multicast route (C-multicast route carrying the Standby extended community), as described in Section 4.1.¶ 4.4.2. Inter-AS Procedures for ASBRs When an Upstream ASBR receives a C-multicast route, and at least one of the RTs of the route matches one of the ASBR Import RTs, the ASBR that supports this specification must try to locate an Inter-AS I-PMSI A-D Route whose RD and Source AS respectively match the RD and Source AS carried in the C-multicast route. If the match is found, and the C-multicast route carries the Standby PE BGP Community, then the ASBR implementation that supports this specification MUST be configurable to perform as follows:¶ If the route was received over iBGP and its LOCAL_PREF attribute is set to zero, then it MUST be re-advertised in eBGP with a MED attribute (MULTI_EXIT_DISC) set to the highest possible value (0xffff).¶ If the route was received over eBGP and its MED attribute is set to 0xffff, then it MUST be re-advertised in iBGP with a LOCAL_PREF attribute set to zero.¶ Other ASBR procedures are applied without modification and, when applied, MAY modify the above-listed behavior.¶ 5. Hot Root Standby The mechanisms defined in Sections 3 and 4 can be used together as follows.¶ The principle is that, for a given VRF (or possibly only for a given (C-S,C-G)):¶ Downstream PEs advertise a Standby BGP C-multicast route (based on Section 4).¶ Upstream PEs use the \"hot standby\" optional behavior and will thus start forwarding traffic for a given multicast state after they have a (primary) BGP C-multicast route or a Standby BGP C-multicast route for that state (or both).¶ A policy controls from which tunnel downstream PEs accept traffic. For example, the policy could be based on the status of the tunnel or tunnel-monitoring method (Section 3.1.5).¶ Other combinations of the mechanisms proposed in Sections 3 and 4 are for further study.¶ Note that the same level of protection would be achievable with a simple C-multicast Source Tree Join route advertised to both the primary and secondary Upstream PEs (carrying, as Route Target extended communities, the values of the VRF Route Import Extended Community of each VPN route from each Upstream PE). The advantage of using the Standby semantic is that, supposing that downstream PEs always advertise a Standby C-multicast route to the secondary Upstream PE, it allows to choose the protection level through a change of configuration on the secondary Upstream PE without requiring any reconfiguration of all the downstream PEs.¶ 6. Duplicate Packets Multicast VPN specifications [RFC6513] impose that a PE only forwards to CEs the packets coming from the expected Upstream PE (Section 9.1 of [RFC6513]).¶ We draw the reader's attention to the fact that the respect of this part of MVPN specifications is especially important when two distinct Upstream PEs are susceptible to forward the same traffic on P-tunnels at the same time in the steady state. That will be the case when \"hot root standby\" mode is used (Section 5) and can also be the case if the procedures of Section 3 are used; likewise, it can also be the case when a) the rules determining the status of a tree are not the same on two distinct downstream PEs or b) the rule determining the status of a tree depends on conditions local to a PE (e.g., the PE-P upstream link being Up).¶ 7. IANA Considerations 7.1. Standby PE Community IANA has allocated the BGP \"Standby PE\" community value 0xFFFF0009 from the \"Border Gateway Protocol (BGP) Well-known Communities\" registry using the First Come First Served registration policy.¶ 7.2. BFD Discriminator This document defines a new BGP optional transitive attribute called \"BFD Discriminator\". IANA has allocated codepoint 38 in the \"BGP Path Attributes\" registry to the BFD Discriminator attribute.¶ IANA has created a new \"BFD Mode\" subregistry in the \"Border Gateway Protocol (BGP) Parameters\" registry. The registration policies, per [RFC8126], for this subregistry are according to Table 1.¶ Table 1: \"BFD Mode\" Subregistry Registration Policies Value Policy 0- 175 IETF Review 176 - 249 First Come First Served 250 - 254 Experimental Use 255 IETF Review IANA has made initial assignments according to Table 2.¶ Table 2: \"BFD Mode\" Subregistry Value Description Reference 0 Reserved This document 1 P2MP BFD Session This document 2- 175 Unassigned 176 - 249 Unassigned 250 - 254 Experimental Use This document 255 Reserved This document 7.3. BFD Discriminator Optional TLV Type IANA has created a new \"BFD Discriminator Optional TLV Type\" subregistry in the \"Border Gateway Protocol (BGP) Parameters\" registry. The registration policies, per [RFC8126], for this subregistry are according to Table 3.¶ Table 3: \"BFD Discriminator Optional TLV Type\" Subregistry Registration Policies Value Policy 0- 175 IETF Review 176 - 249 First Come First Served 250 - 254 Experimental Use 255 IETF Review IANA has made initial assignments according to Table 4.¶ Table 4: \"BFD Discriminator Optional TLV Type\" Subregistry Value Description Reference 0 Reserved This document 1 Source IP Address This document 2- 175 Unassigned 176 - 249 Unassigned 250 - 254 Experimental Use This document 255 Reserved This document 8. Security Considerations This document describes procedures based on [RFC6513] and [RFC6514]; hence, it shares the security considerations respectively represented in those specifications.¶ This document uses P2MP BFD, as defined in [RFC8562], which, in turn, is based on [RFC5880]. Security considerations relevant to each protocol are discussed in the respective protocol specifications. An implementation that supports this specification MUST provide a mechanism to limit the overall amount of capacity used by the BFD traffic (as the combination of the number of active P2MP BFD sessions and the rate of BFD Control packets to process).¶ The methods described in Section 3.1 may produce false-negative state changes that can be the trigger for an unnecessary convergence in the control plane, ultimately negatively impacting the multicast service provided by the VPN. An operator is expected to consider the network environment and use available controls of the mechanism used to determine the status of a P-tunnel.¶ 9. References 9.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4271] Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A Border Gateway Protocol 4 (BGP-4)\", RFC 4271, DOI 10.17487/RFC4271, January 2006, <https://www.rfc-editor.org/info/rfc4271>. [RFC4875] Aggarwal, R., Ed., Papadimitriou, D., Ed., and S. Yasukawa, Ed., \"Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)\", RFC 4875, DOI 10.17487/RFC4875, May 2007, <https://www.rfc-editor.org/info/rfc4875>. [RFC5880] Katz, D. and D. Ward, \"Bidirectional Forwarding Detection (BFD)\", RFC 5880, DOI 10.17487/RFC5880, June 2010, <https://www.rfc-editor.org/info/rfc5880>. [RFC6513] Rosen, E., Ed. and R. Aggarwal, Ed., \"Multicast in MPLS/BGP IP VPNs\", RFC 6513, DOI 10.17487/RFC6513, February 2012, <https://www.rfc-editor.org/info/rfc6513>. [RFC6514] Aggarwal, R., Rosen, E., Morin, T., and Y. Rekhter, \"BGP Encodings and Procedures for Multicast in MPLS/BGP IP VPNs\", RFC 6514, DOI 10.17487/RFC6514, February 2012, <https://www.rfc-editor.org/info/rfc6514>. [RFC7606] Chen, E., Ed., Scudder, J., Ed., Mohapatra, P., and K. Patel, \"Revised Error Handling for BGP UPDATE Messages\", RFC 7606, DOI 10.17487/RFC7606, August 2015, <https://www.rfc-editor.org/info/rfc7606>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8562] Katz, D., Ward, D., Pallagatti, S., Ed., and G. Mirsky, Ed., \"Bidirectional Forwarding Detection (BFD) for Multipoint Networks\", RFC 8562, DOI 10.17487/RFC8562, April 2019, <https://www.rfc-editor.org/info/rfc8562>. 9.2. Informative References [MPLS-P2MP-BFD] Mirsky, G., Mishra, G., and D. Eastlake 3rd, \"BFD for Multipoint Networks over Point-to-Multi-Point MPLS LSP\", Work in Progress, Internet-Draft, draft-mirsky-mpls-p2mp-bfd-14, March 2021, <https://tools.ietf.org/html/draft-mirsky-mpls-p2mp-bfd-14>. [RFC1122] Braden, R., Ed., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, DOI 10.17487/RFC1122, October 1989, <https://www.rfc-editor.org/info/rfc1122>. [RFC4090] Pan, P., Ed., Swallow, G., Ed., and A. Atlas, Ed., \"Fast Reroute Extensions to RSVP-TE for LSP Tunnels\", RFC 4090, DOI 10.17487/RFC4090, May 2005, <https://www.rfc-editor.org/info/rfc4090>. [RFC4291] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 4291, DOI 10.17487/RFC4291, February 2006, <https://www.rfc-editor.org/info/rfc4291>. [RFC7431] Karan, A., Filsfils, C., Wijnands, IJ., Ed., and B. Decraene, \"Multicast-Only Fast Reroute\", RFC 7431, DOI 10.17487/RFC7431, August 2015, <https://www.rfc-editor.org/info/rfc7431>. Acknowledgments The authors want to thank Greg Reaume, Eric Rosen, Jeffrey Zhang, Martin Vigoureux, Adrian Farrel, and Zheng (Sandy) Zhang for their reviews, useful comments, and helpful suggestions.¶ Contributors Below is a list of other contributing authors in alphabetical order:¶ Rahul Aggarwal Arktan Email: raggarwa_1@yahoo.com Nehal Bhau Cisco Email: NBhau@cisco.com Clayton Hassen Bell Canada 2955 Virtual Way Vancouver Canada Email: Clayton.Hassen@bell.ca Wim Henderickx Nokia Copernicuslaan 50 2018 Antwerp Belgium Email: wim.henderickx@nokia.com Pradeep Jain Nokia 701 E Middlefield Rd Mountain View, CA 94043 United States of America Email: pradeep.jain@nokia.com Jayant Kotalwar Nokia 701 E Middlefield Rd Mountain View, CA 94043 United States of America Email: Jayant.Kotalwar@nokia.com Praveen Muley Nokia 701 East Middlefield Rd Mountain View, CA 94043 United States of America Email: praveen.muley@nokia.com Ray (Lei) Qiu Juniper Networks 1194 North Mathilda Ave. Sunnyvale, CA 94089 United States of America Email: rqiu@juniper.net Yakov Rekhter Juniper Networks 1194 North Mathilda Ave. Sunnyvale, CA 94089 United States of America Email: yakov@juniper.net Kanwar Singh Nokia 701 E Middlefield Rd Mountain View, CA 94043 United States of America Email: kanwar.singh@nokia.com Authors' Addresses Thomas Morin (editor) Orange 2, avenue Pierre Marzin 22307 Lannion France Email: thomas.morin@orange.com Robert Kebler (editor) Juniper Networks 1194 North Mathilda Avenue Sunnyvale, CA 94089 United States of America Email: rkebler@juniper.net Greg Mirsky (editor) ZTE Corp. Email: gregimirsky@gmail.com"
    },
    {
        "Number": "9019",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "A Firmware Update Architecture for Internet of Things",
        "Authors": [
            "B. Moran",
            "H. Tschofenig",
            "D. Brown",
            "M. Meriac"
        ],
        "Date": "2021-04",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.  In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.",
        "Keywords": [
            "IoT",
            "update",
            "software",
            "firmware",
            "constrained",
            "Secure",
            "Boot"
        ],
        "Content": "RFC 9019: A Firmware Update Architecture for Internet of Things RFC 9019 IoT Firmware Update Architecture April 2021 Moran, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9019 Category: Informational Published: April 2021 ISSN: 2070-1721 Authors: B. Moran Arm Limited H. Tschofenig Arm Limited D. Brown Linaro M. Meriac Consultant RFC 9019 A Firmware Update Architecture for Internet of Things Abstract Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.¶ In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9019.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions and Terminology 2.1.  Terms 2.2.  Stakeholders 2.3.  Functions 3.  Architecture 4.  Invoking the Firmware 4.1.  The Bootloader 5.  Types of IoT Devices 5.1.  Single MCU 5.2.  Single CPU with Partitioning between Secure Mode and Normal Mode 5.3.  Symmetric Multiple CPUs 5.4.  Dual CPU, Shared Memory 5.5.  Dual CPU, Other Bus 6.  Manifests 7.  Securing Firmware Updates 8.  Example 9.  IANA Considerations 10. Security Considerations 11. Informative References Acknowledgements Authors' Addresses 1. Introduction Firmware updates can help to fix security vulnerabilities, and performing updates is an important building block in securing IoT devices. Due to rising concerns about insecure IoT devices, the Internet Architecture Board (IAB) organized the Internet of Things Software Update (IoTSU) Workshop [RFC8240] to take a look at the bigger picture. The workshop revealed a number of challenges for developers and led to the formation of the IETF Software Updates for Internet of Things (SUIT) Working Group.¶ Developing secure IoT devices is not an easy task, and supporting a firmware update solution requires skillful engineers. Once devices are deployed, firmware updates play a critical part in their life-cycle management, particularly when devices have a long lifetime or are deployed in remote or inaccessible areas where manual intervention is cost prohibitive or otherwise difficult. Firmware updates for IoT devices are expected to work automatically, i.e., without user involvement. Conversely, non-IoT devices are expected to account for user preferences and consent when scheduling updates. Automatic updates that do not require human intervention are key to a scalable solution for fixing software vulnerabilities.¶ Firmware updates are done not only to fix bugs but also to add new functionality and to reconfigure the device to work in new environments or to behave differently in an already-deployed context.¶ The manifest specification has to allow the following:¶ The firmware image is authenticated and integrity protected. Attempts to flash a maliciously modified firmware image or an image from an unknown, untrusted source must be prevented. This document uses asymmetric cryptography in examples because it is the preferred approach by many IoT deployments. The use of symmetric credentials is also supported and can be used by very constrained IoT devices.¶ The firmware image can be confidentiality protected so that attempts by an adversary to recover the plaintext binary can be mitigated or at least made more difficult. Obtaining the firmware is often one of the first steps to mounting an attack since it gives the adversary valuable insights into the software libraries used, configuration settings, and generic functionality. Even though reverse engineering the binary can be a tedious process, modern reverse engineering frameworks have made this task a lot easier.¶ Authentication and integrity protection of firmware images must be used in a deployment, but the confidential protection of firmware is optional.¶ While the standardization work has been informed by and optimized for firmware update use cases of Class 1 devices (according to the device class definitions in RFC 7228 [RFC7228]), there is nothing in the architecture that restricts its use to only these constrained IoT devices. Moreover, this architecture is not limited to managing firmware and software updates but can also be applied to managing the delivery of arbitrary data, such as configuration information and keys. Unlike higher-end devices, like laptops and desktop PCs, many IoT devices do not have user interfaces; therefore, support for unattended updates is essential for the design of a practical solution. Constrained IoT devices often use a software engineering model where a developer is responsible for creating and compiling all software running on the device into a single, monolithic firmware image. On higher-end devices, application software is, on the other hand, often downloaded separately and even obtained from developers different from the developers of the lower-level software. The details for how to obtain those application-layer software binaries then depend heavily on the platform, the programming language used, and the sandbox in which the software is executed.¶ While the IETF standardization work has been focused on the manifest format, a fully interoperable solution needs more than a standardized manifest. For example, protocols for transferring firmware images and manifests to the device need to be available, as well as the status tracker functionality. Devices also require a mechanism to discover the status tracker(s) and/or firmware servers, for example, using preconfigured hostnames or DNS-based Service Discovery (DNS-SD) [RFC6763]. These building blocks have been developed by various organizations under the umbrella of an IoT device management solution. The Lightweight Machine-to-Machine (LwM2M) protocol [LwM2M] is one IoT device management protocol.¶ However, there are several areas that (partially) fall outside the scope of the IETF and other standards organizations but need to be considered by firmware authors as well as device and network operators. Here are some of them, as highlighted during the IoTSU workshop:¶ Installing firmware updates in a robust fashion so that the update does not break the device functionality of the environment in which this device operates. This requires proper testing and offering of recovery strategies when a firmware update is unsuccessful.¶ Making firmware updates available in a timely fashion considering the complexity of the decision-making process for updating devices, potential recertification requirements, the length of a supply chain an update needs to go through before it reaches the end customer, and the need for user consent to install updates.¶ Ensuring an energy-efficient design of a battery-powered IoT device; a firmware update, particularly radio communication and writing the firmware image to flash, is an energy-intensive task for a device.¶ Creating incentives for device operators to use a firmware update mechanism and to require its integration from IoT device vendors.¶ Ensuring that firmware updates addressing critical flaws can be obtained even after a product is discontinued or a vendor goes out of business.¶ This document starts with a terminology list followed by a description of the architecture. We then explain the bootloader and how it integrates with the firmware update mechanism. Subsequently, we offer a categorization of IoT devices in terms of their hardware capabilities relevant for firmware updates. Next, we talk about the manifest structure and how to use it to secure firmware updates. We conclude with a more detailed example of a message flow for distributing a firmware image to a device.¶ 2. Conventions and Terminology 2.1. Terms This document uses the following terms:¶ Firmware Image: The firmware image, or simply the \"image\", is a binary that may contain the complete software of a device or a subset of it. The firmware image may consist of multiple images if the device contains more than one microcontroller. Often, it is also a compressed archive that contains code, configuration data, and even the entire file system. The image may consist of a differential update for performance reasons.¶ The terms \"firmware image\", \"firmware\", and \"image\" are used in this document and are interchangeable. We use the term \"application firmware image\" to differentiate it from a firmware image that contains the bootloader. An application firmware image, as the name indicates, contains the application program often including all the necessary code to run it (such as protocol stacks and an embedded operating system (OS)).¶ Manifest: The manifest contains metadata about the firmware image. The manifest is protected against modification and provides information about the author.¶ Microcontroller: A microcontroller unit (MCU) is a compact integrated circuit designed for use in embedded systems. A typical microcontroller includes a processor, memory (RAM and flash), input/output (I/O) ports, and other features connected via some bus on a single chip. The term \"system on chip\" (SoC) is often used interchangeably with MCU, but MCU tends to imply more limited peripheral functions.¶ Rich Execution Environment (REE): An environment that is provided and governed by a typical OS (e.g., Linux, Windows, Android, iOS), potentially in conjunction with other supporting operating systems and hypervisors; it is outside of the Trusted Execution Environment (TEE). This environment and the applications running on it are considered untrusted.¶ Software: Similar to firmware but typically dynamically loaded by an OS. Used interchangeably with firmware in this document.¶ System on Chip (SoC): An SoC is an integrated circuit that contains all components of a computer, such as the CPU, memory, I/O ports, secondary storage, a bus to connect the components, and other hardware blocks of logic.¶ Trust Anchor: A trust anchor, as defined in RFC 6024 [RFC6024], represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.¶ Trust Anchor Store: A trust anchor store, as defined in [RFC6024], is a set of one or more trust anchors stored in a device. A device may have more than one trust anchor store, each of which may be used by one or more applications. A trust anchor store must resist modification against unauthorized insertion, deletion, and modification.¶ Trusted Applications (TAs): An application component that runs in a TEE.¶ Trusted Execution Environments (TEEs): An execution environment that runs alongside of, but is isolated from, an REE. For more information about TEEs, see [TEEP-ARCH].¶ 2.2. Stakeholders The following stakeholders are used in this document:¶ Author: The author is the entity that creates the firmware image. There may be multiple authors involved in producing firmware running on an IoT device. Section 5 talks about those IoT device deployment cases.¶ Device Operator: The device operator is responsible for the day-to-day operation of a fleet of IoT devices. Customers of IoT devices, as the owners of IoT devices (such as enterprise customers or end users), interact with their IoT devices indirectly through the device operator via the Web or smartphone apps.¶ Network Operator: The network operator is responsible for the operation of a network to which IoT devices connect.¶ Trust Provisioning Authority (TPA): The TPA distributes trust anchors and authorization policies to devices and various stakeholders. The TPA may also delegate rights to stakeholders. Typically, the original equipment manufacturer (OEM) or original design manufacturer (ODM) will act as a TPA; however, complex supply chains may require a different design. In some cases, the TPA may decide to remain in full control over the firmware update process of their products.¶ User: The end user of a device. The user may interact with devices via the Web or smartphone apps, as well as through direct user interfaces.¶ 2.3. Functions (IoT) Device: A device refers to the entire IoT product, which consists of one or many MCUs, sensors, and/or actuators. Many IoT devices sold today contain multiple MCUs; therefore, a single device may need to obtain more than one firmware image and manifest to successfully perform an update.¶ Status Tracker: The status tracker has a client and a server component and performs three tasks:¶ It communicates the availability of a new firmware version. This information will flow from the server to the client.¶ It conveys information about the software and hardware characteristics of the device. The information flow is from the client to the server.¶ It can remotely trigger the firmware update process. The information flow is from the server to the client.¶ For example, a device operator may want to read the installed firmware version number running on the device and information about available flash memory. Once an update has been triggered, the device operator may want to obtain information about the state of the firmware update. If errors occurred, the device operator may want to troubleshoot problems by first obtaining diagnostic information (typically using a device management protocol).¶ We make no assumptions about where the server-side component is deployed. The deployment of status trackers is flexible: they may be found at cloud-based servers or on-premise servers, or they may be embedded in edge computing devices. A status tracker server component may even be deployed on an IoT device. For example, if the IoT device contains multiple MCUs, then the main MCU may act as a status tracker towards the other MCUs. Such deployment is useful when updates have to be synchronized across MCUs.¶ The status tracker may be operated by any suitable stakeholder, typically the author, device operator, or network operator.¶ Firmware Consumer: The firmware consumer is the recipient of the firmware image and the manifest. It is responsible for parsing and verifying the received manifest and for storing the obtained firmware image. The firmware consumer plays the role of the update component on the IoT device, typically running in the application firmware. It interacts with the firmware server and the status tracker client (locally).¶ Firmware Server: The firmware server stores firmware images and manifests and distributes them to IoT devices. Some deployments may require a store-and-forward concept, which requires storing the firmware images and/or manifests on more than one entity before they reach the device. There is typically some interaction between the firmware server and the status tracker, and these two entities are often physically separated on different devices for scalability reasons.¶ Bootloader: A bootloader is a piece of software that is executed once a microcontroller has been reset. It is responsible for deciding what code to execute.¶ 3. Architecture More devices than ever before are connected to the Internet, which drives the need for firmware updates to be provided over the Internet rather than through traditional interfaces, such as USB or RS-232. Sending updates over the Internet requires the device to fetch the new firmware image as well as the manifest.¶ Hence, the following components are necessary on a device for a firmware update solution:¶ The Internet protocol stack for firmware downloads. Firmware images are often multiple kilobytes, sometimes exceeding one hundred kilobytes, for low-end IoT devices and can even be several megabytes for IoT devices running full-fledged operating systems like Linux. The protocol mechanism for retrieving these images needs to offer features like congestion control, flow control, fragmentation and reassembly, and mechanisms to resume interrupted or corrupted transfers.¶ The capability to write the received firmware image to persistent storage (most likely flash memory).¶ A manifest parser with code to verify a digital signature or a message authentication code (MAC).¶ The ability to unpack, decompress, and/or decrypt the received firmware image.¶ A status tracker.¶ The features listed above are most likely provided by code in the application firmware image running on the device rather than by the bootloader itself. Note that cryptographic algorithms will likely run in a trusted execution environment on a separate MCU in a hardware security module or in a secure element rather than in the same context as the application code.¶ Figure 1 shows the architecture where a firmware image is created by an author and made available to a firmware server. For security reasons, the author will not have the permissions to upload firmware images to the firmware server and to initiate an update directly. Instead, authors will make firmware images available to the device operators. Note that there may be a longer supply chain involved to pass software updates from the author all the way to the authorizing party, which can then finally make a decision to deploy it with IoT devices.¶ As a first step in the firmware update process, the status tracker server needs to inform the status tracker client that a new firmware update is available. This can be accomplished via polling (client initiated), push notifications (server initiated), or more complex mechanisms (such as a hybrid approach):¶ Client-initiated updates take the form of a status tracker client proactively checking (polling) for updates.¶ With server-initiated updates, the server-side component of the status tracker learns about a new firmware version and determines which devices qualify for a firmware update. Once the relevant devices have been selected, the status tracker informs these devices, and the firmware consumers obtain those images and manifests. Server-initiated updates are important because they allow a quick response time. Note that in this mode, the client-side status tracker needs to be reachable by the server-side component. This may require devices to keep reachability information on the server side up to date and the state at NATs and stateful packet filtering firewalls alive.¶ Using a hybrid approach, the server side of the status tracker pushes update availability notifications to the client side and requests that the firmware consumer pull the manifest and the firmware image from the firmware server.¶ Once the device operator triggers an update via the status tracker, it will keep track of the update process on the device. This allows the device operator to know what devices have received an update and which of them are still pending an update.¶ Firmware images can be conveyed to devices in a variety of ways, including USB, Universal Asynchronous Receiver Transmitter (UART), WiFi, Bluetooth Low Energy (BLE), low-power WAN technologies, mesh networks and many more. At the application layer, a variety of protocols are also available: Message Queuing Telemetry Transport (MQTT), Constrained Application Protocol (CoAP), and HTTP are the most popular application-layer protocols used by IoT devices. This architecture does not make assumptions about how the firmware images are distributed to the devices and therefore aims to support all these technologies.¶ In some cases, it may be desirable to distribute firmware images using a multicast or broadcast protocol. This architecture does not make recommendations for any such protocol. However, given that broadcast may be desirable for some networks, updates must cause the least disruption possible both in the metadata and firmware transmission. For an update to be broadcast friendly, it cannot rely on link-layer, network-layer, or transport-layer security. A solution has to rely on security protection applied to the manifest and firmware image instead. In addition, the same manifest must be deliverable to many devices, both those to which it applies and those to which it does not, without a chance that the wrong device will accept the update. Considerations that apply to network broadcasts apply equally to the use of third-party content distribution networks for payload distribution.¶ +----------+ | | | Author | | | +----------+ Firmware + Manifest | +----------------------------------+ | Firmware + | | | Manifest | ---+------- | | ---- | --|- | //+----------+ | \\\\ -+-- // | | | \\ ----/ | ---- |/ | Firmware |<-+ | \\ // | \\\\ | | Server | | | \\ / | \\ / | | + + \\ / | \\ / +----------+ \\ / | / +--------+--------+ \\ / | | / | v | \\ / v | | | +------------+ | | | +----------------+ | | | | Firmware | | | | | Device | | | | | Consumer | | | | | Management | | | | +------------+ | | | | | | | | +------------+ | | | | +--------+ | | | | | Status |<-+--------------------+-> | | | | | | | Tracker | | | | | | Status | | | | | | Client | | | | | | Tracker| | | | | +------------+ | | | | | Server | | | | | Device | | | | +--------+ | | | +-----------------+ | \\ | | / \\ / \\ +----------------+ / \\ Network / \\ / \\ Operator / \\ Device Operator / \\\\ // \\\\ // ---- ---- ---- ---- ----- ----------- Figure 1: Architecture Firmware images and manifests may be conveyed as a bundle or detached. The manifest format must support both approaches.¶ For distribution as a bundle, the firmware image is embedded into the manifest. This is a useful approach for deployments where devices are not connected to the Internet and cannot contact a dedicated firmware server for the firmware download. It is also applicable when the firmware update happens via USB sticks or short-range radio technologies (such as Bluetooth Smart).¶ Alternatively, the manifest is distributed detached from the firmware image. Using this approach, the firmware consumer is presented with the manifest first and then needs to obtain one or more firmware images as dictated in the manifest.¶ The pre-authorization step involves verifying whether the entity signing the manifest is indeed authorized to perform an update. The firmware consumer must also determine whether it should fetch and process a firmware image, which is referenced in a manifest.¶ A dependency resolution phase is needed when more than one component can be updated or when a differential update is used. The necessary dependencies must be available prior to installation.¶ The download step is the process of acquiring a local copy of the firmware image. When the download is client initiated, this means that the firmware consumer chooses when a download occurs and initiates the download process. When a download is server initiated, this means that the status tracker tells the device when to download or that it initiates the transfer directly to the firmware consumer. For example, a download from an HTTP/1.1-based firmware server is client initiated. Pushing a manifest and firmware image to the Package Resource of the LwM2M Firmware Update Object [LwM2M] is a server-initiated update.¶ If the firmware consumer has downloaded a new firmware image and is ready to install it, to initiate the installation, it may¶ need to wait for a trigger from the status tracker,¶ trigger the update automatically, or¶ go through a more complex decision-making process to determine the appropriate timing for an update.¶ Sometimes the final decision may require confirmation of the user of the device for safety reasons.¶ Installation is the act of processing the payload into a format that the IoT device can recognize, and the bootloader is responsible for then booting from the newly installed firmware image. This process is different when a bootloader is not involved. For example, when an application is updated in a full-featured OS, the updater may halt and restart the application in isolation. Devices must not fail when a disruption, such as a power failure or network interruption, occurs during the update process.¶ 4. Invoking the Firmware Section 3 describes the steps for getting the firmware image and the manifest from the author to the firmware consumer on the IoT device. Once the firmware consumer has retrieved and successfully processed the manifest and the firmware image, it needs to invoke the new firmware image. This is managed in many different ways depending on the type of device, but it typically involves halting the current version of the firmware, handing over control to firmware with a higher privilege or trust level (the firmware verifier), verifying the new firmware's authenticity and integrity, and then invoking it.¶ In an execute-in-place microcontroller, this is often done by rebooting into a bootloader (simultaneously halting the application and handing over control to the higher privilege level) then executing a secure boot process (verifying and invoking the new image).¶ In a rich OS, this may be done by halting one or more processes and then invoking new applications. In some OSes, this implicitly involves the kernel verifying the code signatures on the new applications.¶ The invocation process is security sensitive. An attacker will typically try to retrieve a firmware image from the device for reverse engineering or will try to get the firmware verifier to execute an attacker-modified firmware image. Therefore, firmware verifier will have to perform security checks on the firmware image before it can be invoked. These security checks by the firmware verifier happen in addition to the security checks that took place when the firmware image and the manifest were downloaded by the firmware consumer.¶ The overlap between the firmware consumer and the firmware verifier functionality comes in two forms, namely:¶ A firmware verifier must verify the firmware image it boots as part of the secure boot process. Doing so requires metadata to be stored alongside the firmware image so that the firmware verifier can cryptographically verify the firmware image before booting it to ensure it has not been tampered with or replaced. This metadata used by the firmware verifier may well be the same manifest obtained with the firmware image during the update process.¶ An IoT device needs a recovery strategy in case the firmware update/invocation process fails. The recovery strategy may include storing two or more application firmware images on the device or offering the ability to invoke a recovery image to perform the firmware update process again using firmware updates over serial, USB, or even wireless connectivity like Bluetooth Smart. In the latter case, the firmware consumer functionality is contained in the recovery image and requires the necessary functionality for executing the firmware update process, including manifest parsing.¶ While this document assumes that the firmware verifier itself is distinct from the role of the firmware consumer and therefore does not manage the firmware update process, this is not a requirement, and these roles may be combined in practice.¶ Using a bootloader as the firmware verifier requires some special considerations, particularly when the bootloader implements the robustness requirements identified by the IoTSU workshop [RFC8240].¶ 4.1. The Bootloader In most cases, the MCU must restart in order to hand over control to the bootloader. Once the MCU has initiated a restart, the bootloader determines whether a newly available firmware image should be executed. If the bootloader concludes that the newly available firmware image is invalid, a recovery strategy is necessary. There are only two approaches for recovering from invalid firmware: either the bootloader must be able to select different, valid firmware or it must be able to obtain new, valid firmware. Both of these approaches have implications for the architecture of the update system.¶ Assuming the first approach, there are (at least) three firmware images available on the device:¶ First, the bootloader is also firmware. If a bootloader is updatable, then its firmware image is treated like any other application firmware image.¶ Second, the firmware image that has to be replaced is still available on the device as a backup in case the freshly downloaded firmware image does not boot or operate correctly.¶ Third, there is the newly downloaded firmware image.¶ Therefore, the firmware consumer must know where to store the new firmware. In some cases, this may be implicit (for example, replacing the least recently used firmware image). In other cases, the storage location of the new firmware must be explicit, for example, when a device has one or more application firmware images and a recovery image with limited functionality, sufficient only to perform an update.¶ Since many low-end IoT devices do not use position-independent code, either the bootloader needs to copy the newly downloaded application firmware image into the location of the old application firmware image and vice versa or multiple versions of the firmware need to be prepared for different locations.¶ In general, it is assumed that the bootloader itself, or a minimal part of it, will not be updated since a failed update of the bootloader poses a reliability risk.¶ For a bootloader to offer a secure boot functionality, it needs to implement the following functionality:¶ The bootloader needs to fetch the manifest from nonvolatile storage and parse its contents for subsequent cryptographic verification.¶ Cryptographic libraries with hash functions, digital signatures (for asymmetric crypto), and message authentication codes (for symmetric crypto) need to be accessible.¶ The device needs to have a trust anchor store to verify the digital signature. Alternatively, access to a key store for use with the message authentication code may be used.¶ There must be an ability to expose boot-process-related data to the application firmware (such as the status tracker). This allows information sharing about the current firmware version and the status of the firmware update process and whether errors have occurred.¶ Produce boot measurements as part of an attestation solution; see [RATS-ARCH] for more information (optional).¶ The bootloader must be able to decrypt firmware images in case confidentiality protection was applied. This requires a solution for key management (optional).¶ 5. Types of IoT Devices Today, there are billions of MCUs used in devices produced by a large number of silicon manufacturers. While MCUs can vary significantly in their characteristics, there are a number of similarities that allow us to categorize them into groups.¶ The firmware update architecture, and the manifest format in particular, needs to offer enough flexibility to cover these common deployment cases.¶ 5.1. Single MCU The simplest and currently most common architecture consists of a single MCU along with its own peripherals. These SoCs generally contain some amount of flash memory for code and fixed data, as well as RAM for working storage. A notable characteristic of these SoCs is that the primary code is generally execute in place (XIP). Due to the non-relocatable nature of the code, the firmware image needs to be placed in a specific location in flash memory since the code cannot be executed from an arbitrary location therein. Hence, when the firmware image is updated, it is necessary to swap the old and the new image.¶ 5.2. Single CPU with Partitioning between Secure Mode and Normal Mode Another configuration consists of a similar architecture to the one previously discussed: it contains a single CPU. However, this CPU supports a security partitioning scheme that allows memory and other system components to be divided into secure and normal mode. There will generally be two images: one for secure mode and one for normal mode. In this configuration, firmware upgrades will generally be done by the CPU in secure mode, which is able to write to both areas of the flash device. In addition, there are requirements to be able to update either image independently as well as to update them together atomically, as specified in the associated manifests.¶ 5.3. Symmetric Multiple CPUs In more complex SoCs with symmetric multiprocessing support, advanced operating systems, such as Linux, are often used. These SoCs frequently use an external storage medium, such as raw NAND flash or an embedded Multimedia Card (eMMC). Due to the higher quantity of resources, these devices are often capable of storing multiple copies of their firmware images and selecting the most appropriate one to boot. Many SoCs also support bootloaders that are capable of updating the firmware image; however, this is typically a last resort because it requires the device to be held in the bootloader while the new firmware is downloaded and installed, which results in downtime for the device. Firmware updates in this class of device are typically not done in place.¶ 5.4. Dual CPU, Shared Memory This configuration has two or more heterogeneous CPUs in a single SoC that share memory (flash and RAM). Generally, there will be a mechanism to prevent one CPU from unintentionally accessing memory currently allocated to the other. Upgrades in this case will typically be done by one of the CPUs and is similar to the single CPU with secure mode.¶ 5.5. Dual CPU, Other Bus This configuration has two or more heterogeneous CPUs, each having their own memory. There will be a communication channel between them, but it will be used as a peripheral, not via shared memory. In this case, each CPU will have to be responsible for its own firmware upgrade. It is likely that one of the CPUs will be considered the primary CPU and will direct the other CPU to do the upgrade. This configuration is commonly used to offload specific work to other CPUs. Firmware dependencies are similar to the other solutions above: sometimes allowing only one image to be upgraded, other times requiring several to be upgraded atomically. Because the updates are happening on multiple CPUs, upgrading the two images atomically is challenging.¶ 6. Manifests In order for a firmware consumer to apply an update, it has to make several decisions using manifest-provided information and data available on the device itself. For more detailed information and a longer list of information elements in the manifest, consult the information model specification [SUIT-INFO-MODEL], which offers justifications for each element, and the manifest specification [SUIT-MANIFEST] for details about how this information is included in the manifest.¶ Table 1: Example Firmware Update Decisions Decision Information Elements Should I trust the author of the firmware? Trust anchors and authorization policies on the device Has the firmware been corrupted? Digital signature and MAC covering the firmware image Does the firmware update apply to this device? Conditions with Vendor ID, Class ID, and Device ID Is the update older than the active firmware? Sequence number in the manifest (1) When should the device apply the update? Wait directive How should the device apply the update? Manifest commands What kind of firmware binary is it? Unpack algorithms to interpret a format Where should the update be obtained? Dependencies on other manifests and firmware image URI in the manifest Where should the firmware be stored? Storage location and component identifier (1): A device presented with an old but valid manifest and firmware must not be tricked into installing such firmware since a vulnerability in the old firmware image may allow an attacker to gain control of the device.¶ Keeping the code size and complexity of a manifest parser small is important for constrained IoT devices. Since the manifest parsing code may also be used by the bootloader, it can be part of the trusted computing base.¶ A manifest may be used to protect not only firmware images but also configuration data such as network credentials or personalization data related to the firmware or software. Personalization data demonstrates the need for confidentiality to be maintained between two or more stakeholders that deliver images to the same device. Personalization data is used with TEEs, which benefit from a protocol for managing the life cycle of TAs running inside a TEE. TEEs may obtain TAs from different authors, and those TAs may require personalization data, such as payment information, to be securely conveyed to the TEE. The TA's author does not want to expose the TA's code to any other stakeholder or third party. The user does not want to expose the payment information to any other stakeholder or third party.¶ 7. Securing Firmware Updates Using firmware updates to fix vulnerabilities in devices is important, but securing this update mechanism is equally important since security problems are exacerbated by the update mechanism. An update is essentially authorized remote code execution, so any security problems in the update process expose that remote code execution system. Failure to secure the firmware update process will help attackers take control of devices.¶ End-to-end security mechanisms are used to protect the firmware image and the manifest. The following assumptions are made to allow the firmware consumer to verify the received firmware image and manifest before updating the software:¶ Authentication ensures that the device can cryptographically identify the author(s) creating firmware images and manifests. Authenticated identities may be used as input to the authorization process. Not all entities creating and signing manifests have the same permissions. A device needs to determine whether the requested action is indeed covered by the permission of the party that signed the manifest. Informing the device about the permissions of the different parties also happens in an out-of-band fashion and is a duty of the Trust Provisioning Authority.¶ Integrity protection ensures that no third party can modify the manifest or the firmware image. To accept an update, a device needs to verify the signature covering the manifest. There may be one or multiple manifests that need to be validated, potentially signed by different parties. The device needs to be in possession of the trust anchors to verify those signatures. Installing trust anchors to devices via the Trust Provisioning Authority happens in an out-of-band fashion prior to the firmware update process.¶ Confidentiality protection of the firmware image must be done in such a way that no one aside from the intended firmware consumer(s) and other authorized parties can decrypt it. The information that is encrypted individually for each device/recipient must be done in a way that is usable with Content Distribution Networks (CDNs), bulk storage, and broadcast protocols. For confidentiality protection of firmware images, the author needs to be in possession of the certificate/public key or a pre-shared key of a device. The use of confidentiality protection of firmware images is optional.¶ A manifest specification must support different cryptographic algorithms and algorithm extensibility. Moreover, since signature schemes based on RSA and Elliptic Curve Cryptography (ECC) may become vulnerable to quantum-accelerated key extraction in the future, unchangeable bootloader code in ROM is recommended to use post-quantum secure signature schemes such as hash-based signatures [RFC8778]. A bootloader author must carefully consider the service lifetime of their product and the time horizon for quantum-accelerated key extraction. At the time of writing, the worst-case estimate for the time horizon to key extraction with quantum acceleration is approximately 2030, based on current research [quantum-factorization].¶ When a device obtains a monolithic firmware image from a single author without any additional approval steps, the authorization flow is relatively simple. However, there are other cases where more complex policy decisions need to be made before updating a device.¶ In this architecture, the authorization policy is separated from the underlying communication architecture. This is accomplished by separating the entities from their permissions. For example, an author may not have the authority to install a firmware image on a device in critical infrastructure without the authorization of a device operator. In this case, the device may be programmed to reject firmware updates unless they are signed both by the firmware author and by the device operator.¶ Alternatively, a device may trust precisely one entity that does all permission management and coordination. This entity allows the device to offload complex permissions calculations for the device.¶ 8. Example Figure 2 illustrates an example message flow for distributing a firmware image to a device. The firmware and manifest are stored on the same firmware server and distributed in a detached manner.¶ +--------+ +-----------------+ +-----------------------------+ | | | Firmware Server | | IoT Device | | Author | | Status Tracker | | +------------+ +----------+ | +--------+ | Server | | | Firmware | |Bootloader| | | +-----------------+ | | Consumer | | | | | | | +------------+ +----------+ | | | | | | | | | | +-----------------------+ | | Create Firmware | | | Status Tracker Client | | |--------------+ | | +-----------------------+ | | | | `'''''''''''''''''''''''''''' |<-------------+ | | | | | | | | | | Upload Firmware | | | | |------------------>| | | | | | | | | | Create Manifest | | | | |---------------+ | | | | | | | | | | |<--------------+ | | | | | | | | | | Sign Manifest | | | | |-------------+ | | | | | | | | | | |<------------+ | | | | | | | | | | Upload Manifest | | | | |------------------>| Notification of | | | | | new firmware image | | | | |----------------------------->| | | | | | | | | |Initiate| | | | | Update | | | | |<-------| | | | | | | | | Query Manifest | | | | |<--------------------| . | | | | . | | | Send Manifest | . | | |-------------------->| . | | | | Validate | | | | Manifest | | | |--------+ | | | | | | | | |<-------+ | | | | . | | | Request Firmware | . | | |<--------------------| . | | | | . | | | Send Firmware | . | | |-------------------->| . | | | | Verify . | | | | Firmware | | | |--------+ | | | | | | | | |<-------+ | | | | . | | | | Store . | | | | Firmware | | | |--------+ | | | | | | | | |<-------+ | | | | . | | | | . | | | | . | | | | | | | | | Update | | | | |Complete| | | | |------->| | | | | | | | Firmware Update Completed | | | |<-----------------------------| | | | | | | | Reboot | | | |----------------------------->| | | | | | | | | | | | | | | |Reboot | | | | |------>| | | | | | | | | . | | | +---+----------------+--+ | | S| | | | | | E| | Verify | | | | C| | Firmware | | | | U| | +--------------| | | | R| | | | | | | E| | +------------->| | | | | | | | | | B| | Activate new | | | | O| | Firmware | | | | O| | +--------------| | | | T| | | | | | | | | +------------->| | | | P| | | | | | R| | Boot new | | | | O| | Firmware | | | | C| | +--------------| | | | E| | | | | | | S| | +------------->| | | | S| | | | | | +---+----------------+--+ | | | . | | | | | | | | . | | | | Device running new firmware | | | |<-----------------------------| | | | . | | | | | | Figure 2: First Example Flow for a Firmware Update Figure 3 shows an exchange that starts with the status tracker querying the device for its current firmware version. Later, a new firmware version becomes available, and since this device is running an older version, the status tracker server interacts with the device to initiate an update.¶ The manifest and the firmware are stored on different servers in this example. When the device processes the manifest, it learns where to download the new firmware version. The firmware consumer downloads the firmware image with the newer version X.Y.Z after successful validation of the manifest. Subsequently, a reboot is initiated, and the secure boot process starts. Finally, the device reports the successful boot of the new firmware version.¶ +---------+ +-----------------+ +-----------------------------+ | Status | | Firmware Server | | +------------+ +----------+ | | Tracker | | Status Tracker | | | Firmware | |Bootloader| | | Server | | Server | | | Consumer | | | | +---------+ +-----------------+ | | +Status | +----------+ | | | | | Tracker | | | | | | | Client | | | | | | +------------+ | | | | | | IoT Device | | | | `'''''''''''''''''''''''''''' | | | | | Query Firmware Version | | |------------------------------------->| | | Firmware Version A.B.C | | |<-------------------------------------| | | | | | | <<some time later>> | | | | | | _,...._ _,...._ | | ,' `. ,' `. | | | New | | New | | | \\ Manifest / \\ Firmware / | | `.._ _,,' `.._ _,,' | | `'' `'' | | | Push manifest | | |----------------+-------------------->| | | | | | | ' | ' | | | Validate | | | | Manifest | | | |---------+ | | | | | | | | |<--------+ | | | Request firmware | | | | X.Y.Z | | | |<--------------------| | | | | | | | Firmware X.Y.Z | | | |-------------------->| | | | | | | | | Verify | | | | Firmware | | | |--------------+ | | | | | | | | |<-------------+ | | | | | | | | Store | | | | Firmware | | | |-------------+ | | | | | | | | |<------------+ | | | | | | | | | | | | Trigger Reboot | | | |--------------->| | | | | | | | | | | | __..-------..._' | | ,-' `-. | | | Secure Boot | | | `-. _/ | | |`--..._____,,.,-' | | | | | Device running firmware X.Y.Z | | |<-------------------------------------| | | | | | | | | | Figure 3: Second Example Flow for a Firmware Update 9. IANA Considerations This document has no IANA actions.¶ 10. Security Considerations This document describes the terminology, requirements, and an architecture for firmware updates of IoT devices. The content of the document is thereby focused on improving the security of IoT devices via firmware update mechanisms and informs the standardization of a manifest format.¶ An in-depth examination of the security considerations of the architecture is presented in [SUIT-INFO-MODEL].¶ 11. Informative References [LwM2M] Open Mobile Alliance, \"Lightweight Machine to Machine Technical Specification\", Version 1.0.2, February 2018, <http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf>. [quantum-factorization] Jiang, S., Britt, K.A., McCaskey, A.J., Humble, T.S., and S. Kais, \"Quantum Annealing for Prime Factorization\", Scientific Reports 8, December 2018, <https://www.nature.com/articles/s41598-018-36058-z>. [RATS-ARCH] Birkholz, H., Thaler, D., Richardson, M., Smith, N., and W. Pan, \"Remote Attestation Procedures Architecture\", Work in Progress, Internet-Draft, draft-ietf-rats-architecture-12, 23 April 2021, <https://tools.ietf.org/html/draft-ietf-rats-architecture-12>. [RFC6024] Reddy, R. and C. Wallace, \"Trust Anchor Management Requirements\", RFC 6024, DOI 10.17487/RFC6024, October 2010, <https://www.rfc-editor.org/info/rfc6024>. [RFC6763] Cheshire, S. and M. Krochmal, \"DNS-Based Service Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013, <https://www.rfc-editor.org/info/rfc6763>. [RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>. [RFC8240] Tschofenig, H. and S. Farrell, \"Report from the Internet of Things Software Update (IoTSU) Workshop 2016\", RFC 8240, DOI 10.17487/RFC8240, September 2017, <https://www.rfc-editor.org/info/rfc8240>. [RFC8778] Housley, R., \"Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)\", RFC 8778, DOI 10.17487/RFC8778, April 2020, <https://www.rfc-editor.org/info/rfc8778>. [SUIT-INFO-MODEL] Moran, B., Tschofenig, H., and H. Birkholz, \"A Manifest Information Model for Firmware Updates in IoT Devices\", Work in Progress, Internet-Draft, draft-ietf-suit-information-model-11, 6 April 2021, <https://tools.ietf.org/html/draft-ietf-suit-information-model-11>. [SUIT-MANIFEST] Moran, B., Tschofenig, H., Birkholz, H., and K. Zandberg, \"A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest\", Work in Progress, Internet-Draft, draft-ietf-suit-manifest-12, 22 February 2021, <https://tools.ietf.org/html/draft-ietf-suit-manifest-12>. [TEEP-ARCH] Pei, M., Tschofenig, H., Thaler, D., and D. Wheeler, \"Trusted Execution Environment Provisioning (TEEP) Architecture\", Work in Progress, Internet-Draft, draft-ietf-teep-architecture-14, 22 February 2021, <https://tools.ietf.org/html/draft-ietf-teep-architecture-14>. Acknowledgements We would like to thank the following individuals for their feedback:¶ Geraint Luff¶ Amyas Phillips¶ Dan Ros¶ Thomas Eichinger¶ Michael Richardson¶ Emmanuel Baccelli¶ Ned Smith¶ Jim Schaad¶ Carsten Bormann¶ Cullen Jennings¶ Olaf Bergmann¶ Suhas Nandakumar¶ Phillip Hallam-Baker¶ Marti Bolivar¶ Andrzej Puzdrowski¶ Markus Gueller¶ Henk Birkholz¶ Jintao Zhu¶ Takeshi Takahashi¶ Jacob Beningo¶ Kathleen Moriarty¶ Bob Briscoe¶ Roman Danyliw¶ Brian Carpenter¶ Theresa Enghardt¶ Rich Salz¶ Mohit Sethi¶ Éric Vyncke¶ Alvaro Retana¶ Barry Leiba¶ Benjamin Kaduk¶ Martin Duke¶ Robert Wilton¶ We would also like to thank the WG chairs, Russ Housley, David Waltermire, and Dave Thaler for their support and review.¶ Authors' Addresses Brendan Moran Arm Limited Email: Brendan.Moran@arm.com Hannes Tschofenig Arm Limited Email: hannes.tschofenig@arm.com David Brown Linaro Email: david.brown@linaro.org Milosch Meriac Consultant Email: milosch@meriac.com"
    },
    {
        "Number": "9022",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML",
            "HTML with inline errata"
        ],
        "Title": "Domain Name Registration Data (DNRD) Objects Mapping",
        "Authors": [
            "G. Lozano",
            "J. Gould",
            "C. Thippeswamy"
        ],
        "Date": "2021-05",
        "More Info": "Errata",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies the format, contents, and semantics of Domain Name Registration Data (DNRD) escrow deposits for a domain name registry.",
        "Keywords": [
            "data escrow",
            "registry",
            "domain name",
            "domain name registration data"
        ],
        "Content": "RFC 9022: Domain Name Registration Data (DNRD) Objects Mapping RFC 9022 DNRD Objects Mapping May 2021 Lozano, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9022 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: G. Lozano ICANN J. Gould VeriSign C. Thippeswamy VeriSign RFC 9022 Domain Name Registration Data (DNRD) Objects Mapping Abstract This document specifies the format, contents, and semantics of Domain Name Registration Data (DNRD) escrow deposits for a domain name registry.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9022.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Models 2.1.  XML Model 2.2.  CSV Model 3.  Terminology 3.1.  Glossary 4.  Conventions Used in This Document 4.1.  Date and Time 4.2.  Country Names 4.3.  Telephone Numbers 4.4.  CSV Integrity Check 4.5.  IP Addresses 4.6.  Conventions Applicable to the CSV Model 5.  Object Description 5.1.  Domain Name Object 5.2.  Host Object 5.3.  Contact Object 5.4.  Registrar Object 5.5.  IDN Table Reference Object 5.6.  NNDN Object 5.7.  EPP Parameters Object 5.8.  Policy Object 5.9.  Header Object 5.10. DNRD Common Objects Collection 6.  RDE IDN Variants Handling 7.  Profile 8.  Data Escrow Agent Extended Verification Process 9.  Formal Syntax 9.1.  RDE CSV Schema 9.2.  RDE Domain Object 9.3.  CSV Domain Object 9.4.  RDE Host Object 9.5.  CSV Host Object 9.6.  RDE Contact Object 9.7.  CSV Contact Object 9.8.  RDE Registrar Object 9.9.  CSV Registrar Object 9.10. RDE IDN Table Reference Objects 9.11. CSV IDN Language Object 9.12. EPP Parameters Object 9.13. NNDN Object 9.14. CSV NNDN Object 9.15. Policy Object 9.16. Header Object 9.17. DNRD Common Objects 10. Internationalization Considerations 11. IANA Considerations 12. Security Considerations 13. Privacy Considerations 14. Example of a Full Deposit Using the XML Model 15. Example of a Differential Deposit Using the XML Model 16. Example of a Full Deposit Using the CSV Model 17. Example of a Differential Deposit Using the CSV Model 18. References 18.1.  Normative References 18.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction Registry Data Escrow (RDE) is the process by which a registry periodically submits data deposits to a third party called an escrow agent. These deposits comprise the minimum data needed by a third party to resume operations if the registry cannot function and is unable or unwilling to facilitate an orderly transfer of service. For example, for a domain name registry or registrar, the data to be deposited would include all the objects related to registered domain names, e.g., names, contacts, name servers, etc.¶ The goal of data escrow is higher resiliency of registration services for the benefit of Internet users. The beneficiaries of a registry are not just those registering information there, but also the users of services relying on the registry data.¶ In the context of domain name registries, registration data escrow is a requirement for generic top-level domains (e.g., Specification 2 of the ICANN Base Registry Agreement, see [ICANN-GTLD-RA-20170731]) and some country code top-level domain managers are also currently escrowing data. There is also a similar requirement for ICANN-accredited domain registrars.¶ This document defines the standard set of objects for a domain name registry that uses the Registry Data Escrow Specification described in [RFC8909] for escrow. The set of objects include:¶ Domain: Internet domain names that are typically provisioned in a domain name registry using the Extensible Provisioning Protocol (EPP) domain name mapping [RFC5731]. The attributes defined in the EPP domain name mapping [RFC5731] are fully supported by this document.¶ Host: Internet host names that are typically provisioned in a domain name registry using the EPP host mapping [RFC5732]. The attributes defined in the EPP host mapping [RFC5732] are fully supported by this document.¶ Contact: Individual or organization social information provisioned in a domain name registry using the EPP contact mapping [RFC5733]. The attributes defined in the EPP contact mapping [RFC5733] are fully supported by this document.¶ Registrar: The organization that sponsors objects like domains, hosts, and contacts in a domain name registry.¶ NNDN (NNDN's not domain name): Domain Name Registries may maintain domain names without being persisted as domain objects in the registry system, for example, a list of reserved names not available for registration. The NNDN is a lightweight domain-like object that is used to escrow domain names not maintained as domain name objects.¶ This document defines the following pseudo-objects:¶ IDN table reference: Internationalized Domain Names (IDN) included in the domain object data escrow include references to the IDN table and policy used in IDN registration.¶ EPP parameters: Contains the EPP parameters supported by the registry operator.¶ Header: Used to specify counters of objects in the database at a certain point in time (Timeline Watermark).¶ Policy: Used to specify OPTIONAL elements from this specification that are REQUIRED based on the business model of the registry.¶ Extensible Markup Language (XML) 1.0 as described in [W3C.REC-xml-20081126] and XML Schema notation as described in [W3C.REC-xmlschema-1-20041028] and [W3C.REC-xmlschema-2-20041028] are used in this specification.¶ 2. Models This document defines two different models that can be used to deposit data escrow objects: XML and CSV (comma-separated values).¶ The data escrow deposit MAY contain a mix of both models, but an object MUST be escrowed only in one model.¶ This document does not suggest the use of a particular model, and both are equivalent. A domain name registry may choose the model that is more appropriate for the peculiarities of its systems. For example, a registry may use the CSV-export functionality of the Relational Database Management System (RDBMS) for escrow; therefore, the CSV model may be more appropriate. Another registry may use the code developed for EPP to implement escrow.¶ 2.1. XML Model The XML model includes all the deposit information (metadata and data) in an XML document. The definition of the XML format is fully defined in the XML schemas. As a convention, the objects represented using the XML model are referenced using RDE and an XML namespace that is prefixed with \"rde\". For example, the Domain Name object represented using the XML model can be referred to as the RDE Domain Name with the XML namespace including rdeDomain (urn:ietf:params:xml:ns:rdeDomain-1.0).¶ 2.2. CSV Model The CSV model uses XML to define the data escrow format of the data contained in referenced CSV files. As a convention, the objects represented using the CSV model is referenced using CSV and an XML namespace that is prefixed with \"csv\". For example, the domain name object represented using the CSV model can be referred to as the CSV Domain Name with the XML namespace including csvDomain (urn:ietf:params:xml:ns:csvDomain-1.0).¶ 3. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3.1. Glossary In the following section, the most common terms are briefly explained:¶ Allocated: A status of some label with respect to a zone, whereby the label is associated administratively to some entity that has requested the label. This term (and its cognates \"allocation\" and \"to allocate\") may represent the first step on the way to delegation in the DNS.¶ Comma-Separated Values (CSV): See [RFC4180].¶ Domain Name: See the definition of Domain Name in Section 2 of [RFC8499].¶ Extensible Provisioning Protocol (EPP): See the definition of the Extensible Provisioning Protocol in Section 9 of [RFC8499].¶ Fully-Qualified Domain Name (FQDN): See the definition of FQDN in Section 2 of [RFC8499].¶ Internationalized Domain Name (IDN): See the definition of Internationalized Domain Name in Section 2 of [RFC8499].¶ Label See the definition of Label in Section 2 of [RFC8499].¶ Registrant: See the definition of Registrant in Section 9 of [RFC8499].¶ Registrar: See the definition of Registrar in Section 9 of [RFC8499].¶ Registry: See the definition of Registry in Section 9 of [RFC8499].¶ Registry-Class Domain Name (RCDN): Refers to a top-level domain (TLD) or any other domain name at any level in the DNS tree for which a registry (either directly or through an affiliate company) provides Registry Services for other organizations or individuals. For example: .COM, .ORG, .BIZ, .CO.JP, .B.BR.¶ Registry Data Escrow (RDE): Registry Data Escrow is the process by which a registry periodically submits data deposits to a third party called an escrow agent. These deposits comprise the minimum data needed by a third party to resume operations if the registry cannot function and is unable or unwilling to facilitate an orderly transfer of service.¶ Registry Services: Services offered by the registry critical to the following tasks: the provisioning of domain names on receipt of requests and data from registrars; responding to registrar queries for status information relating to the DNS servers for the RCDN; dissemination of RCDN zone files; operation of the registry DNS servers; responding to queries for contact and other information concerning DNS registrations in the RCDN; and any other products or services that only a registry is capable of providing, by reason of its designation as the registry. Typical examples of Registry Services are DNS resolution for the RCDN, WHOIS, and EPP.¶ SRS: Shared Registration System, see also [ICANN-GTLD-AGB-20120604].¶ Top-Level Domain Name (TLD): See the definition of Top-Level Domain in Section 2 of [RFC8499].¶ UTC: Coordinated Universal Time, as maintained by the Bureau International des Poids et Mesures (BIPM), see also [RFC3339].¶ 4. Conventions Used in This Document 4.1. Date and Time Numerous fields indicate \"dates\", such as the creation and expiry dates for domain names. These fields SHALL contain timestamps indicating the date and time in UTC as specified in [RFC3339], with no offset from the zero meridian.¶ 4.2. Country Names Country identifiers SHALL be represented using two character identifiers as specified in [ISO-3166-1].¶ 4.3. Telephone Numbers Telephone numbers (both voice and facsimile) SHALL be formatted based on structures defined in [ITU-E164]. Telephone numbers described in this specification are character strings that MUST begin with a plus sign (\"+\", ASCII value 0x2B), followed by a country code defined in [ITU-E164], followed by a dot (\".\", ASCII value 0x2E), followed by a sequence of digits representing the telephone number.¶ 4.4. CSV Integrity Check A checksum MAY be used to verify the integrity of the CSV files, for example, if another layer (i.e., encryption of an archive containing the deposit files) does not provide integrity. By default, the CRC32 algorithm (see Section 8.1.1.6.2 of [V42]) is used. A stronger algorithm, such as SHA-256 (see [RFC6234]) MAY be used for enhanced security if required.¶ 4.5. IP Addresses The syntax of IP addresses MUST conform to the text representation of either Internet Protocol Version 4 [RFC0791] or Internet Protocol Version 6 [RFC5952].¶ 4.6. Conventions Applicable to the CSV Model 4.6.1. CSV Parent Child Relationship The CSV model represents a relational model where the CSV files represent relational tables, the fields of the CSV files represent columns of the tables, and each line of the CSV file represents a record. As in a relational model, the CSV files can have relationships utilizing primary keys in the parent CSV file definitions and foreign keys in the child CSV file definitions for a one-to-many relationship. The primary keys are not explicitly defined, but the foreign keys are using the boolean \"parent\" field attribute in the child CSV file. The relationships between the CSV files are used to support a cascade replace or cascade delete of records starting from the parent record in Differential and Incremental Deposits (see [RFC8909]).¶ The following is an example of the CSV file definitions, using the element <rdeCsv:csv> (see Section 4.6.2.1), for a Sample object consisting of a parent \"sample\" CSV File Definition and a child \"sampleStatuses\" CSV File Definition. The primary key for the Sample object is the field <csvSample:fName> that is used as the foreign key in the \"sampleStatuses\" CSV File Definition by specifying the \"parent=true\" attribute. If a Sample record is updated or deleted in a Differential or Incremental Deposit, it should cascade replace the data using the records included in the child \"sampleStatuses\" CSV File Definition or cascade delete the existing records in the child \"sampleStatuses\" CSV File Definition, respectively.¶ <csvSample:contents> ... <rdeCsv:csv name=\"sample\" sep=\",\"> <rdeCsv:fields> <csvSample:fName/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fExDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"75E2D22F\"> sample-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"sampleStatuses\" sep=\",\"> <rdeCsv:fields> <csvSample:fName parent=\"true\"/> <csvSample:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"EB9C558E\"> sampleStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvSample:contents> ¶ 4.6.2. CSV Elements 4.6.2.1. <rdeCsv:csv> Element To support the CSV model, an element is defined for each object that substitutes for the <rde:content> element and for the <rde:delete> element, that contains one or more <rdeCsv:csv> elements. For example, the 'Domain Name Object' (Section 5.1) defines the <csvDomain:contents> element, that substitutes for the <rde:content> element, and the <csvDomain:deletes> element, that substitutes for the <rde:delete> element. Both the <csvDomain:contents> element and the <csvDomain:deletes> elements contain one or more <rdeCsv:csv> elements. The <rdeCsv:csv> element has the following child elements:¶ <rdeCsv:fields> Ordered list of CSV fields used in the CSV files. There are one or more child elements that substitute for the <rdeCsv:field> abstract element. Each element defines the format of the CSV field contained in the CSV files. The <rdeCsv:field> elements support the \"type\" attribute that defines the XML simple data type of the field element. The <rdeCsv:field> elements support the \"isRequired\" attribute, which has a default value of \"false\". When set to \"true\", this indicates that the field must be non-empty in the CSV files, and when set to \"false\", this indicates that the field MAY be empty in the CSV files. The \"isRequired\" attribute MAY be specifically set for the field elements within the XML schema and MAY be overridden when specifying the fields under the <rdeCsv:fields> element. The <rdeCsv:field> element supports an OPTIONAL \"parent\" attribute that identifies the field as a reference to a parent object, as defined in the 'CSV Parent Child Relationship' (Section 4.6.1). For example, the <rdeCsv:csv name=\"domainStatuses\"> <csvDomain:fName> field SHOULD set the \"parent\" attribute to \"true\" to identify it as the parent domain name of the domain status.¶ <rdeCsv:files> A list of one or more CSV files using the <rdeCsv:file> child element. The <rdeCsv:file> child element defines a reference to the CSV file name and has the following optional attributes:¶ compression If the CSV file is compressed, the \"compression\" attribute defines the compression format. For example, setting this attribute to \"gzip\" signals that the CSV file is compressed using the GZIP file format (see [RFC1952]). The supported compression formats are negotiated out of band.¶ encoding Defines the encoding of the CSV file with the default encoding of \"UTF-8\".¶ cksum Defines the checksum of the CSV file, as described in Section 4.4, using the algorithm defined by the \"cksumAlg\" attribute. If the \"cksumAlg\" attribute is not present, the checksum is calculated using \"CRC32\".¶ cksumAlg Defines the checksum algorithm used to calculate the \"cksum\" attribute, with the default value of \"CRC32\". If the value \"SHA256\" is specified, the SHA-256 algorithm (see [RFC6234]) MUST be used to calculate the \"cksum\" attribute. Parties receiving and processing data escrow deposits MUST support CRC32 and SHA-256. If this attribute is present, the \"cksum\" attribute MUST also be present. Additional checksum algorithms are negotiated out of band.¶ The <rdeCsv:csv> element requires a \"name\" attribute that defines the purpose of the CSV file with values like \"domain\", \"host\", \"contact\". The supported \"name\" attribute values are defined for each object type. The OPTIONAL \"sep\" attribute defines the CSV separator character with the default separator character of \",\". The need for quoting or escaping of the CSV data could be avoided by choosing a separator character that is not in the data set of the CSV files.¶ The following is an example of the <csvDomain:contents> <rdeCsv:csv> element for domain name records where the <rdeCsv:fRegistrant> is set as required with isRequired=\"true\".¶ <csvDomain:contents> ... <rdeCsv:csv name=\"domain\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName/> <rdeCsv:fRoid/> <rdeCsv:fIdnTableId/> <csvDomain:fOriginalName/> <rdeCsv:fRegistrant isRequired=\"true\"/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fExDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"75E2D01F\"> domain-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ¶ The following is an example of the domain-YYYYMMDD.csv file with one record matching the <rdeCsv:fields> definition.¶ domain1.example,Ddomain2-TEST,,,registrantid,registrarX,registrarX, clientY,2009-04-03T22:00:00.0Z,registrarX,clientY, 2009-12-03T09:05:00.0Z,2025-04-03T22:00:00.0Z ¶ The following is an example of the <csvDomain:deletes> <rdeCsv:csv> element for domain name records.¶ <csvDomain:deletes> ... <rdeCsv:csv name=\"domain\"> <rdeCsv:fields> <csvDomain:fName/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"6F2B988F\"> domain-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:deletes> ¶ The following is example of the domain-delete-YYYYMMDD.csv file with three records that matches the single <csvDomain:fName> field.¶ domain1.example domain2.example domainN.example ¶ 4.6.2.2. CSV Common Field Elements The <rdeCsv:fields> element defined in the '<rdeCsv:csv> Element' (Section 4.6.2.1) has child elements that substitute for the abstract <rdeCsv:field> element. By convention, <rdeCsv:field> elements include an \"f\" prefix to identify them as field definition elements. There are a set of common field elements that are used across multiple data escrow objects. The common field elements are defined using the \"urn:ietf:params:xml:ns:rdeCsv-1.0\" namespace and using the \"rdeCsv\" sample namespace prefix. The CSV common field elements include:¶ <rdeCsv:fUName> UTF-8 encoded name field with type=\"eppcom:labelType\".¶ <rdeCsv:fRoid> Repository Object IDentifier (ROID) field with type=\"eppcom:roidType\" and isRequired=\"true\".¶ <rdeCsv:fRegistrant> Registrant contact identifier with type=\"eppcom:clIDType\".¶ <rdeCsv:fStatusDescription> The object status description, which is free-form text describing the rationale for the status, with type=\"normalizedString\".¶ <rdeCsv:fClID> Identifier of the client (registrar) that sponsors the object with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <rdeCsv:fCrRr> Identifier of the registrar, defined in Section 5.4, of the client that created the object with type=\"eppcom:clIDType\".¶ <rdeCsv:fCrID> Identifier of the client that created the object with type=\"eppcom:clIDType\".¶ <rdeCsv:fUpRr> Identifier of the registrar, defined in Section 5.4, of the client that last updated the object with type=\"eppcom:clIDType\".¶ <rdeCsv:fUpID> Identifier of the client that last updated the object with type=\"eppcom:clIDType\".¶ <rdeCsv:fReRr> Identifier of the registrar, defined in Section 5.4, of the client that requested the transfer with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <rdeCsv:fReID> Identifier of the client that requested the transfer with type=\"eppcom:clIDType\".¶ <rdeCsv:fAcRr> Identifier of the registrar, defined in Section 5.4, of the client that should take or took action with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <rdeCsv:fAcID> Identifier of the client that should take or took action for transfer with type=\"eppcom:clIDType\".¶ <rdeCsv:fCrDate> Created date of object with type=\"dateTime\".¶ <rdeCsv:fUpDate> Updated date of object with type=\"dateTime\".¶ <rdeCsv:fExDate> Expiration date of object with type=\"dateTime\".¶ <rdeCsv:fReDate> Date that transfer was requested with type=\"dateTime\" and isRequired=\"true\".¶ <rdeCsv:fAcDate> Date that transfer action should be taken or has been taken with type=\"dateTime\" and isRequired=\"true\".¶ <rdeCsv:fTrDate> Date of last transfer with type=\"dateTime\".¶ <rdeCsv:fTrStatus> State of the most recent transfer request with type=\"eppcom:trStatusType\" and isRequired=\"true\".¶ <rdeCsv:fTokenType> General token field with type=\"token\".¶ <rdeCsv:fLang> General language field with type=\"language\".¶ <rdeCsv:fIdnTableId> IDN table identifier used for IDN domain names with type=\"token\".¶ <rdeCsv:fPositiveIntegerType> General positive integer field with type=\"positiveInteger\".¶ <rdeCsv:fUrl> Contains the URL of an object like a registrar object with type=\"anyURI\".¶ <rdeCsv:fCustom> Custom field with name attribute that defines the custom field name with type=\"token\".¶ 4.6.3. Internationalized and Localized Elements Some elements MAY be provided in either internationalized form (\"int\") or localized form (\"loc\"). Those elements use a field value or \"isLoc\" attribute to specify the form used. If an \"isLoc\" attribute is used, a value of \"true\" indicates the use of the localized form, and a value of \"false\" indicates the use of the internationalized form. This MAY override the form specified for a parent element. A value of \"int\" is used to indicate the internationalized form, and a value of \"loc\" is used to indicate the localized form. When the internalized form (\"int\") is provided, the field value MUST be represented in a subset of UTF-8 that can be represented in the 7-bit US-ASCII character set. When the localized form (\"loc\") is provided, the field value MAY be represented in unrestricted UTF-8.¶ The field elements below of the \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element specify the internationalized form with the isLoc=\"false\" attribute.¶ ... <csvRegistrar:contents> ... <rdeCsv:csv name=\"registrar\" sep=\",\"> <rdeCsv:fields> <csvRegistrar:fId/> <rdeCsv:fRoid/> <csvRegistrar:fName isLoc=\"false\"/> <csvRegistrar:fGurid/> <csvRegistrar:fStatus/> <csvContact:fStreet isLoc=\"false\" index=\"0\"/> <csvContact:fStreet isLoc=\"false\" index=\"1\"/> <csvContact:fStreet isLoc=\"false\" index=\"2\"/> <csvContact:fCity isLoc=\"false\" /> <csvContact:fSp isLoc=\"false\" /> <csvContact:fPc isLoc=\"false\" /> <csvContact:fCc isLoc=\"false\" /> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail isRequired=\"false\"/> <rdeCsv:fUrl/> <csvRegistrar:fWhoisUrl/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"306178BB\"> registrar-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvRegistrar:contents> ... ¶ The following is an example of using the <csvContact:fPostalType> field value to define the internationalized or localized form of the remainder of the \"contactPostal\" field values.¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contactPostal\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fPostalType/> <csvContact:fName/> <csvContact:fOrg/> <csvContact:fStreet index=\"0\"/> <csvContact:fStreet index=\"1\"/> <csvContact:fStreet index=\"2\"/> <csvContact:fCity/> <csvContact:fSp/> <csvContact:fPc/> <csvContact:fCc/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"02CC2504\"> contactPostal-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ 5. Object Description This section describes the base objects supported by this specification:¶ 5.1. Domain Name Object The domain name object is based on the EPP domain name mapping specified in [RFC5731]. The domain name object supports both the XML model and the CSV model, defined in 'Models' (Section 2). The elements used for both models are defined in the following sections.¶ 5.1.1. XML Model There are two elements used in the data escrow of the domain name objects for the XML model, including the <rdeDomain:domain> element, under the <rde:contents> element, and the <rdeDomain:delete> element, under the <rde:deletes> element.¶ 5.1.1.1. <rdeDomain:domain> Object The domain element is based on the EPP domain <info> response for an authorized client (see Section 3.1.2 of [RFC5731]) with additional data from an EPP <transfer> query response, see Section 3.1.3 of [RFC5731], Registry Grace Period (RGP) status from [RFC3915], and data from the EPP <secDNS:create> command, see Section 5.2.1 of [RFC5910].¶ A <domain> element substitutes for the <abstractDomain> abstract element to create a concrete definition of a domain. The <abstractDomain> element can be replaced by other domain definitions using the XML schema substitution groups feature.¶ The <domain> element contains the following child elements:¶ A <name> element that contains the fully qualified name of the domain name object. For IDNs, the A-label is used (see [RFC5891], Section 4.4).¶ A <roid> element that contains the ROID assigned to the domain name object when it was created.¶ An OPTIONAL <uName> element that contains the FQDN in the Unicode character set. It MUST be provided if available.¶ An OPTIONAL <idnTableId> element that references the IDN table used for the IDN. This corresponds to the \"id\" attribute of the <idnTableRef> element. This element MUST be present if the domain name is an IDN.¶ An OPTIONAL <originalName> element is used to indicate that the domain name is an IDN variant. This element contains the domain name used to generate the IDN variant.¶ One or more <status> elements that contain the current status descriptors associated with the domain name.¶ Zero or more OPTIONAL <rgpStatus> elements to represent \"pendingDelete\" sub-statuses, including \"redemptionPeriod\", \"pendingRestore\", and \"pendingDelete\", that a domain name can be in as a result of grace period processing as specified in [RFC3915].¶ An OPTIONAL <registrant> element that contains the identifier for the human or the organizational social information object associated with the holder of the domain name object.¶ Zero or more OPTIONAL <contact> elements that contain identifiers for the human or organizational social information objects associated with the domain name object.¶ An OPTIONAL <ns> element that contains the fully qualified names of the delegated host objects or host attributes (name servers) associated with the domain name object. See Section 1.1 of [RFC5731] for a description of the elements used to specify host objects or host attributes.¶ A <clID> element that contains the identifier of the sponsoring registrar.¶ An OPTIONAL <crRr> element that contains the identifier of the registrar that created the domain name object. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <crDate> element that contains the date and time of the domain name object creation. This element MUST be present if the domain name has been allocated.¶ An OPTIONAL <exDate> element that contains the date and time identifying the end (expiration) of the domain name object's registration period. This element MUST be present if the domain name has been allocated.¶ An OPTIONAL <upRr> element that contains the identifier of the registrar that last updated the domain name object. This element MUST NOT be present if the domain has never been modified. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <upDate> element that contains the date and time of the most recent modification of the domain name object. This element MUST NOT be present if the domain name object has never been modified.¶ An OPTIONAL <secDNS> element that contains the public key information associated with Domain Name System security (DNSSEC) extensions for the domain name as specified in [RFC5910].¶ An OPTIONAL <trDate> element that contains the date and time of the most recent successful transfer of a domain name object. This element MUST NOT be present if the domain name object has never been transferred.¶ An OPTIONAL <trnData> element that contains the following child elements related to the last transfer request of the domain name object. This element MUST NOT be present if a transfer request for the domain name has never been created.¶ A <trStatus> element that contains the state of the most recent transfer request.¶ A <reRr> element that contains the identifier of the registrar that requested the domain name object transfer. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ A <reDate> element that contains the date and time that the transfer was requested.¶ An <acRr> element that contains the identifier of the registrar that should act upon a pending transfer request. For all other status types, the value identifies the registrar that took the indicated action. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An <acDate> element that contains the date and time of a required or completed response. For a pending request, the value identifies the date and time by which a response is required before an automated response action will be taken by the registry. For all other status types, the value identifies the date and time when the request was completed.¶ An OPTIONAL <exDate> element that contains the end of the domain name object's validity period (expiry date) if the transfer caused or causes a change in the validity period.¶ The following is an example of a domain name object:¶ ... <rdeDomain:domain> <rdeDomain:name>xn--exampl-gva.example</rdeDomain:name> <rdeDomain:roid>Dexample1-TEST</rdeDomain:roid> <rdeDomain:idnTableId>pt-BR</rdeDomain:idnTableId> <rdeDomain:originalName>example.example</rdeDomain:originalName> <rdeDomain:status s=\"ok\"/> <rdeDomain:registrant>jd1234</rdeDomain:registrant> <rdeDomain:contact type=\"admin\">sh8013</rdeDomain:contact> <rdeDomain:contact type=\"tech\">sh8013</rdeDomain:contact> <rdeDomain:ns> <domain:hostObj>ns1.example.com</domain:hostObj> <domain:hostObj>ns1.example1.example</domain:hostObj> </rdeDomain:ns> <rdeDomain:clID>RegistrarX</rdeDomain:clID> <rdeDomain:crRr client=\"jdoe\">RegistrarX</rdeDomain:crRr> <rdeDomain:crDate>1999-04-03T22:00:00.0Z</rdeDomain:crDate> <rdeDomain:exDate>2025-04-03T22:00:00.0Z</rdeDomain:exDate> </rdeDomain:domain> ... ¶ 5.1.1.2. <rdeDomain:delete> Object The <rdeDomain:delete> element contains the FQDN that was deleted and purged.¶ The following is an example of an <rdeDomain:delete> object:¶ ... <rde:deletes> ... <rdeDomain:delete> <rdeDomain:name>foo.example</rdeDomain:name> <rdeDomain:name>bar.example</rdeDomain:name> </rdeDomain:delete> ... </rde:deletes> ... ¶ 5.1.2. CSV Model For the CSV model of the domain name object, the <csvDomain:contents> child element of the <rde:contents> element is used to hold the new or updated domain name objects for the deposit. The <csvDomain:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged domain name objects for the deposit. Both the <csvDomain:contents> and <csvDomain:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ Differential and Incremental Deposits are based on changes to the domain name objects. The updated domain name object data under the <csvDomain:contents> element is a cascade replace down all of the domain name CSV files starting with the parent '\"domain\" CSV File Definition' (Section 5.1.2.1.1). The child CSV file definitions include a <csvDomain:fName parent=\"true\"> field. All the child CSV file definition data for the domain name objects in the parent '\"domain\" CSV File Definition' (Section 5.1.2.1.1) MUST first be deleted and then set using the data in the child CSV files. The deleted domain name object data under the <csvDomain:deletes> element is a cascade delete starting from the '\"domain\" Deletes CSV File Definition' (Section 5.1.2.2.1).¶ 5.1.2.1. <csvDomain:contents> The <csvDomain:contents> is used to hold the new or updated domain name object information for the deposit. The <csvDomain:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported domain name CSV file definitions.¶ 5.1.2.1.1. \"domain\" CSV File Definition The \"domain\" CSV File Definition defines the fields and CSV file references used for the parent domain name object records. All the other domain name CSV file definitions are child CSV files based on the inclusion of the <csvDomain:fName parent=\"true\"> field.¶ The following \"csvDomain\" field elements MUST be used in the \"domain\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name field with type=\"eppcom:labelType\" and isRequired=\"true\".¶ The following \"csvDomain\" field elements MAY be used in the \"domain\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fOriginalName> Fully qualified name of the original IDN domain name object related to the variant domain name object with type=\"eppcom:labelType\".¶ The following \"rdeCsv\" and \"csvRegistrar\" fields, MUST be used in the \"domain\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> ROID for the domain name object with isRequired=\"true\".¶ <rdeCsv:fClID> or <csvRegistrar:fGurid> A choice of the following:¶ <rdeCsv:fClID> Identifier of the sponsoring client with isRequired=\"true\".¶ <csvRegistrar:fGurid> Contains the Globally Unique Registrar Identifier (GURID) assigned by ICANN with type=\"positiveInteger\" and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"domain\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fCrRr> Identifier of the registrar, defined in Section 5.4, of the client that created the domain name object.¶ <rdeCsv:fCrID> Identifier of the client that created the domain name object.¶ <rdeCsv:fUpRr> Identifier of the registrar, defined in Section 5.4, of the client that last updated the domain name object.¶ <rdeCsv:fUpID> Identifier of the client that last updated the domain name object.¶ <rdeCsv:fUName> UTF-8 encoded domain name for the <csvDomain:fName> field element.¶ <rdeCsv:fIdnTableId> IDN table identifier used for the IDN domain name object that MUST match an <rdeCsv:fIdnTableId> field element in the \"idnLanguage\" CSV files, as defined in Section 5.5.2.¶ <rdeCsv:fRegistrant> Registrant contact identifier for the domain name object.¶ <rdeCsv:fCrDate> Date and time of the domain name object creation.¶ <rdeCsv:fUpDate> Date and time of the last update to the domain name object. This field MUST NOT be set if the domain name object has never been modified.¶ <rdeCsv:fExDate> Expiration date and time for the domain name object.¶ <rdeCsv:fTrDate> Date and time of the last transfer for the domain name object. This field MUST NOT be set if the domain name object has never been transferred.¶ The following is an example of a \"domain\" <csvDomain:contents> <rdeCsv:csv> element.¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domain\"> <rdeCsv:fields> <csvDomain:fName/> <rdeCsv:fRoid/> <rdeCsv:fIdnTableId/> <csvDomain:fOriginalName/> <rdeCsv:fRegistrant/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fExDate isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"5E403BD6\"> domain-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domain-YYYYMMDD.csv file. The file contains four records (two active ASCII domains, original IDN with LANG-1 language rules, and variant IDN with LANG-1 language rules).¶ domain1.example,Ddomain1-TEST,,,registrantid,registrarX,registrarX, clientY,2009-04-03T22:00:00.0Z,registrarX,clientY, 2009-12-03T09:05:00.0Z,2025-04-03T22:00:00.0Z domain2.example,Ddomain2-TEST,,,registrantid,registrarX,registrarX, clientY,1999-04-03T22:00:00.0Z,registrarX,clientY, 2009-12-03T09:05:00.0Z,2025-04-03T22:00:00.0Z xn--bc123-3ve.example,Dxnabc123-TEST,LANG-1,,registrantid,registrarX, registrarX,clientY,2009-04-03T22:00:00.0Z,registrarX,clientY, 2009-12-03T09:05:00.0Z,2025-04-03T22:00:00.0Z xn--bc321-3ve.example,Dxnabc321-TEST,LANG-1,xn--bc123-3ve.example, registrantid,registrarX,registrarX,clientY,2009-04-03T22:00:00.0Z, registrarX,clientY,2009-12-03T09:05:00.0Z,2025-04-03T22:00:00.0Z ¶ 5.1.2.1.2. \"domainContacts\" CSV File Definition The \"domainContacts\" CSV File Definition defines the fields and CSV file references used for the domain name object link records to contact objects, as described in 'Contact Object' (Section 5.3).¶ The following \"csvDomain\" field elements, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"domainContacts\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> The name of the domain object that is linked to the contact object with isRequired=\"true\".¶ <csvDomain:fContactType> The contact type for the contact object link with type=\"domain:contactAttrType\" and isRequired=\"true\". The supported contact type values include \"admin\" for the administration contact, \"billing\" for the billing contact, and \"tech\" for the technical contact.¶ The following \"csvContact\" fields, defined for the '\"contact\" CSV File Definition' (Section 5.3.2.1.1), MUST be used in the \"domainContacts\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> The server-unique contact identifier with isRequired=\"true\".¶ The following is an example of a \"domainContacts\" <csvDomain:contents> <rdeCsv:csv> element:¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domainContacts\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvContact:fId/> <csvDomain:fContactType/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"6B976A6C\"> domainContacts-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domainContacts-YYYYMMDD.csv file. The file contains an admin, tech, and billing contact for the four domain names domain1.example, domain2.example, xn--bc123-3ve.example, and xn--bc321-3ve.example:¶ domain1.example,domain1admin,admin domain1.example,domain1tech,tech domain1.example,domain1billing,billing domain2.example,domain2admin,admin domain2.example,domain2tech,tech domain2.example,domain2billing,billing xn--bc123-3ve.example,xnabc123admin,admin xn--bc123-3ve.example,xnabc123tech,tech xn--bc123-3ve.example,xnabc123billing,billing xn--bc321-3ve.example,xnabc123admin,admin xn--bc321-3ve.example,xnabc123tech,tech xn--bc321-3ve.example,xnabc123billing,billing ¶ 5.1.2.1.3. \"domainStatuses\" CSV File Definition The \"domainStatuses\" CSV File Definition defines the fields and CSV file references used for the domain name object statuses.¶ The following \"csvDomain\" fields, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"domainStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name of status with isRequired=\"true\".¶ <csvDomain:fStatus> The status of the domain name with type=\"domain:statusValueType\" and isRequired=\"true\".¶ <csvDomain:fRgpStatus> The RGP status, as a sub-status of the <csvDomain:fStatus> \"pendingDelete\" status value, with type=\"rgp:statusValueType\" as defined in [RFC3915].¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"domainStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fStatusDescription> Domain name object status description, which is free-form text describing the rationale for the status.¶ <rdeCsv:fLang> Language of the <rdeCsv:fStatusDescription> field.¶ The following is an example of a \"domainStatuses\" <csvDomain:contents> <rdeCsv:csv> element:¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domainStatuses\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> <csvDomain:fRgpStatus/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"98D139A3\"> domainStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domainStatuses-YYYYMMDD.csv file. The file contains the statuses for the four domain names domain1.example, domain2.example, xn--bc123-3ve.example, and xn--bc321-3ve.example:¶ domain1.example,clientUpdateProhibited,\"Disallow update\", en, domain1.example,clientDeleteProhibited,\"Disallow delete\", en, domain2.example,ok,,, xn--bc123-3ve.example,ok,,, xn--bc321-3ve.example,ok,,, ¶ 5.1.2.1.4. \"domainNameServers\" CSV File Definition The \"domainNameServers\" CSV File Definition defines the fields and CSV file references used for the domain name delegated hosts (name servers). The \"domainNameServers\" CSV files define the relationship between a domain name object and a delegated host. The \"domainNameServers\" CSV File is used to support the <domain:hostObj> model, defined in [RFC5731].¶ The following \"csvDomain\" fields, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"domainNameServers\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name using the delegated host with isRequired=\"true\".¶ The following \"csvHost\" and \"rdeCsv\" field elements MUST be used in the \"domainNameServers\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fName> or <rdeCsv:fRoid> A choice of the following:¶ <csvHost:fName> Host name field with type=\"eppcom:labelType\" and isRequired=\"true\".¶ <rdeCsv:fRoid> Host object ROID assigned to the host object with isRequired=\"true\".¶ The following is an example of a \"domainNameServers\" <csvDomain:contents> <rdeCsv:csv> element:¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domainNameServers\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fRoid/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"8FE6E9E1\"> domainNameServers-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domainNameServers-YYYYMMDD.csv file. The file contains the delegated hosts (name servers) for the four domain names domain1.example, domain2.example, xn--bc123-3ve.example, and xn--bc321-3ve.example referenced via the <rdeCsv:fRoid> field element:¶ domain1.example,Hns1_domain1_test-TEST domain1.example,Hns2_domain1_test-TEST domain2.example,Hns1_domain2_test-TEST domain2.example,Hns2_domain2_test-TEST xn--bc123-3ve.example,Hns1_example_test-TEST xn--bc123-3ve.example,Hns2_example_test-TEST xn--bc321-3ve.example,Hns1_example_test-TEST xn--bc321-3ve.example,Hns2_example_test-TEST ¶ 5.1.2.1.5. \"domainNameServersAddresses\" CSV File Definition The \"domainNameServersAddresses\" CSV File Definition defines the fields and CSV file references used for supporting the domain host attributes model.¶ The following \"csvDomain\" fields, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"domainNameServersAddresses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name using the delegated host with host <csvHost:fName> and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Model' (Section 5.2.2), MUST be used in the \"domainNameServersAddresses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fName> Host name field with type=\"eppcom:labelType\" and isRequired=\"true\".¶ The following \"csvHost\" fields, defined in 'CSV Model' (Section 5.2.2), MAY be used in the \"domainNameServersAddresses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fAddr> IP addresses associated with the host object with type=\"host:addrStringType\".¶ <csvHost:fAddrVersion> IP addresses version associated with the host object with type=\"host:ipType\". \"host:ipType\" has the enumerated values of \"v4\" or \"v6\".¶ The following is an example of a \"domainNameServersAddresses\" <csvDomain:contents> <rdeCsv:csv> element:¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domainNameServersAddresses\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvHost:fName/> <csvHost:fAddr/> <csvHost:fAddrVersion/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D3B77438\"> domainNameServersAddresses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domainNameServersAddresses-YYYYMMDD.csv file. The file contains the delegated hosts (name servers) for the four domain names domain1.example, domain2.example, xn--bc123-3ve.example, and xn--bc321-3ve.example:¶ domain1.example,ns1.domain1.example,192.0.2.1,v4 domain1.example,ns2.domain1.example,2001:DB8::1,v6 domain2.example,ns1.example.net,, domain2.example,ns2.example.net,, xn--bc123-3ve.example,ns1.example.net,, xn--bc123-3ve.example,ns2.example.net,, xn--bc321-3ve.example,ns1.example.net,, xn--bc321-3ve.example,ns2.example.net,, ¶ 5.1.2.1.6. \"dnssec\" CSV File Definition The \"dnssec\" CSV File Definition defines the fields and CSV file references used for the domain name object DNSSEC records (Delegation Signer (DS) or key data).¶ The following \"csvDomain\" field elements MUST be used in the \"dnssec\" <rdeCsv:csv> <rdeCsv:fields> element when the DS Data Interface per [RFC5910] is used:¶ <csvDomain:fKeyTag> Contains the DS key tag value per [RFC5910] with type=\"unsignedShort\" and isRequired=\"true\".¶ <csvDomain:fDsAlg> Contains the DS algorithm value per [RFC5910] with type=\"unsignedByte\" and isRequired=\"true\".¶ <csvDomain:fDigestType> Contains the DS digest type value per [RFC5910] with type=\"unsignedByte\" and isRequired=\"true\".¶ <csvDomain:fDigest> Contains the DS digest value per [RFC5910] with type=\"hexBinary\" and isRequired=\"true\".¶ The following \"csvDomain\" field elements MUST be used in the \"dnssec\" <rdeCsv:csv> <rdeCsv:fields> element when the Key Data Interface per [RFC5910] is used and MAY be used in the \"dnssec\" <rdeCsv:csv> <rdeCsv:fields> element when the DS Data Interface per [RFC5910] is used:¶ <csvDomain:fFlags> Contains the flags field value per [RFC5910] with type=\"unsignedShort\" and isRequired=\"true\".¶ <csvDomain:fProtocol> Contains the key protocol value per [RFC5910] with type=\"unsignedByte\" and isRequired=\"true\".¶ <csvDomain:fKeyAlg> Contains the key algorithm value per [RFC5910] with type=\"unsignedByte\" and isRequired=\"true\".¶ <csvDomain:fPubKey> Contains the public key value per [RFC5910] with type=\"secDNS:keyType\" and isRequired=\"true\".¶ The following \"csvDomain\" field elements MAY be used in the \"dnssec\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fMaxSigLife> Indicates a child's preference for the number of seconds after signature generation when the parent's signature on the DS information provided by the child will expire with type=\"secDNS:maxSigLifeType\" defined in [RFC5910].¶ The following \"domain\" fields, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"dnssec\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name of the domain name object associated with the DNSSEC record and isRequired=\"true\".¶ The following is an example of a \"dnssec\" <csvDomain:contents> <rdeCsv:csv> element with the DS Data Interface of [RFC5910]:¶ <csvDomain:contents> ... <rdeCsv:csv name=\"dnssec\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fKeyTag/> <csvDomain:fDsAlg/> <csvDomain:fDigestType/> <csvDomain:fDigest/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"10ED6C42\"> dnssec-ds-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding dnssec-ds-YYYYMMDD.csv file. The file contains two DS records for domain1.example:¶ domain1.example,604800,30730,8,2,91C9B176EB////F1C46F6A55 domain1.example,604800,61882,8,2,9F8FEAC94B////1272AF09F3 ¶ The following is an example of a \"dnssec\" <csvDomain:contents> <rdeCsv:csv> element with the Key Data Interface of [RFC5910]:¶ <csvDomain:contents> ... <rdeCsv:csv name=\"dnssec\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fFlags/> <csvDomain:fProtocol/> <csvDomain:fKeyAlg/> <csvDomain:fPubKey/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"183C3F79\"> dnssec-key-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding dnssec-key-YYYYMMDD.csv file. The file contains two key records for domain1.example:¶ domain1.example,604800,257,3,8,AwEAAZD1+z////G1jqviK8c= domain1.example,604800,257,3,8,AwEAAbntWP////vwDitt940= ¶ 5.1.2.1.7. \"domainTransfer\" CSV File Definition The \"domainTransfer\" CSV File Definition defines the fields and CSV file references used for the domain name object pending and completed transfer records. No additional field elements were added for use in the \"domainTransfer\" <rdeCsv:csv> <rdeCsv:fields> element.¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"domainTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fTrStatus> State of the most recent transfer request with isRequired=\"true\".¶ <rdeCsv:fReRr> Identifier of the registrar, defined in Section 5.4, of the client that requested the transfer with isRequired=\"true\".¶ <rdeCsv:fReDate> Date and time that the transfer was requested with isRequired=\"true\".¶ <rdeCsv:fAcRr> Identifier of the registrar, defined in Section 5.4, of the client that should take or took action with isRequired=\"true\".¶ <rdeCsv:fAcDate> Date and time that the transfer action should be taken or has been taken with isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"domainTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fExDate> Expiration date if the transfer command caused or causes a change in the validity period.¶ <rdeCsv:fReID> Identifier of the client that requested the transfer.¶ <rdeCsv:fAcID> Identifier of the client that should take or took action for transfer.¶ The following \"csvDomain\" fields, defined for the '\"domain\" CSV File Definition' (Section 5.1.2.1.1), MUST be used in the \"domainTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name of the domain name object involved in the transfer with isRequired=\"true\".¶ The following is an example of a \"domainTransfer\" <csvDomain:contents> <rdeCsv:csv> element:¶ ... <csvDomain:contents> ... <rdeCsv:csv name=\"domainTransfer\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> <rdeCsv:fExDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"2E5A9ACD\"> domainTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:contents> ... ¶ The following is an example of the corresponding domainTransfer-YYYYMMDD.csv file. The file contains one domain transfer record with a pending status:¶ domain1.example,pending,registrarX,clientY, 2011-03-08T19:38:00.0Z,registrarY,,2011-03-13T23:59:59.0Z, 2025-04-03T22:00:00.0Z ¶ 5.1.2.2. <csvDomain:deletes> The <csvDomain:deletes> is used to hold the deleted domain name objects in a Differential or Incremental Deposit. All the domain name object data is deleted as part of a cascade delete. The <csvDomain:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported domain name deletes CSV file definition.¶ 5.1.2.2.1. \"domain\" Deletes CSV File Definition The following \"csvDomain\" field elements MUST be used in the deletes \"domain\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvDomain:fName> Domain name field with type=\"eppcom:labelType\" and isRequired=\"true\".¶ The following is an example of a \"domain\" <csvDomain:deletes> <rdeCsv:csv> element:¶ ... <csvDomain:deletes> ... <rdeCsv:csv name=\"domain\"> <rdeCsv:fields> <csvDomain:fName/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"A06D8194\"> domain-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvDomain:deletes> ... ¶ The following is an example of the corresponding domain-delete-YYYYMMDD.csv file. The file contains two domain name records:¶ domain1.example domain2.example ¶ 5.2. Host Object The host object is based on the EPP host name mapping in [RFC5732]. The host object supports both the XML model and the CSV model, defined in 'Models' (Section 2). The elements used for both models are defined in the following sections. Both the <csvHost:contents> and <csvHost:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ 5.2.1. XML Model There are two elements used in the data escrow of the host objects for the XML model including the <rdeHost:host> element, under the <rdeHost:contents> element, and the <rdeHost:delete> element, under the <rde:deletes> element.¶ An <rdeHost:host> element substitutes for the <rdeHost:abstractHost> abstract element to create a concrete definition of a host. The <rdeHost:abstractHost> element can be replaced by other host definitions using the XML schema substitution groups feature.¶ 5.2.1.1. <rdeHost:host> Element The RDE host object is based on the EPP host <info> response for an authorized client (Section 3.1.2 of [RFC5732]).¶ The OPTIONAL <host> element contains the following child elements:¶ A <name> element that contains the fully qualified name of the host object.¶ A <roid> element that contains the ROID assigned to the host object when the object was created.¶ One or more <status> elements that describe the status of the host object.¶ Zero or more <addr> elements that contain the IP addresses associated with the host object.¶ A <clID> element that contains the identifier of the sponsoring registrar.¶ An OPTIONAL <crRr> element that contains the identifier of the registrar that created the host object. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <crDate> element that contains the date and time of host object creation.¶ An OPTIONAL <upRr> element that contains the identifier of the registrar that last updated the host object. This element MUST NOT be present if the host object has never been modified. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <upDate> element that contains the date and time of the most recent host object modification. This element MUST NOT be present if the host object has never been modified.¶ An OPTIONAL <trDate> element that contains the date and time of the most recent host object successful transfer. This element MUST NOT be present if the domain name object has never been transferred.¶ The following is an example of a <host> object:¶ ... <rdeHost:host> <rdeHost:name>ns1.example1.example</rdeHost:name> <rdeHost:roid>Hns1_example_test-TEST</rdeHost:roid> <rdeHost:status s=\"ok\"/> <rdeHost:status s=\"linked\"/> <rdeHost:addr ip=\"v4\">192.0.2.2</rdeHost:addr> <rdeHost:addr ip=\"v4\">192.0.2.29</rdeHost:addr> <rdeHost:addr ip=\"v6\">2001:DB8:1::1</rdeHost:addr> <rdeHost:clID>RegistrarX</rdeHost:clID> <rdeHost:crRr>RegistrarX</rdeHost:crRr> <rdeHost:crDate>1999-05-08T12:10:00.0Z</rdeHost:crDate> <rdeHost:upRr>RegistrarX</rdeHost:upRr> <rdeHost:upDate>2009-10-03T09:34:00.0Z</rdeHost:upDate> </rdeHost:host> ... ¶ 5.2.1.2. <rdeHost:delete> Object The <rdeHost:delete> element contains the FQDN of a host that was deleted. The <rdeHost:delete> element also supports host removal based on ROID to support SRS systems in which different hosts with the same FQDN are active at the same time.¶ The following is an example of an <rdeHost:delete> object:¶ ... <rde:deletes> ... <rdeHost:delete> <rdeHost:name>ns1.example.example</rdeHost:name> </rdeHost:delete> ... </rde:deletes> ... ¶ 5.2.2. CSV Model For the CSV model of the host object, the <csvHost:contents> child element of the <rde:contents> element is used to hold the new or updated host objects for the deposit. The <csvHost:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged host objects for the deposit.¶ Differential and Incremental Deposits are based on changes to the host objects. The updated host object data under the <csvHost:contents> element is a cascade replace down all of the host CSV files starting with the parent '\"host\" CSV File Definition' (Section 5.2.2.1.1). The child CSV file definitions include an <rdeCsv:fRoid parent=\"true\"> field. All the child CSV file definition data for the host objects in the parent '\"host\" CSV File Definition' (Section 5.2.2.1.1) MUST first be deleted and then set using the data in the child CSV files. The deleted host object data under the <csvHost:deletes> element is a cascade delete starting from the '\"host\" Deletes CSV File Definition' (Section 5.2.2.2.1).¶ 5.2.2.1. <csvHost:contents> The <csvHost:contents> is used to hold the new or updated host object information for the deposit. The <csvHost:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported host CSV file definitions.¶ 5.2.2.1.1. \"host\" CSV File Definition The \"host\" CSV File Definition defines the fields and CSV file references used for the host object records.¶ The following \"csvHost\" field elements MUST be used in the \"host\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fName> Host name field with type=\"eppcom:labelType\" and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"host\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> ROID assigned to the host object with isRequired=\"true\".¶ The following \"rdeCsv\" and \"csvRegistrar\" fields MAY be used in the \"host\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fClID> or <csvRegistrar:fGurid> A choice of the following:¶ <rdeCsv:fClID> Identifier of the sponsoring client with isRequired=\"true\".¶ <csvRegistrar:fGurid> Contains the GURID assigned by ICANN with type=\"positiveInteger\" and isRequired=\"true\".¶ <rdeCsv:fCrRr> Identifier of the registrar, defined in Section 5.4, of the client that created the host object.¶ <rdeCsv:fCrID> Identifier of the client that created the host object.¶ <rdeCsv:fUpRr> Identifier of the registrar, defined in Section 5.4, of the client that last updated the host object.¶ <rdeCsv:fUpID> Identifier of the client that last updated the host object.¶ <rdeCsv:fCrDate> Date and time that the host object was created.¶ <rdeCsv:fUpDate> Date and time that the host object was last updated. This field MUST NOT be set if the domain name object has never been modified.¶ <rdeCsv:fTrDate> Date and time that the host object was last transferred. This field MUST NOT be set if the domain name object has never been transferred.¶ The following is an example of a \"host\" <csvHost:contents> <rdeCsv:csv> element:¶ ... <csvHost:contents> ... <rdeCsv:csv name=\"host\"> <rdeCsv:fields> <csvHost:fName/> <rdeCsv:fRoid/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fTrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"6F1E58E5\"> host-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvHost:contents> ... ¶ The following is an example of the corresponding host-YYYYMMDD.csv file. The file contains six host records with four being internal hosts and two being external hosts:¶ ns1.domain1.example,Hns1_example_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ns2.domain1.example,Hns2_domain1_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ns1.domain2.example,Hns1_domain2_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ns2.domain2.example,Hns2_domain2_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ns1.example.net,Hns1_example_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ns2.example.net,Hns2_example_test-TEST,registrarX,registrarX, clientY,1999-05-08T12:10:00.0Z,registrarX, clientY,2009-10-03T09:34:00.0Z,2007-01-08T09:19:00.0Z ¶ 5.2.2.1.2. \"hostStatuses\" CSV File Definition The \"hostStatuses\" CSV File Definition defines the fields and CSV file references used for the host object statuses.¶ The following \"csvHost\" fields, defined for the '\"host\" CSV File Definition' (Section 5.2.2.1.1), MUST be used in the \"hostStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fStatus> The status of the host with type=\"host:statusValueType\" and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"hostStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> Host object ROID assigned to the host object with isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"hostStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fStatusDescription> Host object status description, which is free-form text describing the rationale for the status.¶ <rdeCsv:fLang> Language of the <rdeCsv:fStatusDescription> field.¶ The following is an example of a \"hostStatuses\" <csvHost:contents> <rdeCsv:csv> element:¶ ... <csvHost:contents> ... <rdeCsv:csv name=\"hostStatuses\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"0DAE0583\"> hostStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvHost:contents> ... ¶ The following is an example of the corresponding hostStatuses-YYYYMMDD.csv file. The file contains the statuses for the six host names ns1.domain1.example, ns2.domain1.example, ns1.domain2.example, ns2.domain2.example, ns1.example.net, and ns2.example.net:¶ Hns1_domain1_test-TEST,ok,, Hns2_domain1_test-TEST,ok,, Hns1_domain2_test-TEST,ok,, Hns2_domain2_test-TEST,ok,, Hns1_example_test-TEST,ok,, Hns2_example_test-TEST,ok,, ¶ 5.2.2.1.3. \"hostAddresses\" CSV File Definition The \"hostAddresses\" CSV File Definition defines the fields and CSV file references used for the host object IP addresses.¶ The following \"csvHost\" field elements MUST be used in the \"hostAddresses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvHost:fAddr> IP addresses associated with the host object with type=\"host:addrStringType\". The attribute \"isRequired\" MUST equal \"true\".¶ <csvHost:fAddrVersion> IP addresses version associated with the host object with type=\"host:ipType\". \"host:ipType\" has the enumerated values of \"v4\" or \"v6\". The attribute \"isRequired\" MUST equal \"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"hostAddresses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> Host object ROID assigned to the host object with isRequired=\"true\".¶ The following is an example of a \"hostAddresses\" <csvHost:contents> <rdeCsv:csv> element:¶ ... <csvHost:contents> ... <rdeCsv:csv name=\"hostAddresses\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fAddr isRequired=\"true\"/> <csvHost:fAddrVersion isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"28B194B0\"> hostAddresses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvHost:contents> ... ¶ The following is an example of the corresponding hostAddresses-YYYYMMDD.csv file. The file contains the IP addresses for the host names ns1.domain1.example, ns2.domain1.example, ns1.domain2.example, and ns2.domain2.example:¶ Hns1_domain1_test-TEST,192.0.2.1,v4 Hns2_domain1_test-TEST,2001:DB8::1,v6 Hns1_domain2_test-TEST,192.0.2.2,v4 Hns2_domain2_test-TEST,2001:DB8::2,v6 ¶ 5.2.2.2. <csvHost:deletes> The <csvHost:deletes> is used to hold the deleted host objects in a Differential or Incremental Deposit. All the host object data is deleted as part of a cascade delete. The <csvHost:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported host deletes CSV file definition.¶ 5.2.2.2.1. \"host\" Deletes CSV File Definition The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"host\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> ROID assigned to the host object with isRequired=\"true\".¶ The following is an example of a \"host\" <csvHost:deletes> <rdeCsv:csv> element:¶ ... <csvHost:deletes> ... <rdeCsv:csv name=\"host\"> <rdeCsv:fields> <rdeCsv:fRoid/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"777F5F0E\"> host-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvHost:deletes> ... ¶ The following is an example of the host-delete-YYYYMMDD.csv file. The file contains four host records:¶ Hns1_domain1_test-TEST Hns2_domain1_test-TEST Hns1_domain2_test-TEST Hns2_domain2_test-TEST ¶ 5.3. Contact Object The contact object is based on the EPP contact name mapping in [RFC5733]. The contact object supports both the XML model and the CSV model, defined in 'Models' (Section 2). The elements used for both models are defined in the following sections.¶ 5.3.1. XML Model There are two elements used in the data escrow of the contact objects for the XML model including the <rdeContact:contact> element, under the <rdeContact:contents> element, and the <rdeContact:delete> element, under the <rde:deletes> element.¶ A <contact> element substitutes for the <abstractContact> abstract element to create a concrete definition of a contact. The <abstractContact> element can be replaced by other contact definitions using the XML schema substitution groups feature.¶ 5.3.1.1. <rdeContact:contact> Object The contact object is based on the EPP contact <info> response for an authorized client (Section 3.1.2 of [RFC5733]) with some additions including the data from an EPP <transfer> query response, see Section 3.1.3 of [RFC5733].¶ The OPTIONAL <contact> element contains the following child elements:¶ A <id> element that contains the server-unique identifier of the contact object.¶ A <roid> element that contains the ROID assigned to the contact object when the object was created.¶ One or more <status> elements that describe the status of the contact object.¶ One or two <postalInfo> elements that contain postal-address information. Two elements are provided so that address information can be provided in both internationalized and localized forms; a \"type\" attribute is used to identify the two forms. If an internationalized form (type=\"int\") is provided, element content MUST be represented in a subset of UTF-8 that can be represented in the 7-bit US-ASCII character set. If a localized form (type=\"loc\") is provided, element content MAY be represented in unrestricted UTF-8. The <postalInfo> element contains the following child elements:¶ A <name> element that contains the name of the individual or role represented by the contact.¶ An OPTIONAL <org> element that contains the name of the organization with which the contact is affiliated.¶ An <addr> element that contains address information associated with the contact. An <addr> element contains the following child elements:¶ One, two, or three OPTIONAL <street> elements that contain the contact's street address.¶ A <city> element that contains the contact's city.¶ An OPTIONAL <sp> element that contains the contact's state or province.¶ An OPTIONAL <pc> element that contains the contact's postal code.¶ A <cc> element that contains the contact's two-letter country code.¶ An OPTIONAL <voice> element that contains the contact's voice telephone number.¶ An OPTIONAL <fax> element that contains the contact's facsimile telephone number.¶ An <email> element that contains the contact's email address.¶ A <clID> element that contains the identifier of the sponsoring registrar.¶ An OPTIONAL <crRr> element that contains the identifier of the registrar that created the contact object. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <crDate> element that contains the date and time of contact object creation.¶ An OPTIONAL <upRr> element that contains the identifier of the registrar that last updated the contact object. This element MUST NOT be present if the contact has never been modified. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An OPTIONAL <upDate> element that contains the date and time of the most recent contact object modification. This element MUST NOT be present if the contact object has never been modified.¶ An OPTIONAL <trDate> element that contains the date and time of the most recent contact object successful transfer. This element MUST NOT be present if the contact object has never been transferred.¶ An OPTIONAL <trnData> element that contains the following child elements related to the last transfer request of the contact object:¶ A <trStatus> element that contains the state of the most recent transfer request.¶ An <reRr> element that contains the identifier of the registrar that requested the domain name object transfer. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An <acRr> element that contains the identifier of the registrar that should act upon a pending transfer request. For all other status types, the value identifies the registrar that took the indicated action. An OPTIONAL \"client\" attribute is used to specify the client that performed the operation.¶ An <reDate> element that contains the date and time that the transfer was requested.¶ An <acDate> element that contains the date and time of a required or completed response. For a pending request, the value identifies the date and time by which a response is required before an automated response action will be taken by the registry. For all other status types, the value identifies the date and time when the request was completed.¶ An OPTIONAL <disclose> element that identifies elements that requiring exceptional server-operator handling to allow or restrict disclosure to third parties. See Section 2.9 of [RFC5733] for a description of the child elements contained within the <disclose> element.¶ The following is an example of a <contact> object:¶ ... <rdeContact:contact> <rdeContact:id>sh8013</rdeContact:id> <rdeContact:roid>Csh8013-TEST</rdeContact:roid> <rdeContact:status s=\"linked\"/> <rdeContact:status s=\"clientDeleteProhibited\"/> <rdeContact:postalInfo type=\"int\"> <contact:name>John Doe</contact:name> <contact:org>Example Inc.</contact:org> <contact:addr> <contact:street>123 Example Dr.</contact:street> <contact:street>Suite 100</contact:street> <contact:city>Dulles</contact:city> <contact:sp>VA</contact:sp> <contact:pc>20166-6503</contact:pc> <contact:cc>US</contact:cc> </contact:addr> </rdeContact:postalInfo> <rdeContact:voice x=\"1234\">+1.7035555555</rdeContact:voice> <rdeContact:fax>+1.7035555556</rdeContact:fax> <rdeContact:email>jdoe@example.example</rdeContact:email> <rdeContact:clID>RegistrarX</rdeContact:clID> <rdeContact:crRr client=\"jdoe\">RegistrarX</rdeContact:crRr> <rdeContact:crDate>2009-09-13T08:01:00.0Z</rdeContact:crDate> <rdeContact:upRr client=\"jdoe\">RegistrarX</rdeContact:upRr> <rdeContact:upDate>2009-11-26T09:10:00.0Z</rdeContact:upDate> <rdeContact:trDate>2009-12-03T09:05:00.0Z</rdeContact:trDate> <rdeContact:trnData> <rdeContact:trStatus>pending</rdeContact:trStatus> <rdeContact:reRr client=\"jstiles\">clientW</rdeContact:reRr> <rdeContact:reDate>2011-03-08T19:38:00.0Z</rdeContact:reDate> <rdeContact:acRr client=\"rmiles\">RegistrarX</rdeContact:acRr> <rdeContact:acDate>2011-03-13T23:59:59.0Z</rdeContact:acDate> </rdeContact:trnData> <rdeContact:disclose flag=\"0\"> <contact:voice/> <contact:email/> </rdeContact:disclose> </rdeContact:contact> ... ¶ 5.3.1.2. <rdeContact:delete> Object The <rdeContact:delete> element contains the id of a contact that was deleted.¶ The following is an example of an <rdeContact:delete> object:¶ ... <rde:deletes> ... <rdeContact:delete> <rdeContact:id>sh8013-TEST</rdeContact:id> <rdeContact:id>co8013-TEST</rdeContact:id> </rdeContact:delete> ... </rde:deletes> ... ¶ 5.3.2. CSV Model For the CSV model of the contact object, the <csvContact:contents> child element of the <rde:contents> element is used to hold the new or updated contacts objects for the deposit. The <csvContact:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged contact objects for the deposit. Both the <csvContact:contents> and <csvContact:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ Differential and Incremental Deposits are based on changes to the contact objects. The updated contact object data under the <csvContact:contents> element is a cascade replace down all of the contact CSV files starting with the parent '\"contact\" CSV File Definition' (Section 5.3.2.1.1). The child CSV file definitions include a <csvContact:fId parent=\"true\"> field. All the child CSV file definition data for the contact objects in the parent '\"contact\" CSV File Definition' (Section 5.3.2.1.1) MUST first be deleted and then set using the data in the child CSV files. The deleted contact object data under the <csvContact:deletes> element is a cascade delete starting from the '\"contact\" Deletes CSV File Definition' (Section 5.3.2.2.1).¶ 5.3.2.1. <csvContact:contents> The <csvContact:contents> is used to hold the new or updated contact object information for the deposit. The <csvContact:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported contact CSV file definitions.¶ 5.3.2.1.1. \"contact\" CSV File Definition The \"contact\" CSV File Definition defines the fields and CSV file references used for the contact object records.¶ The following \"csvContact\" field elements MUST be used in the \"contact\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Contains the server-unique contact identifier with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <csvContact:fEmail> Contains the contact's email address with type=\"eppcom:minTokenType\" and isRequired=\"true\".¶ The following field elements MAY be used in the \"contact\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fVoice> Contains the contact's voice telephone number with type=\"contact:e164StringType\".¶ <csvContact:fVoiceExt> Contains the contact's voice telephone number extension with type=\"token\".¶ <csvContact:fFax> Contains the contact's facsimile telephone number with type=\"contact:e164StringType\".¶ <csvContact:fFaxExt> Contains the contact's facsimile telephone number extension with type=\"token\".¶ The following \"rdeCsv\" and \"csvRegistrar\" fields MUST be used in the \"contact\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fRoid> The ROID for the contact object with isRequired=\"true\".¶ <rdeCsv:fClID> or <csvRegistrar:fGurid> A choice of the following:¶ <rdeCsv:fClID> Identifier of the sponsoring client with isRequired=\"true\".¶ <csvRegistrar:fGurid> Contains the GURID assigned by ICANN with type=\"positiveInteger\" and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"contact\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fCrRr> Identifier of the registrar, defined in Section 5.4, of the client that created the contact object.¶ <rdeCsv:fCrID> Identifier of the client that created the contact object.¶ <rdeCsv:fUpRr> Identifier of the registrar, defined in Section 5.4, of the client that last updated the contact object.¶ <rdeCsv:fUpID> Identifier of the client that last updated the contact object.¶ <rdeCsv:fCrDate> Date and time of the contact object creation.¶ <rdeCsv:fUpDate> Date and time of the last update to the contact object. This field MUST NOT be set if the domain name object has never been modified.¶ <rdeCsv:fTrDate> Date and time of the last transfer for the contact object. This field MUST NOT be set if the domain name object has never been transferred.¶ The following is an example of a \"contact\" <csvContact:contacts> <rdeCsv:csv> element:¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contact\"> <rdeCsv:fields> <csvContact:fId/> <rdeCsv:fRoid/> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"8587AA49\"> contact-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ The following is an example of the contact-YYYYMMDD.csv file. The file contains nine object contact records:¶ domain1admin,Cdomain1admin-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z domain1tech,Cdomain1tech-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z domain1billing,Cdomain1billing-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z domain2admin,Cdomain2admin-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z domain2tech,Cdomain2tech-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z domain2billing,Cdomain2billing-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z xnabc123admin,Cxnabc123admin-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z xnabc123tech,Cxnabc123tech-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z xnabc123billing,Cxnabc123billing-TEST,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,registrarX,registrarX, clientY,2009-09-13T08:01:00.0Z,registrarX,clientY, 2009-11-26T09:10:00.0Z ¶ 5.3.2.1.2. \"contactStatuses\" CSV File Definition The \"contactStatuses\" CSV File Definition defines the fields and CSV file references used for the contact object statuses.¶ The following \"csvContact\" field elements, defined in the '\"contact\" CSV File Definition' (Section 5.3.2.1.1), MUST be used in the \"contactStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Server-unique contact identifier of status with isRequired=\"true\" and parent=\"true\".¶ <csvContact:fStatus> The status of the contact with type=\"contact:statusValueType\" and isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"contactStatuses\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fStatusDescription> The contact object status description, which is free-form text describing the rationale for the status.¶ <rdeCsv:fLang> Language of the <rdeCsv:fStatusDescription> field.¶ The following is an example of a \"contactStatuses\" <csvContact:contents> <rdeCsv:csv> element:¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contactStatuses\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"137E13EC\"> contactStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ The following is an example of the corresponding contactStatuses-YYYYMMDD.csv file. The file contains the statuses for the nine contact identifiers:¶ domain1admin,ok,, domain1tech,ok,, domain1billing,ok,, domain2admin,ok,, domain2tech,ok,, domain2billing,ok,, xnabc123admin,ok,, xnabc123tech,ok,, xnabc123billing,ok,, ¶ 5.3.2.1.3. \"contactPostal\" CSV File Definition The \"contactPostal\" CSV File Definition defines the fields and CSV file references used for the contact postal info object records.¶ The following \"csvContact\" field elements MUST be used in the \"contactPostal\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fPostalType> Contains the form of the postal address information with type=\"contact:postalLineType\" and isRequired=\"true\". This field specifies the form (\"int\" or \"loc\"), as defined in Section 4.6.3, of the <csvContact:fName>, <csvContact:fOrg>, <csvContact:fStreet>, <csvContact:fCity>, <csvContact:fSp>, <csvContact:fPc>, and <csvContact:fCc> fields.¶ <csvContact:fName> Contains the contact's name of the individual or role represented by the contact with type=\"contact:postalLineType\" and isRequired=\"true\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ <csvContact:fStreet> Contains the contact's street address line with type=\"contact:fPostalLineType\". An \"index\" attribute is required to indicate which street address line the field represents with index=\"0\" for the first line and incrementing for each line up to index=\"2\" for the third line. An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ <csvContact:fCity> Contains the contact's city with type=\"contact:postalLineType\" and isRequired=\"true\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ <csvContact:fCc> Contains the contact's country code with type=\"contact:ccType\" and isRequired=\"true\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ The following \"csvContact\" field elements MAY be used in the \"contactPostal\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fOrg> Contains the name of the organization with which the contact is affiliated with type=\"contact:optPostalLineType\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ <csvContact:fSp> Contains the contact's state or province with type=\"contact:optPostalLineType\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ <csvContact:fPc> Contains the contact's postal code with type=\"contact:pcType\". An OPTIONAL \"isLoc\" attribute is used to indicate the localized or internationalized form as defined in Section 4.6.3.¶ The following \"csvContact\" fields, defined in the '\"contact\" CSV File Definition' (Section 5.3.2.1.1), MUST be used in the \"contactPostal\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Server-unique contact identifier for the contact object with isRequired=\"true\" and parent=\"true\".¶ The following is an example of a \"contactPostal\" <csvContact:contents> <rdeCsv:csv> element:¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contactPostal\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fPostalType/> <csvContact:fName/> <csvContact:fOrg/> <csvContact:fStreet index=\"0\"/> <csvContact:fStreet index=\"1\"/> <csvContact:fStreet index=\"2\"/> <csvContact:fCity/> <csvContact:fSp/> <csvContact:fPc/> <csvContact:fCc/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"1456A89C\"> contactPostal-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ The following is an example of the contactPostal-YYYYMMDD.csv file. The file contains nine contact postal records:¶ domain1admin,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US domain1tech,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US domain1billing,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US domain2admin,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US domain2tech,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US domain2billing,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US xnabc123admin,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US xnabc123tech,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US xnabc123billing,int,\"John Doe\",\"Example Inc.\", \"123 Example Dr.\",\"Suite 100\",,Reston,VA,20190,US ¶ 5.3.2.1.4. \"contactTransfer\" CSV File Definition The \"contactTransfer\" CSV File Definition defines the fields and CSV file references used for the contact object pending and completed transfer records. No additional field elements were added for use in the \"contactTransfer\" <rdeCsv:csv> <rdeCsv:fields> element. The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MUST be used in the \"contactTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fTrStatus> State of the most recent transfer request with isRequired=\"true\".¶ <rdeCsv:fReRr> Identifier of the registrar, defined in Section 5.4, of the client that requested the transfer with isRequired=\"true\".¶ <rdeCsv:fReDate> Date and time that the transfer was requested with isRequired=\"true\".¶ <rdeCsv:fAcRr> Identifier of the registrar, defined in Section 5.4, of the client that should take or took action with isRequired=\"true\".¶ <rdeCsv:fAcDate> Date and time that the transfer action should be taken or has been taken with isRequired=\"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"contactTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fReID> Identifier of the client that requested the transfer.¶ <rdeCsv:fAcID> Identifier of the client that should take or took action for transfer.¶ The following \"csvContact\" fields, defined for the '\"contact\" CSV File Definition' (Section 5.3.2.1.1), MUST be used in the \"contactTransfer\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Server-unique contact identifier for the contact object with isRequired=\"true\".¶ The following is an example of a \"contactTransfer\" <csvContact:contents> <rdeCsv:csv> element:¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contactTransfer\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"788D308E\"> contactTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ The following is an example of the contactTransfer-YYYYMMDD.csv file. The file contains one contact transfer record in pending status:¶ xnabc123admin,clientApproved,registrarX,clientX, 2011-04-08T19:38:00.0Z,registrarY,clientY,2011-04-09T20:38:00.0Z ¶ 5.3.2.1.5. \"contactDisclose\" CSV File Definition The \"contactDisclose\" CSV File Definition defines the fields and CSV file references used for the contact disclose object records.¶ The following \"csvContact\" field elements MAY be used in the \"contactDisclose\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fDiscloseFlag> Contains flag with a value of \"true\" or \"1\" (one) notes the preference to allow disclosure of the specified elements as an exception to the stated data-collection policy. A value of \"false\" or \"0\" (zero) notes a client preference to not allow disclosure of the specified elements as an exception to the stated data-collection policy with type=\"boolean\". The additional fields define specific exceptional disclosure preferences based on the <csvContact:fDiscloseFlag> field.¶ <csvContact:fDiscloseNameLoc> Exceptional disclosure preference flag for the localized form of the contact name with type=\"boolean\".¶ <csvContact:fDiscloseNameInt> Exceptional disclosure preference flag for the internationalized form of the contact name with type=\"boolean\".¶ <csvContact:fDiscloseOrgLoc> Exceptional disclosure preference flag for the localized form of the contact organization with type=\"boolean\".¶ <csvContact:fDiscloseOrgInt> Exceptional disclosure preference flag for the internationalized form of the contact organization with type=\"boolean\".¶ <csvContact:fDiscloseAddrLoc> Exceptional disclosure preference flag for the localized form of the contact address with type=\"boolean\".¶ <csvContact:fDiscloseAddrInt> Exceptional disclosure preference flag for the internationalized form of the contact address with type=\"boolean\".¶ <csvContact:fDiscloseVoice> Exceptional disclosure preference flag of the contact voice telephone number with type=\"boolean\".¶ <csvContact:fDiscloseFax> Exceptional disclosure preference flag of the contact facsimile telephone number with type=\"boolean\".¶ <csvContact:fDiscloseEmail> Exceptional disclosure preference flag of the contact email address with type=\"boolean\".¶ The following \"csvContact\" fields, defined for the '\"contact\" CSV File Definition' (Section 5.3.2.1.1), MUST be used in the \"contactDisclose\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Server-unique contact identifier for the contact object with isRequired=\"true\".¶ The following is an example of a \"contactDisclose\" <csvContact:contents> <rdeCsv:csv> element:¶ ... <csvContact:contents> ... <rdeCsv:csv name=\"contactDisclose\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fDiscloseFlag/> <csvContact:fDiscloseNameLoc/> <csvContact:fDiscloseNameInt/> <csvContact:fDiscloseOrgLoc/> <csvContact:fDiscloseOrgInt/> <csvContact:fDiscloseAddrLoc/> <csvContact:fDiscloseAddrInt/> <csvContact:fDiscloseVoice/> <csvContact:fDiscloseFax/> <csvContact:fDiscloseEmail/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"1141EFD4\"> contactDisclose-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:contents> ... ¶ The following is an example of the contactDisclose-YYYYMMDD.csv file. The file contains one disclosure records, disabling disclosure of voice, fax, and email:¶ xnabc123admin,0,0,0,0,0,0,0,1,1,1 ¶ 5.3.2.2. <csvContact:deletes> The <csvContact:deletes> is used to hold the deleted contact objects in a Differential or Incremental Deposit. All the contact object data is deleted as part of a cascade delete. The <csvContact:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported contact deletes CSV file definition.¶ 5.3.2.2.1. \"contact\" Deletes CSV File Definition The following \"csvContact\" field elements MUST be used in the deletes \"contact\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fId> Contains the server-unique contact identifier with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ The following is an example of a \"contact\" <csvContact:deletes> <rdeCsv:csv> element:¶ ... <csvContact:deletes> ... <rdeCsv:csv name=\"contact\"> <rdeCsv:fields> <csvContact:fId/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"0C4B70DC\"> contact-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvContact:deletes> ... ¶ The following is an example of the contact-delete-YYYYMMDD.csv file. The file contains six contact records:¶ domain1admin domain1tech domain1billing domain2admin domain2tech domain2billing ¶ 5.4. Registrar Object The registrar object represents the sponsoring client for other objects and is typically referred to as the sponsoring registrar. The registrar object supports both the XML model and the CSV model, defined in Section 2. The elements used for both models are defined in the following sections.¶ 5.4.1. XML Model There are two elements used in the data escrow of the registrar objects for the XML model including the <rdeRegistrar:registrar> element, under the <rdeRegistrar:contents> element, and the <rdeRegistrar:delete> element, under the <rde:deletes> element.¶ An <rdeRegistrar:registrar> element substitutes for the <rdeRegistrar:abstractRegistrar> abstract element to create a concrete definition of a registrar. The <rdeRegistrar:abstractRegistrar> element can be replaced by other domain definitions using the XML schema substitution groups feature.¶ 5.4.1.1. <rdeRegistrar:registrar> Element The <registrar> element contains the following child elements:¶ An <id> element that contains the registry-unique identifier of the registrar object. This <id> has a superordinate relationship to a subordinate <clID>, <crRr>, or <upRr> of domain, contact, and host objects.¶ An <name> element that contains the name of the registrar.¶ An OPTIONAL <gurid> element that contains the GURID assigned by ICANN.¶ An OPTIONAL <status> element that contains the operational status of the registrar. Possible values are: ok, readonly, and terminated.¶ One or two OPTIONAL <postalInfo> elements that contain postal address information. Two elements are provided so that address information can be provided in both internationalized and localized forms; a \"type\" attribute is used to identify the two forms. If an internationalized form (type=\"int\") is provided, element content MUST be represented in a subset of UTF-8 that can be represented in the 7-bit US-ASCII character set. If a localized form (type=\"loc\") is provided, element content MAY be represented in unrestricted UTF-8. The <postalInfo> element contains the following child elements:¶ A <addr> element that contains address information associated with the registrar. The <addr> element contains the following child elements:¶ One, two, or three OPTIONAL <street> elements that contain the registrar's street address.¶ A <city> element that contains the registrar's city.¶ An OPTIONAL <sp> element that contains the registrar's state or province.¶ An OPTIONAL <pc> element that contains the registrar's postal code.¶ A <cc> element that contains the registrar's country code.¶ An OPTIONAL <voice> element that contains the registrar's voice telephone number.¶ An OPTIONAL <fax> element that contains the registrar's facsimile telephone number.¶ An OPTIONAL <email> element that contains the registrar's email address.¶ An OPTIONAL <url> element that contains the registrar's URL.¶ An OPTIONAL <whoisInfo> element that contains WHOIS information. The <whoisInfo> element contains the following child elements:¶ An OPTIONAL <name> element that contains the name of the registrar WHOIS server listening on TCP port 43 as specified in [RFC3912].¶ An OPTIONAL <url> element that contains the name of the registrar WHOIS server listening on TCP port 80/443.¶ An OPTIONAL <crDate> element that contains the creation date and time of the registrar object.¶ An OPTIONAL <upDate> element that contains the date and time of the most recent modification of the registrar object. This element MUST NOT be present if the registrar object has never been modified.¶ The following is an example of a <registrar> object:¶ ... <rdeRegistrar:registrar> <rdeRegistrar:id>RegistrarX</rdeRegistrar:id> <rdeRegistrar:name>Registrar X</rdeRegistrar:name> <rdeRegistrar:gurid>8</rdeRegistrar:gurid> <rdeRegistrar:status>ok</rdeRegistrar:status> <rdeRegistrar:postalInfo type=\"int\"> <rdeRegistrar:addr> <rdeRegistrar:street>123 Example Dr.</rdeRegistrar:street> <rdeRegistrar:street>Suite 100</rdeRegistrar:street> <rdeRegistrar:city>Dulles</rdeRegistrar:city> <rdeRegistrar:sp>VA</rdeRegistrar:sp> <rdeRegistrar:pc>20166-6503</rdeRegistrar:pc> <rdeRegistrar:cc>US</rdeRegistrar:cc> </rdeRegistrar:addr> </rdeRegistrar:postalInfo> <rdeRegistrar:voice x=\"1234\">+1.7035555555</rdeRegistrar:voice> <rdeRegistrar:fax>+1.7035555556</rdeRegistrar:fax> <rdeRegistrar:email>jdoe@example.example</rdeRegistrar:email> <rdeRegistrar:url>http://www.example.example</rdeRegistrar:url> <rdeRegistrar:whoisInfo> <rdeRegistrar:name>whois.example.example</rdeRegistrar:name> <rdeRegistrar:url>http://whois.example.example</rdeRegistrar:url> </rdeRegistrar:whoisInfo> <rdeRegistrar:crDate>2005-04-23T11:49:00.0Z</rdeRegistrar:crDate> <rdeRegistrar:upDate>2009-02-17T17:51:00.0Z</rdeRegistrar:upDate> </rdeRegistrar:registrar> ... ¶ 5.4.1.2. <rdeRegistrar:delete> Object The <rdeRegistrar:delete> element contains the id of a registrar that was deleted.¶ The following is an example of <rdeRegistrar:delete> object:¶ ... <rde:deletes> ... <rdeRegistrar:delete> <rdeRegistrar:id>agnt0001-TEST</rdeRegistrar:id> </rdeRegistrar:delete> ... </rde:deletes> ... ¶ 5.4.2. CSV Model For the CSV model of the registrar object, the <csvRegistrar:contents> child element of the <rde:contents> element is used to hold the new or updated registrar objects for the deposit. The <csvRegistrar:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged registrar objects for the deposit. Both the <csvRegistrar:contents> and <csvRegistrar:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ Differential and Incremental Deposits are based on changes to the registrar objects. The updated registrar object data under the <csvContact:contents> element is a cascade replace down all of the registrar CSV files starting with the parent '\"registrar\" CSV File Definition' (Section 5.4.2.1.1). The child CSV file definitions include a <csvRegistrar:fId parent=\"true\"> field. All the child CSV file definition data for the registrar objects in the parent '\"registrar\" CSV File Definition' (Section 5.4.2.1.1) MUST first be deleted and then set using the data in the child CSV files. The deleted registrar object data under the <csvRegistrar:deletes> element is a cascade delete starting from the '\"registrar\" Deletes CSV File Definition' (Section 5.4.2.2.1).¶ 5.4.2.1. <csvRegistrar:contents> The <csvRegistrar:contents> is used to hold the new or updated registrar object information for the deposit. The <csvRegistrar:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported registrar CSV file definitions.¶ 5.4.2.1.1. \"registrar\" CSV File Definition The \"registrar\" CSV File Definition defines the fields and CSV file references used for the registrar object records.¶ The following \"csvRegistrar\" field elements MUST be used in the \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvRegistrar:fId> or <csvRegistrar:fGurid> A choice of the following:¶ <csvRegistrar:fId> Contains the server-unique registrar identifier with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <csvRegistrar:fGurid> Contains the GURID assigned by ICANN with type=\"positiveInteger\" and isRequired=\"true\".¶ <csvRegistrar:fName> Contains the name of the registrar with type=\"normalizedString\" and isRequired=\"true\".¶ The following field elements MAY be used in the \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvRegistrar:fStatus> Contains the status of the registrar with type=\"csvRegistrar:statusValueType\".¶ <csvRegistrar:fGurid> Contains the ID assigned by ICANN with type=\"positiveInteger\". This field is included in this section in addition to the section above to support optionally providing the <csvRegistrar:fGurid> field when the <csvRegistrar:fId> field is used.¶ <csvRegistrar:fWhoisUrl> Contains the Whois URL of the registrar with type=\"anyURI\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fCrDate> Date and time of the registrar object creation.¶ <rdeCsv:fUpDate> Date and time of the last update to the registrar object. This field MUST NOT be set if the domain name object has never been modified.¶ <rdeCsv:fUrl> URL for the registrar web home page.¶ The following \"csvContact\" fields, defined in 'Contact Object' (Section 5.3), MAY be used in the \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvContact:fStreet> Registrar street address line with an \"index\" attribute that represents the order of the street address line from \"0\" to \"2\". An OPTIONAL \"isLoc\" attribute that is used to indicate the localized or internationalized form, as defined in Section 4.6.3.¶ <csvContact:fCity> Registrar city with an OPTIONAL \"isLoc\" attribute that is used to indicate the localized or internationalized form, as defined in Section 4.6.3.¶ <csvContact:fCc> Registrar country code with an OPTIONAL \"isLoc\" attribute that is used to indicate the localized or internationalized form, as defined in Section 4.6.3.¶ <csvContact:fEmail> Registrar email address. The attribute \"isRequired\" MUST equal \"false\".¶ <csvContact:fSp> Registrar state or province with an OPTIONAL \"isLoc\" attribute that is used to indicate the localized or internationalized form, as defined in Section 4.6.3.¶ <csvContact:fPc> Registrar postal code with an OPTIONAL \"isLoc\" attribute that is used to indicate the localized or internationalized form, as defined in Section 4.6.3.¶ <csvContact:fVoice> Registrar voice telephone number.¶ <csvContact:fVoiceExt> Registrar voice telephone number extension.¶ <csvContact:fFax> Registrar facsimile telephone number.¶ <csvContact:fFaxExt> Registrar facsimile telephone number extension.¶ The following is an example of a \"registrar\" <csvRegistrar:contents> <rdeCsv:csv> element:¶ ... <csvRegistrar:contents> ... <rdeCsv:csv name=\"registrar\"> <rdeCsv:fields> <csvRegistrar:fId/> <csvRegistrar:fName isLoc=\"false\"/> <csvRegistrar:fGurid/> <csvRegistrar:fStatus/> <csvContact:fStreet isLoc=\"false\" index=\"0\"/> <csvContact:fStreet isLoc=\"false\" index=\"1\"/> <csvContact:fStreet isLoc=\"false\" index=\"2\"/> <csvContact:fCity isLoc=\"false\"/> <csvContact:fSp isLoc=\"false\" /> <csvContact:fPc isLoc=\"false\" /> <csvContact:fCc isLoc=\"false\"/> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail isRequired=\"false\"/> <rdeCsv:fUrl/> <csvRegistrar:fWhoisUrl/> <rdeCsv:fCrDate/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"57F6856F\"> registrar-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvRegistrar:contents> ... ¶ The following is an example of the registrar-YYYYMMDD.csv file. The file contains one registrar record:¶ registrarX,\"Example Inc.\",8,ok,\"123 Example Dr.\", \"Suite 100\",,Dulles,VA,20166-6503,US,+1.7035555555,1234, +1.7035555556,,jdoe@example.example,http://www.example.example, http://whois.example.example,2005-04-23T11:49:00.0Z, 2009-02-17T17:51:00.0Z ¶ 5.4.2.2. <csvRegistrar:deletes> The <csvRegistrar:deletes> is used to hold the deleted registrar objects in a Differential or Incremental Deposit. All the registrar object data is deleted as part of a cascade delete. The <csvRegistrar:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported registrar deletes CSV file definition.¶ 5.4.2.2.1. \"registrar\" Deletes CSV File Definition The following \"csvRegistrar\" field elements MUST be used in the deletes \"registrar\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvRegistrar:fId> or <csvRegistrar:fGurid> A choice of the following:¶ <csvRegistrar:fId> Contains the server-unique registrar identifier with type=\"eppcom:clIDType\" and isRequired=\"true\".¶ <csvRegistrar:fGurid> Contains the GURID assigned by ICANN with type=\"positiveInteger\". The attribute \"isRequired\" MUST equal \"true\".¶ The following is an example of a \"registrar\" <csvRegistrar:deletes> <rdeCsv:csv> element:¶ ... <csvRegistrar:deletes> ... <rdeCsv:csv name=\"registrar\"> <rdeCsv:fields> <csvRegistrar:fId/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"5CB20A52\"> registrar-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvRegistrar:deletes> ... ¶ The following is an example of the registrar-delete-YYYYMMDD.csv file. The file contains one registrar record:¶ registrarZ ¶ 5.5. IDN Table Reference Object The Internationalized Domain Names (IDN) table reference object is a pseudo-object that is used to provide a short reference to the IDN table and policy used in IDN registrations. The IDN reference object supports both the XML and the CSV model, defined in 'Models' (Section 2). The elements used for both models are defined in the following sections.¶ 5.5.1. XML Model There is one element used in the data escrow of the IDN table reference objects for the XML model, and that is the <rdeIDN:idnTableRef>, under the <rde:contents> element.¶ 5.5.1.1. <rdeIDN:idnTableRef> Object The <rdeIDN:idnTableRef> contains the following elements. An \"id\" attribute is used to specify an identifier for the IDN table.¶ A <url> element that contains the URL of the IDN table that is being referenced.¶ A <urlPolicy> element that contains the URL of the IDN policy document. If IDN variants are generated algorithmically, the policy document MUST define the algorithm and the state of the implicitly generated IDN variants. For a list of suggested states for implicit IDN variants, please see [variantTLDsReport].¶ The following is an example of <idnTableRef> object:¶ ... <rdeIDN:idnTableRef id=\"pt-BR\"> <rdeIDN:url> http://www.iana.org/domains/idn-tables/tables/br_pt-br_1.0.html </rdeIDN:url> <rdeIDN:urlPolicy> http://registro.br/dominio/regras.html </rdeIDN:urlPolicy> </rdeIDN:idnTableRef> ... ¶ 5.5.2. CSV Model The IDN domain names, defined in Section 5.1, MAY have references to the IDN language identifier using the <rdeCsv:fIdnTableId> field element. The IDN table reference object defines the mapping of a language identifier to a language table URL. The language table URL defines the character code points that can be used for the language identifier. The elements used for the IDN table reference object are defined in this section. The <csvIDN:contents> child element of the <rde:contents> element is used to hold the new or updated IDN table reference objects for the deposit. The <csvIDN:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged IDN table reference objects for the deposit. Both the <csvIDN:contents> and <csvIDN:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ 5.5.2.1. <csvIDN:contents> The <csvIDN:contents> is used to hold the new or updated IDN table reference object information for the deposit. The <csvIDN:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported IDN table reference CSV file definitions.¶ 5.5.2.1.1. \"idnLanguage\" CSV File Definition The \"idnLanguage\" CSV File Definition defines the fields and CSV file references used for the IDN table reference object records.¶ The following \"rdeCsv\" fields, defined in Section 4.6.2.2, MUST be used in the \"idnLanguage\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fIdnTableId> The language identifier that matches the values for the <rdeCsv:fIdnTableId> field element in the '\"domain\" CSV File Definition' (Section 5.1.2.1.1) files. The attribute \"isRequired\" MUST equal \"true\".¶ <rdeCsv:fUrl> URL that defines the character code points that can be used for <csvDomain:fName> field in the '\"domain\" CSV File Definition' (Section 5.1.2.1.1) files. The attribute \"isRequired\" MUST equal \"true\".¶ The following is an example of a \"idnLanguage\" <csvIDN:contents> <rdeCsv:csv> element:¶ ... <csvIDN:contents> ... <rdeCsv:csv name=\"idnLanguage\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fIdnTableId isRequired=\"true\"/> <rdeCsv:fUrl isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D6B0424F\"> idnLanguage-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvIDN:contents> ... ¶ The following is an example of the corresponding idnLanguage-YYYYMMDD.csv file. The file contains two IDN language records:¶ LANG-1, http://www.iana.org/domains/idn-tables/tables/test_tab1_1.1.txt LANG-2, http://www.iana.org/domains/idn-tables/tables/test_tab2_1.1.txt ¶ 5.5.2.2. <csvIDN:deletes> The <csvIDN:deletes> is used to hold the deleted IDN table reference objects in a Differential or Incremental Deposit. The <csvIDN:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported IDN table reference deletes CSV file definition.¶ 5.5.2.2.1. \"idnLanguage\" Deletes CSV File Definition The following \"idnLanguage\" field elements MUST be used in the deletes \"idnLanguage\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fIdnTableId> The language identifier that matches the values for the <rdeCsv:fIdnTableId> field element in the '\"domain\" CSV File Definition' (Section 5.1.2.1.1) files. The attribute \"isRequired\" MUST equal \"true\".¶ The following is an example of a \"idnLanguage\" <csvIDN:deletes> <rdeCsv:csv> element:¶ ... <csvIDN:deletes> ... <rdeCsv:csv name=\"idnLanguage\"> <rdeCsv:fields> <rdeCsv:fIdnTableId isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"4A28A569\"> idnLanguage-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvIDN:deletes> ... ¶ The following is an example of the idnLanguage-delete-YYYYMMDD.csv file. The file contains one IDN language record:¶ LANG-2 ¶ 5.6. NNDN Object An NNDN (NNDN's not domain name) can be used to store registry reserved names or (blocked, withheld, or mirrored) IDN variants.¶ Domain name registries may maintain domain names without their being persisted as domain objects in the registry system, for example, a list of reserved names not available for registration. The NNDN is a lightweight domain-like object that is used to escrow domain names not maintained as domain name objects.¶ A domain name can only exist as a domain name object or an NNDN object, but not both.¶ The NNDN object supports both the XML and the CSV model, defined in 'Models' (Section 2). The elements used for both models are defined in the following sections.¶ 5.6.1. XML Model There are two elements used in the data escrow of the NNDN objects for the XML model including the <rdeNNDN:NNDN> element, under the <rde:contents> element, and the <rdeNNDN:delete> element, under the <rde:deletes> element.¶ An <rdeNNDN:NNDN> element substitutes for the <rdeNNDN:abstractNNDN> abstract element to create a concrete definition of an NNDN. The <rdeNNDN:abstractDomain> element can be replaced by other NNDN definitions using the XML schema substitution groups feature.¶ 5.6.1.1. <rdeNNDN:NNDN> Object The <rdeNNDN:NNDN> element contains the following child elements:¶ An <aName> element that contains the fully qualified name of the NNDN. For IDNs, the A-label is used (see [RFC5891], Section 4.4).¶ An OPTIONAL <uName> element that contains the fully qualified name of the NNDN in the Unicode character set. It MUST be provided if available.¶ An OPTIONAL <idnTableId> element that references the IDN table used for the NNDN. This corresponds to the \"id\" attribute of the <idnTableRef> element. This element MUST be present if the NNDN is an IDN.¶ An OPTIONAL <originalName> element is used to indicate that the NNDN is used for an IDN variant. This element contains the domain name used to generate the IDN variant.¶ A <nameState> element that indicates the state of the NNDN: blocked, withheld, or mirrored.¶ If an NNDN is considered undesirable for registration (i.e., unavailable for allocation to anyone), then the NNDN will be tagged as \"blocked\".¶ If an NNDN is considered a potential registration of a domain name object for a registrant, then the NNDN will be tagged as \"withheld\". This status is only used when the NNDN is used for an IDN variant.¶ If an NNDN is considered a mirrored IDN variant of a domain name object, then the NNDN will be tagged as \"mirrored\". A \"mirroringNS\" attribute is used to specify if the mirrored IDN variant uses the NS mirror mechanism, meaning that the activated variant domain name (i.e., NNDN) is delegated in the DNS using the same NS records as in the <originalName>. The default value of \"mirroringNS\" is true. If another mechanism such as DNAME [RFC6672] is used, the value of the \"mirroringNS\" attribute MUST be false.¶ An OPTIONAL <crDate> element that contains the date and time of the NNDN object creation.¶ The following is an example of an <rdeNNDN:NNDN> object:¶ ... <rdeNNDN:NNDN> <rdeNNDN:aName>xn--exampl-gva.example</rdeNNDN:aName> <rdeNNDN:idnTableId>pt-BR</rdeNNDN:idnTableId> <rdeNNDN:originalName>example.example</rdeNNDN:originalName> <rdeNNDN:nameState>withheld</rdeNNDN:nameState> <rdeNNDN:crDate>2005-04-23T11:49:00.0Z</rdeNNDN:crDate> </rdeNNDN:NNDN> ... ¶ 5.6.1.2. <rdeNNDN:delete> Object The <rdeNNDN:delete> element contains the NNDN that was deleted, i.e., the <aName>.¶ The following is an example of an <rdeNNDN::delete> object:¶ ... <rde:deletes> ... <rdeNNDN:delete> <rdeNNDN:aName>xn--pingino-q2a.example</rdeNNDN:aName> </rdeNNDN:delete> ... </rde:deletes> ... ¶ 5.6.2. CSV Model For the CSV model of the NNDN object, the <csvNNDN:contents> child element of the <rde:contents> element is used to hold the new or updated NNDN objects for the deposit. The <csvNNDN:deletes> child element of the <rde:deletes> element is used to hold the deleted or purged NNDN objects for the deposit. Both the <csvNNDN:contents> and <csvNNDN:deletes> elements contain one or more <rdeCsv:csv> elements with a set of named CSV file definitions using the <rdeCsv:csv> \"name\" attribute.¶ 5.6.2.1. <csvNNDN:contents> The <csvNNDN:contents> is used to hold the new or updated NNDN object information for the deposit. The <csvNNDN:contents> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following sections include the supported NNDN CSV file definitions.¶ 5.6.2.1.1. \"NNDN\" CSV File Definition The \"NNDN\" CSV File Definition defines the fields and CSV file references used for the NNDN object records.¶ The following \"csvNNDN\" field elements MUST be used in the \"NNDN\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvNNDN:fAName> Fully qualified name of the NNDN with type=\"eppcom:labelType\" and isRequired=\"true\". For IDNs, the A-label is used (see [RFC5891], Section 4.4).¶ <csvNNDN:fNameState> State of the NNDN: blocked or withheld with type=\"rdeNNDN:nameState\" and isRequired=\"true\". See Section 5.6.1.1 for a description of the possible values for the <rdeNNDN:nameState> element.¶ The following field elements MAY be used in the \"NNDN\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvNNDN:fOriginalName> Domain name used to generate the IDN variant with type=\"eppcom:labelType\".¶ <csvNNDN:fMirroringNS> Defines whether the \"mirroring\" <csvNNDN:fNameState> uses the NS mirror mechanism, as described for the <rdeNNDN:nameState> \"mirroringNS\" attribute in Section 5.6.1.1, with type=\"boolean\". If the field element is not defined the default value is \"true\".¶ The following \"rdeCsv\" fields, defined in 'CSV Common Field Elements' (Section 4.6.2.2), MAY be used in the \"NNDN\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <rdeCsv:fCrDate> Date and time of the NNDN object creation.¶ <rdeCsv:fUName> Name of the NNDN in the Unicode character set for the <csvNNDN:fAName> field element.¶ <rdeCsv:fIdnTableId> IDN table identifier for the NNDN that matches an IDN table reference object record, as defined in Section 5.5.2.¶ The following is an example of an \"NNDN\" <csvNNDN:contents> <rdeCsv:csv> element:¶ ... <csvNNDN:contents> ... <rdeCsv:csv name=\"NNDN\" sep=\",\"> <rdeCsv:fields> <csvNNDN:fAName/> <rdeCsv:fIdnTableId/> <csvNNDN:fOriginalName/> <csvNNDN:fNameState/> <csvNNDN:fMirroringNS/> <rdeCsv:fCrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"085A7CE4\"> NNDN-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvNNDN:contents> ... ¶ The following is an example of the corresponding NNDN-YYYYMMDD.csv file. The file contains two NNDN records for an IDN with one blocked variant and one mirrored variant:¶ xn--bc456-3ve.example,LANG-1,xn--bc123-3ve.example, blocked,,2005-04-23T11:49:00.0Z xn--bc789-3ve.example,LANG-1,xn--bc123-3ve.example, mirrored,1,2005-04-23T11:49:00.0Z ¶ 5.6.2.2. <csvNNDN:deletes> The <csvNNDN:deletes> is used to hold the deleted NNDN objects in a Differential or Incremental Deposit. The <csvNNDN:deletes> is split into separate CSV file definitions using named <rdeCsv:csv> elements with the \"name\" attribute. The following section defines the supported NNDN deletes CSV file definition.¶ 5.6.2.2.1. \"NNDN\" Deletes CSV File Definition The following \"NNDN\" field elements MUST be used in the deletes \"NNDN\" <rdeCsv:csv> <rdeCsv:fields> element:¶ <csvNNDN:fAName> Fully qualified name of the NNDN with type=\"eppcom:labelType\" and isRequired=\"true\".¶ The following is an example of an \"NNDN\" <csvNNDN:deletes> <rdeCsv:csv> element:¶ ... <csvNNDN:deletes> ... <rdeCsv:csv name=\"NNDN\"> <rdeCsv:fields> <csvNNDN:fAName/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"A41F1D9B\"> NNDN-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> ... </csvNNDN:deletes> ... ¶ The following is an example of the corresponding NNDN-delete-YYYYMMDD.csv file. The file contains one NNDN records:¶ xn--bc456-3ve.example ¶ 5.7. EPP Parameters Object The EPP parameters object is a pseudo-object that defines the set of object and object extension services supported by the registry, as defined in [RFC5730]. The EPP parameters object is only defined as XML but could be used in either the XML model or CSV model. The EPP parameters object is defined using the <rdeEppParams:eppParams> element. The EPP parameters object SHOULD be included if the registry supports EPP. A maximum of one EPP parameters object MUST exist at a certain point in time (Time Watermark).¶ The syntax and content of the <rdeEppParams:eppParams> children elements is as explained in Section 2.4 of [RFC5730]. The children of the <eppParams> are as follows:¶ One or more <version> elements that indicate the EPP versions supported by the registry.¶ One or more <lang> elements that indicate the identifiers of the text response languages supported by the registry's EPP server.¶ One or more <objURI> elements that contain namespace URIs representing the objects that the registry's EPP server is capable of managing.¶ An OPTIONAL <svcExtension> element that contains one or more <extURI> elements that contain namespace URIs representing object extensions supported by the registry's EPP server.¶ A <dcp> element that contains child elements used to describe the server's privacy policy for data collection and management. See Section 2.4 of [RFC5730] for more details.¶ The following is an example of <eppParams> element object:¶ ... <rdeEppParams:eppParams> <rdeEppParams:version>1.0</rdeEppParams:version> <rdeEppParams:lang>en</rdeEppParams:lang> <rdeEppParams:objURI>urn:ietf:params:xml:ns:domain-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:contact-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:host-1.0 </rdeEppParams:objURI> <rdeEppParams:svcExtension> <epp:extURI>urn:ietf:params:xml:ns:rgp-1.0</epp:extURI> <epp:extURI>urn:ietf:params:xml:ns:secDNS-1.1</epp:extURI> </rdeEppParams:svcExtension> <rdeEppParams:dcp> <epp:access><epp:all/></epp:access> <epp:statement> <epp:purpose> <epp:admin/> <epp:prov/> </epp:purpose> <epp:recipient> <epp:ours/> <epp:public/> </epp:recipient> <epp:retention> <epp:stated/> </epp:retention> </epp:statement> </rdeEppParams:dcp> </rdeEppParams:eppParams> ... ¶ 5.8. Policy Object The policy object is a pseudo-object that is used to specify which OPTIONAL elements from the XML model are REQUIRED based on the business model of the registry. For the CSV model, the OPTIONAL \"isRequired\" attribute of the <rdeCsv:field> elements, defined in Section 4.6.2.1, is used to specify which OPTIONAL fields are REQUIRED based on the business model of the registry.¶ 5.8.1. <rdePolicy:policy> Object The OPTIONAL <policy> contains the following attributes:¶ An <element> that defines that the referenced <element> is REQUIRED.¶ <scope> that defines the XPath (see [W3C.REC-xpath-31-20170321]) of the element referenced by <element>.¶ The following is an example of <rdePolicy:policy> object:¶ ... <rdePolicy:policy scope=\"//rde:deposit/rde:contents/rdeDomain:domain\" element=\"rdeDomain:registrant\" /> ... ¶ 5.9. Header Object The header object is a pseudo-object that is used to specify the number of objects in the repository at a specific point in time (Timeline Watermark) regardless of the type of deposit: Differential, Full, or Incremental Deposit. The header object may also be used to provide additional information on the contents of the deposit. The header object is only defined as XML but one header object MUST always be present per escrow deposit regardless of using the XML model or CSV model. The header object is defined using the <rdeHeader:header> element.¶ 5.9.1. <rdeHeader:header> Object The <rdeHeader:header> contains the following elements:¶ A choice of one of the elements defined in the \"repositoryTypeGroup\" group element that indicates the unique identifier for the repository being escrowed. Possible elements are:¶ An <rdeHeader:tld> element that defines TLD or the RCDN being escrowed in the case of a registry data escrow deposit. For IDNs, the A-label is used (see [RFC5891], Section 4.4).¶ An <rdeHeader:registrar> element that defines the Registrar ID corresponding to a registrar data escrow deposit. In the case of an ICANN-accredited registrar, the <rdeHeader:registrar> element MUST be the IANA Registrar ID assigned by ICANN.¶ An <rdeHeader:ppsp> element that defines the provider ID corresponding to a Privacy and Proxy Services Provider (PPSP) data escrow deposit. In the case of an ICANN-accredited PPSP, the <rdeHeader:ppsp> element MUST be the unique ID assigned by ICANN.¶ An <rdeHeader:reseller> element that defines the provider ID corresponding to a reseller data escrow deposit.¶ A <count> element that contains the number of objects in the SRS at a specific point in time (Timeline Watermark) regardless of the type of deposit: Differential, Full, or Incremental. The <count> element supports the following attributes:¶ A \"uri\" attribute reflects the XML namespace URI of the primary objects for the XML model and CSV model. For example, the \"uri\" is set to \"urn:ietf:params:xml:ns:rdeDomain-1.0\" for domain name objects using the XML model, and the \"uri\" is set to \"urn:ietf:params:xml:ns:csvDomain-1.0\" for domain name objects using the CSV model.¶ An OPTIONAL \"rcdn\" attribute indicates the RCDN of the objects included in the <count> element. For IDNs, the A-label is used [RFC5891], Section 4.4. If the \"rcdn\" attribute is present, the value of the <count> element must include only objects related to registrations in the same and lower levels. For example in a data escrow deposit for the .EXAMPLE TLD, a value of \"example\" in the \"rcdn\" attribute within the <count> element indicates the number of objects in the TLD including objects in other RCDNs within the TLD, whereas a value of \"com.example\" indicates the number of elements for objects under \"com.example\" and lower levels. Omitting the \"rcdn\" attribute indicates that the total includes all objects of the specified \"uri\" in the repository (e.g., the TLD, Registrar, or PPSP).¶ An OPTIONAL \"registrarId\" attribute indicates the identifier of the sponsoring registrar of the objects included in the <count> element. In the case of an ICANN-accredited registrar, the value MUST be the IANA Registrar ID assigned by ICANN.¶ An OPTIONAL <contentTag> element that contains a tag that defines the expected content in the deposit. The producer and consumer of the deposits will coordinate the set of possible <contentTag> element values.¶ The following is an example of <rdeHeader:header> object referencing only the XML model objects:¶ ... <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeDomain-1.0\">2</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeHost-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeContact-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeIDN-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\">1 </rdeHeader:count> </rdeHeader:header> ... ¶ The following is an example of an <rdeHeader:header> object referencing the CSV and XML model objects:¶ ... <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvDomain-1.0\">2</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvHost-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvContact-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvIDN-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvNNDN-1.0\">1</rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\">1 </rdeHeader:count> </rdeHeader:header> ... ¶ 5.10. DNRD Common Objects Collection The DNRD common objects collection contains data structures referenced by two or more of the main objects in the XML model.¶ 6. RDE IDN Variants Handling Depending on the registration policy of the registry, for a domain name there may be multiple variant names. See [variantTLDsReport] for further details on IDN variants.¶ A registry could choose to escrow IDN variants as domains or NNDN objects. A specific IDN variant can be represented in the escrow deposit, as a domain or as an NNDN object, but not both.¶ If using domain objects to represent IDN variants, the normal behavior during restoration of an SRS based on an escrow deposit is to restore the IDN variants as a mirrored variant. If the registration data of the IDN variant is different from the original name, the details of this specific implementation MUST be described in the IDN policy document.¶ An NNDN or a domain name are explicit representations of an IDN variant while an IDN variant that is computed based on an algorithm is an implicit representation. Explicit representation of an IDN variant takes precedence over an implicit representation.¶ 7. Profile Different business models of registries exist, therefore the registry is responsible for defining a profile that matches its particular business model. The profile mechanism allows a registry to extend this specification.¶ A profile is the process of the following:¶ Extending base objects with the mechanisms defined for XML and CSV models.¶ In the case of the XML model, abstract elements could be used to extend the following objects: <domain>, <host>, <contact>, <NNDN>, and <registrar> using the XML schema substitution groups feature.¶ Defining a <policy> object to specify which OPTIONAL elements of this base specification are required based on the business model of the registry. An example is the <registrant> element that is usually REQUIRED, but it is specified as OPTIONAL in this specification to support some existing business models.¶ Adding new escrowed objects using the <rde:contents> and <rde:deletes> elements.¶ Providing the XML schemas to third parties that require them to validate the escrow deposits.¶ 8. Data Escrow Agent Extended Verification Process A data escrow agent SHOULD perform an extended verification process that starts by creating a dataset to be tested by following Section 5.2 of [RFC8909].¶ The following are the minimum suggested tests on the dataset:¶ Validate the escrow deposits using the definition agreed with the registry.¶ In the case of the XML model, the contents of the escrow deposits MUST be validated using the XML schemas of the profile.¶ Count the objects and validate that the number of objects is equal to the number objects reported in the <header> element of the escrow deposit of that point in time (Timeline Watermark).¶ All contact objects linked to domain names MUST be present.¶ All registrar objects linked to other objects MUST be present.¶ No domain name exists as both a domain name and an NNDN.¶ The elements listed as required in the <policy> element MUST be present.¶ All idnTableRef definitions linked from other objects MUST be present.¶ If an EPP parameters object was escrowed in the past, one and only one EPP parameters object MUST be present.¶ The Timeline Watermark is not in the future.¶ 9. Formal Syntax This standard is specified in XML Schema notation. The formal syntax presented here is a complete schema representation suitable for automated validation.¶ The <CODE BEGINS> and <CODE ENDS> tags are not part of the schema; they are used to note the beginning and ending of the schema for URI registration purposes.¶ 9.1. RDE CSV Schema <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <annotation> <documentation> Registry Data Escrow Comma-Separated Values (CSV) </documentation> </annotation> <!-- csv content element --> <element name=\"csv\" type=\"rdeCsv:csvType\" /> <!-- Definition of CSV file --> <complexType name=\"csvType\"> <sequence> <element name=\"fields\" type=\"rdeCsv:fieldsType\" /> <element name=\"files\" type=\"rdeCsv:filesType\" /> </sequence> <attribute name=\"name\" type=\"token\" use=\"required\" /> <attribute name=\"sep\" type=\"rdeCsv:sepType\" default=\",\" /> </complexType> <!-- field separator must be a single character --> <simpleType name=\"sepType\"> <restriction base=\"string\"> <minLength value=\"1\" /> <maxLength value=\"1\" /> </restriction> </simpleType> <!-- Abstract field type --> <element name=\"field\" type=\"rdeCsv:fieldType\" abstract=\"true\" /> <complexType name=\"fieldType\"> <sequence /> </complexType> <!-- fieldType with optional value (isRequired=false) --> <complexType name=\"fieldOptionalType\"> <complexContent> <extension base=\"rdeCsv:fieldType\"> <sequence /> <attribute name=\"isRequired\" type=\"boolean\" default=\"false\" /> <attribute name=\"parent\" type=\"boolean\" default=\"false\" /> </extension> </complexContent> </complexType> <!-- fieldType with required value (isRequired=false) --> <complexType name=\"fieldRequiredType\"> <complexContent> <extension base=\"rdeCsv:fieldType\"> <sequence /> <attribute name=\"isRequired\" type=\"boolean\" default=\"true\" /> <attribute name=\"parent\" type=\"boolean\" default=\"false\" /> </extension> </complexContent> </complexType> <!-- Concrete field types --> <!-- UTF-8 Name field (e.g., domain name) --> <element name=\"fUName\" type=\"rdeCsv:fNameType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fNameType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:labelType\" /> </extension> </complexContent> </complexType> <complexType name=\"fNameRequiredType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:labelType\" /> </extension> </complexContent> </complexType> <!-- Registry Object IDentifier (roid) field --> <element name=\"fRoid\" type=\"rdeCsv:fRoidType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fRoidType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:roidType\" /> </extension> </complexContent> </complexType> <!-- Registrant field --> <element name=\"fRegistrant\" type=\"rdeCsv:fRegistrantType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fRegistrantType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:clIDType\" /> </extension> </complexContent> </complexType> <!-- Object Status Description --> <element name=\"fStatusDescription\" type=\"rdeCsv:fNormalizedStringType\" substitutionGroup=\"rdeCsv:field\" /> <!-- clID fields (fClID, fCrID, fUpID) --> <!-- Identifier of the client that sponsors the object --> <element name=\"fClID\" type=\"rdeCsv:fClIDRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of registrar of client that created the object --> <element name=\"fCrRr\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of the client that created the object --> <element name=\"fCrID\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of registrar of client that updated the object --> <element name=\"fUpRr\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of the client that updated the object --> <element name=\"fUpID\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of registrar of client that requested the transfer --> <element name=\"fReRr\" type=\"rdeCsv:fClIDRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of the client that requested the transfer --> <element name=\"fReID\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of registrar client that should take or took action --> <element name=\"fAcRr\" type=\"rdeCsv:fClIDRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Identifier of the client that should take or took action --> <element name=\"fAcID\" type=\"rdeCsv:fClIDType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fClIDType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:clIDType\" /> </extension> </complexContent> </complexType> <complexType name=\"fClIDRequiredType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:clIDType\" /> </extension> </complexContent> </complexType> <!-- dateTime fields (fCrDate, fUpDate, fExDate) --> <element name=\"fCrDate\" type=\"rdeCsv:fDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fUpDate\" type=\"rdeCsv:fDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fExDate\" type=\"rdeCsv:fDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Date and time that transfer was requested --> <element name=\"fReDate\" type=\"rdeCsv:fRequiredDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Date and time of a required or completed response --> <element name=\"fAcDate\" type=\"rdeCsv:fRequiredDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fTrDate\" type=\"rdeCsv:fDateTimeType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fDateTimeType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"dateTime\" /> </extension> </complexContent> </complexType> <complexType name=\"fRequiredDateTimeType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"dateTime\" /> </extension> </complexContent> </complexType> <!-- boolean type --> <complexType name=\"fBooleanType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"boolean\" /> </extension> </complexContent> </complexType> <complexType name=\"fRequiredBooleanType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"boolean\" /> </extension> </complexContent> </complexType> <!-- unsignedByte type --> <complexType name=\"fUnsignedByteType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"unsignedByte\" /> </extension> </complexContent> </complexType> <complexType name=\"fRequiredUnsignedByteType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"unsignedByte\" /> </extension> </complexContent> </complexType> <!-- unsignedShort type --> <complexType name=\"fUnsignedShortType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"unsignedShort\" /> </extension> </complexContent> </complexType> <complexType name=\"fRequiredUnsignedShortType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"unsignedShort\" /> </extension> </complexContent> </complexType> <!-- hexBinary type --> <complexType name=\"fHexBinaryType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"hexBinary\" /> </extension> </complexContent> </complexType> <complexType name=\"fRequiredHexBinaryType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"hexBinary\" /> </extension> </complexContent> </complexType> <!-- language type --> <element name=\"fLang\" type=\"rdeCsv:fLangType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fLangType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"language\" /> </extension> </complexContent> </complexType> <!-- IDN Table Identifier --> <element name=\"fIdnTableId\" type=\"rdeCsv:fTokenType\" substitutionGroup=\"rdeCsv:field\" /> <!-- State of the most recent transfer request --> <element name=\"fTrStatus\" type=\"rdeCsv:fTrStatusType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fTrStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:trStatusType\" /> </extension> </complexContent> </complexType> <!-- General token type --> <complexType name=\"fTokenType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"token\" /> </extension> </complexContent> </complexType> <!-- General normalizedString type --> <complexType name=\"fNormalizedStringType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"normalizedString\" /> </extension> </complexContent> </complexType> <!-- positive integer type --> <complexType name=\"fPositiveIntegerType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"positiveInteger\" /> </extension> </complexContent> </complexType> <!-- Custom / extension field type --> <element name=\"fCustom\" type=\"rdeCsv:fCustomType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fCustomType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"name\" type=\"token\" /> <attribute name=\"type\" type=\"token\" default=\"token\" /> </extension> </complexContent> </complexType> <!-- Ordered list of field definitions for the csv --> <complexType name=\"fieldsType\"> <sequence maxOccurs=\"unbounded\"> <element ref=\"rdeCsv:field\" /> </sequence> </complexType> <!-- List of files --> <complexType name=\"filesType\"> <sequence> <element name=\"file\" type=\"rdeCsv:fileType\" maxOccurs=\"unbounded\" /> </sequence> </complexType> <!-- File definition --> <complexType name=\"fileType\"> <simpleContent> <extension base=\"token\"> <attribute name=\"compression\" type=\"token\" /> <attribute name=\"encoding\" type=\"token\" default=\"UTF-8\" /> <attribute name=\"cksum\" type=\"token\" /> <attribute name=\"cksumAlg\" type=\"token\" default=\"CRC32\" /> </extension> </simpleContent> </complexType> <!-- URL fields --> <element name=\"fUrl\" type=\"rdeCsv:anyURIType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"anyURIType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"anyURI\" /> </extension> </complexContent> </complexType> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.2. RDE Domain Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeDomain-1.0\" xmlns:rdeDomain=\"urn:ietf:params:xml:ns:rdeDomain-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeIDN=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:rgp=\"urn:ietf:params:xml:ns:rgp-1.0\" xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns:rdeDnrdCommon=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:domain-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:secDNS-1.1\" /> <import namespace=\"urn:ietf:params:xml:ns:rgp-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" /> <annotation> <documentation> Registry Data Escrow Domain provisioning schema </documentation> </annotation> <element name=\"abstractDomain\" type=\"rdeDomain:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <element name=\"domain\" substitutionGroup=\"rdeDomain:abstractDomain\" /> <element name=\"delete\" type=\"rdeDomain:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Content Type --> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"name\" type=\"eppcom:labelType\" /> <element name=\"roid\" type=\"eppcom:roidType\" /> <element name=\"uName\" type=\"eppcom:labelType\" minOccurs=\"0\" /> <element name=\"idnTableId\" type=\"rdeIDN:idType\" minOccurs=\"0\" /> <element name=\"originalName\" type=\"eppcom:labelType\" minOccurs=\"0\" /> <element name=\"status\" type=\"domain:statusType\" maxOccurs=\"11\" /> <element name=\"rgpStatus\" type=\"rgp:statusType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <element name=\"registrant\" type=\"eppcom:clIDType\" minOccurs=\"0\" /> <element name=\"contact\" type=\"domain:contactType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <element name=\"ns\" type=\"domain:nsType\" minOccurs=\"0\" /> <element name=\"clID\" type=\"eppcom:clIDType\" /> <element name=\"crRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"crDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"exDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"upRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"upDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"secDNS\" type=\"secDNS:dsOrKeyType\" minOccurs=\"0\" /> <element name=\"trDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"trnData\" type=\"rdeDomain:transferDataType\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <complexType name=\"transferDataType\"> <sequence> <element name=\"trStatus\" type=\"eppcom:trStatusType\" /> <element name=\"reRr\" type=\"rdeDnrdCommon:rrType\" /> <element name=\"reDate\" type=\"dateTime\" /> <element name=\"acRr\" type=\"rdeDnrdCommon:rrType\" /> <element name=\"acDate\" type=\"dateTime\" /> <element name=\"exDate\" type=\"dateTime\" minOccurs=\"0\" /> </sequence> </complexType> <!-- Delete Type --> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element name=\"name\" type=\"eppcom:labelType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.3. CSV Domain Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvDomain-1.0\" xmlns:csvDomain=\"urn:ietf:params:xml:ns:csvDomain-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:rgp=\"urn:ietf:params:xml:ns:rgp-1.0\" xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:domain-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:secDNS-1.1\" /> <import namespace=\"urn:ietf:params:xml:ns:rgp-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <annotation> <documentation> Domain Name Comma-Separated Values (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvDomain:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvDomain:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Domain name field --> <element name=\"fName\" type=\"rdeCsv:fNameRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- RGP status field --> <element name=\"fRgpStatus\" type=\"csvDomain:fRgpStatusType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fRgpStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"rgp\\:statusValueType\" /> </extension> </complexContent> </complexType> <!-- Contact type field --> <element name=\"fContactType\" type=\"csvDomain:fContactsTypeType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fContactsTypeType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"domain\\:contactAttrType\" /> </extension> </complexContent> </complexType> <!-- DNSSEC field types --> <!-- Maximum signature lifetime field --> <element name=\"fMaxSigLife\" type=\"csvDomain:fMaxSigLifeType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fMaxSigLifeType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"secDNS\\:maxSigLifeType\" /> </extension> </complexContent> </complexType> <!-- Key tag field --> <element name=\"fKeyTag\" type=\"rdeCsv:fRequiredUnsignedShortType\" substitutionGroup=\"rdeCsv:field\" /> <!-- DS Algorithm field --> <element name=\"fDsAlg\" type=\"rdeCsv:fRequiredUnsignedByteType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Digest type field --> <element name=\"fDigestType\" type=\"rdeCsv:fRequiredUnsignedByteType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Digest field --> <element name=\"fDigest\" type=\"rdeCsv:fRequiredHexBinaryType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Flags field --> <element name=\"fFlags\" type=\"rdeCsv:fRequiredUnsignedShortType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Protocol field --> <element name=\"fProtocol\" type=\"rdeCsv:fRequiredUnsignedByteType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Key Algorithm field --> <element name=\"fKeyAlg\" type=\"rdeCsv:fRequiredUnsignedByteType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Public Key field --> <element name=\"fPubKey\" type=\"csvDomain:fPubKeyType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fPubKeyType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"secDNS\\:keyType\" /> </extension> </complexContent> </complexType> <!-- Original Domain Name for Variant field --> <element name=\"fOriginalName\" type=\"rdeCsv:fNameType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Domain status field --> <element name=\"fStatus\" type=\"csvDomain:fStatusType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Domain status based on domain-1.0.xsd --> <complexType name=\"fStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"domain\\:statusValueType\" /> </extension> </complexContent> </complexType> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.4. RDE Host Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeHost-1.0\" xmlns:rdeHost=\"urn:ietf:params:xml:ns:rdeHost-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns:rdeDnrdCommon=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:host-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" /> <annotation> <documentation> Registry Data Escrow Host provisioning schema </documentation> </annotation> <element name=\"abstractHost\" type=\"rdeHost:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <element name=\"host\" substitutionGroup=\"rdeHost:abstractHost\" /> <element name=\"delete\" type=\"rdeHost:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Content Type --> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"name\" type=\"eppcom:labelType\" /> <element name=\"roid\" type=\"eppcom:roidType\" /> <element name=\"status\" type=\"host:statusType\" maxOccurs=\"7\" /> <element name=\"addr\" type=\"host:addrType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <element name=\"clID\" type=\"eppcom:clIDType\" /> <element name=\"crRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"crDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"upRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"upDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"trDate\" type=\"dateTime\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <!-- Delete Type --> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <choice minOccurs=\"0\" maxOccurs=\"unbounded\"> <element name=\"name\" type=\"eppcom:labelType\" /> <element name=\"roid\" type=\"eppcom:roidType\" /> </choice> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.5. CSV Host Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvHost-1.0\" xmlns:csvHost=\"urn:ietf:params:xml:ns:csvHost-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:host=\"urn:ietf:params:xml:ns:host-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:host-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <annotation> <documentation> Host Comma-Separated Values (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvHost:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvHost:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Host name field --> <element name=\"fName\" type=\"rdeCsv:fNameRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- IP address field --> <element name=\"fAddr\" type=\"csvHost:fAddrType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fAddrType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"host\\:addrStringType\" /> </extension> </complexContent> </complexType> <!-- IP address version field --> <element name=\"fAddrVersion\" type=\"csvHost:fAddrVersionType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fAddrVersionType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"host\\:ipType\" /> </extension> </complexContent> </complexType> <!-- Host status field --> <element name=\"fStatus\" type=\"csvHost:fStatusType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Host status based on host-1.0.xsd --> <complexType name=\"fStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"host\\:statusValueType\" /> </extension> </complexContent> </complexType> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.6. RDE Contact Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeContact-1.0\" xmlns:rdeContact=\"urn:ietf:params:xml:ns:rdeContact-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns:rdeDnrdCommon=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types. --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:contact-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" /> <annotation> <documentation> Registry Data Escrow contact provisioning schema </documentation> </annotation> <element name=\"abstractContact\" type=\"rdeContact:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <element name=\"contact\" substitutionGroup=\"rdeContact:abstractContact\" /> <element name=\"delete\" type=\"rdeContact:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Contact Type --> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"id\" type=\"eppcom:clIDType\" /> <element name=\"roid\" type=\"eppcom:roidType\" /> <element name=\"status\" type=\"contact:statusType\" maxOccurs=\"7\" /> <element name=\"postalInfo\" type=\"contact:postalInfoType\" maxOccurs=\"2\" /> <element name=\"voice\" type=\"contact:e164Type\" minOccurs=\"0\" /> <element name=\"fax\" type=\"contact:e164Type\" minOccurs=\"0\" /> <element name=\"email\" type=\"eppcom:minTokenType\" /> <element name=\"clID\" type=\"eppcom:clIDType\" /> <element name=\"crRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"crDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"upRr\" type=\"rdeDnrdCommon:rrType\" minOccurs=\"0\" /> <element name=\"upDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"trDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"trnData\" type=\"rdeContact:transferDataType\" minOccurs=\"0\" /> <element name=\"disclose\" type=\"contact:discloseType\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <complexType name=\"transferDataType\"> <sequence> <element name=\"trStatus\" type=\"eppcom:trStatusType\" /> <element name=\"reRr\" type=\"rdeDnrdCommon:rrType\" /> <element name=\"reDate\" type=\"dateTime\" /> <element name=\"acRr\" type=\"rdeDnrdCommon:rrType\" /> <element name=\"acDate\" type=\"dateTime\" /> </sequence> </complexType> <!-- Delete Type --> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element name=\"id\" type=\"eppcom:clIDType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.7. CSV Contact Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvContact-1.0\" xmlns:csvContact=\"urn:ietf:params:xml:ns:csvContact-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types. --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:contact-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <annotation> <documentation> Contact Comma-Separated Values (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvContact:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvContact:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Server-unique contact identifier field --> <element name=\"fId\" type=\"csvContact:fIdType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fIdType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:clIDType\" /> </extension> </complexContent> </complexType> <!-- Is Registrar Contact field --> <element name=\"fIsRegistrarContact\" type=\"rdeCsv:fBooleanType\" substitutionGroup=\"rdeCsv:field\" /> <!-- voice and fax telephone number fields --> <element name=\"fVoice\" type=\"csvContact:fE164StringType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fFax\" type=\"csvContact:fE164StringType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fE164StringType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:e164StringType\" /> </extension> </complexContent> </complexType> <!-- voice and fax telephone extension fields --> <element name=\"fVoiceExt\" type=\"rdeCsv:fTokenType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fFaxExt\" type=\"rdeCsv:fTokenType\" substitutionGroup=\"rdeCsv:field\" /> <!-- contact email address field --> <element name=\"fEmail\" type=\"csvContact:fEmailType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fEmailType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"eppcom\\:minTokenType\" /> </extension> </complexContent> </complexType> <!-- Postal type field (\"loc\" = localized, \"int\" = internationalized) --> <element name=\"fPostalType\" type=\"csvContact:fPostalTypeType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fPostalTypeType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:postalInfoEnumType\" /> </extension> </complexContent> </complexType> <!-- Standard postal line field --> <complexType name=\"fPostalLineType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:postalLineType\" /> <attribute name=\"isLoc\" type=\"boolean\" /> </extension> </complexContent> </complexType> <!-- Standard optional postal line field --> <complexType name=\"fOptPostalLineType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:optPostalLineType\" /> <attribute name=\"isLoc\" type=\"boolean\" /> </extension> </complexContent> </complexType> <!-- Name of the individual or role field --> <element name=\"fName\" type=\"csvContact:fPostalLineType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Name organization field --> <element name=\"fOrg\" type=\"csvContact:fOptPostalLineType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Street address line field with required index attribute --> <!-- starting with index 0. --> <element name=\"fStreet\" type=\"csvContact:fStreetType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fStreetType\"> <complexContent> <extension base=\"csvContact:fOptPostalLineType\"> <sequence /> <attribute name=\"index\" type=\"int\" use=\"required\" /> </extension> </complexContent> </complexType> <!-- Contact's city field --> <element name=\"fCity\" type=\"csvContact:fPostalLineType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Contact's state or province field --> <element name=\"fSp\" type=\"csvContact:fOptPostalLineType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Contact's postal code field --> <element name=\"fPc\" type=\"csvContact:fPcType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fPcType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:pcType\" /> <attribute name=\"isLoc\" type=\"boolean\" /> </extension> </complexContent> </complexType> <!-- Contact's country code field --> <element name=\"fCc\" type=\"csvContact:fCcType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fCcType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:ccType\" /> <attribute name=\"isLoc\" type=\"boolean\" /> </extension> </complexContent> </complexType> <!-- Disclosure element fields --> <!-- Flag of \"1\" to allow disclosure and \"0\" to disallow disclosure --> <element name=\"fDiscloseFlag\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of localized name based on fDiscloseFlag? --> <element name=\"fDiscloseNameLoc\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of internationalized name based on fDiscloseFlag? --> <element name=\"fDiscloseNameInt\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of localized org based on fDiscloseFlag? --> <element name=\"fDiscloseOrgLoc\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of internationalized org based on fDiscloseFlag? --> <element name=\"fDiscloseOrgInt\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of localized address based on fDiscloseFlag? --> <element name=\"fDiscloseAddrLoc\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure of internationalized address based on fDiscloseFlag? --> <element name=\"fDiscloseAddrInt\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure voice telephone number based on fDiscloseFlag? --> <element name=\"fDiscloseVoice\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure facsimile telephone number based on fDiscloseFlag? --> <element name=\"fDiscloseFax\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <!-- Disclosure email address based on fDiscloseFlag? --> <element name=\"fDiscloseEmail\" type=\"csvContact:fBoolean\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fBoolean\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"boolean\" /> </extension> </complexContent> </complexType> <!-- Contact status field --> <element name=\"fStatus\" type=\"csvContact:fStatusType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Host status based on contact-1.0.xsd --> <complexType name=\"fStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"contact\\:statusValueType\" /> </extension> </complexContent> </complexType> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.8. RDE Registrar Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\" xmlns:rdeRegistrar=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types. --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:domain-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:contact-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <annotation> <documentation> Registry Data Escrow registrar provisioning schema </documentation> </annotation> <element name=\"abstractRegistrar\" type=\"rdeRegistrar:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <element name=\"registrar\" substitutionGroup=\"rdeRegistrar:abstractRegistrar\" /> <element name=\"delete\" type=\"rdeRegistrar:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Content Type --> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"id\" type=\"eppcom:clIDType\" /> <element name=\"name\" type=\"rdeRegistrar:nameType\" /> <element name=\"gurid\" type=\"positiveInteger\" minOccurs=\"0\" /> <element name=\"status\" type=\"rdeRegistrar:statusType\" minOccurs=\"0\" /> <element name=\"postalInfo\" type=\"rdeRegistrar:postalInfoType\" minOccurs=\"0\" maxOccurs=\"2\" /> <element name=\"voice\" type=\"contact:e164Type\" minOccurs=\"0\" /> <element name=\"fax\" type=\"contact:e164Type\" minOccurs=\"0\" /> <element name=\"email\" type=\"eppcom:minTokenType\" minOccurs=\"0\" /> <element name=\"url\" type=\"anyURI\" minOccurs=\"0\" /> <element name=\"whoisInfo\" type=\"rdeRegistrar:whoisInfoType\" minOccurs=\"0\" /> <element name=\"crDate\" type=\"dateTime\" minOccurs=\"0\" /> <element name=\"upDate\" type=\"dateTime\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <simpleType name=\"nameType\"> <restriction base=\"normalizedString\"> <minLength value=\"1\" /> <maxLength value=\"255\" /> </restriction> </simpleType> <simpleType name=\"statusType\"> <restriction base=\"token\"> <enumeration value=\"ok\" /> <enumeration value=\"readonly\" /> <enumeration value=\"terminated\" /> </restriction> </simpleType> <complexType name=\"postalInfoType\"> <sequence> <element name=\"addr\" type=\"rdeRegistrar:addrType\" /> </sequence> <attribute name=\"type\" type=\"rdeRegistrar:postalInfoEnumType\" use=\"required\" /> </complexType> <simpleType name=\"postalInfoEnumType\"> <restriction base=\"token\"> <enumeration value=\"loc\" /> <enumeration value=\"int\" /> </restriction> </simpleType> <complexType name=\"addrType\"> <sequence> <element name=\"street\" type=\"rdeRegistrar:optPostalLineType\" minOccurs=\"0\" maxOccurs=\"3\" /> <element name=\"city\" type=\"rdeRegistrar:postalLineType\" /> <element name=\"sp\" type=\"rdeRegistrar:optPostalLineType\" minOccurs=\"0\" /> <element name=\"pc\" type=\"rdeRegistrar:pcType\" minOccurs=\"0\" /> <element name=\"cc\" type=\"rdeRegistrar:ccType\" /> </sequence> </complexType> <simpleType name=\"postalLineType\"> <restriction base=\"normalizedString\"> <minLength value=\"1\" /> <maxLength value=\"255\" /> </restriction> </simpleType> <simpleType name=\"optPostalLineType\"> <restriction base=\"normalizedString\"> <maxLength value=\"255\" /> </restriction> </simpleType> <simpleType name=\"pcType\"> <restriction base=\"token\"> <maxLength value=\"16\" /> </restriction> </simpleType> <simpleType name=\"ccType\"> <restriction base=\"token\"> <length value=\"2\" /> </restriction> </simpleType> <complexType name=\"whoisInfoType\"> <sequence> <element name=\"name\" type=\"eppcom:labelType\" minOccurs=\"0\" /> <element name=\"url\" type=\"anyURI\" minOccurs=\"0\" /> </sequence> </complexType> <!-- Delete Type --> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element name=\"id\" type=\"eppcom:clIDType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.9. CSV Registrar Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\" xmlns:csvRegistrar=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types. --> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:domain-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:contact-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <annotation> <documentation> Registrar Comma-Separated Values (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvRegistrar:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvRegistrar:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Registrar unique identifier (short name / id) --> <element name=\"fId\" type=\"rdeCsv:fClIDRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Registrar name (full name) --> <element name=\"fName\" type=\"csvRegistrar:fNameType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Registrar name field --> <complexType name=\"fNameType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"normalizedString\" /> <attribute name=\"isLoc\" type=\"boolean\" default=\"false\" /> </extension> </complexContent> </complexType> <!-- Registrar GURID field --> <element name=\"fGurid\" type=\"rdeCsv:fPositiveIntegerType\" substitutionGroup=\"rdeCsv:field\" /> <!-- Registrar status field --> <element name=\"fStatus\" type=\"csvRegistrar:fStatusType\" substitutionGroup=\"rdeCsv:field\" /> <element name=\"fStatusName\" type=\"rdeCsv:fTokenType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fStatusType\"> <complexContent> <extension base=\"rdeCsv:fieldOptionalType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"csvRegistrar\\:statusType\" /> </extension> </complexContent> </complexType> <!-- Registrar status type with optional name attr --> <complexType name=\"statusType\"> <simpleContent> <extension base=\"csvRegistrar:statusValueType\"> <attribute name=\"name\" type=\"token\" /> </extension> </simpleContent> </complexType> <!-- Registrar status enumerated values --> <simpleType name=\"statusValueType\"> <restriction base=\"token\"> <enumeration value=\"ok\" /> <enumeration value=\"readonly\" /> <enumeration value=\"terminated\" /> </restriction> </simpleType> <!-- Whois URL field --> <element name=\"fWhoisUrl\" type=\"rdeCsv:anyURIType\" substitutionGroup=\"rdeCsv:field\" /> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.10. RDE IDN Table Reference Objects <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:rdeIDN=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <annotation> <documentation> Registry Data Escrow IDN provisioning schema </documentation> </annotation> <element name=\"idnTableRef\" type=\"rdeIDN:contentType\" substitutionGroup=\"rde:content\" /> <element name=\"delete\" type=\"rdeIDN:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Content Types --> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"url\" type=\"anyURI\" /> <element name=\"urlPolicy\" type=\"anyURI\" /> </sequence> <attribute name=\"id\" type=\"rdeIDN:idType\" use=\"required\" /> </extension> </complexContent> </complexType> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element name=\"id\" type=\"rdeIDN:idType\" /> </sequence> </extension> </complexContent> </complexType> <!-- Simple Types --> <simpleType name=\"idType\"> <restriction base=\"token\"> <minLength value=\"1\" /> <maxLength value=\"64\" /> </restriction> </simpleType> </schema> <CODE ENDS>¶ 9.11. CSV IDN Language Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvIDN-1.0\" xmlns:csvIDN=\"urn:ietf:params:xml:ns:csvIDN-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types --> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <annotation> <documentation> IDN Language Comma-Separated Values (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvIDN:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvIDN:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.12. EPP Parameters Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" xmlns:rdeEppParams=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:epp-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <annotation> <documentation> Registry Data Escrow EPP Parameters schema </documentation> </annotation> <!-- Content Type --> <element name=\"eppParams\" substitutionGroup=\"rdeEppParams:abstractEppParams\" /> <!-- Abstract Content Type --> <element name=\"abstractEppParams\" type=\"rdeEppParams:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"version\" type=\"epp:versionType\" maxOccurs=\"unbounded\" /> <element name=\"lang\" type=\"language\" maxOccurs=\"unbounded\" /> <element name=\"objURI\" type=\"anyURI\" maxOccurs=\"unbounded\" /> <element name=\"svcExtension\" type=\"epp:extURIType\" minOccurs=\"0\" /> <element name=\"dcp\" type=\"epp:dcpType\" /> </sequence> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.13. NNDN Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" xmlns:rdeNNDN=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeIDN=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" /> <annotation> <documentation> Registry Data Escrow NNDN provisioning schema </documentation> </annotation> <element name=\"abstractNNDN\" type=\"rdeNNDN:abstractContentType\" substitutionGroup=\"rde:content\" abstract=\"true\" /> <element name=\"NNDN\" substitutionGroup=\"rdeNNDN:abstractNNDN\" /> <element name=\"delete\" type=\"rdeNNDN:deleteType\" substitutionGroup=\"rde:delete\" /> <!-- Content Type --> <complexType name=\"abstractContentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element name=\"aName\" type=\"eppcom:labelType\" /> <element name=\"uName\" type=\"eppcom:labelType\" minOccurs=\"0\" /> <element name=\"idnTableId\" type=\"rdeIDN:idType\" minOccurs=\"0\" /> <element name=\"originalName\" type=\"eppcom:labelType\" minOccurs=\"0\" /> <element name=\"nameState\" type=\"rdeNNDN:nameState\" /> <element name=\"crDate\" type=\"dateTime\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <simpleType name=\"nameStateValue\"> <restriction base=\"token\"> <enumeration value=\"withheld\" /> <enumeration value=\"blocked\" /> <enumeration value=\"mirrored\" /> </restriction> </simpleType> <complexType name=\"nameState\"> <simpleContent> <extension base=\"rdeNNDN:nameStateValue\"> <attribute name=\"mirroringNS\" type=\"boolean\" default=\"true\" /> </extension> </simpleContent> </complexType> <!-- Delete Type --> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element name=\"aName\" type=\"eppcom:labelType\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.14. CSV NNDN Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:csvNNDN-1.0\" xmlns:csvNNDN=\"urn:ietf:params:xml:ns:csvNNDN-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:rdeNNDN=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <!-- Import common element types --> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" /> <annotation> <documentation> NNDN (NNDN's not domain name) (CSV) Object </documentation> </annotation> <!-- Child elements of the <rde:contents> object --> <element name=\"contents\" type=\"csvNNDN:contentType\" substitutionGroup=\"rde:content\" /> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- Child elements of the <rde:deletes> object --> <element name=\"deletes\" type=\"csvNNDN:deleteType\" substitutionGroup=\"rde:delete\" /> <complexType name=\"deleteType\"> <complexContent> <extension base=\"rde:deleteType\"> <sequence> <element ref=\"rdeCsv:csv\" maxOccurs=\"unbounded\" /> </sequence> </extension> </complexContent> </complexType> <!-- A-Label format name field --> <element name=\"fAName\" type=\"rdeCsv:fNameRequiredType\" substitutionGroup=\"rdeCsv:field\" /> <!-- domain name used to generate the IDN variant field --> <element name=\"fOriginalName\" type=\"rdeCsv:fNameType\" substitutionGroup=\"rdeCsv:field\" /> <!-- RGP status field --> <element name=\"fNameState\" type=\"csvNNDN:fNameStateType\" substitutionGroup=\"rdeCsv:field\" /> <complexType name=\"fNameStateType\"> <complexContent> <extension base=\"rdeCsv:fieldRequiredType\"> <sequence /> <attribute name=\"type\" type=\"token\" default=\"rdeNNDN\\:nameState\" /> </extension> </complexContent> </complexType> <!-- Mirroring uses NS mirror mechanism? --> <element name=\"fMirroringNS\" type=\"rdeCsv:fBooleanType\" substitutionGroup=\"rdeCsv:field\" /> <!-- End of schema. --> </schema> <CODE ENDS>¶ 9.15. Policy Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdePolicy-1.0\" xmlns:rdePolicy=\"urn:ietf:params:xml:ns:rdePolicy-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <annotation> <documentation> Registry Data Escrow Policy schema </documentation> </annotation> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <element name=\"policy\" type=\"rdePolicy:policyType\" substitutionGroup=\"rde:content\" /> <complexType name=\"policyType\"> <complexContent> <extension base=\"rde:contentType\"> <attribute name=\"scope\" type=\"token\" use=\"required\" /> <attribute name=\"element\" type=\"anyURI\" use=\"required\" /> </extension> </complexContent> </complexType> </schema> <CODE ENDS>¶ 9.16. Header Object <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:rdeHeader=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <import namespace=\"urn:ietf:params:xml:ns:rde-1.0\" /> <annotation> <documentation> Data Escrow Deposit Header schema </documentation> </annotation> <!-- Root Element --> <element name=\"header\" type=\"rdeHeader:contentType\" substitutionGroup=\"rde:content\" /> <!-- Content Type --> <complexType name=\"contentType\"> <complexContent> <extension base=\"rde:contentType\"> <sequence> <group ref=\"rdeHeader:repositoryTypeGroup\" /> <element name=\"count\" type=\"rdeHeader:countType\" maxOccurs=\"unbounded\" /> <element name=\"contentTag\" type=\"token\" minOccurs=\"0\" /> </sequence> </extension> </complexContent> </complexType> <group name=\"repositoryTypeGroup\"> <choice> <element name=\"tld\" type=\"eppcom:labelType\" /> <element name=\"registrar\" type=\"positiveInteger\" /> <element name=\"ppsp\" type=\"token\" /> <element name=\"reseller\" type=\"token\" /> </choice> </group> <complexType name=\"countType\"> <simpleContent> <extension base=\"long\"> <attribute name=\"uri\" type=\"anyURI\" use=\"required\" /> <attribute name=\"rcdn\" type=\"eppcom:labelType\" /> <attribute name=\"registrarId\" type=\"positiveInteger\" /> </extension> </simpleContent> </complexType> </schema> <CODE ENDS>¶ 9.17. DNRD Common Objects <CODE BEGINS> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <schema targetNamespace=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" xmlns:rdeDnrdCommon=\"urn:ietf:params:xml:ns:rdeDnrdCommon-1.0\" xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\" xmlns=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"> <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" /> <annotation> <documentation> Data Escrow Deposit Common Objects schema </documentation> </annotation> <complexType name=\"rrType\"> <simpleContent> <extension base=\"eppcom:clIDType\"> <attribute name=\"client\" type=\"eppcom:clIDType\" /> </extension> </simpleContent> </complexType> </schema> <CODE ENDS>¶ 10. Internationalization Considerations Data escrow deposits are represented in XML, which provides native support for encoding information using the Unicode character set and its more compact representations including UTF-8. Conformant XML processors recognize both UTF-8 and UTF-16. Though XML includes provisions to identify and use other character encodings through use of an \"encoding\" attribute in an <?xml?> declaration, the use of UTF-8 is RECOMMENDED.¶ 11. IANA Considerations This document uses URNs to describe XML namespaces and XML schemas conforming to a registry mechanism described in [RFC3688]. The following URIs have been assigned by IANA.¶ RDE CSV namespace:¶ URI: urn:ietf:params:xml:ns:rdeCsv-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE CSV XML schema:¶ URI: urn:ietf:params:xml:schema:rdeCsv-1.0¶ Registrant Contact: IESG¶ See Section 9.1 of this document.¶ RDE domain namespace:¶ URI: urn:ietf:params:xml:ns:rdeDomain-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE domain XML schema:¶ URI: urn:ietf:params:xml:schema:rdeDomain-1.0¶ Registrant Contact: IESG¶ See Section 9.2 of this document.¶ CSV domain namespace:¶ URI: urn:ietf:params:xml:ns:csvDomain-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV domain XML schema:¶ URI: urn:ietf:params:xml:schema:csvDomain-1.0¶ Registrant Contact: IESG¶ See Section 9.3 of this document.¶ RDE host namespace:¶ URI: urn:ietf:params:xml:ns:rdeHost-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE host XML schema:¶ URI: urn:ietf:params:xml:schema:rdeHost-1.0¶ Registrant Contact: IESG¶ See Section 9.4 of this document.¶ CSV host namespace:¶ URI: urn:ietf:params:xml:ns:csvHost-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV host XML schema:¶ URI: urn:ietf:params:xml:schema:csvHost-1.0¶ Registrant Contact: IESG¶ See Section 9.5 of this document.¶ RDE contact namespace:¶ URI: urn:ietf:params:xml:ns:rdeContact-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE contact XML schema:¶ URI: urn:ietf:params:xml:schema:rdeContact-1.0¶ Registrant Contact: IESG¶ See Section 9.6 of this document.¶ CSV contact namespace:¶ URI: urn:ietf:params:xml:ns:csvContact-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV contact XML schema:¶ URI: urn:ietf:params:xml:schema:csvContact-1.0¶ Registrant Contact: IESG¶ See Section 9.7 of this document.¶ RDE registrar namespace:¶ URI: urn:ietf:params:xml:ns:rdeRegistrar-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE registrar XML schema:¶ URI: urn:ietf:params:xml:schema:rdeRegistrar-1.0¶ Registrant Contact: IESG¶ See Section 9.8 of this document.¶ CSV registrar namespace:¶ URI: urn:ietf:params:xml:ns:csvRegistrar-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV registrar XML schema:¶ URI: urn:ietf:params:xml:schema:csvRegistrar-1.0¶ Registrant Contact: IESG¶ See Section 9.9 of this document.¶ RDE IDN namespace:¶ URI: urn:ietf:params:xml:ns:rdeIDN-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE IDN XML schema:¶ URI: urn:ietf:params:xml:schema:rdeIDN-1.0¶ Registrant Contact: IESG¶ See Section 9.10 of this document.¶ CSV IDN namespace:¶ URI: urn:ietf:params:xml:ns:csvIDN-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV IDN XML schema:¶ URI: urn:ietf:params:xml:schema:csvIDN-1.0¶ Registrant Contact: IESG¶ See Section 9.11 of this document.¶ RDE EPP parameters namespace:¶ URI: urn:ietf:params:xml:ns:rdeEppParams-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE EPP parameters XML schema:¶ URI: urn:ietf:params:xml:schema:rdeEppParams-1.0¶ Registrant Contact: IESG¶ See Section 9.12 of this document.¶ RDE NNDN namespace:¶ URI: urn:ietf:params:xml:ns:rdeNNDN-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE NNDN XML schema:¶ URI: urn:ietf:params:xml:schema:rdeNNDN-1.0¶ Registrant Contact: IESG¶ See Section 9.13 of this document.¶ CSV NNDN namespace:¶ URI: urn:ietf:params:xml:ns:csvNNDN-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ CSV NNDN XML schema:¶ URI: urn:ietf:params:xml:schema:csvNNDN-1.0¶ Registrant Contact: IESG¶ See Section 9.14 of this document.¶ RDE Policy namespace:¶ URI: urn:ietf:params:xml:ns:rdePolicy-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE Policy XML schema:¶ URI: urn:ietf:params:xml:schema:rdePolicy-1.0¶ Registrant Contact: IESG¶ See Section 9.15 of this document.¶ RDE Header namespace:¶ URI: urn:ietf:params:xml:ns:rdeHeader-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE Header XML schema:¶ URI: urn:ietf:params:xml:schema:rdeHeader-1.0¶ Registrant Contact: IESG¶ See Section 9.16 of this document.¶ RDE Common Objects namespace:¶ URI: urn:ietf:params:xml:ns:rdeDnrdCommon-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ RDE Common Objects XML schema:¶ URI: urn:ietf:params:xml:schema:rdeDnrdCommon-1.0¶ Registrant Contact: IESG¶ See Section 9.17 of this document.¶ 12. Security Considerations This specification does not define the security mechanisms to be used in the transmission of the data escrow deposits, since it only specifies the minimum necessary to enable the rebuilding of a registry from deposits without intervention from the original registry.¶ Depending on local policies, some elements, or, most likely, the whole deposit will be considered confidential. As such, the parties SHOULD take all the necessary precautions such as encrypting the data at rest and in transit to avoid inadvertent disclosure of private data. Regardless of the precautions taken by the parties regarding data at rest and in transit, authentication credentials MUST NOT be escrowed.¶ Authentication of the parties passing data escrow deposit files is also of the utmost importance. The escrow agent MUST properly authenticate the registry's identity before accepting data escrow deposits. The registry MUST authenticate the escrow agent's identity before submitting any data, and the data escrow agent MUST authenticate the identity of the party receiving the data escrow deposits for the purposes deemed appropriate.¶ Additionally, the registry and the escrow agent MUST use integrity checking mechanisms to ensure the data transmitted is what the source intended. Validation of the contents by the parties is RECOMMENDED to ensure that the file was transmitted correctly from the registry or escrow agent and that the contents are \"meaningful\".¶ A few elements in this specification contain URLs; the use of HTTP over TLS (Transport Layer Security) [RFC2818] is RECOMMENDED on the URLs.¶ The various data structures in the document include a few places that have internal redundancy, and if the values become inconsistent there can be harmful consequences, such as different entities using different fields as their reference.¶ Note: if TLS is used when providing an escrow service, the recommendations in [BCP195] MUST be implemented.¶ 13. Privacy Considerations This specification defines a format that may be used to escrow personal data. The process of data escrow is governed by a legal document that is agreed to by the parties, and such a legal document must ensure that privacy-sensitive and/or personal data receives the required protection.¶ 14. Example of a Full Deposit Using the XML Model The following is an example of a Full Deposit using the XML model:¶ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <rde:deposit type=\"FULL\" id=\"20191017001\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeHeader=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:rdeDomain=\"urn:ietf:params:xml:ns:rdeDomain-1.0\" xmlns:rdeHost=\"urn:ietf:params:xml:ns:rdeHost-1.0\" xmlns:rdeContact=\"urn:ietf:params:xml:ns:rdeContact-1.0\" xmlns:rdeRegistrar=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\" xmlns:rdeIDN=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:rdeNNDN=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" xmlns:rdeEppParams=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" xmlns:rdePolicy=\"urn:ietf:params:xml:ns:rdePolicy-1.0\" xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"> <rde:watermark>2019-10-17T00:00:00Z</rde:watermark> <rde:rdeMenu> <rde:version>1.0</rde:version> <rde:objURI>urn:ietf:params:xml:ns:rdeHeader-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeContact-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeHost-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeDomain-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeRegistrar-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeIDN-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeNNDN-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeEppParams-1.0 </rde:objURI> </rde:rdeMenu> <!-- Contents --> <rde:contents> <!-- Header --> <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeDomain-1.0\">2 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeHost-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeContact-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeIDN-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\">1 </rdeHeader:count> </rdeHeader:header> <!-- Domain: example1.example --> <rdeDomain:domain> <rdeDomain:name>example1.example</rdeDomain:name> <rdeDomain:roid>Dexample1-TEST</rdeDomain:roid> <rdeDomain:status s=\"ok\"/> <rdeDomain:registrant>jd1234</rdeDomain:registrant> <rdeDomain:contact type=\"admin\">sh8013</rdeDomain:contact> <rdeDomain:contact type=\"tech\">sh8013</rdeDomain:contact> <rdeDomain:ns> <domain:hostObj>ns1.example.com</domain:hostObj> <domain:hostObj>ns1.example1.example</domain:hostObj> </rdeDomain:ns> <rdeDomain:clID>RegistrarX</rdeDomain:clID> <rdeDomain:crRr client=\"jdoe\">RegistrarX</rdeDomain:crRr> <rdeDomain:crDate>1999-04-03T22:00:00.0Z</rdeDomain:crDate> <rdeDomain:exDate>2025-04-03T22:00:00.0Z</rdeDomain:exDate> </rdeDomain:domain> <!-- Domain: example2.example --> <rdeDomain:domain> <rdeDomain:name>example2.example</rdeDomain:name> <rdeDomain:roid>Dexample2-TEST</rdeDomain:roid> <rdeDomain:status s=\"ok\"/> <rdeDomain:status s=\"clientUpdateProhibited\"/> <rdeDomain:registrant>jd1234</rdeDomain:registrant> <rdeDomain:contact type=\"admin\">sh8013</rdeDomain:contact> <rdeDomain:contact type=\"tech\">sh8013</rdeDomain:contact> <rdeDomain:clID>RegistrarX</rdeDomain:clID> <rdeDomain:crRr>RegistrarX</rdeDomain:crRr> <rdeDomain:crDate>1999-04-03T22:00:00.0Z</rdeDomain:crDate> <rdeDomain:exDate>2025-04-03T22:00:00.0Z</rdeDomain:exDate> </rdeDomain:domain> <!-- Host: ns1.example.example --> <rdeHost:host> <rdeHost:name>ns1.example1.example</rdeHost:name> <rdeHost:roid>Hns1_example_test-TEST</rdeHost:roid> <rdeHost:status s=\"ok\"/> <rdeHost:status s=\"linked\"/> <rdeHost:addr ip=\"v4\">192.0.2.2</rdeHost:addr> <rdeHost:addr ip=\"v4\">192.0.2.29</rdeHost:addr> <rdeHost:addr ip=\"v6\">2001:DB8:1::1</rdeHost:addr> <rdeHost:clID>RegistrarX</rdeHost:clID> <rdeHost:crRr>RegistrarX</rdeHost:crRr> <rdeHost:crDate>1999-05-08T12:10:00.0Z</rdeHost:crDate> <rdeHost:upRr>RegistrarX</rdeHost:upRr> <rdeHost:upDate>2009-10-03T09:34:00.0Z</rdeHost:upDate> </rdeHost:host> <!-- Contact: sh8013 --> <rdeContact:contact> <rdeContact:id>sh8013</rdeContact:id> <rdeContact:roid>Csh8013-TEST</rdeContact:roid> <rdeContact:status s=\"linked\"/> <rdeContact:status s=\"clientDeleteProhibited\"/> <rdeContact:postalInfo type=\"int\"> <contact:name>John Doe</contact:name> <contact:org>Example Inc.</contact:org> <contact:addr> <contact:street>123 Example Dr.</contact:street> <contact:street>Suite 100</contact:street> <contact:city>Dulles</contact:city> <contact:sp>VA</contact:sp> <contact:pc>20166-6503</contact:pc> <contact:cc>US</contact:cc> </contact:addr> </rdeContact:postalInfo> <rdeContact:voice x=\"1234\">+1.7035555555 </rdeContact:voice> <rdeContact:fax>+1.7035555556 </rdeContact:fax> <rdeContact:email>jdoe@example.example </rdeContact:email> <rdeContact:clID>RegistrarX</rdeContact:clID> <rdeContact:crRr client=\"jdoe\">RegistrarX </rdeContact:crRr> <rdeContact:crDate>2009-09-13T08:01:00.0Z </rdeContact:crDate> <rdeContact:upRr client=\"jdoe\">RegistrarX </rdeContact:upRr> <rdeContact:upDate>2009-11-26T09:10:00.0Z </rdeContact:upDate> <rdeContact:trDate>2009-12-03T09:05:00.0Z </rdeContact:trDate> <rdeContact:disclose flag=\"0\"> <contact:voice/> <contact:email/> </rdeContact:disclose> </rdeContact:contact> <!-- Registrar: RegistrarX --> <rdeRegistrar:registrar> <rdeRegistrar:id>RegistrarX</rdeRegistrar:id> <rdeRegistrar:name>Registrar X</rdeRegistrar:name> <rdeRegistrar:gurid>8</rdeRegistrar:gurid> <rdeRegistrar:status>ok</rdeRegistrar:status> <rdeRegistrar:postalInfo type=\"int\"> <rdeRegistrar:addr> <rdeRegistrar:street>123 Example Dr. </rdeRegistrar:street> <rdeRegistrar:street>Suite 100 </rdeRegistrar:street> <rdeRegistrar:city>Dulles</rdeRegistrar:city> <rdeRegistrar:sp>VA</rdeRegistrar:sp> <rdeRegistrar:pc>20166-6503</rdeRegistrar:pc> <rdeRegistrar:cc>US</rdeRegistrar:cc> </rdeRegistrar:addr> </rdeRegistrar:postalInfo> <rdeRegistrar:voice x=\"1234\">+1.7035555555 </rdeRegistrar:voice> <rdeRegistrar:fax>+1.7035555556 </rdeRegistrar:fax> <rdeRegistrar:email>jdoe@example.example </rdeRegistrar:email> <rdeRegistrar:url>http://www.example.example </rdeRegistrar:url> <rdeRegistrar:whoisInfo> <rdeRegistrar:name>whois.example.example </rdeRegistrar:name> <rdeRegistrar:url>http://whois.example.example </rdeRegistrar:url> </rdeRegistrar:whoisInfo> <rdeRegistrar:crDate>2005-04-23T11:49:00.0Z </rdeRegistrar:crDate> <rdeRegistrar:upDate>2009-02-17T17:51:00.0Z </rdeRegistrar:upDate> </rdeRegistrar:registrar> <!-- IDN Table --> <rdeIDN:idnTableRef id=\"pt-BR\"> <rdeIDN:url> http://www.iana.org/domains/idn-tables/tables/br_pt-br_1.0.html </rdeIDN:url> <rdeIDN:urlPolicy> http://registro.br/dominio/regras.html </rdeIDN:urlPolicy> </rdeIDN:idnTableRef> <!-- NNDN: pinguino.example --> <rdeNNDN:NNDN> <rdeNNDN:aName>xn--exampl-gva.example</rdeNNDN:aName> <rdeNNDN:idnTableId>pt-BR</rdeNNDN:idnTableId> <rdeNNDN:originalName>example1.example</rdeNNDN:originalName> <rdeNNDN:nameState>withheld</rdeNNDN:nameState> <rdeNNDN:crDate>2005-04-23T11:49:00.0Z</rdeNNDN:crDate> </rdeNNDN:NNDN> <!-- EppParams --> <rdeEppParams:eppParams> <rdeEppParams:version>1.0</rdeEppParams:version> <rdeEppParams:lang>en</rdeEppParams:lang> <rdeEppParams:objURI> urn:ietf:params:xml:ns:domain-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI> urn:ietf:params:xml:ns:contact-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI> urn:ietf:params:xml:ns:host-1.0 </rdeEppParams:objURI> <rdeEppParams:svcExtension> <epp:extURI>urn:ietf:params:xml:ns:rgp-1.0 </epp:extURI> <epp:extURI>urn:ietf:params:xml:ns:secDNS-1.1 </epp:extURI> </rdeEppParams:svcExtension> <rdeEppParams:dcp> <epp:access><epp:all/></epp:access> <epp:statement> <epp:purpose> <epp:admin/> <epp:prov/> </epp:purpose> <epp:recipient> <epp:ours/> <epp:public/> </epp:recipient> <epp:retention> <epp:stated/> </epp:retention> </epp:statement> </rdeEppParams:dcp> </rdeEppParams:eppParams> <rdePolicy:policy scope=\"//rde:deposit/rde:contents/rdeDomain:domain\" element=\"rdeDomain:registrant\" /> </rde:contents> </rde:deposit> ¶ 15. Example of a Differential Deposit Using the XML Model The following is an example of a Differential Deposit using the XML model:¶ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <rde:deposit type=\"DIFF\" id=\"20191017002\" prevId=\"20191017001\" xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\" xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeHeader=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:rdeDomain=\"urn:ietf:params:xml:ns:rdeDomain-1.0\" xmlns:rdeHost=\"urn:ietf:params:xml:ns:rdeHost-1.0\" xmlns:rdeContact=\"urn:ietf:params:xml:ns:rdeContact-1.0\" xmlns:rdeRegistrar=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\" xmlns:rdeIDN=\"urn:ietf:params:xml:ns:rdeIDN-1.0\" xmlns:rdeNNDN=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\" xmlns:rdeEppParams=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"> <rde:watermark>2019-10-17T00:00:00Z</rde:watermark> <rde:rdeMenu> <rde:version>1.0</rde:version> <rde:objURI>urn:ietf:params:xml:ns:rdeHeader-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeContact-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeHost-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeDomain-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeRegistrar-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeIDN-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeNNDN-1.0 </rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeEppParams-1.0 </rde:objURI> </rde:rdeMenu> <!-- Deletes --> <rde:deletes> <rdeDomain:delete> <rdeDomain:name>example2.example</rdeDomain:name> </rdeDomain:delete> </rde:deletes> <!-- Contents --> <rde:contents> <!-- Header --> <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeDomain-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeHost-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeContact-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeRegistrar-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeIDN-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeNNDN-1.0\">1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\">1 </rdeHeader:count> </rdeHeader:header> </rde:contents> </rde:deposit> ¶ 16. Example of a Full Deposit Using the CSV Model The following is an example of a Full Deposit using the CSV model:¶ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <rde:deposit xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:csvDomain=\"urn:ietf:params:xml:ns:csvDomain-1.0\" xmlns:csvHost=\"urn:ietf:params:xml:ns:csvHost-1.0\" xmlns:csvContact=\"urn:ietf:params:xml:ns:csvContact-1.0\" xmlns:csvRegistrar=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\" xmlns:csvIDN=\"urn:ietf:params:xml:ns:csvIDN-1.0\" xmlns:rdeHeader=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:csvNNDN=\"urn:ietf:params:xml:ns:csvNNDN-1.0\" xmlns:rdeEppParams=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" type=\"FULL\" id=\"20191017001\"> <rde:watermark>2019-10-18T00:00:00Z</rde:watermark> <rde:rdeMenu> <rde:version>1.0</rde:version> <rde:objURI>urn:ietf:params:xml:ns:csvDomain-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvHost-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvContact-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvRegistrar-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvIDN-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvNNDN-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:rdeEppParams-1.0</rde:objURI> </rde:rdeMenu> <rde:contents> <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvDomain-1.0\"> 4 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvHost-1.0\"> 6 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvContact-1.0\"> 9 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\"> 3 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvIDN-1.0\"> 2 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvNNDN-1.0\"> 2 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\"> 1 </rdeHeader:count> </rdeHeader:header> <csvDomain:contents> <rdeCsv:csv name=\"domain\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName/> <rdeCsv:fRoid/> <rdeCsv:fIdnTableId/> <csvDomain:fOriginalName/> <rdeCsv:fRegistrant/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fExDate isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"75E2D01F\"> domain-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainContacts\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvContact:fId/> <csvDomain:fContactType/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"70A7C17B\"> domainContacts-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainStatuses\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> <csvDomain:fRgpStatus/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"EB8C548E\"> domainStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainNameServers\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvHost:fName parent=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"984C3097\"> domainNameServers-name-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainNameServers\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fRoid/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"569D4638\"> domainNameServers-roid-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"dnssec\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fKeyTag/> <csvDomain:fDsAlg/> <csvDomain:fDigestType/> <csvDomain:fDigest/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"AA15CB43\"> dnssec-ds-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"dnssec\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fFlags/> <csvDomain:fProtocol/> <csvDomain:fKeyAlg/> <csvDomain:fPubKey/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"1B16F334\"> dnssec-key-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainTransfer\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> <rdeCsv:fExDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"71170194\"> domainTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvDomain:contents> <csvHost:contents> <rdeCsv:csv name=\"host\" sep=\",\"> <rdeCsv:fields> <csvHost:fName/> <rdeCsv:fRoid/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fTrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"120938E3\"> host-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"hostStatuses\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"0BA504FC\"> hostStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"hostAddresses\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fAddr isRequired=\"true\"/> <csvHost:fAddrVersion isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"17888F02\"> hostAddresses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvHost:contents> <csvContact:contents> <rdeCsv:csv name=\"contact\" sep=\",\"> <rdeCsv:fields> <csvContact:fId/> <rdeCsv:fRoid/> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D7F106A5\"> contact-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactStatuses\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"2AAF99D4\"> contactStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactPostal\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fPostalType/> <csvContact:fName/> <csvContact:fOrg/> <csvContact:fStreet index=\"0\"/> <csvContact:fStreet index=\"1\"/> <csvContact:fStreet index=\"2\"/> <csvContact:fCity/> <csvContact:fSp/> <csvContact:fPc/> <csvContact:fCc/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"02CC2504\"> contactPostal-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactTransfer\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D0929632\"> contactTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactDisclose\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fDiscloseFlag/> <csvContact:fDiscloseNameLoc/> <csvContact:fDiscloseNameInt/> <csvContact:fDiscloseOrgLoc/> <csvContact:fDiscloseOrgInt/> <csvContact:fDiscloseAddrLoc/> <csvContact:fDiscloseAddrInt/> <csvContact:fDiscloseVoice/> <csvContact:fDiscloseFax/> <csvContact:fDiscloseEmail/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"89043A90\"> contactDisclose-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvContact:contents> <csvRegistrar:contents> <rdeCsv:csv name=\"registrar\" sep=\",\"> <rdeCsv:fields> <csvRegistrar:fId/> <csvRegistrar:fName isLoc=\"false\"/> <csvRegistrar:fGurid/> <csvRegistrar:fStatus/> <csvContact:fStreet isLoc=\"false\" index=\"0\"/> <csvContact:fStreet isLoc=\"false\" index=\"1\"/> <csvContact:fStreet isLoc=\"false\" index=\"2\"/> <csvContact:fCity isLoc=\"false\" /> <csvContact:fSp isLoc=\"false\" /> <csvContact:fPc isLoc=\"false\" /> <csvContact:fCc isLoc=\"false\" /> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail isRequired=\"false\"/> <rdeCsv:fUrl/> <csvRegistrar:fWhoisUrl/> <rdeCsv:fCrDate/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"306178BB\"> registrar-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvRegistrar:contents> <csvIDN:contents> <rdeCsv:csv name=\"idnLanguage\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fIdnTableId isRequired=\"true\"/> <rdeCsv:fUrl isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D462EAD0\"> idnLanguage-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvIDN:contents> <csvNNDN:contents> <rdeCsv:csv name=\"NNDN\" sep=\",\"> <rdeCsv:fields> <csvNNDN:fAName/> <rdeCsv:fIdnTableId/> <csvNNDN:fOriginalName/> <csvNNDN:fNameState/> <csvNNDN:fMirroringNS/> <rdeCsv:fCrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"11C80D60\"> NNDN-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvNNDN:contents> <rdeEppParams:eppParams> <rdeEppParams:version>1.0</rdeEppParams:version> <rdeEppParams:lang>en</rdeEppParams:lang> <rdeEppParams:objURI>urn:ietf:params:xml:ns:domain-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:host-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:contact-1.0 </rdeEppParams:objURI> <rdeEppParams:svcExtension> <epp:extURI>urn:ietf:params:xml:ns:secDNS-1.1 </epp:extURI> <epp:extURI>urn:ietf:params:xml:ns:rgp-1.0 </epp:extURI> </rdeEppParams:svcExtension> <rdeEppParams:dcp> <epp:access> <epp:all/> </epp:access> <epp:statement> <epp:purpose> <epp:admin/> <epp:other/> <epp:prov/> </epp:purpose> <epp:recipient> <epp:ours/> <epp:public/> <epp:unrelated/> </epp:recipient> <epp:retention> <epp:indefinite/> </epp:retention> </epp:statement> </rdeEppParams:dcp> </rdeEppParams:eppParams> </rde:contents> </rde:deposit> ¶ 17. Example of a Differential Deposit Using the CSV Model The following is an example of a Differential Deposit using the CSV model:¶ <?xml version=\"1.0\" encoding=\"UTF-8\"?> <rde:deposit xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\" xmlns:rde=\"urn:ietf:params:xml:ns:rde-1.0\" xmlns:rdeCsv=\"urn:ietf:params:xml:ns:rdeCsv-1.0\" xmlns:csvDomain=\"urn:ietf:params:xml:ns:csvDomain-1.0\" xmlns:csvHost=\"urn:ietf:params:xml:ns:csvHost-1.0\" xmlns:csvContact=\"urn:ietf:params:xml:ns:csvContact-1.0\" xmlns:csvRegistrar=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\" xmlns:csvIDN=\"urn:ietf:params:xml:ns:csvIDN-1.0\" xmlns:rdeHeader=\"urn:ietf:params:xml:ns:rdeHeader-1.0\" xmlns:csvNNDN=\"urn:ietf:params:xml:ns:csvNNDN-1.0\" xmlns:rdeEppParams=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\" type=\"DIFF\" id=\"20191017001\" prevId=\"20191010001\"> <rde:watermark>2019-10-18T00:00:00Z</rde:watermark> <rde:rdeMenu> <rde:version>1.0</rde:version> <rde:objURI>urn:ietf:params:xml:ns:csvDomain-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvHost-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvContact-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvRegistrar-1.0</rde:objURI> <rde:objURI>urn:ietf:params:xml:ns:csvIDN-1.0</rde:objURI> </rde:rdeMenu> <rde:deletes> <csvDomain:deletes> <rdeCsv:csv name=\"domain\"> <rdeCsv:fields> <csvDomain:fName/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"6F2B988F\"> domain-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvDomain:deletes> <csvHost:deletes> <rdeCsv:csv name=\"host\"> <rdeCsv:fields> <rdeCsv:fRoid/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"E3408F5E\"> host-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvHost:deletes> <csvContact:deletes> <rdeCsv:csv name=\"contact\"> <rdeCsv:fields> <csvContact:fId/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"6F2B988F\"> contact-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvContact:deletes> <csvRegistrar:deletes> <rdeCsv:csv name=\"registrar\"> <rdeCsv:fields> <csvRegistrar:fId/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"307B87AE\"> registrar-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvRegistrar:deletes> <csvIDN:deletes> <rdeCsv:csv name=\"idnLanguage\"> <rdeCsv:fields> <rdeCsv:fIdnTableId/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"757B573A\"> idnLanguage-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvIDN:deletes> <csvNNDN:deletes> <rdeCsv:csv name=\"NNDN\"> <rdeCsv:fields> <csvNNDN:fAName/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"FF104E83\"> NNDN-delete-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvNNDN:deletes> </rde:deletes> <rde:contents> <rdeHeader:header> <rdeHeader:tld>test</rdeHeader:tld> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvDomain-1.0\"> 2 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvHost-1.0\"> 2 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvContact-1.0\"> 3 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvRegistrar-1.0\"> 1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvIDN-1.0\"> 1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:csvNNDN-1.0\"> 1 </rdeHeader:count> <rdeHeader:count uri=\"urn:ietf:params:xml:ns:rdeEppParams-1.0\"> 1 </rdeHeader:count> </rdeHeader:header> <csvDomain:contents> <rdeCsv:csv name=\"domain\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName/> <rdeCsv:fRoid/> <rdeCsv:fIdnTableId/> <csvDomain:fOriginalName/> <rdeCsv:fRegistrant/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fExDate isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"75E2D01F\"> domain-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainContacts\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvContact:fId/> <csvDomain:fContactType/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"70A7C17B\"> domainContacts-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainStatuses\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> <csvDomain:fRgpStatus/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"EB8C548E\"> domainStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainNameServers\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvHost:fName parent=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"984C3097\"> domainNameServers-name-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainNameServers\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fRoid/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"569D4638\"> domainNameServers-roid-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"dnssec\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fKeyTag/> <csvDomain:fDsAlg/> <csvDomain:fDigestType/> <csvDomain:fDigest/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"AA15CB43\"> dnssec-ds-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"dnssec\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <csvDomain:fMaxSigLife/> <csvDomain:fFlags/> <csvDomain:fProtocol/> <csvDomain:fKeyAlg/> <csvDomain:fPubKey/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"1B16F334\"> dnssec-key-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"domainTransfer\" sep=\",\"> <rdeCsv:fields> <csvDomain:fName parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> <rdeCsv:fExDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"71170194\"> domainTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvDomain:contents> <csvHost:contents> <rdeCsv:csv name=\"host\" sep=\",\"> <rdeCsv:fields> <csvHost:fName/> <rdeCsv:fRoid/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> <rdeCsv:fTrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"120938E3\"> host-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"hostStatuses\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"0BA504FC\"> hostStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"hostAddresses\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fRoid parent=\"true\"/> <csvHost:fAddr isRequired=\"true\"/> <csvHost:fAddrVersion isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"17888F02\"> hostAddresses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvHost:contents> <csvContact:contents> <rdeCsv:csv name=\"contact\" sep=\",\"> <rdeCsv:fields> <csvContact:fId/> <rdeCsv:fRoid/> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail/> <rdeCsv:fClID/> <rdeCsv:fCrRr/> <rdeCsv:fCrID/> <rdeCsv:fCrDate/> <rdeCsv:fUpRr/> <rdeCsv:fUpID/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D7F106A5\"> contact-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactStatuses\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fStatus/> <rdeCsv:fStatusDescription/> <rdeCsv:fLang/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"2AAF99D4\"> contactStatuses-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactPostal\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fPostalType/> <csvContact:fName/> <csvContact:fOrg/> <csvContact:fStreet index=\"0\"/> <csvContact:fStreet index=\"1\"/> <csvContact:fStreet index=\"2\"/> <csvContact:fCity/> <csvContact:fSp/> <csvContact:fPc/> <csvContact:fCc/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"02CC2504\"> contactPostal-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactTransfer\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <rdeCsv:fTrStatus/> <rdeCsv:fReRr/> <rdeCsv:fReID/> <rdeCsv:fReDate/> <rdeCsv:fAcRr/> <rdeCsv:fAcID/> <rdeCsv:fAcDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D0929632\"> contactTransfer-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> <rdeCsv:csv name=\"contactDisclose\" sep=\",\"> <rdeCsv:fields> <csvContact:fId parent=\"true\"/> <csvContact:fDiscloseFlag/> <csvContact:fDiscloseNameLoc/> <csvContact:fDiscloseNameInt/> <csvContact:fDiscloseOrgLoc/> <csvContact:fDiscloseOrgInt/> <csvContact:fDiscloseAddrLoc/> <csvContact:fDiscloseAddrInt/> <csvContact:fDiscloseVoice/> <csvContact:fDiscloseFax/> <csvContact:fDiscloseEmail/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"89043A90\"> contactDisclose-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvContact:contents> <csvRegistrar:contents> <rdeCsv:csv name=\"registrar\" sep=\",\"> <rdeCsv:fields> <csvRegistrar:fId/> <csvRegistrar:fName isLoc=\"false\"/> <csvRegistrar:fGurid/> <csvRegistrar:fStatus/> <csvContact:fStreet isLoc=\"false\" index=\"0\"/> <csvContact:fStreet isLoc=\"false\" index=\"1\"/> <csvContact:fStreet isLoc=\"false\" index=\"2\"/> <csvContact:fCity isLoc=\"false\" /> <csvContact:fSp isLoc=\"false\" /> <csvContact:fPc isLoc=\"false\" /> <csvContact:fCc isLoc=\"false\" /> <csvContact:fVoice/> <csvContact:fVoiceExt/> <csvContact:fFax/> <csvContact:fFaxExt/> <csvContact:fEmail isRequired=\"false\"/> <rdeCsv:fUrl/> <csvRegistrar:fWhoisUrl/> <rdeCsv:fCrDate/> <rdeCsv:fUpDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"306178BB\"> registrar-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvRegistrar:contents> <csvIDN:contents> <rdeCsv:csv name=\"idnLanguage\" sep=\",\"> <rdeCsv:fields> <rdeCsv:fIdnTableId isRequired=\"true\"/> <rdeCsv:fUrl isRequired=\"true\"/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"D462EAD0\"> idnLanguage-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvIDN:contents> <csvNNDN:contents> <rdeCsv:csv name=\"NNDN\" sep=\",\"> <rdeCsv:fields> <csvNNDN:fAName/> <rdeCsv:fIdnTableId/> <csvNNDN:fOriginalName/> <csvNNDN:fNameState/> <csvNNDN:fMirroringNS/> <rdeCsv:fCrDate/> </rdeCsv:fields> <rdeCsv:files> <rdeCsv:file cksum=\"11C80D60\"> NNDN-YYYYMMDD.csv </rdeCsv:file> </rdeCsv:files> </rdeCsv:csv> </csvNNDN:contents> <rdeEppParams:eppParams> <rdeEppParams:version>1.0</rdeEppParams:version> <rdeEppParams:lang>en</rdeEppParams:lang> <rdeEppParams:objURI>urn:ietf:params:xml:ns:domain-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:host-1.0 </rdeEppParams:objURI> <rdeEppParams:objURI>urn:ietf:params:xml:ns:contact-1.0 </rdeEppParams:objURI> <rdeEppParams:svcExtension> <epp:extURI>urn:ietf:params:xml:ns:secDNS-1.1 </epp:extURI> <epp:extURI>urn:ietf:params:xml:ns:rgp-1.0 </epp:extURI> </rdeEppParams:svcExtension> <rdeEppParams:dcp> <epp:access> <epp:all/> </epp:access> <epp:statement> <epp:purpose> <epp:admin/> <epp:other/> <epp:prov/> </epp:purpose> <epp:recipient> <epp:ours/> <epp:public/> <epp:unrelated/> </epp:recipient> <epp:retention> <epp:indefinite/> </epp:retention> </epp:statement> </rdeEppParams:dcp> </rdeEppParams:eppParams> </rde:contents> </rde:deposit> ¶ 18. References 18.1. Normative References [BCP195] Sheffer, Y., Holz, R., and P. Saint-Andre, \"Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\", BCP 195, RFC 7525, May 2015. <https://www.rfc-editor.org/info/bcp195> [ISO-3166-1] International Organization for Standardization, \"Codes for the representation of names of countries and their subdivisions -- Part 1: Country codes\", ISO Standard 3166, August 2020. [ITU-E164] International Telecommunication Union, \"The international public telecommunication numbering plan\", ITU-T Recommendation E.164, February 2005. [RFC0791] Postel, J., \"Internet Protocol\", STD 5, RFC 791, DOI 10.17487/RFC0791, September 1981, <https://www.rfc-editor.org/info/rfc791>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3339] Klyne, G. and C. Newman, \"Date and Time on the Internet: Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002, <https://www.rfc-editor.org/info/rfc3339>. [RFC3915] Hollenbeck, S., \"Domain Registry Grace Period Mapping for the Extensible Provisioning Protocol (EPP)\", RFC 3915, DOI 10.17487/RFC3915, September 2004, <https://www.rfc-editor.org/info/rfc3915>. [RFC5730] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\", STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009, <https://www.rfc-editor.org/info/rfc5730>. [RFC5731] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP) Domain Name Mapping\", STD 69, RFC 5731, DOI 10.17487/RFC5731, August 2009, <https://www.rfc-editor.org/info/rfc5731>. [RFC5732] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP) Host Mapping\", STD 69, RFC 5732, DOI 10.17487/RFC5732, August 2009, <https://www.rfc-editor.org/info/rfc5732>. [RFC5733] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP) Contact Mapping\", STD 69, RFC 5733, DOI 10.17487/RFC5733, August 2009, <https://www.rfc-editor.org/info/rfc5733>. [RFC5891] Klensin, J., \"Internationalized Domain Names in Applications (IDNA): Protocol\", RFC 5891, DOI 10.17487/RFC5891, August 2010, <https://www.rfc-editor.org/info/rfc5891>. [RFC5910] Gould, J. and S. Hollenbeck, \"Domain Name System (DNS) Security Extensions Mapping for the Extensible Provisioning Protocol (EPP)\", RFC 5910, DOI 10.17487/RFC5910, May 2010, <https://www.rfc-editor.org/info/rfc5910>. [RFC5952] Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6 Address Text Representation\", RFC 5952, DOI 10.17487/RFC5952, August 2010, <https://www.rfc-editor.org/info/rfc5952>. [RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <https://www.rfc-editor.org/info/rfc6234>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8499] Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS Terminology\", BCP 219, RFC 8499, DOI 10.17487/RFC8499, January 2019, <https://www.rfc-editor.org/info/rfc8499>. [RFC8909] Lozano, G., \"Registry Data Escrow Specification\", RFC 8909, DOI 10.17487/RFC8909, November 2020, <https://www.rfc-editor.org/info/rfc8909>. [V42] International Telecommunication Union, \"V.42 : Error-correcting procedures for DCEs using asynchronous-to-synchronous conversion\", ITU-T Recommendation V.42, March 2002, <https://www.itu.int/rec/T-REC-V.42/en>. [W3C.REC-xml-20081126] Bray, T., Paoli, J., Sperberg-McQueen, C. M., Maler, E., and F. Yergeau, \"Extensible Markup Language (XML) 1.0 (Fifth Edition) REC-xml-20081126\", W3C Recommendation, November 2008, <https://www.w3.org/TR/2008/REC-xml-20081126/>. [W3C.REC-xmlschema-1-20041028] Thompson, H. S., Beech, D., Maloney, M., and N. Mendelsohn, \"XML Schema Part 1: Structures Second Edition REC-xmlschema-1-20041028\", W3C Recommendation, October 2004, <https://www.w3.org/TR/2004/REC-xmlschema-1-20041028/>. [W3C.REC-xmlschema-2-20041028] Biron, P. V. and A. Malhotra, \"XML Schema Part 2: Datatypes Second Edition REC-xmlschema-2-20041028\", W3C Recommendation, October 2004, <https://www.w3.org/TR/2004/REC-xmlschema-2-20041028/>. [W3C.REC-xpath-31-20170321] Robie, J., Dyck, M., and J. Spiegel, \"XML Path Language (XPath) 3.1\", W3C Recommendation, March 2017, <https://www.w3.org/TR/2017/REC-xpath-31-20170321/>. 18.2. Informative References [ICANN-GTLD-AGB-20120604] ICANN, \"gTLD Applicant Guidebook Version 2012-06-04\", 4 June 2012, <http://newgtlds.icann.org/en/applicants/agb/guidebook-full-04jun12-en.pdf>. [ICANN-GTLD-RA-20170731] ICANN, \"Base Registry Agreement 2017-07-31\", 31 July 2017, <https://newgtlds.icann.org/sites/default/files/agreements/agreement-approved-31jul17-en.pdf>. [RFC1952] Deutsch, P., \"GZIP file format specification version 4.3\", RFC 1952, DOI 10.17487/RFC1952, May 1996, <https://www.rfc-editor.org/info/rfc1952>. [RFC2818] Rescorla, E., \"HTTP Over TLS\", RFC 2818, DOI 10.17487/RFC2818, May 2000, <https://www.rfc-editor.org/info/rfc2818>. [RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, DOI 10.17487/RFC3688, January 2004, <https://www.rfc-editor.org/info/rfc3688>. [RFC3912] Daigle, L., \"WHOIS Protocol Specification\", RFC 3912, DOI 10.17487/RFC3912, September 2004, <https://www.rfc-editor.org/info/rfc3912>. [RFC4180] Shafranovich, Y., \"Common Format and MIME Type for Comma-Separated Values (CSV) Files\", RFC 4180, DOI 10.17487/RFC4180, October 2005, <https://www.rfc-editor.org/info/rfc4180>. [RFC6672] Rose, S. and W. Wijngaards, \"DNAME Redirection in the DNS\", RFC 6672, DOI 10.17487/RFC6672, June 2012, <https://www.rfc-editor.org/info/rfc6672>. [variantTLDsReport] ICANN, \"A Study of Issues Related to the Management of IDN Variant TLDs\", 20 February 2012, <https://www.icann.org/en/system/files/files/idn-vip-integrated-issues-final-clean-20feb12-en.pdf>. Acknowledgments Parts of this document are based on EPP [RFC5730] and related RFCs by Scott Hollenbeck.¶ Special suggestions that have been incorporated into this document were provided by Edward Lewis, Jaap Akkerhuis, Lawrence Conroy, Marc Groeneweg, Michael Young, Chris Wright, Patrick Mevzek, Stephen Morris, Scott Hollenbeck, Stephane Bortzmeyer, Warren Kumari, Paul Hoffman, Vika Mpisane, Bernie Hoeneisen, Jim Galvin, Andrew Sullivan, Hiro Hotta, Christopher Browne, Daniel Kalchev, David Conrad, James Mitchell, Francisco Obispo, Bhadresh Modi, Alexander Mayrhofer, and Benjamin Kaduk.¶ Shoji Noguchi and Francisco Arias participated as coauthors through version 05 of earlier drafts of this document and provided invaluable support.¶ Authors' Addresses Gustavo Lozano Internet Corporation for Assigned Names and Numbers Suite 300 12025 Waterfront Drive Los Angeles, CA 90292 United States of America Phone: +1.310.823.9358 Email: gustavo.lozano@icann.org James Gould VeriSign, Inc. 12061 Bluemont Way Reston, VA 20190 United States of America Email: jgould@verisign.com Chethan Thippeswamy VeriSign, Inc. 12061 Bluemont Way Reston, VA 20190 United States of America Email: cthippeswamy@verisign.com"
    },
    {
        "Number": "9025",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Deterministic Networking (DetNet) Data Plane: MPLS over UDP/IP",
        "Authors": [
            "B. Varga",
            "Ed.",
            "J. Farkas",
            "L. Berger",
            "A. Malis",
            "S. Bryant"
        ],
        "Date": "2021-04",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies the MPLS Deterministic Networking (DetNet) data plane operation and encapsulation over an IP network. The approach is based on the operation of MPLS-over-UDP technology.",
        "Keywords": [],
        "Content": "RFC 9025: Deterministic Networking (DetNet) Data Plane: MPLS over UDP/IP RFC 9025 DetNet MPLS over UDP/IP April 2021 Varga, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9025 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: B. Varga, Ed. Ericsson J. Farkas Ericsson L. Berger LabN Consulting, L.L.C. A. Malis Malis Consulting S. Bryant Futurewei Technologies RFC 9025 Deterministic Networking (DetNet) Data Plane: MPLS over UDP/IP Abstract This document specifies the MPLS Deterministic Networking (DetNet) data plane operation and encapsulation over an IP network. The approach is based on the operation of MPLS-over-UDP technology.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9025.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Terms Used in This Document 2.2.  Abbreviations 2.3.  Requirements Language 3.  DetNet MPLS Operation over DetNet IP PSNs 4.  DetNet Data Plane Procedures 5.  Management and Control Information Summary 6.  Security Considerations 7.  IANA Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgements Contributors Authors' Addresses 1. Introduction Deterministic Networking (DetNet) is a service that can be offered by a network to DetNet flows. DetNet provides these flows extremely low packet loss rates and assured maximum end-to-end delivery latency. General background and concepts of DetNet can be found in [RFC8655].¶ To carry DetNet MPLS flows with full functionality at the DetNet layer over an IP network, the following components are required (these are a subset of the requirements for MPLS encapsulation listed in [RFC8964]):¶ A method for identifying DetNet flows to the processing element.¶ A method for carrying the DetNet sequence number.¶ A method for distinguishing DetNet Operations, Administration, and Maintenance (OAM) packets from DetNet data packets.¶ A method for carrying queuing and forwarding indication.¶ These requirements are satisfied by the DetNet over MPLS Encapsulation described in [RFC8964] and they are partly satisfied (i.e., IP flows can be identified; however, no DetNet sequence number is carried) by the DetNet IP data plane defined in [RFC8939].¶ This document specifies use of the MPLS DetNet encapsulation over an IP network. The approach is modeled on the operation of MPLS over an IP Packet Switched Network (PSN) using UDP encapsulation [RFC7510]. It maps the MPLS data plane encapsulation described in [RFC8964] to the DetNet IP data plane defined in [RFC8939].¶ [RFC7510] specifies that \"MPLS-in-UDP MUST NOT be used over the general Internet, or over non-cooperating network operators, to carry traffic that is not congestion controlled.\" This constraint does apply to the use of RFC 7510 in a DetNet network because DetNet is constrained to operate within a single administrative control or within a closed group of administrative control.¶ 2. Terminology 2.1. Terms Used in This Document This document uses the terminology established in the DetNet architecture [RFC8655]; the reader is assumed to be familiar with that document and its terminology.¶ 2.2. Abbreviations The following abbreviations are used in this document:¶ d-CW A DetNet Control Word (d-CW) is used for sequencing and identifying duplicate packets of a DetNet flow at the DetNet service sub-layer.¶ DetNet Deterministic Networking¶ DSCP Differentiated Services Code Point¶ A-Label A special case of an S-Label, whose properties are known only at the aggregation and deaggregation endpoints.¶ F-Label A DetNet \"forwarding\" label that identifies the LSP used to forward a DetNet flow across an MPLS PSN, e.g., a hop-by-hop label used between label-switching routers.¶ MPLS Multiprotocol Label Switching¶ OAM Operations, Administration, and Maintenance¶ PEF Packet Elimination Function¶ POF Packet Ordering Function¶ PREOF Packet Replication, Elimination, and Ordering Functions¶ PRF Packet Replication Function¶ PSN Packet Switched Network¶ S-Label A DetNet \"service\" label that is used between DetNet nodes that also implement the DetNet service sub-layer functions. An S-Label is also used to identify a DetNet flow at the DetNet service sub-layer.¶ 2.3. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. DetNet MPLS Operation over DetNet IP PSNs This document builds on the specification of MPLS over UDP defined in [RFC7510]. It may partly or entirely replace the F-Label(s) used in [RFC8964] with UDP and IP headers. The UDP and IP header information is used to identify DetNet flows, including member flows, per [RFC8939]. The resulting encapsulation is shown in Figure 1. There may be zero or more F-Labels between the S-Label and the UDP header.¶ Note that this encapsulation works equally well with IPv4, IPv6, and IPv6-based Segment Routing [RFC8754].¶ +---------------------------------+ | | | DetNet App-Flow | | Payload Packet | | | +---------------------------------+ <--\\ | DetNet Control Word | | +---------------------------------+ +--> DetNet data plane | S-Label | | MPLS encapsulation +---------------------------------+ | | [ F-Label(s) ] | | +---------------------------------+ <--+ | UDP Header | | +---------------------------------+ +--> DetNet data plane | IP Header | | IP encapsulation +---------------------------------+ <--/ | Data-Link | +---------------------------------+ | Physical | +---------------------------------+ Figure 1: UDP/IP Encapsulation of DetNet MPLS S-Labels, A-Labels (when present), d-CW, and zero or more F-Labels are used as defined in [RFC8964] and are not modified by this document.¶ 4. DetNet Data Plane Procedures To support outgoing DetNet MPLS over UDP encapsulation, an implementation MUST support the provisioning of UDP and IP header information in addition to or in place of F-Label(s). Note, when the PRF is performed at the MPLS service sub-layer, there will be multiple member flows, and each member flow will require the provisioning of their own UDP and IP header information. The headers for each outgoing packet MUST be formatted according to the configuration information and as defined in [RFC7510], and the UDP Source Port value MUST be set to uniquely identify the DetNet flow. The packet MUST then be handled as a DetNet IP packet, per [RFC8939]. This includes QoS-related traffic treatment.¶ To support the receive processing defined in this document, an implementation MUST also support the provisioning of received UDP and IP header information. The provisioned information MUST be used to identify incoming app flows based on the combination of S-Label and incoming encapsulation header information. Normal receive processing as defined in [RFC8964], including PEF and POF, can then take place.¶ 5. Management and Control Information Summary The following summarizes the minimum set of information that is needed to configure DetNet MPLS over UDP/IP:¶ Label information (A-Labels, S-Labels, and F-Labels) to be mapped to UDP/IP flows. Note that, for example, a single S-Label can map to multiple sets of UDP/IP information when PREOF is used.¶ IPv4 or IPv6 source address field¶ IPv4 or IPv6 destination address field¶ DSCP Field in either IPv4 Type of Service or IPv6 Traffic Class Fields¶ UDP Source Port¶ UDP Destination Port¶ Use/non-use of UDP checksum¶ This information MUST be provisioned per DetNet flow via configuration, e.g., via the controller [RFC8655] or management plane. Not using the UDP checksum has to be evaluated on a case-by-case basis for a given network scenario based on the exception criteria defined in [RFC7510], particularly when IPv6 is used.¶ It is the responsibility of the DetNet Controller Plane to properly provision both flow identification information and the flow-specific resources needed to provide the traffic treatment needed to meet each flow's service requirements. This applies for both aggregated and individual flows.¶ Note: In the presence of network (and port) address translation devices/functions, it would be up to the Controller Plane to determine the appropriate information to ensure proper mapping at the sender/receiver.¶ 6. Security Considerations The solution defined in this document reuses mechanisms specified in other documents, and the security considerations in those documents apply equally to this document. Of particular note is [RFC7510], as this document is primarily an application of MPLS-over-UDP. Additionally, the security considerations of DetNet in general are discussed in [RFC8655] and [DETNET-SECURITY]. Finally, MPLS- and IP-specific security considerations are described in [RFC8964] and [RFC8939]. This document does not have additional security considerations.¶ 7. IANA Considerations This document has no IANA actions.¶ 8. References 8.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC7510] Xu, X., Sheth, N., Yong, L., Callon, R., and D. Black, \"Encapsulating MPLS in UDP\", RFC 7510, DOI 10.17487/RFC7510, April 2015, <https://www.rfc-editor.org/info/rfc7510>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8939] Varga, B., Ed., Farkas, J., Berger, L., Fedyk, D., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane: IP\", RFC 8939, DOI 10.17487/RFC8939, November 2020, <https://www.rfc-editor.org/info/rfc8939>. [RFC8964] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., Bryant, S., and J. Korhonen, \"Deterministic Networking (DetNet) Data Plane: MPLS\", RFC 8964, DOI 10.17487/RFC8964, January 2021, <https://www.rfc-editor.org/info/rfc8964>. 8.2. Informative References [DETNET-SECURITY] Grossman, E., Ed., Mizrahi, T., and A. J. Hacker, \"Deterministic Networking (DetNet) Security Considerations\", Work in Progress, Internet-Draft, draft-ietf-detnet-security-16, 22 February 2021, <https://tools.ietf.org/html/draft-ietf-detnet-security-16>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8754] Filsfils, C., Ed., Dukes, D., Ed., Previdi, S., Leddy, J., Matsushima, S., and D. Voyer, \"IPv6 Segment Routing Header (SRH)\", RFC 8754, DOI 10.17487/RFC8754, March 2020, <https://www.rfc-editor.org/info/rfc8754>. Acknowledgements The authors wish to thank Pat Thaler, Norman Finn, Loa Anderson, David Black, Rodney Cummings, Ethan Grossman, Tal Mizrahi, David Mozes, Craig Gunther, George Swallow, Yuanlong Jiang, and Carlos J. Bernardos for their various contributions to this work.¶ Contributors This document is derived from an earlier draft that was edited by Jouni Korhonen (jouni.nospam@gmail.com), and as such, he contributed to and authored text in this document.¶ Authors' Addresses Balázs Varga (editor) Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: balazs.a.varga@ericsson.com János Farkas Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: janos.farkas@ericsson.com Lou Berger LabN Consulting, L.L.C. Email: lberger@labn.net Andrew G. Malis Malis Consulting Email: agmalis@gmail.com Stewart Bryant Futurewei Technologies Email: sb@stewartbryant.com"
    },
    {
        "Number": "9021",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Use of the Walnut Digital Signature Algorithm with CBOR Object Signing and Encryption (COSE)",
        "Authors": [
            "D. Atkins"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document specifies the conventions for using the Walnut Digital Signature Algorithm (WalnutDSA) for digital signatures with the CBOR Object Signing and Encryption (COSE) syntax.  WalnutDSA is a lightweight, quantum-resistant signature scheme based on Group Theoretic Cryptography with implementation and computational efficiency of signature verification in constrained environments, even on 8- and 16-bit platforms.  The goal of this publication is to document a way to use the lightweight, quantum-resistant WalnutDSA signature algorithm in COSE in a way that would allow multiple developers to build compatible implementations.  As of this publication, the security properties of WalnutDSA have not been evaluated by the IETF and its use has not been endorsed by the IETF.   WalnutDSA and the Walnut Digital Signature Algorithm are trademarks of Veridify Security Inc.",
        "Keywords": [
            "COSE",
            "WalnutDSA"
        ],
        "Content": "RFC 9021: Use of the Walnut Digital Signature Algorithm with CBOR Object Signing and Encryption (COSE) RFC 9021 WalnutDSA COSE Sigs May 2021 Atkins Informational [Page] Stream: Independent Submission RFC: 9021 Category: Informational Published: May 2021 ISSN: 2070-1721 Author: D. Atkins Veridify Security RFC 9021 Use of the Walnut Digital Signature Algorithm with CBOR Object Signing and Encryption (COSE) Abstract This document specifies the conventions for using the Walnut Digital Signature Algorithm (WalnutDSA) for digital signatures with the CBOR Object Signing and Encryption (COSE) syntax. WalnutDSA is a lightweight, quantum-resistant signature scheme based on Group Theoretic Cryptography with implementation and computational efficiency of signature verification in constrained environments, even on 8- and 16-bit platforms.¶ The goal of this publication is to document a way to use the lightweight, quantum-resistant WalnutDSA signature algorithm in COSE in a way that would allow multiple developers to build compatible implementations. As of this publication, the security properties of WalnutDSA have not been evaluated by the IETF and its use has not been endorsed by the IETF.¶ WalnutDSA and the Walnut Digital Signature Algorithm are trademarks of Veridify Security Inc.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9021.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.¶ ▲ Table of Contents 1.  Introduction 1.1.  Motivation 1.2.  Trademark Notice 2.  Terminology 3.  WalnutDSA Algorithm Overview 4.  WalnutDSA Algorithm Identifiers 5.  Security Considerations 5.1.  Implementation Security Considerations 5.2.  Method Security Considerations 6.  IANA Considerations 6.1.  COSE Algorithms Registry Entry 6.2.  COSE Key Types Registry Entry 6.3.  COSE Key Type Parameters Registry Entries 6.3.1.  WalnutDSA Parameter: N 6.3.2.  WalnutDSA Parameter: q 6.3.3.  WalnutDSA Parameter: t-values 6.3.4.  WalnutDSA Parameter: matrix 1 6.3.5.  WalnutDSA Parameter: permutation 1 6.3.6.  WalnutDSA Parameter: matrix 2 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgments Author's Address 1. Introduction This document specifies the conventions for using the Walnut Digital Signature Algorithm (WalnutDSA) [WALNUTDSA] for digital signatures with the CBOR Object Signing and Encryption (COSE) syntax [RFC8152]. WalnutDSA is a Group Theoretic signature scheme [GTC] where signature validation is both computationally and space efficient, even on very small processors. Unlike many hash-based signatures, there is no state required and no limit on the number of signatures that can be made. WalnutDSA private and public keys are relatively small; however, the signatures are larger than RSA and Elliptic Curve Cryptography (ECC), but still smaller than most all other quantum-resistant schemes (including all hash-based schemes).¶ COSE provides a lightweight method to encode structured data. WalnutDSA is a lightweight, quantum-resistant digital signature algorithm. The goal of this specification is to document a method to leverage WalnutDSA in COSE in a way that would allow multiple developers to build compatible implementations.¶ As with all cryptosystems, the initial versions of WalnutDSA underwent significant cryptanalysis, and, in some cases, identified potential issues. For more discussion on this topic, a summary of all published cryptanalysis can be found in Section 5.2. Validated issues were addressed by reparameterization in updated versions of WalnutDSA. Although the IETF has neither evaluated the security properties of WalnutDSA nor endorsed WalnutDSA as of this publication, this document provides a method to use WalnutDSA in conjunction with IETF protocols. As always, users of any security algorithm are advised to research the security properties of the algorithm and make their own judgment about the risks involved.¶ 1.1. Motivation Recent advances in cryptanalysis [BH2013] and progress in the development of quantum computers [NAS2019] pose a threat to widely deployed digital signature algorithms. As a result, there is a need to prepare for a day that cryptosystems such as RSA and DSA, which depend on discrete logarithm and factoring, cannot be depended upon.¶ If large-scale quantum computers are ever built, these computers will be able to break many of the public key cryptosystems currently in use. A post-quantum cryptosystem [PQC] is a system that is secure against quantum computers that have more than a trivial number of quantum bits (qubits). It is open to conjecture when it will be feasible to build such computers; however, RSA, DSA, the Elliptic Curve Digital Signature Algorithm (ECDSA), and the Edwards-Curve Digital Signature Algorithm (EdDSA) are all vulnerable if large-scale quantum computers come to pass.¶ WalnutDSA does not depend on the difficulty of discrete logarithms or factoring. As a result, this algorithm is considered to be resistant to post-quantum attacks.¶ Today, RSA and ECDSA are often used to digitally sign software updates. Unfortunately, implementations of RSA and ECDSA can be relatively large, and verification can take a significant amount of time on some very small processors. Therefore, we desire a digital signature scheme that verifies faster with less code. Moreover, in preparation for a day when RSA, DSA, and ECDSA cannot be depended upon, a digital signature algorithm is needed that will remain secure even if there are significant cryptanalytic advances or a large-scale quantum computer is invented. WalnutDSA, specified in [WALNUTSPEC], is a quantum-resistant algorithm that addresses these requirements.¶ 1.2. Trademark Notice WalnutDSA and the Walnut Digital Signature Algorithm are trademarks of Veridify Security Inc.¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. WalnutDSA Algorithm Overview This specification makes use of WalnutDSA signatures as described in [WALNUTDSA] and more concretely specified in [WALNUTSPEC]. WalnutDSA is a Group Theoretic cryptographic signature scheme that leverages infinite group theory as the basis of its security and maps that to a one-way evaluation of a series of matrices over small finite fields with permuted multiplicants based on the group input. WalnutDSA leverages the SHA2-256 and SHA2-512 one-way hash algorithms [SHA2] in a hash-then-sign process.¶ WalnutDSA is based on a one-way function, E-multiplication, which is an action on the infinite group. A single E-multiplication step takes as input a matrix and permutation, a generator in the group, and a set of T-values (entries in the finite field) and outputs a new matrix and permutation. To process a long string of generators (like a WalnutDSA signature), E-multiplication is iterated over each generator. Due to its structure, E-multiplication is extremely easy to implement.¶ In addition to being quantum resistant, the two main benefits of using WalnutDSA are that the verification implementation is very small and WalnutDSA signature verification is extremely fast, even on very small processors (including 16- and even 8-bit microcontrollers). This lends it well to use in constrained and/or time-sensitive environments.¶ WalnutDSA has several parameters required to process a signature. The main parameters are N and q. The parameter N defines the size of the group by defining the number of strands in use and implies working in an NxN matrix. The parameter q defines the number of elements in the finite field. Signature verification also requires a set of T-values, which is an ordered list of N entries in the finite field F_q.¶ A WalnutDSA signature is just a string of generators in the infinite group, packed into a byte string.¶ 4. WalnutDSA Algorithm Identifiers The CBOR Object Signing and Encryption (COSE) syntax [RFC8152] supports two signature algorithm schemes. This specification makes use of the signature with appendix scheme for WalnutDSA signatures.¶ The signature value is a large byte string. The byte string is designed for easy parsing, and it includes a length (number of generators) and type codes that indirectly provide all of the information that is needed to parse the byte string during signature validation.¶ When using a COSE key for this algorithm, the following checks are made:¶ The \"kty\" field MUST be present, and it MUST be \"WalnutDSA\".¶ If the \"alg\" field is present, it MUST be \"WalnutDSA\".¶ If the \"key_ops\" field is present, it MUST include \"sign\" when creating a WalnutDSA signature.¶ If the \"key_ops\" field is present, it MUST include \"verify\" when verifying a WalnutDSA signature.¶ If the \"kid\" field is present, it MAY be used to identify the WalnutDSA Key.¶ 5. Security Considerations 5.1. Implementation Security Considerations Implementations MUST protect the private keys. Use of a hardware security module (HSM) is one way to protect the private keys. Compromising the private keys may result in the ability to forge signatures. As a result, when a private key is stored on non-volatile media or stored in a virtual machine environment, care must be taken to preserve confidentiality and integrity.¶ The generation of private keys relies on random numbers. The use of inadequate pseudorandom number generators (PRNGs) to generate these values can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space. The generation of quality random numbers is difficult, and [RFC4086] offers important guidance in this area.¶ The generation of WalnutDSA signatures also depends on random numbers. While the consequences of an inadequate PRNG to generate these values are much less severe than the generation of private keys, the guidance in [RFC4086] remains important.¶ 5.2. Method Security Considerations The Walnut Digital Signature Algorithm has undergone significant cryptanalysis since it was first introduced, and several weaknesses were found in early versions of the method, resulting in the description of several attacks with exponential computational complexity. A full writeup of all the analysis can be found in [WalnutDSAAnalysis]. In summary, the original suggested parameters (N=8, q=32) were too small, leading to many of these exponential-growth attacks being practical. However, current parameters render these attacks impractical. The following paragraphs summarize the analysis and how the current parameters defeat all the previous attacks.¶ First, the team of Hart et al. found a universal forgery attack based on a group-factoring problem that runs in O(q(N-1)/2) with a memory complexity of log_2(q) N2 q(N-1)/2. With parameters N=10 and q=M31 (the Mersenne prime 231 - 1), the runtime is 2139 and memory complexity is 2151. W. Beullens found a modification of this attack but its runtime is even longer.¶ Next, Beullens and Blackburn found several issues with the original method and parameters. First, they used a Pollard-Rho attack and discovered the original public key space was too small. Specifically, they require that qN(N-1)-1 > 22*Security Level. One can clearly see that (N=10, q=M31) provides 128-bit security and (N=10, q=M61) provides 256-bit security.¶ Beullens and Blackburn also found two issues with the original message encoder of WalnutDSA. First, the original encoder was non-injective, which reduced the available signature space. This was repaired in an update. Second, they pointed out that the dimension of the vector space generated by the encoder was too small. Specifically, they require that qdimension > 2(2*Security Level). With N=10, the current encoder produces a dimension of 66, which clearly provides sufficient security with q=M31 or q=M61.¶ The final issue discovered by Beullens and Blackburn was a process to theoretically \"reverse\" E-multiplication. First, their process requires knowing the initial matrix and permutation (which are known for WalnutDSA). But more importantly, their process runs at O(q((N-1)/2)), which for (N=10, q=M31) is greater than 2128.¶ A team at Steven's Institute leveraged a length-shortening attack that enabled them to remove the cloaking elements and then solve a conjugacy search problem to derive the private keys. Their attack requires both knowledge of the permutation being cloaked and also that the cloaking elements themselves are conjugates. By adding additional concealed cloaking elements, the attack requires an N! search for each cloaking element. By inserting k concealed cloaking elements, this requires the attacker to perform (N!)k work. This allows k to be set to meet the desired security level.¶ Finally, Merz and Petit discovered that using a Garside Normal Form of a WalnutDSA signature enabled them to find commonalities with the Garside Normal Form of the encoded message. Using those commonalities, they were able to splice into a signature and create forgeries. Increasing the number of cloaking elements, specifically within the encoded message, sufficiently obscures the commonalities and blocks this attack.¶ In summary, most of these attacks are exponential in runtime and it can be shown that current parameters put the runtime beyond the desired security level. The final two attacks are also sufficiently blocked to the desired security level.¶ 6. IANA Considerations IANA has added entries for WalnutDSA signatures in the \"COSE Algorithms\" registry and WalnutDSA public keys in the \"COSE Key Types\" and \"COSE Key Type Parameters\" registries.¶ 6.1. COSE Algorithms Registry Entry The following new entry has been registered in the \"COSE Algorithms\" registry:¶ Name: WalnutDSA¶ Value: -260¶ Description: WalnutDSA signature¶ Reference: RFC 9021¶ Recommended: No¶ 6.2. COSE Key Types Registry Entry The following new entry has been registered in the \"COSE Key Types\" registry:¶ Name: WalnutDSA¶ Value: 6¶ Description: WalnutDSA public key¶ Reference: RFC 9021¶ 6.3. COSE Key Type Parameters Registry Entries The following sections detail the additions to the \"COSE Key Type Parameters\" registry.¶ 6.3.1. WalnutDSA Parameter: N The new entry, N, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: N¶ Label: -1¶ CBOR Type: uint¶ Description: Group and Matrix (NxN) size¶ Reference: RFC 9021¶ 6.3.2. WalnutDSA Parameter: q The new entry, q, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: q¶ Label: -2¶ CBOR Type: uint¶ Description: Finite field F_q¶ Reference: RFC 9021¶ 6.3.3. WalnutDSA Parameter: t-values The new entry, t-values, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: t-values¶ Label: -3¶ CBOR Type: array (of uint)¶ Description: List of T-values, entries in F_q¶ Reference: RFC 9021¶ 6.3.4. WalnutDSA Parameter: matrix 1 The new entry, matrix 1, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: matrix 1¶ Label: -4¶ CBOR Type: array (of array of uint)¶ Description: NxN Matrix of entries in F_q in column-major form¶ Reference: RFC 9021¶ 6.3.5. WalnutDSA Parameter: permutation 1 The new entry, permutation 1, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: permutation 1¶ Label: -5¶ CBOR Type: array (of uint)¶ Description: Permutation associated with matrix 1¶ Reference: RFC 9021¶ 6.3.6. WalnutDSA Parameter: matrix 2 The new entry, matrix 2, has been registered in the \"COSE Key Type Parameters\" registry as follows:¶ Key Type: 6¶ Name: matrix 2¶ Label: -6¶ CBOR Type: array (of array of uint)¶ Description: NxN Matrix of entries in F_q in column-major form¶ Reference: RFC 9021¶ 7. References 7.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC8152] Schaad, J., \"CBOR Object Signing and Encryption (COSE)\", RFC 8152, DOI 10.17487/RFC8152, July 2017, <https://www.rfc-editor.org/info/rfc8152>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [SHA2] National Institute of Standards and Technology (NIST), \"Secure Hash Standard (SHS)\", DOI 10.6028/NIST.FIPS.180-4, August 2015, <https://doi.org/10.6028/NIST.FIPS.180-4>. [WALNUTDSA] Anshel, I., Atkins, D., Goldfeld, D., and P. Gunnells, \"WalnutDSA(TM): A group theoretic digital signature algorithm\", DOI 10.1080/23799927.2020.1831613, November 2020, <https://doi.org/10.1080/23799927.2020.1831613>. 7.2. Informative References [BH2013] Ptacek, T., Ritter, J., Samuel, J., and A. Stamos, \"The Factoring Dead: Preparing for the Cryptopocalypse\", August 2013, <https://www.slideshare.net/astamos/bh-slides>. [GTC] Vasco, M. and R. Steinwandt, \"Group Theoretic Cryptography\", ISBN 9781584888369, April 2015, <https://www.crcpress.com/Group-Theoretic-Cryptography/Vasco-Steinwandt/p/book/9781584888369>. [NAS2019] National Academies of Sciences, Engineering, and Medicine, \"Quantum Computing: Progress and Prospects\", DOI 10.17226/25196, 2019, <https://doi.org/10.17226/25196>. [PQC] Bernstein, D., \"Introduction to post-quantum cryptography\", DOI 10.1007/978-3-540-88702-7, 2009, <https://doi.org/10.1007/978-3-540-88702-7>. [RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <https://www.rfc-editor.org/info/rfc4086>. [WalnutDSAAnalysis] Anshel, I., Atkins, D., Goldfeld, D., and P. Gunnells, \"Defeating the Hart et al, Beullens-Blackburn, Kotov-Menshov-Ushakov, and Merz-Petit Attacks on WalnutDSA(TM)\", May 2019, <https://eprint.iacr.org/2019/472>. [WALNUTSPEC] Anshel, I., Atkins, D., Goldfeld, D., and P. Gunnells, \"The Walnut Digital Signature Algorithm Specification\", Post-Quantum Cryptography, November 2018, <https://csrc.nist.gov/projects/post-quantum-cryptography/round-1-submissions>. Acknowledgments A big thank you to Russ Housley for his input on the concepts and text of this document.¶ Author's Address Derek Atkins Veridify Security 100 Beard Sawmill Rd, Suite 350 Shelton, CT 06484 United States of America Phone: +1 617 623 3745 Email: datkins@veridify.com"
    },
    {
        "Number": "9024",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Deterministic Networking (DetNet) Data Plane: IEEE 802.1 Time-Sensitive Networking over MPLS",
        "Authors": [
            "B. Varga",
            "Ed.",
            "J. Farkas",
            "A. Malis",
            "S. Bryant",
            "D. Fedyk"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies the Deterministic Networking data plane when Time-Sensitive Networking (TSN) networks are interconnected over a DetNet MPLS network.",
        "Keywords": [
            "interconnecting TSN networks"
        ],
        "Content": "RFC 9024: Deterministic Networking (DetNet) Data Plane: IEEE 802.1 Time-Sensitive Networking over MPLS RFC 9024 TSN over DetNet MPLS June 2021 Varga, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9024 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: B. Varga, Ed. Ericsson J. Farkas Ericsson A. Malis Malis Consulting S. Bryant Futurewei Technologies D. Fedyk LabN Consulting, L.L.C. RFC 9024 Deterministic Networking (DetNet) Data Plane: IEEE 802.1 Time-Sensitive Networking over MPLS Abstract This document specifies the Deterministic Networking data plane when Time-Sensitive Networking (TSN) networks are interconnected over a DetNet MPLS network.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9024.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Terms Used in This Document 2.2.  Abbreviations 2.3.  Requirements Language 3.  IEEE 802.1 TSN over DetNet MPLS Data Plane Scenario 4.  DetNet MPLS Data Plane 4.1.  Overview 4.2.  TSN over DetNet MPLS Encapsulation 5.  TSN over MPLS Data Plane Procedures 5.1.  Edge Node TSN Procedures 5.2.  Edge Node DetNet Service Proxy Procedures 5.3.  Edge Node DetNet Service and Forwarding Sub-Layer Procedures 6.  Controller Plane (Management and Control) Considerations 7.  Security Considerations 8.  IANA Considerations 9.  References 9.1.  Normative References 9.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction The Time-Sensitive Networking Task Group (TSN TG) within the IEEE 802.1 Working Group deals with deterministic services through IEEE 802 networks. Deterministic Networking (DetNet) defined by the IETF is a service that can be offered by an L3 network to DetNet flows. General background and concepts of DetNet can be found in [RFC8655].¶ This document specifies the use of a DetNet MPLS network to interconnect TSN nodes/network segments. The DetNet MPLS data plane is defined in [RFC8964].¶ 2. Terminology 2.1. Terms Used in This Document This document uses the terminology and concepts established in the DetNet architecture [RFC8655] [RFC8938] [RFC8964]. TSN-specific terms are defined in the TSN TG of the IEEE 802.1 Working Group. The reader is assumed to be familiar with these documents and their terminology.¶ 2.2. Abbreviations The following abbreviations are used in this document:¶ AC Attachment Circuit¶ CE Customer Edge equipment¶ d-CW DetNet Control Word¶ DetNet Deterministic Networking¶ DF DetNet Flow¶ FRER Frame Replication and Elimination for Redundancy (TSN function)¶ L2 Layer 2¶ L2VPN Layer 2 Virtual Private Network¶ L3 Layer 3¶ LSP Label Switched Path¶ LSR Label Switching Router¶ MPLS Multiprotocol Label Switching¶ MPLS-TE Multiprotocol Label Switching - Traffic Engineering¶ NSP Native Service Processing¶ OAM Operations, Administration, and Maintenance¶ PE Provider Edge¶ PREOF Packet Replication, Elimination and Ordering Functions¶ PW Pseudowire¶ S-PE Switching Provider Edge¶ T-PE Terminating Provider Edge¶ TSN Time-Sensitive Network¶ 2.3. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. IEEE 802.1 TSN over DetNet MPLS Data Plane Scenario Figure 1 shows IEEE 802.1 TSN end stations operating over a TSN-aware DetNet service running over an MPLS network. DetNet edge nodes sit at the boundary of a DetNet domain. They are responsible for mapping non-DetNet-aware L2 traffic to DetNet services. They also support the imposition and disposition of the required DetNet encapsulation. These are functionally similar to PW T-PE nodes, which use MPLS-TE LSPs. In this example, TSN Streams are simple applications over DetNet flows. The specifics of this operation are discussed later in this document.¶ TSN Edge Transit Edge TSN End System Node Node Node End System (T-PE) (LSR) (T-PE) +----------+ +----------+ | TSN | <-------- End-to-End TSN Service ---------> | TSN | | Applic. | | Applic. | +----------+ +.........+ +.........+ +----------+ | | | \\S-Proxy: :S-Proxy/ | | | | TSN | | +.+---+<-- DetNet flow -->+---+ | | | TSN | | | |TSN| |Svc| |Svc| |TSN| | | +----------+ +---+ +---+ +----------+ +---+ +---+ +----------+ | L2 | | L2| |Fwd| |Forwarding| |Fwd| |L2 | | L2 | +------.---+ +-.-+ +-.-+ +---.----.-+ +--.+ +-.-+ +---.------+ : Link : / ,-----. \\ : Link : / ,-----. \\ +........+ +-[ Sub- ]-+ +........+ +-[ TSN ]-+ [Network] [Network] `-----' `-----' |<------ DetNet MPLS ------>| |<---------------------- TSN --------------------->| Figure 1: A TSN over DetNet MPLS-Enabled Network In this example, edge nodes provide a service proxy function that \"associates\" the DetNet flows and native flows (i.e., TSN Streams) at the edge of the DetNet domain. TSN Streams are treated as App-flows for DetNet. The whole DetNet domain behaves as a TSN relay node for the TSN Streams. The service proxy behaves as a port of that TSN relay node.¶ Figure 2 illustrates how DetNet can provide services for IEEE 802.1 TSN end systems, CE1 and CE2, over a DetNet-enabled MPLS network. Edge nodes E1 and E2 insert and remove the required DetNet data plane encapsulation. The 'X' in the edge nodes and relay node, R1, represent a potential DetNet compound flow packet replication and elimination point. This conceptually parallels L2VPN services and could leverage existing related solutions as discussed below.¶ TSN |<------- End-to-End DetNet Service ------>| TSN Service | Transit Transit | Service TSN (AC) | |<-Tnl->| |<-Tnl->| | (AC) TSN End | V V 1 V V 2 V V | End System | +--------+ +--------+ +--------+ | System +---+ | | E1 |=======| R1 |=======| E2 | | +---+ | |--|----|._X_....|..DF1..|.._ _...|..DF3..|...._X_.|---|---| | |CE1| | | \\ | | X | | / | | |CE2| | | | \\_.|..DF2..|._/ \\_..|..DF4..|._/ | | | +---+ | |=======| |=======| | +---+ ^ +--------+ +--------+ +--------+ ^ | Edge Node Relay Node Edge Node | | (T-PE) (S-PE) (T-PE) | | | |<- TSN -> <------- TSN over DetNet MPLS -------> <- TSN ->| | | |<-------- Time-Sensitive Networking (TSN) Service ------->| X = Service protection DFx = DetNet member flow x over a TE LSP AC = Attachment Circuit Tnl = Tunnel Figure 2: IEEE 802.1TSN over DetNet 4. DetNet MPLS Data Plane 4.1. Overview The basic approach defined in [RFC8964] supports the DetNet service sub-layer based on existing PW encapsulations and mechanisms and supports the DetNet forwarding sub-layer based on existing MPLS Traffic Engineering encapsulations and mechanisms.¶ A node operating on a DetNet flow in the DetNet service sub-layer, i.e., a node processing a DetNet packet that has the S-Label as top of stack, uses the local context associated with that S-Label. For example, a received F-Label can be used to determine what local DetNet operation(s) is applied to that packet. An S-Label may be unique when taken from the platform label space [RFC3031], which would enable correct DetNet flow identification regardless of which input interface or LSP the packet arrives on. The service sub-layer functions (i.e., PREOF) use a DetNet control word (d-CW).¶ The DetNet MPLS data plane builds on MPLS Traffic Engineering encapsulations and mechanisms to provide a forwarding sub-layer that is responsible for providing resource allocation and explicit routes. The forwarding sub-layer is supported by one or more forwarding labels (F-Labels).¶ DetNet edge/relay nodes are DetNet service sub-layer aware, understand the particular needs of DetNet flows, and provide both DetNet service and forwarding sub-layer functions. They add, remove, and process d-CWs, S-Labels, and F-Labels as needed. MPLS DetNet nodes and transit nodes include DetNet forwarding sub-layer functions -- notably, support for explicit routes and resource allocation to eliminate (or reduce) congestion loss and jitter. Unlike other DetNet node types, transit nodes provide no service sub-layer processing.¶ 4.2. TSN over DetNet MPLS Encapsulation The basic encapsulation approach is to treat a TSN Stream as an App-flow from the DetNet MPLS perspective. The corresponding example is shown in Figure 3. Note that three example flows are shown in the figure.¶ /-> +------+ +------+ +------+ TSN ^ ^ MPLS | | X | | X | | X |<- Appli : : App-Flow <-+ +------+ +------+ +------+ cation : :(1) | |TSN-L2| |TSN-L2| |TSN-L2| : v \\-> +---+======+--+======+--+======+-----+ : | d-CW | | d-CW | | d-CW | : DetNet-MPLS +------+ +------+ +------+ :(2) |Labels| |Labels| |Labels| v +---+======+--+======+--+======+-----+ Link/Sub-Network | L2 | | TSN | | UDP | +------+ +------+ +------+ | IP | +------+ | L2 | +------+ (1) TSN Stream (2) DetNet MPLS Flow Figure 3: Examples of TSN over MPLS Encapsulation Formats In the figure, \"Application\" indicates the application payload carried by the TSN network. \"MPLS App-Flow\" indicates that the TSN Stream is the payload from the perspective of the DetNet MPLS data plane defined in [RFC8964]. A single DetNet MPLS flow can aggregate multiple TSN Streams.¶ Note: Network fragmentation for DetNet is not supported and MUST be avoided. The reason for this is that network fragmentation is not consistent with the packet delivery times needed for DetNet. Therefore, when IP is used as the sub-network, IPv6 fragmentation MUST NOT be used, and IPv4 packets MUST be sent with the DF bit set. This means that the network operator MUST ensure that all the DetNet encapsulation overhead plus the maximum TSN App-flow frame size does not exceed the DetNet network's MTU.¶ 5. TSN over MPLS Data Plane Procedures The description of edge node procedures and functions for TSN over DetNet MPLS scenarios follows the concepts from [RFC3985] and covers the edge node components shown in Figure 1. In this section, the following procedures of DetNet edge nodes are described:¶ TSN related (Section 5.1)¶ DetNet Service Proxy (Section 5.2)¶ DetNet service and forwarding sub-layer (Section 5.3)¶ The subsections describe procedures for forwarding packets by DetNet edge nodes, where such packets are received from either directly connected CEs (TSN nodes) or some other DetNet edge nodes.¶ 5.1. Edge Node TSN Procedures The TSN TG of the IEEE 802.1 Working Group has defined (and is defining) a number of amendments to [IEEE8021Q] that provide zero congestion loss and bounded latency in bridged networks. [IEEE8021CB] defines packet replication and elimination functions for a TSN network.¶ The implementation of a TSN entity (i.e., TSN packet processing functions) must be compliant with the relevant IEEE 802.1 standards.¶ TSN-specific functions are executed on the data received by the DetNet edge node from the connected CE before being forwarded to connected CE(s) or presented to the DetNet service proxy function for transmission across the DetNet domain. TSN-specific functions are also executed on the data received from a DetNet PW by a PE before the data is output on the AC(s).¶ The TSN packet processing function(s) of edge nodes (T-PE) belongs to the NSP [RFC3985] block. This is similar to other functionalities being defined by standards bodies other than the IETF (for example, in the case of Ethernet, stripping, overwriting, or adding VLAN tags, etc.). Depending on the TSN role of the edge node in the end-to-end TSN service, selected TSN functions are supported.¶ When a PE receives a packet from a CE on a given AC with DetNet service, it first checks via Stream identification (see Clause 6 of [IEEE8021CB] and [IEEEP8021CBdb]) whether the packet belongs to a configured TSN Stream (i.e., App-flow from the DetNet perspective). If no Stream ID is matched and no other (VPN) service is configured for the AC, then the packet MUST be dropped. If there is a matching TSN Stream, then the Stream-ID-specific TSN functions are executed (e.g., ingress policing, header field manipulation in the case of active Stream identification, FRER, etc.). Source Media Access Control (MAC) lookup may also be used for local MAC address learning.¶ If the PE decides to forward the packet, the packet MUST be forwarded according to the TSN-Stream-specific configuration to connected CE(s) (in case of local bridging) and/or to the DetNet service proxy (in case of forwarding to remote CE(s)). If there are no TSN-Stream-specific forwarding configurations, the PE MUST flood the packet to other locally attached CE(s) and to the DetNet service proxy. If the administrative policy on the PE does not allow flooding, the PE MUST drop the packet.¶ When a TSN entity of the PE receives a packet from the DetNet service proxy, it first checks via Stream identification (see Clause 6 of [IEEE8021CB] and [IEEEP8021CBdb]) whether the packet belongs to a configured TSN Stream. If no Stream ID is matched, then the packet is dropped. If there is a matching TSN Stream, then the Stream-ID-specific TSN functions are executed (e.g., header field manipulation in case of active Stream identification, FRER, etc.). Source MAC lookup may also be used for local MAC address learning.¶ If the PE decides to forward the packet, the packet is forwarded according to the TSN-Stream-specific configuration to connected CE(s). If there are no TSN-Stream-specific forwarding configurations, the PE floods the packet to locally attached CE(s). If the administrative policy on the PE does not allow flooding, the PE drops the packet.¶ Implementations of this document SHALL use management and control information to ensure TSN-specific functions of the edge node according to the expectations of the connected TSN network.¶ 5.2. Edge Node DetNet Service Proxy Procedures The service proxy function maps between App-flows and DetNet flows. The DetNet edge node TSN entity MUST support the TSN Stream identification functions (as defined in Clause 6 of [IEEE8021CB] and [IEEEP8021CBdb]) and the related managed objects (as defined in Clause 9 of [IEEE8021CB] and [IEEEP8021CBdb]) to recognize the packets related to App-flow. The service proxy presents TSN Streams as an App-flow to a DetNet flow.¶ When a DetNet service proxy receives a packet from the TSN entity, it MUST check whether such an App-flow is present in its mapping table. If present, it associates the internal DetNet flow ID to the packet and MUST forward it to the DetNet service and forwarding sub-layers. If no match is found, it MUST drop the packet.¶ When a DetNet service proxy receives a packet from the DetNet service and forwarding sub-layers, it MUST be forwarded to the edge node TSN entity.¶ Implementations of this document SHALL use management and control information to map a TSN Stream to a DetNet flow. N:1 mapping (aggregating multiple TSN Streams in a single DetNet flow) SHALL be supported. The management or control function that provisions flow mapping SHALL ensure that adequate resources are allocated and configured to fulfill the service requirements of the mapped flows.¶ Due to the (intentional) similarities of the DetNet PREOF and TSN FRER functions, service protection function interworking is possible between the TSN and the DetNet domains. Such service protection interworking scenarios might require copying of sequence number fields from TSN (L2) to PW (MPLS) encapsulation. However, such interworking is out of scope in this document and is left for further study.¶ 5.3. Edge Node DetNet Service and Forwarding Sub-Layer Procedures In the design presented in [RFC8964], an MPLS service label (the S-Label), similar to a PW label [RFC3985], is used to identify both the DetNet flow identity and the MPLS payload type. The DetNet sequence number is carried in the d-CW, which carries the Data/OAM discriminator as well. In [RFC8964], two sequence number sizes are supported: a 16-bit sequence number and a 28-bit sequence number.¶ PREOF functions and the provided service recovery are available only within the DetNet domain as the DetNet flow ID and the DetNet sequence number are not valid outside the DetNet network. MPLS (DetNet) edge nodes terminate all related information elements encoded in the MPLS labels.¶ When a PE receives a packet from the service proxy function, it MUST handle the packet as defined in [RFC8964].¶ When a PE receives an MPLS packet from a remote PE, then, after processing the MPLS label stack, if the top MPLS label ends up being a DetNet S-Label that was advertised by this node, then the PE MUST forward the packet according to the configured DetNet service and forwarding sub-layer rules to other PE nodes or via the DetNet service proxy function towards locally connected CE(s).¶ For further details on DetNet service and forwarding sub-layers, see [RFC8964].¶ 6. Controller Plane (Management and Control) Considerations Information related to TSN Stream(s) to DetNet flow mapping is required only for the service proxy function of MPLS (DetNet) edge nodes. From the data plane perspective, there is no practical difference based on the origin of flow-mapping-related information (management plane or control plane).¶ The following summarizes the set of information that is needed to configure TSN over DetNet MPLS:¶ TSN-related configuration information according to the TSN role of the DetNet MPLS node, as per [IEEE8021Q], [IEEE8021CB], and [IEEEP8021CBdb].¶ DetNet MPLS-related configuration information according to the DetNet role of the DetNet MPLS node, as per [RFC8964].¶ App-flow identification information to map received TSN Stream(s) to the DetNet flow. Parameters of TSN Stream identification are defined in [IEEE8021CB] and [IEEEP8021CBdb].¶ This information MUST be provisioned per DetNet flow.¶ Mappings between DetNet and TSN management and control planes are out of scope of the document. Some of the challenges are highlighted below.¶ MPLS DetNet edge nodes are a member of both the DetNet domain and the connected TSN network. From the TSN network perspective, the MPLS (DetNet) edge node has a \"TSN relay node\" role, so TSN-specific management and control plane functionalities must be implemented. There are many similarities in the management plane techniques used in DetNet and TSN, but that is not the case for the control plane protocols. For example, RSVP-TE and MSRP behave differently. Therefore, management and control plane design is an important aspect of scenarios where mapping between DetNet and TSN is required.¶ Note that as the DetNet network is just a portion of the end-to-end TSN path (i.e., single hop from the Ethernet perspective), some parameters (e.g., delay) may differ significantly. Since there is no interworking function, the bandwidth of the DetNet network is assumed to be set large enough to handle all TSN flows it will support. At the egress of the DetNet domain, the MPLS headers are stripped, and the TSN flow continues on as a normal TSN flow.¶ In order to use a DetNet network to interconnect TSN segments, TSN-specific information must be converted to DetNet-domain-specific information. TSN Stream ID(s) and stream-related parameters/requirements must be converted to a DetNet flow ID and flow-related parameters/requirements.¶ In some cases, it may be challenging to determine some information related to the egress-node. For example, it may be not trivial to locate the egress point/interface of a TSN Stream with a multicast destination MAC address. Such scenarios may require interaction between control and management plane functions and between DetNet and TSN domains.¶ Mapping between DetNet flow identifiers and TSN Stream identifiers, if not provided explicitly, can be done by the service proxy function of an MPLS (DetNet) edge node locally based on information provided for the configuration of the TSN Stream identification functions (e.g., Mask-and-Match Stream identification).¶ Triggering the setup/modification of a DetNet flow in the DetNet network is an example where management and/or control plane interactions are required between the DetNet and the TSN network.¶ Configuration of TSN-specific functions (e.g., FRER) inside the TSN network is a TSN-domain-specific decision and may not be visible in the DetNet domain. Service protection interworking scenarios are left for further study.¶ 7. Security Considerations Security considerations for DetNet are described in detail in [DETNET-SEC]. General security considerations are described in [RFC8655].¶ Considerations specific to the DetNet MPLS data plane are summarized and described in [RFC8964], including any application flow types. This document focuses on a scenario where TSN Streams are the application flows for DetNet, which is already covered by those DetNet MPLS data plane security considerations.¶ 8. IANA Considerations This document has no IANA actions.¶ 9. References 9.1. Normative References [IEEE8021CB] IEEE, \"Standard for Local and metropolitan area networks -- Frame Replication and Elimination for Reliability\", IEEE 802.1CB-2017, DOI 10.1109/IEEESTD.2017.8091139, October 2017, <https://ieeexplore.ieee.org/document/8091139>. [IEEEP8021CBdb] IEEE, \"Draft Standard for Local and metropolitan area networks - Frame Replication and Elimination for Reliability - Amendment: Extended Stream Identification Functions\", IEEE P802.1CBdb D1.3, April 2021, <https://1.ieee802.org/tsn/802-1cbdb>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3031] Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol Label Switching Architecture\", RFC 3031, DOI 10.17487/RFC3031, January 2001, <https://www.rfc-editor.org/info/rfc3031>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8938] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane Framework\", RFC 8938, DOI 10.17487/RFC8938, November 2020, <https://www.rfc-editor.org/info/rfc8938>. [RFC8964] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., Bryant, S., and J. Korhonen, \"Deterministic Networking (DetNet) Data Plane: MPLS\", RFC 8964, DOI 10.17487/RFC8964, January 2021, <https://www.rfc-editor.org/info/rfc8964>. 9.2. Informative References [DETNET-SEC] Grossman, E., Ed., Mizrahi, T., and A. Hacker, \"Deterministic Networking (DetNet) Security Considerations\", Work in Progress, Internet-Draft, draft-ietf-detnet-security-16, 2 March 2021, <https://tools.ietf.org/html/draft-ietf-detnet-security-16>. [IEEE8021Q] IEEE, \"Standard for Local and Metropolitan Area Networks--Bridges and Bridged Networks\", IEEE Std. 802.1Q-2018, DOI 10.1109/IEEESTD.2018.8403927, July 2018, <https://ieeexplore.ieee.org/document/8403927>. [RFC3985] Bryant, S., Ed. and P. Pate, Ed., \"Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture\", RFC 3985, DOI 10.17487/RFC3985, March 2005, <https://www.rfc-editor.org/info/rfc3985>. Acknowledgements The authors wish to thank Norman Finn, Lou Berger, Craig Gunther, Christophe Mangin, and Jouni Korhonen for their various contributions to this work.¶ Authors' Addresses Balázs Varga (editor) Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: balazs.a.varga@ericsson.com János Farkas Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: janos.farkas@ericsson.com Andrew G. Malis Malis Consulting Email: agmalis@gmail.com Stewart Bryant Futurewei Technologies Email: sb@stewartbryant.com Don Fedyk LabN Consulting, L.L.C. Email: dfedyk@labn.net"
    },
    {
        "Number": "9027",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Assertion Values for Resource Priority Header and SIP Priority Header Claims in Support of Emergency Services Networks",
        "Authors": [
            "M. Dolly",
            "C. Wendt"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document adds new assertion values for a Resource Priority Header (\"rph\") claim and a new SIP Priority Header (\"sph\") claim for protection of the \"psap-callback\" value as part of the \"rph\" Personal Assertion Token (PASSporT) extension in support of the security of emergency services networks for emergency call origination and callback.",
        "Keywords": [
            "rph",
            "PASSport",
            "esnet"
        ],
        "Content": "RFC 9027: Assertion Values for Resource Priority Header and SIP Priority Header Claims in Support of Emergency Services Networks RFC 9027 RPH Values for Emergency Services June 2021 Dolly & Wendt Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9027 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: M. Dolly AT&T C. Wendt Comcast RFC 9027 Assertion Values for Resource Priority Header and SIP Priority Header Claims in Support of Emergency Services Networks Abstract This document adds new assertion values for a Resource Priority Header (\"rph\") claim and a new SIP Priority Header (\"sph\") claim for protection of the \"psap-callback\" value as part of the \"rph\" Personal Assertion Token (PASSporT) extension in support of the security of emergency services networks for emergency call origination and callback.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9027.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  New Assertion Values for \"rph\" Claim 4.  The SIP Priority Header (\"sph\") Claim 5.  Order of Claim Keys 6.  Compact Form of PASSporT 7.  IANA Considerations 7.1.  JSON Web Token Claims 8.  Security Considerations 9.  References 9.1.  Normative References 9.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction \"Personal Assertion Token (PASSporT) Extension for Resource Priority Authorization\" [RFC8443] extended the Personal Assertion Token (PASSporT) specification defined in [RFC8225] to allow the inclusion of cryptographically signed assertions of authorization for the values populated in the Session Initiation Protocol (SIP) 'Resource-Priority' header field [RFC4412]. [EMERGENCY-CALLS] introduces the need and justification for the protection of both the SIP 'Resource-Priority' and 'Priority' header fields, used for categorizing the priority use of the call in the telephone network, specifically for emergency calls.¶ Compromise of the SIP 'Resource-Priority' or 'Priority' header fields could lead to misuse of network resources (i.e., during congestion scenarios), impacting the application services supported using the SIP 'Resource-Priority' header field and the handling of Public Safety Answering Point (PSAP) callbacks.¶ [RFC8225] allows extensions by which an authority on the originating side verifying the authorization of a particular communication for the SIP 'Resource-Priority' header field or the SIP 'Priority' header field can use PASSporT claims to cryptographically sign the information associated with either the SIP 'Resource-Priority' or the 'Priority' header field and convey assertion of those values by the signing party authorization. A signed SIP 'Resource-Priority' or 'Priority' header field will allow a receiving entity (including entities located in different network domains/boundaries) to verify the validity of assertions to act on the information with confidence that it has not been spoofed or compromised.¶ This document adds new \"auth\" array key values for a Resource Priority Header (\"rph\") claim defined in [RFC8443], in support of emergency services networks for emergency call origination and callback. This document additionally defines a new PASSporT claim, \"sph\", including protection of the SIP 'Priority' header field for the indication of an emergency service callback assigned the value \"psap-callback\", as defined in [RFC7090]. The use of the newly defined claim and key values corresponding to the SIP 'Resource-Priority' and 'Priority' header fields for emergency services is introduced in [EMERGENCY-CALLS] but otherwise is out of scope of this document. In addition, the PASSporT claims and values defined in this document are intended for use in environments where there are means to verify that the signer of the SIP 'Resource-Priority' and 'Priority' header fields is authoritative.¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. New Assertion Values for \"rph\" Claim This specification defines the ability to sign the SIP 'Resource-Priority' header field namespace for local emergency communications defined in [RFC7135] and represented by the string \"esnet.x\", where x is the priority level allowed in the esnet namespace. As of the writing of this specification, the priority level is between 0 and 4, inclusive, but may be extended by future specifications.¶ Similar to the values defined by [RFC8443] for the \"auth\" JSON object key inside the \"rph\" claim, the string \"esnet.x\" with the appropriate value should be used when resource priority is required for local emergency communications corresponding and exactly matching the SIP 'Resource-Priority' header field representing the namespace invoked in the call.¶ When using \"esnet.x\" as the \"auth\" assertion value in emergency-service-destined calls, the \"orig\" claim of the PASSporT MUST represent the calling party number that initiates the call to emergency services. The \"dest\" claim MUST be either a country- or region-specific dial string (e.g., \"911\" for North America or a \"112\" GSM-defined string used in Europe and other countries) or \"urn:service:sos\", as defined in [RFC5031], representing the emergency services destination of the call.¶ The following is an example of an \"rph\" claim for the SIP 'Resource-Priority' header field with an \"esnet.1\" assertion:¶ { \"dest\":{\"uri\":[\"urn:service:sos\"]}, \"iat\":1615471428, \"orig\":{\"tn\":\"12155551212\"}, \"rph\":{\"auth\":[\"esnet.1\"]} } ¶ For emergency services callbacks, the \"orig\" claim of the \"rph\" PASSporT MUST represent the Public Safety Answering Point (PSAP) telephone number. The \"dest\" claim MUST be the telephone number representing the original calling party of the emergency service call that is being called back.¶ The following is an example of an \"rph\" claim for the SIP 'Resource-Priority' header field with an \"esnet.0\" assertion:¶ { \"dest\":{\"tn\":[\"12155551212\"]}, \"iat\":1615471428, \"orig\":{\"tn\":\"12155551213\"}, \"rph\":{\"auth\":[\"esnet.0\"]} } ¶ After the header and claims PASSporT objects have been constructed, their signature is generated normally per the guidance in [RFC8225], using the full form of PASSporT. The credentials (i.e., Certificate) used to create the signature must have authority over the namespace of the \"rph\" claim, and there is only one authority per claim. The authority MUST use its credentials associated with the specific service supported by the resource priority namespace in the claim. If r-values are added or dropped by the intermediaries along the path, the intermediaries must generate a new \"rph\" identity header and sign the claim with their own authority.¶ 4. The SIP Priority Header (\"sph\") Claim As defined in [RFC7090], the SIP 'Priority' header field may be set to the value \"psap-callback\" for emergency services callback calls. Because some SIP networks may act on this value and provide priority or other special routing based on this value, it is important to protect and validate the authoritative use associated with it.¶ Therefore, we define a new claim key as part of the \"rph\" PASSporT, \"sph\". This is an optional claim that MUST only be used with an \"auth\" claim with an \"esnet.x\" value indicating an authorized emergency callback call and corresponding to a SIP 'Priority' header field with the value \"psap-callback\".¶ The value of the \"sph\" claim key should only be \"psap-callback\", which MUST match the SIP 'Priority' header field value for authorized emergency services callbacks. If the value is anything other than \"psap-callback\", the PASSporT validation MUST be considered a failure case.¶ Note that because the intended use of this specification is only for emergency services, there is also an explicit assumption that the signer of the \"rph\" PASSporT can authoritatively represent both the content of the 'Resource-Priority' header field and 'Priority' header field information associated specifically with an emergency services callback case where both could exist. This document is not intended to be a general mechanism for protecting the SIP 'Priority' header fields; this could be accomplished as part of future work with a new PASSporT extension or new claim added to either an existing PASSporT or PASSporT extension usage.¶ The following is an example of an \"sph\" claim for the SIP 'Priority' header field with the value \"psap-callback\":¶ { \"dest\":{\"tn\":[\"12155551212\"]}, \"iat\":1615471428, \"orig\":{\"tn\":\"12155551213\"}, \"rph\":{\"auth\":[\"esnet.0\"]}, \"sph\":\"psap-callback\" } ¶ 5. Order of Claim Keys The order of the claim keys MUST follow the rules of Section 9 of [RFC8225], which defines the deterministic JSON serialization used for signature generation (and validation); the claim keys MUST appear in lexicographic order. Therefore, the claim keys discussed in this document appear in the PASSporT Payload in the following order:¶ dest¶ iat¶ orig¶ rph¶ sph¶ 6. Compact Form of PASSporT The use of the compact form of PASSporT is not specified in this document or recommended for \"rph\" PASSporTs.¶ 7. IANA Considerations 7.1. JSON Web Token Claims This specification requests that the IANA add one new claim to the \"JSON Web Token Claims\" registry, as defined in [RFC7519].¶ Claim Name: sph¶ Claim Description: SIP Priority header field¶ Change Controller: IESG¶ Specification Document(s): RFC 9027¶ 8. Security Considerations The security considerations discussed in [RFC8224], [RFC8225], and [RFC8443] are applicable here.¶ 9. References 9.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4412] Schulzrinne, H. and J. Polk, \"Communications Resource Priority for the Session Initiation Protocol (SIP)\", RFC 4412, DOI 10.17487/RFC4412, February 2006, <https://www.rfc-editor.org/info/rfc4412>. [RFC5031] Schulzrinne, H., \"A Uniform Resource Name (URN) for Emergency and Other Well-Known Services\", RFC 5031, DOI 10.17487/RFC5031, January 2008, <https://www.rfc-editor.org/info/rfc5031>. [RFC7090] Schulzrinne, H., Tschofenig, H., Holmberg, C., and M. Patel, \"Public Safety Answering Point (PSAP) Callback\", RFC 7090, DOI 10.17487/RFC7090, April 2014, <https://www.rfc-editor.org/info/rfc7090>. [RFC7135] Polk, J., \"Registering a SIP Resource Priority Header Field Namespace for Local Emergency Communications\", RFC 7135, DOI 10.17487/RFC7135, May 2014, <https://www.rfc-editor.org/info/rfc7135>. [RFC7519] Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015, <https://www.rfc-editor.org/info/rfc7519>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8224] Peterson, J., Jennings, C., Rescorla, E., and C. Wendt, \"Authenticated Identity Management in the Session Initiation Protocol (SIP)\", RFC 8224, DOI 10.17487/RFC8224, February 2018, <https://www.rfc-editor.org/info/rfc8224>. [RFC8225] Wendt, C. and J. Peterson, \"PASSporT: Personal Assertion Token\", RFC 8225, DOI 10.17487/RFC8225, February 2018, <https://www.rfc-editor.org/info/rfc8225>. [RFC8443] Singh, R., Dolly, M., Das, S., and A. Nguyen, \"Personal Assertion Token (PASSporT) Extension for Resource Priority Authorization\", RFC 8443, DOI 10.17487/RFC8443, August 2018, <https://www.rfc-editor.org/info/rfc8443>. 9.2. Informative References [EMERGENCY-CALLS] Rosen, B., \"Non-Interactive Emergency Calls\", Work in Progress, Internet-Draft, draft-rosen-stir-emergency-calls-00, 9 March 2020, <https://tools.ietf.org/html/draft-rosen-stir-emergency-calls-00>. Acknowledgements The authors would like to thank Brian Rosen, Terry Reese, and Jon Peterson for helpful suggestions, comments, and corrections.¶ Authors' Addresses Martin Dolly AT&T Email: md3135@att.com Chris Wendt Comcast Comcast Technology Center Philadelphia, PA 19103 United States of America Email: chris-ietf@chriswendt.net"
    },
    {
        "Number": "9028",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Native NAT Traversal Mode for the Host Identity Protocol",
        "Authors": [
            "A. Keränen",
            "J. Melén",
            "M. Komu",
            "Ed."
        ],
        "Date": "2021-07",
        "More Info": "",
        "Status": "Experimental",
        "Abstract": "This document specifies a new Network Address Translator (NAT) traversal mode for the Host Identity Protocol (HIP). The new mode is based on the Interactive Connectivity Establishment (ICE) methodology and UDP encapsulation of data and signaling traffic. The main difference from the previously specified modes is the use of HIP messages instead of ICE for all NAT traversal procedures due to the kernel-space dependencies of HIP.",
        "Keywords": [
            "HIP",
            "NAT",
            "NAT traversal"
        ],
        "Content": "RFC 9028: Native NAT Traversal Mode for the Host Identity Protocol RFC 9028 HIP Native NAT Traversal Mode July 2021 Keränen, et al. Experimental [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9028 Category: Experimental Published: July 2021 ISSN: 2070-1721 Authors: A. Keränen Ericsson J. Melén Ericsson M. Komu, Ed. Ericsson RFC 9028 Native NAT Traversal Mode for the Host Identity Protocol Abstract This document specifies a new Network Address Translator (NAT) traversal mode for the Host Identity Protocol (HIP). The new mode is based on the Interactive Connectivity Establishment (ICE) methodology and UDP encapsulation of data and signaling traffic. The main difference from the previously specified modes is the use of HIP messages instead of ICE for all NAT traversal procedures due to the kernel-space dependencies of HIP.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.¶ This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9028.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  Overview of Operation 4.  Protocol Description 4.1.  Relay Registration 4.2.  Transport Address Candidate Gathering at the Relay Client 4.3.  NAT Traversal Mode Negotiation 4.4.  Connectivity Check Pacing Negotiation 4.5.  Base Exchange via Control Relay Server 4.6.  Connectivity Checks 4.6.1.  Connectivity Check Procedure 4.6.2.  Rules for Connectivity Checks 4.6.3.  Rules for Concluding Connectivity Checks 4.7.  NAT Traversal Optimizations 4.7.1.  Minimal NAT Traversal Support 4.7.2.  Base Exchange without Connectivity Checks 4.7.3.  Initiating a Base Exchange Both with and without UDP Encapsulation 4.8.  Sending Control Packets after the Base Exchange 4.9.  Mobility Handover Procedure 4.10. NAT Keepalives 4.11. Closing Procedure 4.12. Relaying Considerations 4.12.1.  Forwarding Rules and Permissions 4.12.2.  HIP Data Relay and Relaying of Control Packets 4.12.3.  Handling Conflicting SPI Values 5.  Packet Formats 5.1.  HIP Control Packets 5.2.  Connectivity Checks 5.3.  Keepalives 5.4.  NAT Traversal Mode Parameter 5.5.  Connectivity Check Transaction Pacing Parameter 5.6.  Relay and Registration Parameters 5.7.  LOCATOR_SET Parameter 5.8.  RELAY_HMAC Parameter 5.9.  Registration Types 5.10. Notify Packet Types 5.11. ESP Data Packets 5.12. RELAYED_ADDRESS and MAPPED_ADDRESS Parameters 5.13. PEER_PERMISSION Parameter 5.14. HIP Connectivity Check Packets 5.15. NOMINATE Parameter 6.  IAB Considerations 7.  Security Considerations 7.1.  Privacy Considerations 7.2.  Opportunistic Mode 7.3.  Base Exchange Replay Protection for Control Relay Server 7.4.  Demultiplexing Different HIP Associations 7.5.  Reuse of Ports at the Data Relay Server 7.6.  Amplification Attacks 7.7.  Attacks against Connectivity Checks and Candidate Gathering 7.8.  Cross-Protocol Attacks 8.  IANA Considerations 9.  References 9.1.  Normative References 9.2.  Informative References Appendix A.  Selecting a Value for Check Pacing Appendix B.  Differences with Respect to ICE Appendix C.  Differences to Base Exchange and UPDATE Procedures Appendix D.  Multihoming Considerations Appendix E.  DNS Considerations Acknowledgments Contributors Authors' Addresses 1. Introduction The Host Identity Protocol (HIP) [RFC7401] is specified to run directly on top of IPv4 or IPv6. However, many middleboxes found in the Internet, such as NATs and firewalls, often allow only UDP or TCP traffic to pass [RFC5207]. Also, NATs usually require the host behind a NAT to create a forwarding state in the NAT before other hosts outside of the NAT can contact the host behind the NAT. To overcome this problem, different methods, commonly referred to as NAT traversal techniques, have been developed.¶ As one solution, the HIP experiment report [RFC6538] mentions Teredo-based NAT traversal for HIP and related Encapsulating Security Payload (ESP) traffic (with double tunneling overhead). Another solution is specified in [RFC5770], which will be referred to as \"Legacy ICE-HIP\" in this document. The experimental Legacy ICE-HIP specification combines the Interactive Connectivity Establishment (ICE) protocol (originally [RFC5245]) with HIP so that basically, ICE is responsible for NAT traversal and connectivity testing, while HIP is responsible for end-host authentication and IPsec key management. The resulting protocol uses HIP, Session Traversal Utilities for NAT (STUN), and ESP messages tunneled over a single UDP flow. The benefit of using ICE and its STUN / Traversal Using Relays around NAT (TURN) messaging formats is that one can reuse the NAT traversal infrastructure already available in the Internet, such as STUN and TURN servers. Also, some middleboxes may be STUN aware and may be able to do something \"smart\" when they see STUN being used for NAT traversal.¶ HIP poses a unique challenge to using standard ICE, not only due to kernel-space dependencies of HIP, but also due to its close integration with kernel-space IPsec; and, while [RFC5770] provides a technically workable path, HIP incurs unacceptable performance drawbacks for kernel-space implementations. Also, implementing and integrating a full ICE/STUN/TURN protocol stack as specified in Legacy ICE-HIP results in a considerable amount of effort and code, which could be avoided by reusing and extending HIP messages and state machines for the same purpose. Thus, this document specifies an alternative NAT traversal mode referred to as \"Native ICE-HIP\" that employs the HIP messaging format instead of STUN or TURN for the connectivity checks, keepalives, and data relaying. Native ICE-HIP also specifies how mobility management works in the context of NAT traversal, which is missing from the Legacy ICE-HIP specification. The native specification is also based on HIPv2, whereas the legacy specification is based on HIPv1. The differences to Legacy ICE-HIP are further elaborated in Appendix B.¶ Similar to Legacy ICE-HIP, this specification builds on the HIP registration extensions [RFC8003] and the base exchange procedure [RFC7401] and its closing procedures; therefore, the reader is recommended to get familiar with the relevant specifications. In a nutshell, the registration extensions allow a HIP Initiator (usually a \"client\" host) to ask for specific services from a HIP Responder (usually a \"server\" host). The registration parameters are included in a base exchange, which is essentially a four-way Diffie-Hellman key exchange authenticated using the public keys of the end hosts. When the hosts negotiate support for ESP [RFC7402] during the base exchange, they can deliver ESP-protected application payload to each other. When either of the hosts moves and changes its IP address, the two hosts re-establish connectivity using the mobility extensions [RFC8046]. The reader is also recommended to get familiar with the mobility extensions; basically, the process is a three-way procedure where the mobile host first announces its new location to the peer; then, the peer tests for connectivity (the so-called return routability check); and then, the mobile host must respond to the announcement in order to activate its new location. This specification builds on the mobility procedures, but modifies them to be compatible with ICE. The differences in the mobility extensions are specified in Appendix C. It is worth noting that multihoming support as specified in [RFC8047] is left for further study.¶ This specification builds heavily on the ICE methodology, so it is recommended that the reader is familiar with the ICE specification [RFC8445] (especially the overview). However, Native ICE-HIP does not implement all the features in ICE; hence, the different features of ICE are cross referenced using [RFC2119] terminology for clarity. Appendix B explains the differences to ICE, and it is recommended that the reader read this section in addition to the ICE specification.¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ This document borrows terminology from [RFC5770], [RFC7401], [RFC8046], [RFC9063], [RFC8445], and [RFC8489]. The following terms recur in the text:¶ ICE: Interactive Connectivity Establishment (ICE) protocol as specified in [RFC8445].¶ Legacy ICE-HIP: Refers to the \"Basic Host Identity Protocol (HIP) Extensions for Traversal of Network Address Translators\" as specified in [RFC5770]. The protocol specified in this document offers an alternative to Legacy ICE-HIP.¶ Native ICE-HIP: The protocol specified in this document (Native NAT Traversal Mode for HIP).¶ Initiator: The host that initiates the base exchange using I1 message [RFC7401].¶ Responder: The host that receives the I1 packet from the Initiator [RFC7401].¶ Control Relay Server A registrar host that forwards any kind of HIP control plane packets between the Initiator and the Responder. This host is critical because it relays the locators between the Initiator and the Responder so that they can try to establish a direct communication path with each other. This host is used to replace HIP Rendezvous Servers [RFC8004] for hosts operating in private address realms. In the Legacy ICE-HIP specification [RFC5770], this host is denoted as \"HIP Relay Server\".¶ Control Relay Client: A requester host that registers to a Control Relay Server requesting it to forward control plane traffic (i.e., HIP control messages). In the Legacy ICE-HIP specification [RFC5770], this is denoted as \"HIP Relay Client\".¶ Data Relay Server: A new entity introduced in this document; a registrar host that forwards HIP related data plane packets, such as Encapsulating Security Payload (ESP) [RFC7402], between two hosts. This host implements similar functionality as TURN servers.¶ Data Relay Client: A requester host that registers to a Data Relay Server requesting it to forward data plane traffic (e.g. ESP traffic). This functionality is a new and introduced in this document.¶ Locator: As defined in [RFC8046]: \"A name that controls how the packet is routed through the network and demultiplexed by the end host. It may include a concatenation of traditional network addresses such as an IPv6 address and end-to-end identifiers such as an ESP SPI. It may also include transport port numbers or IPv6 Flow Labels as demultiplexing context, or it may simply be a network address.\"¶ LOCATOR_SET (written in capital letters): Denotes a HIP control packet parameter that bundles multiple locators together [RFC8046].¶ HIP offer: Before two end hosts can establish a communication channel using the NAT traversal procedures defined in this document, they need to exchange their locators (i.e., candidates) with each other. In ICE, this procedure is called Candidate Exchange; it does not specify how the candidates are exchanged, but Session Description Protocol (SDP) \"offer/answer\" is mentioned as an example. In contrast, the Candidate Exchange in HIP is the base exchange itself or a subsequent UPDATE procedure occurring after a handover. Following [RFC5770] and SDP-related naming conventions [RFC3264], \"HIP offer\" is the Initiator's LOCATOR_SET parameter in a HIP I2 or in an UPDATE control packet.¶ HIP answer: The Responder's LOCATOR_SET parameter in a HIP R2 or UPDATE control packet. The HIP answer corresponds to the SDP answer parameter [RFC3264] but is HIP specific. Please refer also to the longer description of the \"HIP offer\" term above.¶ HIP connectivity checks: In order to obtain a direct end-to-end communication path (without employing a Data Relay Server), two communicating HIP hosts try to \"punch holes\" through their NAT boxes using this mechanism. It is similar to the ICE connectivity checks but implemented using HIP return routability checks.¶ Controlling host: The controlling host [RFC8445] is always the Initiator in the context of this specification. It nominates the candidate pair to be used with the controlled host.¶ Controlled host: The controlled host [RFC8445] is always the Responder in the context of this specification. It waits for the controlling host to nominate an address candidate pair.¶ Checklist: A list of address candidate pairs that need to be tested for connectivity (same as in [RFC8445]).¶ Transport address: Transport-layer port and the corresponding IPv4/v6 address (same as in [RFC8445]).¶ Candidate: A transport address that is a potential point of contact for receiving data (same as in [RFC8445]).¶ Host candidate: A candidate obtained by binding to a specific port from an IP address on the host (same as in [RFC8445]).¶ Server-reflexive candidate: A translated transport address of a host as observed by a Control or Data Relay Server (same as in [RFC8445]).¶ Peer-reflexive candidate: A translated transport address of a host as observed by its peer (same as in [RFC8445]).¶ Relayed candidate: A transport address that exists on a Data Relay Server. Packets that arrive at this address are relayed towards the Data Relay Client. The concept is the same as in [RFC8445], but a Data Relay Server is used instead of a TURN server.¶ Permission: In the context of Data Relay Server, permission refers to a concept similar to TURN's [RFC8656] channels. Before a host can use a relayed candidate to forward traffic through a Data Relay Server, the host must activate the relayed candidate with a specific peer host.¶ Base: Similar to that described in [RFC8445], the base of a candidate is the local source address a host uses to send packets for the associated candidate. For example, the base of a server-reflexive address is the local address the host used for registering itself to the associated Control or Data Relay Server. The base of a host candidate is equal to the host candidate itself.¶ 3. Overview of Operation +--------------+ | Control | +--------+ | Relay Server | +--------+ | Data | +----+-----+---+ | Data | | Relay | / \\ | Relay | | Server | / \\ | Server | +--------+ / \\ +--------+ / \\ / \\ / \\ / <- Signaling -> \\ / \\ +-------+ +-------+ | NAT | | NAT | +-------+ +-------+ / \\ / \\ +-------+ +-------+ | Init- | | Resp- | | iator | | onder | +-------+ +-------+ Figure 1: Example Network Configuration In the example configuration depicted in Figure 1, both Initiator and Responder are behind one or more NATs, and both private networks are connected to the public Internet. To be contacted from behind a NAT, at least the Responder must be registered with a Control Relay Server reachable on the public Internet. The Responder may have also registered to a Data Relay Server that can forward the data plane in case NAT traversal fails. While, strictly speaking, the Initiator does not need a Data Relay Server, it may act in the other role with other hosts; connectivity with the Data Relay Server of the Responder may fail, so the Initiator may also need to register to a Control and/or Data Relay Server. It is worth noting that a Control and Data Relay does not forge the source address of a passing packet but always translates the source address and source port of a packet to be forwarded (to its own).¶ We assume, as a starting point, that the Initiator knows both the Responder's Host Identity Tag (HIT) and the address(es) of the Responder's Control Relay Server(s) (how the Initiator learns of the Responder's Control Relay Server is outside of the scope of this document, but it may be learned through DNS or another name service). The first steps are for both the Initiator and Responder to register with a Control Relay Server (need not be the same one) and gather a set of address candidates. The hosts use either Control Relay Servers or Data Relay Servers for gathering the candidates. Next, the HIP base exchange is carried out by encapsulating the HIP control packets in UDP datagrams and sending them through the Responder's Control Relay Server. As part of the base exchange, each HIP host learns of the peer's candidate addresses through the HIP offer/answer procedure embedded in the base exchange.¶ Once the base exchange is completed, two HIP hosts have established a working communication session (for signaling) via a Control Relay Server, but the hosts still have to find a better path, preferably without a Data Relay Server, for the ESP data flow. For this, connectivity checks are carried out until a working pair of addresses is discovered. At the end of the procedure, if successful, the hosts will have established a UDP-based tunnel that traverses both NATs with the data flowing directly from NAT to NAT or via a Data Relay Server. At this point, the HIP signaling can also be sent over the same address/port pair, and is demultiplexed (or, in other words, separated) from IPsec as described in the UDP encapsulation standard for IPsec [RFC3948]. Finally, the two hosts send NAT keepalives as needed in order keep their UDP-tunnel state active in the associated NAT boxes.¶ If either one of the hosts knows that it is not behind a NAT, hosts can negotiate during the base exchange a different mode of NAT traversal that does not use HIP connectivity checks, but only UDP encapsulation of HIP and ESP. Also, it is possible for the Initiator to simultaneously try a base exchange with and without UDP encapsulation. If a base exchange without UDP encapsulation succeeds, no HIP connectivity checks or UDP encapsulation of ESP are needed.¶ 4. Protocol Description This section describes the normative behavior of the \"Native ICE-HIP\" protocol extension. Most of the procedures are similar to what is defined in [RFC5770] but with different, or additional, parameter types and values. In addition, a new type of relaying server, Data Relay Server, is specified. Also, it should be noted that HIP version 2 [RFC7401] MUST be used instead of HIPv1 with this NAT traversal mode.¶ 4.1. Relay Registration In order for two hosts to communicate over NATed environments, they need a reliable way to exchange information. To achieve this, \"HIP Relay Server\" is defined in [RFC5770]. It supports the relaying of HIP control plane traffic over UDP in NATed environments and forwards HIP control packets between the Initiator and the Responder. In this document, the HIP Relay Server is denoted as \"Control Relay Server\" for better alignment with the rest of the terminology. The registration to the Control Relay Server can be achieved using the RELAY_UDP_HIP parameter as explained later in this section.¶ To also guarantee data plane delivery over varying types of NAT devices, a host MAY also register for UDP-encapsulated ESP relaying using Registration Type RELAY_UDP_ESP (value 3). This service may be coupled with the Control Relay Server or offered separately on another server. If the server supports relaying of UDP-encapsulated ESP, the host is allowed to register for a data-relaying service using the registration extensions in Section 3.3 of [RFC8003]. If the server has sufficient relaying resources (free port numbers, bandwidth, etc.) available, it opens a UDP port on one of its addresses and signals the address and port to the registering host using the RELAYED_ADDRESS parameter (as defined in Section 5.12 in this document). If the Data Relay Server would accept the data-relaying request but does not currently have enough resources to provide data-relaying service, it MUST reject the request with Failure Type \"Insufficient resources\" [RFC8003].¶ The registration process follows the generic registration extensions defined in [RFC8003]. The HIP control plane relaying registration follows [RFC5770], but the data plane registration is different. It is worth noting that if the HIP control and data plane relay services reside on different hosts, the client has to register separately to each of them. In the example shown in Figure 2, the two services are coupled on a single host. The text uses \"Relay Client\" and \"Relay Server\" as a shorthand when the procedures apply both to control and data cases.¶ Control/Data Control/Data Relay Client (Initiator) Relay Server (Responder) | 1. UDP(I1) | +---------------------------------------------------------------->| | | | 2. UDP(R1(REG_INFO(RELAY_UDP_HIP,[RELAY_UDP_ESP]))) | |<----------------------------------------------------------------+ | | | 3. UDP(I2(REG_REQ(RELAY_UDP_HIP),[RELAY_UDP_ESP])) | +---------------------------------------------------------------->| | | | 4. UDP(R2(REG_RES(RELAY_UDP_HIP,[RELAY_UDP_ESP]), REG_FROM, | | [RELAYED_ADDRESS])) | |<----------------------------------------------------------------+ | | Figure 2: Example Registration with a HIP Relay In step 1, the Relay Client (Initiator) starts the registration procedure by sending an I1 packet over UDP to the Relay Server. It is RECOMMENDED that the Relay Client select a random source port number from the ephemeral port range 49152-65535 for initiating a base exchange. Alternatively, a host MAY also use a single fixed port for initiating all outgoing connections. However, the allocated port MUST be maintained until all of the corresponding HIP associations are closed. It is RECOMMENDED that the Relay Server listen to incoming connections at UDP port 10500. If some other port number is used, it needs to be known by potential Relay Clients.¶ In step 2, the Relay Server (Responder) lists the services that it supports in the R1 packet. The support for HIP control plane over UDP relaying is denoted by the Registration Type value RELAY_UDP_HIP (see Section 5.9). If the server also supports the relaying of ESP traffic over UDP, it also includes the Registration Type value RELAY_UDP_ESP.¶ In step 3, the Relay Client selects the services for which it registers and lists them in the REG_REQ parameter. The Relay Client registers for the Control Relay service by listing the RELAY_UDP_HIP value in the request parameter. If the Relay Client also requires ESP relaying over UDP, it lists also RELAY_UDP_ESP.¶ In step 4, the Relay Server concludes the registration procedure with an R2 packet and acknowledges the registered services in the REG_RES parameter. The Relay Server denotes unsuccessful registrations (if any) in the REG_FAILED parameter of R2. The Relay Server also includes a REG_FROM parameter that contains the transport address of the Relay Client as observed by the Relay Server (server-reflexive candidate). If the Relay Client registered to ESP-relaying service, the Relay Server includes a RELAYED_ADDRESS parameter that describes the UDP port allocated to the Relay Client for ESP relaying. It is worth noting that the Data Relay Client must first activate this UDP port by sending an UPDATE message to the Data Relay Server that includes a PEER_PERMISSION parameter as described in Section 4.12.1 both after base exchange and handover procedures. Also, the Data Relay Server should follow the port allocation recommendations in Section 7.5.¶ After the registration, the Relay Client periodically sends NAT keepalives to the Relay Server in order to keep the NAT bindings between the Relay Client and the relay alive. The keepalive extensions are described in Section 4.10.¶ The Data Relay Client MUST maintain an active HIP association with the Data Relay Server as long as it requires the data-relaying service. When the HIP association is closed (or times out), or the registration lifetime passes without the Data Relay Client refreshing the registration, the Data Relay Server MUST stop relaying packets for that host and close the corresponding UDP port (unless other Data Relay Clients are still using it).¶ The Data Relay Server SHOULD offer a different relayed address and port for each Data Relay Client because not doing so can cause problems with stateful firewalls (see Section 7.5).¶ When a Control Relay Client sends an UPDATE (e.g., due to host movement or to renew service registration), the Control Relay Server MUST follow the general guidelines defined in [RFC8003], with the difference that all UPDATE messages are delivered on top of UDP. In addition to this, the Control Relay Server MUST include the REG_FROM parameter in all UPDATE responses sent to the Control Relay Client. This applies to both renewals of service registration and to host movement. It is especially important for the case of host movement, as this is the mechanism that allows the Control Relay Client to learn its new server-reflexive address candidate.¶ A Data Relay Client can request multiple relayed candidates from the Data Relay Server (e.g., for the reasons described in Section 4.12.3). After the base exchange with registration, the Data Relay Client can request additional relayed candidates similarly as during the base exchange. The Data Relay Client sends an UPDATE message REG_REQ parameter requesting for the RELAY_UDP_ESP service. The UPDATE message MUST also include a SEQ and an ECHO_REQUEST_SIGNED parameter. The Data Relay Server MUST respond with an UPDATE message that includes the corresponding response parameters: REG_RES, ACK and ECHO_REQUEST_SIGNED. In case the Data Relay Server allocated a new relayed UDP port for the Data Relay Client, the REG_RES parameter MUST list RELAY_UDP_ESP as a service and the UPDATE message MUST also include a RELAYED_ADDRESS parameter describing the relayed UDP port. The Data Relay Server MUST also include the server-reflexive candidate in a REG_FROM parameter. It is worth mentioning that the Data Relay Client MUST activate the UDP port as described in Section 4.12.1 before it can be used for any ESP relaying.¶ A Data Relay Client may unregister a relayed candidate in two ways. It can wait for its lifetime to expire or it can explicitly request it with zero lifetime using the UPDATE mechanism. The Data Relay Client can send a REG_REQ parameter with zero lifetime to the Data Relay Server in order to expire all relayed candidates. To expire a specific relayed candidate, the Data Relay Client MUST also include a RELAYED_ADDRESS parameter as sent by the server in the UPDATE message. Upon closing the HIP association (CLOSE-CLOSE-ACK procedure initiated by either party), the Data Relay Server MUST also expire all relayed candidates.¶ Please also refer to Section 7.8 for protection against cross-protocol attacks for both Control Relay Client and Server.¶ 4.2. Transport Address Candidate Gathering at the Relay Client An Initiator needs to gather a set of address candidates before contacting a (non-relay) Responder. The candidates are needed for connectivity checks that allow two hosts to discover a direct, non-relayed path for communicating with each other. One server-reflexive candidate can be discovered during the registration with the Control Relay Server from the REG_FROM parameter (and another from Data Relay Server if one is employed).¶ The candidate gathering can be done at any time, but it needs to be done before sending an I2 or R2 in the base exchange if ICE-HIP-UDP mode is to be used for the connectivity checks. It is RECOMMENDED that all three types of candidates (host, server reflexive, and relayed) are gathered to maximize the probability of successful NAT traversal. However, if no Data Relay Server is used, and the host has only a single local IP address to use, the host MAY use the local address as the only host candidate and the address from the REG_FROM parameter discovered during the Control Relay Server registration as a server-reflexive candidate. In this case, no further candidate gathering is needed.¶ A Data Relay Client MAY register only a single relayed candidate that it uses with multiple other peers. However, it is RECOMMENDED that a Data Relay Client registers a new server relayed candidate for each of its peers for the reasons described in Section 4.12.3. The procedures for registering multiple relayed candidates are described in Section 4.1.¶ If a Relay Client has more than one network interface, it can discover additional server-reflexive candidates by sending UPDATE messages from each of its interfaces to the Relay Server. Each such UPDATE message MUST include the following parameters: the registration request (REG_REQ) parameter with Registration Type CANDIDATE_DISCOVERY (value 4) and the ECHO_REQUEST_SIGNED parameter. When a Control Relay Server receives an UPDATE message with registration request containing a CANDIDATE_DISCOVERY type, it MUST include a REG_FROM parameter, containing the same information as if this were a Control Relay Server registration, to the response (in addition to the mandatory ECHO_RESPONSE_SIGNED parameter). This request type SHOULD NOT create any state at the Control Relay Server.¶ The rules in Section 5.1.1 of [RFC8445] for candidate gathering are followed here. A number of host candidates (loopback, anycast and others) should be excluded as described in the ICE specification (Section 5.1.1.1 of [RFC8445]). Relayed candidates SHOULD be gathered in order to guarantee successful NAT traversal, and implementations SHOULD support this functionality even if it will not be used in deployments in order to enable it by software configuration update if needed at some point. Similarly, as explained in the ICE specification (Section 5.1.1.2 of [RFC8445]), if an IPv6-only host is in a network that utilizes NAT64 [RFC6146] and DNS64 [RFC6147] technologies, it may also gather IPv4 server-reflexive and/or relayed candidates from IPv4-only Control or Data Relay Servers. IPv6-only hosts SHOULD also utilize IPv6 prefix discovery [RFC7050] to discover the IPv6 prefix used by NAT64 (if any) and generate server-reflexive candidates for each IPv6-only interface, accordingly. The NAT64 server-reflexive candidates are prioritized like IPv4 server-reflexive candidates.¶ HIP-based connectivity can be utilized by IPv4 applications using Local Scope Identifiers (LSIs) and by IPv6-based applications using HITs. The LSIs and HITs of the local virtual interfaces MUST be excluded in the candidate gathering phase as well to avoid creating unnecessary loopback connectivity tests.¶ Gathering of candidates MAY also be performed by other means than described in this section. For example, the candidates could be gathered as specified in Section 4.2 of [RFC5770] if STUN servers are available, or if the host has just a single interface and no STUN or Data Relay Server are available.¶ Each local address candidate MUST be assigned a priority. The following recommended formula (as described in [RFC8445]) SHOULD be used:¶ priority = (224)*(type preference) + (28)*(local preference) + (20)*(256 - component ID)¶ In the formula, the type preference follows the ICE specification (as defined in Section 5.1.2.1 of [RFC8445]): the RECOMMENDED values are 126 for host candidates, 100 for server-reflexive candidates, 110 for peer-reflexive candidates, and 0 for relayed candidates. The highest value is 126 (the most preferred) and lowest is 0 (last resort). For all candidates of the same type, the preference type value MUST be identical, and, correspondingly, the value MUST be different for different types. For peer-reflexive values, the type preference value MUST be higher than for server-reflexive types. It should be noted that peer-reflexive values are learned later during connectivity checks.¶ Following the ICE specification, the local preference MUST be an integer from 0 (lowest preference) to 65535 (highest preference) inclusive. In the case the host has only a single address candidate, the value SHOULD be 65535. In the case of multiple candidates, each local preference value MUST be unique. Dual-stack considerations for IPv6 also apply here as defined in Section 5.1.2.2 of [RFC8445].¶ Unlike with SDP used in conjunction with ICE, this protocol only creates a single UDP flow between the two communicating hosts, so only a single component exists. Hence, the component ID value MUST always be set to 1.¶ As defined in Section 14.3 of [RFC8445], the retransmission timeout (RTO) for address gathering from a Control/Data Relay Server SHOULD be calculated as follows:¶ RTO = MAX (1000 ms, Ta * (Num-Of-Cands))¶ where Ta is the value used for the connectivity check pacing and Num-Of-Cands is the number of server-reflexive and relay candidates. A smaller value than 1000 ms for the RTO MUST NOT be used.¶ 4.3. NAT Traversal Mode Negotiation This section describes the usage of a non-critical parameter type called NAT_TRAVERSAL_MODE with a new mode called ICE-HIP-UDP. The presence of the new mode in the NAT_TRAVERSAL_MODE parameter in a HIP base exchange means that the end host supports NAT traversal extensions described in this document. As the parameter is non-critical (as defined in Section 5.2.1 of [RFC7401]), it can be ignored by an end host, which means that the host is not required to support it or may decline to use it.¶ With registration with a Control/Data Relay Server, it is usually sufficient to use the UDP-ENCAPSULATION mode of NAT traversal since the Relay Server is assumed to be in public address space. Thus, the Relay Server SHOULD propose the UDP-ENCAPSULATION mode as the preferred or only mode. The NAT traversal mode negotiation in a HIP base exchange is illustrated in Figure 3. It is worth noting that the Relay Server could be located between the hosts, but is omitted here for simplicity.¶ Initiator Responder | 1. UDP(I1) | +----------------------------------------------------------------->| | | | 2. UDP(R1(.., NAT_TRAVERSAL_MODE(ICE-HIP-UDP), ..)) | |<-----------------------------------------------------------------+ | | | 3. UDP(I2(.., NAT_TRAVERSAL_MODE(ICE-HIP-UDP), ENC(LOC_SET), ..))| +----------------------------------------------------------------->| | | | 4. UDP(R2(.., ENC(LOC_SET), ..)) | |<-----------------------------------------------------------------+ | | Figure 3: Negotiation of NAT Traversal Mode In step 1, the Initiator sends an I1 to the Responder.¶ In step 2, the Responder responds with an R1. As specified in [RFC5770], the NAT_TRAVERSAL_MODE parameter in R1 contains a list of NAT traversal modes the Responder supports. The mode specified in this document is ICE-HIP-UDP (value 3).¶ In step 3, the Initiator sends an I2 that includes a NAT_TRAVERSAL_MODE parameter. It contains the mode selected by the Initiator from the list of modes offered by the Responder. If ICE-HIP-UDP mode was selected, the I2 also includes the \"Transport address\" locators (as defined in Section 5.7) of the Initiator in a LOCATOR_SET parameter (denoted here with LOC_SET). With ICE-HIP-UDP mode, the LOCATOR_SET parameter MUST be encapsulated within an ENCRYPTED parameter (denoted here with ENC) according to the procedures in Sections 5.2.18 and 6.5 in [RFC7401]. The locators in I2 are the \"HIP offer\".¶ In step 4, the Responder concludes the base exchange with an R2 packet. If the Initiator chose ICE-HIP-UDP traversal mode, the Responder includes a LOCATOR_SET parameter in the R2 packet. With ICE-HIP-UDP mode, the LOCATOR_SET parameter MUST be encapsulated within an ENCRYPTED parameter according to the procedures in Sections 5.2.18 and 6.5 in [RFC7401]. The locators in R2, encoded like the locators in I2, are the \"ICE answer\". If the NAT traversal mode selected by the Initiator is not supported by the Responder, the Responder SHOULD reply with a NOTIFY packet with type NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER and abort the base exchange.¶ 4.4. Connectivity Check Pacing Negotiation As explained in Legacy ICE-HIP [RFC5770], when a NAT traversal mode with connectivity checks is used, new transactions should not be started too fast to avoid congestion and overwhelming the NATs. For this purpose, during the base exchange, hosts can negotiate a transaction pacing value, Ta, using a TRANSACTION_PACING parameter in R1 and I2 packets. The parameter contains the minimum time (expressed in milliseconds) the host would wait between two NAT traversal transactions, such as starting a new connectivity check or retrying a previous check. The value that is used by both of the hosts is the higher of the two offered values.¶ The minimum Ta value SHOULD be configurable, and if no value is configured, a value of 50 ms MUST be used. Guidelines for selecting a Ta value are given in Appendix A. Hosts MUST NOT use values smaller than 5 ms for the minimum Ta, since such values may not work well with some NATs (as explained in [RFC8445]). The Initiator MUST NOT propose a smaller value than what the Responder offered. If a host does not include the TRANSACTION_PACING parameter in the base exchange, a Ta value of 50 ms MUST be used as that host's minimum value.¶ 4.5. Base Exchange via Control Relay Server This section describes how the Initiator and Responder perform a base exchange through a Control Relay Server. Connectivity pacing (denoted as TA_P here) was described in Section 4.4 and is not repeated here. Similarly, the NAT traversal mode negotiation process (denoted as NAT_TM in the example) was described in Section 4.3 and is also not repeated here. If a Control Relay Server receives an R1 or I2 packet without the NAT traversal mode parameter, it MUST drop it and SHOULD send a NOTIFY error packet with type NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER to the sender of the R1 or I2.¶ It is RECOMMENDED that the Initiator send an I1 packet encapsulated in UDP when it is destined to an IP address of the Responder. Respectively, the Responder MUST respond to such an I1 packet with a UDP-encapsulated R1 packet, and also the rest of the communication related to the HIP association MUST also use UDP encapsulation.¶ Figure 4 illustrates a base exchange via a Control Relay Server. We assume that the Responder (i.e., a Control Relay Client) has already registered to the Control Relay Server. The Initiator may have also registered to another (or the same Control Relay Server), but the base exchange will traverse always through the Control Relay Server of the Responder.¶ Initiator Control Relay Server Responder | 1. UDP(I1) | | +--------------------------------->| 2. UDP(I1(RELAY_FROM)) | | +------------------------------->| | | | | | 3. UDP(R1(RELAY_TO, NAT_TM, | | | TA_P)) | | 4. UDP(R1(RELAY_TO, NAT_TM, |<-------------------------------+ | TA_P)) | | |<---------------------------------+ | | | | | 5. UDP(I2(ENC(LOC_SET)), | | | NAT_TM, TA_P)) | | +--------------------------------->| 6. UDP(I2(ENC(LOC_SET), | | | RELAY_FROM, NAT_TM, TA_P))| | +------------------------------->| | | | | | 7. UDP(R2(ENC(LOC_SET), | | 8. UDP(R2(ENC(LOC_SET), | RELAY_TO)) | | RELAY_TO)) |<-------------------------------+ |<---------------------------------+ | | | | Figure 4: Base Exchange via a HIP Relay Server In step 1 of Figure 4, the Initiator sends an I1 packet over UDP via the Control Relay Server to the Responder. In the HIP header, the source HIT belongs to the Initiator and the destination HIT to the Responder. The Initiator sends the I1 packet from its IP address to the IP address of the Control Relay Server over UDP.¶ In step 2, the Control Relay Server receives the I1 packet. If the destination HIT belongs to a successfully registered Control Relay Client (i.e., the host marked \"Responder\" in Figure 4), the Control Relay Server processes the packet. Otherwise, the Control Relay Server MUST drop the packet silently. The Control Relay Server appends a RELAY_FROM parameter to the I1 packet, which contains the transport source address and port of the I1 as observed by the Control Relay Server. The Control Relay Server protects the I1 packet with RELAY_HMAC, except that the parameter type is different as described in Section 5.8. The Control Relay Server changes the source and destination ports and IP addresses of the packet to match the values the Responder used when registering to the Control Relay Server, i.e., the reverse of the R2 used in the registration. The Control Relay Server MUST recalculate the transport checksum and forward the packet to the Responder.¶ In step 3, the Responder receives the I1 packet. The Responder processes it according to the rules in [RFC7401]. In addition, the Responder validates the RELAY_HMAC according to Section 5.8 and silently drops the packet if the validation fails. The Responder replies with an R1 packet to which it includes RELAY_TO and NAT traversal mode parameters. The Responder MUST include ICE-HIP-UDP in the NAT traversal modes. The RELAY_TO parameter MUST contain the same information as the RELAY_FROM parameter, i.e., the Initiator's transport address, but the type of the parameter is different. The RELAY_TO parameter is not integrity protected by the signature of the R1 to allow pre-created R1 packets at the Responder.¶ In step 4, the Control Relay Server receives the R1 packet. The Control Relay Server drops the packet silently if the source HIT belongs to a Control Relay Client that has not successfully registered. The Control Relay Server MAY verify the signature of the R1 packet and drop it if the signature is invalid. Otherwise, the Control Relay Server rewrites the source address and port, and changes the destination address and port to match RELAY_TO information. Finally, the Control Relay Server recalculates the transport checksum and forwards the packet.¶ In step 5, the Initiator receives the R1 packet and processes it according to [RFC7401]. The Initiator MAY use the address in the RELAY_TO parameter as a local peer-reflexive candidate for this HIP association if it is different from all known local candidates. The Initiator replies with an I2 packet that uses the destination transport address of R1 as the source address and port. The I2 packet contains a LOCATOR_SET parameter inside an ENCRYPTED parameter that lists all the HIP candidates (HIP offer) of the Initiator. The candidates are encoded using the format defined in Section 5.7. The I2 packet MUST also contain a NAT traversal mode parameter that includes ICE-HIP-UDP mode. The ENCRYPTED parameter along with its key material generation is described in detail in Sections 5.2.18 and 6.5 in [RFC7401].¶ In step 6, the Control Relay Server receives the I2 packet. The Control Relay Server appends a RELAY_FROM and a RELAY_HMAC to the I2 packet similar to that explained in step 2, and forwards the packet to the Responder.¶ In step 7, the Responder receives the I2 packet and processes it according to [RFC7401]. The Responder validates the RELAY_HMAC according to Section 5.8 and silently drops the packet if the validation fails. It replies with an R2 packet and includes a RELAY_TO parameter as explained in step 3. The R2 packet includes a LOCATOR_SET parameter inside an ENCRYPTED parameter that lists all the HIP candidates (ICE answer) of the Responder. The RELAY_TO parameter is protected by the Hashed Message Authentication Code (HMAC). The ENCRYPTED parameter along with its key material generation is described in detail in Sections 5.2.18 and 6.5 in [RFC7401].¶ In step 8, the Control Relay Server processes the R2 as described in step 4. The Control Relay Server forwards the packet to the Initiator. After the Initiator has received the R2 and processed it successfully, the base exchange is completed.¶ Hosts MUST include the address of one or more Control Relay Servers (including the one that is being used for the initial signaling) in the LOCATOR_SET parameter in I2 and R2 messages if they intend to use such servers for relaying HIP signaling immediately after the base exchange completes. The traffic type of these addresses MUST be \"HIP signaling\" (see Section 5.7) and they MUST NOT be used for the connectivity tests described in Section 4.6. If the Control Relay Server locator used for relaying the base exchange is not included in I2 or R2 LOCATOR_SET parameters, it SHOULD NOT be used after the base exchange. Instead, further HIP signaling SHOULD use the same path as the data traffic. It is RECOMMENDED to use the same Control Relay Server throughout the lifetime of the host association that was used for forwarding the base exchange if the Responder includes it in the locator parameter of the R2 message.¶ 4.6. Connectivity Checks When the Initiator and Responder complete the base exchange through the Control Relay Server, both of them employ the IP address of the Control Relay Server as the destination address for the packets. The address of the Control Relay Server MUST NOT be used as a destination for data plane traffic unless the server also supports Data Relay Server functionality, and the Client has successfully registered to use it. When NAT traversal mode with ICE-HIP-UDP was successfully negotiated and selected, the Initiator and Responder MUST start the connectivity checks in order to attempt to obtain direct end-to-end connectivity through NAT devices. It is worth noting that the connectivity checks MUST be completed even though no ESP_TRANSFORM would be negotiated and selected.¶ The connectivity checks follow the ICE methodology [ICE-NONSIP], but UDP-encapsulated HIP control messages are used instead of ICE messages. As stated in the ICE specification, the basic procedure for connectivity checks has three phases: sorting the candidate pairs according to their priority, sending checks in the prioritized order, and acknowledging the checks from the peer host.¶ The Initiator MUST take the role of controlling host, and the Responder acts as the controlled host. The roles MUST persist throughout the HIP associate lifetime (to be reused even during mobility UPDATE procedures). In the case in which both communicating nodes are initiating communication to each other using an I1 packet, the conflict is resolved as defined in Section 6.7 of [RFC7401]; the host with the \"larger\" HIT changes its role to Responder. In such a case, the host changing its role to Responder MUST also switch to the controlled role.¶ The protocol follows standard HIP UPDATE sending and processing rules as defined in Sections 6.11 and 6.12 in [RFC7401], but some new parameters are introduced (CANDIDATE_PRIORITY, MAPPED_ADDRESS, NOMINATE, PEER_PERMISSION, and RELAYED_ADDRESS).¶ 4.6.1. Connectivity Check Procedure Figure 5 illustrates connectivity checks in a simplified scenario where the Initiator and Responder have only a single candidate pair to check. Typically, NATs drop messages until both sides have sent messages using the same port pair. In this scenario, the Responder sends a connectivity check first but the NAT of the Initiator drops it. However, the connectivity check from the Initiator reaches the Responder because it uses the same port pair as the first message. It is worth noting that the message flow in this section is idealistic, and, in practice, more messages would be dropped, especially in the beginning. For instance, connectivity tests always start with the candidates with the highest priority, which would be host candidates (which would not reach the recipient in this scenario).¶ Initiator NAT1 NAT2 Responder | | 1. UDP(UPDATE(SEQ, CAND_PRIO, | | | | ECHO_REQ_SIGN)) | | | X<-----------------------------------+----------------+ | | | | | 2. UDP(UPDATE(SEQ, ECHO_REQ_SIGN, CAND_PRIO)) | | +-------------+------------------------------------+--------------->| | | | | | 3. UDP(UPDATE(ACK, ECHO_RESP_SIGN, MAPPED_ADDR)) | | |<------------+------------------------------------+----------------+ | | | | | 4. UDP(UPDATE(SEQ, ECHO_REQ_SIGN, CAND_PRIO)) | | |<------------+------------------------------------+----------------+ | | | | | 5. UDP(UPDATE(ACK, ECHO_RESP_SIGN, MAPPED_ADDR)) | | +-------------+------------------------------------+--------------->| | | | | | 6. Other connectivity checks using UPDATE over UDP | |<------------+------------------------------------+----------------> | | | | | 7. UDP(UPDATE(SEQ, ECHO_REQ_SIGN, CAND_PRIO, NOMINATE)) | +-------------+------------------------------------+--------------->| | | | | | 8. UDP(UPDATE(SEQ, ACK, ECHO_REQ_SIGN, ECHO_RESP_SIGN, | | NOMINATE)) | | |<------------+------------------------------------+----------------+ | | | | | 9. UDP(UPDATE(ACK, ECHO_RESP_SIGN)) | | +-------------+------------------------------------+--------------->+ | | | | | 10. ESP data traffic over UDP | | +<------------+------------------------------------+--------------->+ | | | | Figure 5: Connectivity Checks In step 1, the Responder sends a connectivity check to the Initiator that the NAT of the Initiator drops. The message includes a number of parameters. As specified in [RFC7401], the SEQ parameter includes a running sequence identifier for the connectivity check. The candidate priority (denoted CAND_PRIO in the figure) describes the priority of the address candidate being tested. The ECHO_REQUEST_SIGNED (denoted ECHO_REQ_SIGN in the figure) includes a nonce that the recipient must sign and echo back as it is.¶ In step 2, the Initiator sends a connectivity check, using the same address pair candidate as in the previous step, and the message successfully traverses the NAT boxes. The message includes the same parameters as in the previous step. It should be noted that the sequence identifier is locally assigned by the Initiator, so it can be different than in the previous step.¶ In step 3, the Responder has successfully received the previous connectivity check from the Initiator and starts to build a response message. Since the message from the Initiator included a SEQ, the Responder must acknowledge it using an ACK parameter. Also, the nonce contained in the echo request must be echoed back in an ECHO_RESPONSE_SIGNED (denoted ECHO_RESP_SIGN) parameter. The Responder also includes a MAPPED_ADDRESS parameter (denoted MAPPED_ADDR in the figure) that contains the transport address of the Initiator as observed by the Responder (i.e., peer-reflexive candidate). This message is successfully delivered to the Initiator; upon reception, the Initiator marks the candidate pair as valid.¶ In step 4, the Responder retransmits the connectivity check sent in the first step, since it was not acknowledged yet.¶ In step 5, the Initiator responds to the previous connectivity check message from the Responder. The Initiator acknowledges the SEQ parameter from the previous message using an ACK parameter and the ECHO_REQUEST_SIGNED parameter with ECHO_RESPONSE_SIGNED. In addition, it includes the MAPPED_ADDR parameter that includes the peer-reflexive candidate. This response message is successfully delivered to the Responder; upon reception, the Initiator marks the candidate pair as valid.¶ In step 6, despite the two hosts now having valid address candidates, the hosts still test the remaining address candidates in a similar way as in the previous steps. It should be noted that each connectivity check has a unique sequence number in the SEQ parameter.¶ In step 7, the Initiator has completed testing all address candidates and nominates one address candidate to be used. It sends an UPDATE message using the selected address candidates that includes a number of parameters: SEQ, ECHO_REQUEST_SIGNED, CANDIDATE_PRIORITY, and the NOMINATE parameter.¶ In step 8, the Responder receives the message with the NOMINATE parameter from the Initiator. It sends a response that includes the NOMINATE parameter in addition to a number of other parameters. The ACK and ECHO_RESPONSE_SIGNED parameters acknowledge the SEQ and ECHO_REQUEST_SIGNED parameters from the previous message from the Initiator. The Responder includes SEQ and ECHO_REQUEST_SIGNED parameters in order to receive an acknowledgment from the Responder.¶ In step 9, the Initiator completes the candidate nomination process by confirming the message reception to the Responder. In the confirmation message, the ACK and ECHO_RESPONSE_SIGNED parameters correspond to the SEQ and ECHO_REQUEST_SIGNED parameters in the message sent by the Responder in the previous step.¶ In step 10, the Initiator and Responder can start sending application payload over the successfully nominated address candidates.¶ It is worth noting that if either host has registered a relayed address candidate from a Data Relay Server, the host MUST activate the address before connectivity checks by sending an UPDATE message containing the PEER_PERMISSION parameter as described in Section 4.12.1. Otherwise, the Data Relay Server drops ESP packets using the relayed address.¶ It should be noted that in the case in which both the Initiator and Responder are advertising their own relayed address candidates, it is possible that the two hosts choose the two relayed addresses as a result of the ICE nomination algorithm. While this is possible (and even could be desirable for privacy reasons), it can be unlikely due to low priority assigned for the relayed address candidates. In such an event, the nominated address pair is always symmetric; the nomination algorithm prevents asymmetric address pairs (i.e., each side choosing different pair) such as a Data Relay Client using its own Data Relay Server to send data directly to its peer while receiving data from the Data Relay Server of its peer.¶ 4.6.2. Rules for Connectivity Checks The HITs of the two communicating hosts MUST be used as credentials in this protocol (in contrast to ICE, which employs username-password fragments). A HIT pair uniquely identifies the corresponding HIT association, and a SEQ number in an UPDATE message identifies a particular connectivity check.¶ All of the connectivity check messages MUST be protected with HIP_HMAC and signatures (even though the illustrations in this specification omit them for simplicity) according to [RFC7401]. Each connectivity check sent by a host MUST include a SEQ parameter and ECHO_REQUEST_SIGNED parameter; correspondingly, the peer MUST respond to these using ACK and ECHO_RESPONSE_SIGNED according to the rules specified in [RFC7401].¶ The host sending a connectivity check MUST validate that the response uses the same pair of UDP ports, and drop the packet if this is not the case.¶ A host may receive a connectivity check before it has received the candidates from its peer. In such a case, the host MUST immediately queue a response by placing it in the triggered-check queue and then continue waiting for the candidates. A host MUST NOT select a candidate pair until it has verified the pair using a connectivity check as defined in Section 4.6.1.¶ Section 5.3.5 of [RFC7401] states that UPDATE packets have to include either a SEQ or ACK parameter (but can include both). In the connectivity check procedure specified in Section 4.6.1, each SEQ parameter should be acknowledged separately. In the context of NATs, this means that some of the SEQ parameters sent in connectivity checks will be lost or arrive out of order. From the viewpoint of the recipient, this is not a problem since the recipient will just \"blindly\" acknowledge the SEQ. However, the sender needs to be prepared for lost sequence identifiers and ACK parameters that arrive out of order.¶ As specified in [RFC7401], an ACK parameter may acknowledge multiple sequence identifiers. While the examples in the previous sections do not illustrate such functionality, it is also permitted when employing ICE-HIP-UDP mode.¶ In ICE-HIP-UDP mode, a retransmission of a connectivity check SHOULD be sent with the same sequence identifier in the SEQ parameter. Some tested address candidates will never produce a working address pair and may thus cause retransmissions. Upon successful nomination of an address pair, a host SHOULD immediately stop sending such retransmissions.¶ Full ICE procedures for prioritizing candidates, eliminating redundant candidates, forming checklists (including pruning), and triggered-check queues MUST be followed as specified in Section 6.1 of [RFC8445], with the exception being that the foundation, frozen candidates, and default candidates are not used. From the viewpoint of the ICE specification [RFC8445], the protocol specified in this document operates using a component ID of 1 on all candidates, and the foundation of all candidates is unique. This specification defines only \"full ICE\" mode, and the \"lite ICE\" is not supported. The reasoning behind the missing features is described in Appendix B.¶ The connectivity check messages MUST be paced by the Ta value negotiated during the base exchange as described in Section 4.4. If neither one of the hosts announced a minimum pacing value, a value of 50 ms MUST be used.¶ Both hosts MUST form a priority ordered checklist and begin to check transactions every Ta milliseconds as long as the checks are running and there are candidate pairs whose tests have not started. The retransmission timeout (RTO) for the connectivity check UPDATE packets SHOULD be calculated as follows:¶ RTO = MAX (1000 ms, Ta * (Num-Waiting + Num-In-Progress))¶ In the RTO formula, Ta is the value used for the connectivity check pacing, Num-Waiting is the number of pairs in the checklist in the \"Waiting\" state, and Num-In-Progress is the number of pairs in the \"In-Progress\" state. This is identical to the formula in [RFC8445] when there is only one checklist. A smaller value than 1000 ms for the RTO MUST NOT be used.¶ Each connectivity check request packet MUST contain a CANDIDATE_PRIORITY parameter (see Section 5.14) with the priority value that would be assigned to a peer-reflexive candidate if one was learned from the corresponding check. An UPDATE packet that acknowledges a connectivity check request MUST be sent from the same address that received the check and delivered to the same address where the check was received from. Each acknowledgment UPDATE packet MUST contain a MAPPED_ADDRESS parameter with the port, protocol, and IP address of the address where the connectivity check request was received from.¶ Following the ICE guidelines [RFC8445], it is RECOMMENDED to restrict the total number of connectivity checks to 100 for each host association. This can be achieved by limiting the connectivity checks to the 100 candidate pairs with the highest priority.¶ 4.6.3. Rules for Concluding Connectivity Checks The controlling agent may find multiple working candidate pairs. To conclude the connectivity checks, it SHOULD nominate the pair with the highest priority. The controlling agent MUST nominate a candidate pair essentially by repeating a connectivity check using an UPDATE message that contains a SEQ parameter (with a new sequence number), an ECHO_REQUEST_SIGNED parameter, the priority of the candidate in a CANDIDATE_PRIORITY parameter, and a NOMINATE parameter to signify conclusion of the connectivity checks. Since the nominated address pair has already been tested for reachability, the controlled host should be able to receive the message. Upon reception, the controlled host SHOULD select the nominated address pair. The response message MUST include a SEQ parameter with a new sequence identifier, acknowledgment of the sequence from the controlling host in an ACK parameter, a new ECHO_REQUEST_SIGNED parameter, an ECHO_RESPONSE_SIGNED parameter corresponding to the ECHO_REQUEST_SIGNED parameter from the controlling host, and the NOMINATE parameter. After sending this packet, the controlled host can create IPsec security associations using the nominated address candidate for delivering application payload to the controlling host. Since the message from the controlled host included a new sequence identifier echo request for the signature, the controlling host MUST acknowledge this with a new UPDATE message that includes an ACK and ECHO_RESPONSE_SIGNED parameters. After this final concluding message, the controlling host also can create IPsec security associations for delivering application payload to the controlled host.¶ It is possible that packets are delayed by the network. Both hosts MUST continue to respond to any connectivity checks despite an address pair having been nominated.¶ If all the connectivity checks have failed, the hosts MUST NOT send ESP traffic to each other but MAY continue communicating using HIP packets and the locators used for the base exchange. Also, the hosts SHOULD notify each other about the failure with a CONNECTIVITY_CHECKS_FAILED NOTIFY packet (see Section 5.10).¶ 4.7. NAT Traversal Optimizations 4.7.1. Minimal NAT Traversal Support If the Responder has a fixed and publicly reachable IPv4 address and does not employ a Control Relay Server, the explicit NAT traversal mode negotiation MAY be omitted; thus, even the UDP-ENCAPSULATION mode does not have to be negotiated. In such a scenario, the Initiator sends an I1 message over UDP and the Responder responds with an R1 message over UDP without including any NAT traversal mode parameter. The rest of the base exchange follows the procedures defined in [RFC7401], except that the control and data plane use UDP encapsulation. Here, the use of UDP for NAT traversal is agreed upon implicitly. This way of operation is still subject to NAT timeouts, and the hosts MUST employ NAT keepalives as defined in Section 4.10.¶ When UDP-ENCAPSULATION mode is chosen either explicitly or implicitly, the connectivity checks as defined in this document MUST NOT be used. When hosts lose connectivity, they MUST instead utilize [RFC8046] or [RFC8047] procedures, but with the difference being that UDP-based tunneling MUST be employed for the entire lifetime of the corresponding HIP association.¶ 4.7.2. Base Exchange without Connectivity Checks It is possible to run a base exchange without any connectivity checks as defined in Legacy ICE-HIP (Section 4.8 of [RFC5770]). The procedure is also applicable in the context of this specification, so it is repeated here for completeness.¶ In certain network environments, the connectivity checks can be omitted to reduce initial connection setup latency because a base exchange acts as an implicit connectivity test itself. For this to work, the Initiator MUST be able to reach the Responder by simply UDP encapsulating HIP and ESP packets sent to the Responder's address. Detecting and configuring this particular scenario is prone to failure unless carefully planned.¶ In such a scenario, the Responder MAY include UDP-ENCAPSULATION NAT traversal mode as one of the supported modes in the R1 packet. If the Responder has registered to a Control Relay Server in order to discover its address candidates, it MUST also include a LOCATOR_SET parameter encapsulated inside an ENCRYPTED parameter in an R1 message that contains a preferred address where the Responder is able to receive UDP-encapsulated ESP and HIP packets. This locator MUST be of type \"Transport address\", its Traffic type MUST be \"both\", and it MUST have the \"Preferred bit\" set (see Table 2). If there is no such locator in R1, the Initiator MUST use the source address of the R1 as the Responder's preferred address.¶ The Initiator MAY choose the UDP-ENCAPSULATION mode if the Responder listed it in the supported modes and the Initiator does not wish to use the connectivity checks defined in this document for searching for a more optimal path. In this case, the Initiator sends the I2 with UDP-ENCAPSULATION mode in the NAT traversal mode parameter directly to the Responder's preferred address (i.e., to the preferred locator in R1 or to the address where R1 was received from if there was no preferred locator in R1). The Initiator MAY include locators in I2 but they MUST NOT be taken as address candidates, since connectivity checks defined in this document will not be used for connections with UDP-ENCAPSULATION NAT traversal mode. Instead, if R2 and I2 are received and processed successfully, a security association can be created and UDP-encapsulated ESP can be exchanged between the hosts after the base exchange completes according to the rules in Section 4.4 of [RFC7401].¶ The Control Relay Server can be used for discovering address candidates but it is not intended to be used for relaying end-host packets using the UDP-ENCAPSULATION NAT mode. Since an I2 packet with UDP-ENCAPSULATION NAT traversal mode selected MUST NOT be sent via a Control Relay Server, the Responder SHOULD reject such I2 packets and reply with a NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER NOTIFY packet (see Section 5.10).¶ If there is no answer for the I2 packet sent directly to the Responder's preferred address, the Initiator MAY send another I2 via the Control Relay Server, but it MUST NOT choose UDP-ENCAPSULATION NAT traversal mode for that I2.¶ 4.7.3. Initiating a Base Exchange Both with and without UDP Encapsulation It is possible to run a base exchange in parallel both with and without UDP encapsulation as defined in Legacy ICE-HIP (Section 4.9 of [RFC5770]). The procedure is also applicable in the context of this specification, so it is repeated here for completeness.¶ The Initiator MAY also try to simultaneously perform a base exchange with the Responder without UDP encapsulation. In such a case, the Initiator sends two I1 packets, one without and one with UDP encapsulation, to the Responder. The Initiator MAY wait for a while before sending the other I1. How long to wait and in which order to send the I1 packets can be decided based on local policy. For retransmissions, the procedure is repeated.¶ The I1 packet without UDP encapsulation may arrive directly, without passing a Control Relay Server, at the Responder. When this happens, the procedures in [RFC7401] are followed for the rest of the base exchange. The Initiator may receive multiple R1 packets, with and without UDP encapsulation, from the Responder. However, after receiving a valid R1 and answering it with an I2, further R1 packets that are not retransmissions of the R1 message received first MUST be ignored.¶ The I1 packet without UDP encapsulation may also arrive at a HIP-capable middlebox. When the middlebox is a HIP Rendezvous Server and the Responder has successfully registered with the rendezvous service, the middlebox follows rendezvous procedures in [RFC8004].¶ If the Initiator receives a NAT traversal mode parameter in R1 without UDP encapsulation, the Initiator MAY ignore this parameter and send an I2 without UDP encapsulation and without any selected NAT traversal mode. When the Responder receives the I2 without UDP encapsulation and without NAT traversal mode, it will assume that no NAT traversal mechanism is needed. The packet processing will be done as described in [RFC7401]. The Initiator MAY store the NAT traversal modes for future use, e.g., in case of a mobility or multihoming event that causes NAT traversal to be used during the lifetime of the HIP association.¶ 4.8. Sending Control Packets after the Base Exchange The same considerations with regard to sending control packets after the base exchange as described in Legacy ICE-HIP (Section 5.10 of [RFC5770]) also apply here, so they are repeated here for completeness.¶ After the base exchange, the two end hosts MAY send HIP control packets directly to each other using the transport address pair established for a data channel without sending the control packets through any Control Relay Servers. When a host does not receive acknowledgments, e.g., to an UPDATE or CLOSE packet after a timeout based on local policies, a host SHOULD resend the packet through the associated Data Relay Server of the peer (if the peer listed it in its LOCATOR_SET parameter in the base exchange according to the rules specified in Section 4.4.2 of [RFC7401]).¶ If a Control Relay Client sends a packet through a Control Relay Server, the Control Relay Client MUST always utilize the RELAY_TO parameter. The Control Relay Server SHOULD forward HIP control packets originating from a Control Relay Client to the address denoted in the RELAY_TO parameter. In the other direction, the Control Relay Server SHOULD forward HIP control packets to the Control Relay Clients and MUST add a RELAY_FROM parameter to the control packets it relays to the Control Relay Clients.¶ If the Control Relay Server is not willing or able to relay a HIP packet, it MAY notify the sender of the packet with a MESSAGE_NOT_RELAYED error notification (see Section 5.10).¶ 4.9. Mobility Handover Procedure A host may move after base exchange and connectivity checks. Mobility extensions for HIP [RFC8046] define handover procedures without NATs. In this section, we define how two hosts interact with handover procedures in scenarios involving NATs. The specified extensions define only simple mobility using a pair of security associations, and multihoming extensions are left to be defined in later specifications. The procedures in this section offer the same functionality as \"ICE restart\" specified in [RFC8445]. The example described in this section shows only a Control Relay Server for the peer host for the sake of simplicity, but the mobile host may also have a Control Relay Server.¶ The assumption here is that the two hosts have successfully negotiated and chosen the ICE-HIP-UDP mode during the base exchange as defined in Section 4.3. The Initiator of the base exchange MUST store information that it was the controlling host during the base exchange. Similarly, the Responder MUST store information that it was the controlled host during the base exchange.¶ Prior to starting the handover procedures with all peer hosts, the mobile host SHOULD first send its locators in UPDATE messages to its Control and Data Relay Servers if it has registered to such. It SHOULD wait for all of them to respond for a configurable time, by default two minutes, and then continue with the handover procedure without information from the Relay Server that did not respond. As defined in Section 4.1, a response message from a Control Relay Server includes a REG_FROM parameter that describes the server-reflexive candidate of the mobile host to be used in the candidate exchange during the handover. Similarly, an UPDATE to a Data Relay Server is necessary to make sure the Data Relay Server can forward data to the correct IP address after a handover.¶ The mobility extensions for NAT traversal are illustrated in Figure 6. The mobile host is the host that has changed its locators, and the peer host is the host it has a host association with. The mobile host may have multiple peers, and it repeats the process with all of its peers. In the figure, the Control Relay Server belongs to the peer host, i.e., the peer host is a Control Relay Client for the Control Relay Server. Note that the figure corresponds to figure 3 in [RFC8046], but the difference is that the main UPDATE procedure is carried over the relay and the connectivity is tested separately. Next, we describe the procedure of that figure in detail.¶ Mobile Host Control Relay Server Peer Host | 1. UDP(UPDATE(ESP_INFO, | | | ENC(LOC_SET), SEQ)) | | +--------------------------------->| 2. UDP(UPDATE(ESP_INFO, | | | ENC(LOC_SET), SEQ, | | | RELAY_FROM)) | | +------------------------------->| | | | | | 3. UDP(UPDATE(ESP_INFO, SEQ, | | | ACK, ECHO_REQ_SIGN, | | | RELAY_TO)) | | 4. UDP(UPDATE(ESP_INFO, SEQ, |<-------------------------------+ | ACK, ECHO_REQ_SIGN, | | | RELAY_TO)) | | |<---------------------------------+ | | | | | 5. UDP(UPDATE(ACK, | | | ECHO_RESP_SIGNED)) | | +--------------------------------->| 6. UDP(UPDATE(ACK, | | | ECHO_RESP_SIGNED, | | | RELAY_FROM)) | | +------------------------------->| | | | | 7. connectivity checks over UDP | +<----------------------------------------------------------------->+ | | | | 8. ESP data over UDP | +<----------------------------------------------------------------->+ | | | Figure 6: HIP UPDATE Procedure In step 1, the mobile host has changed location and sends a location update to its peer through the Control Relay Server of the peer. It sends an UPDATE packet with the source HIT belonging to itself and destination HIT belonging to the peer host. In the packet, the source IP address belongs to the mobile host and the destination to the Control Relay Server. The packet contains an ESP_INFO parameter where, in this case, the OLD SPI and NEW SPI parameters both contain the pre-existing incoming SPI. The packet also contains the locators of the mobile host in a LOCATOR_SET parameter, encapsulated inside an ENCRYPTED parameter (see Sections 5.2.18 and 6.5 in [RFC7401] for details on the ENCRYPTED parameter). The packet also contains a SEQ number to be acknowledged by the peer. As specified in [RFC8046], the packet may also include a HOST_ID (for middlebox inspection) and DIFFIE_HELLMAN parameter for rekeying.¶ In step 2, the Control Relay Server receives the UPDATE packet and forwards it to the peer host (i.e., Control Relay Client). The Control Relay Server rewrites the destination IP address and appends a RELAY_FROM parameter to the message.¶ In step 3, the peer host receives the UPDATE packet, processes it, and responds with another UPDATE message. The message is destined to the HIT of the mobile host and to the IP address of the Control Relay Server. The message includes an ESP_INFO parameter where, in this case, the OLD SPI and NEW SPI parameters both contain the pre-existing incoming SPI. The peer includes a new SEQ and ECHO_REQUEST_SIGNED parameter to be acknowledged by the mobile host. The message acknowledges the SEQ parameter of the earlier message with an ACK parameter. The RELAY_TO parameter specifies the address of the mobile host where the Control Relay Server should forward the message.¶ In step 4, the Control Relay Server receives the message, rewrites the destination IP address and UDP port according to the RELAY_TO parameter, and then forwards the modified message to the mobile host.¶ In step 5, the mobile host receives the UPDATE packet and processes it. The mobile host concludes the handover procedure by acknowledging the received SEQ parameter with an ACK parameter and the ECHO_REQUEST_SIGNED parameter with an ECHO_RESPONSE_SIGNED parameter. The mobile host sends the packet to the HIT of the peer and to the address of the HIP relay. The mobile host can start connectivity checks after this packet.¶ In step 6, the HIP relay receives the UPDATE packet and forwards it to the peer host (i.e., Relay Client). The HIP relay rewrites the destination IP address and port, and then appends a RELAY_FROM parameter to the message. When the peer host receives this concluding UPDATE packet, it can initiate the connectivity checks.¶ In step 7, the two hosts test for connectivity across NATs according to procedures described in Section 4.6. The original Initiator of the communications is the controlling host and the original Responder is the controlled host.¶ In step 8, the connectivity checks are successfully completed and the controlling host has nominated one address pair to be used. The hosts set up security associations to deliver the application payload.¶ It is worth noting that the Control and Data Relay Client do not have to reregister for the related services after a handover. However, if a Data Relay Client has registered a relayed address candidate from a Data Relay Server, the Data Relay Client MUST reactivate the address before the connectivity checks by sending an UPDATE message containing the PEER_PERMISSION parameter as described in Section 4.12.1. Otherwise, the Data Relay Server drops ESP packets sent to the relayed address.¶ In the so-called \"double jump\" or simultaneous mobility scenario, both peers change their location simultaneously. In such a case, both peers trigger the procedure described earlier in this section at the same time. In other words, both of the communicating hosts send an UPDATE packet carrying locators at the same time or with some delay. When the locators are exchanged almost simultaneously (reliably via Control Relay Servers), the two hosts can continue with connectivity checks after both have completed separately the steps in Figure 6. The problematic case occurs when one of the hosts (referred to here as host \"M\") moves later during the connectivity checks. In such a case, host M sends a locator to the peer, which is in the middle of connectivity checks. Upon receiving the UPDATE message, the peer responds with an UPDATE with ECHO_REQ_SIGN as described in step 3 in Figure 6. Upon receiving the valid response from host M as described in step 6, the peer host MUST restart the connectivity checks with host M. This way, both hosts start the connectivity checks roughly in a synchronized way. It is also important that the peer host does not restart the connectivity checks until step 6 is successfully completed, because the UPDATE message carrying locators in step 1 could be replayed by an attacker.¶ 4.10. NAT Keepalives To prevent NAT states from expiring, communicating hosts MUST send periodic keepalives to other hosts with which they have established a HIP association every 15 seconds (the so-called Tr value in ICE). Other values MAY be used, but a Tr value smaller than 15 seconds MUST NOT be used. Both a Control/Data Relay Client and Control/Data Relay Server, as well as two peers employing UDP-ENCAPSULATION or ICE-HIP-UDP mode, SHOULD send HIP NOTIFY packets unless they have exchanged some other traffic over the used UDP ports. However, the Data Relay Client and Data Relay Server MUST employ only HIP NOTIFY packets in order to keep the server-reflexive candidates alive. The keepalive message encoding format is defined in Section 5.3. If the base exchange or mobility handover procedure occurs during an extremely slow path, a host (with a HIP association with the peer) MAY also send HIP NOTIFY packets every 15 seconds to keep the path active with the recipient.¶ 4.11. Closing Procedure The two-way procedure for closing a HIP association and the related security associations is defined in [RFC7401]. One host initiates the procedure by sending a CLOSE message and the recipient confirms it with CLOSE_ACK. All packets are protected using HMACs and signatures, and the CLOSE messages include an ECHO_REQUEST_SIGNED parameter to protect against replay attacks.¶ The same procedure for closing HIP associations also applies here, but the messaging occurs using the UDP-encapsulated tunnel that the two hosts employ. A host sending the CLOSE message SHOULD first send the message over a direct link. After a number of retransmissions, it MUST send over a Control Relay Server of the recipient if one exists. The host receiving the CLOSE message directly without a Control Relay Server SHOULD respond directly. If the CLOSE message came via a Control Relay Server, the host SHOULD respond using the same Control Relay Server.¶ 4.12. Relaying Considerations 4.12.1. Forwarding Rules and Permissions The Data Relay Server uses a similar permission model as a TURN server: before the Data Relay Server forwards any ESP data packets from a peer to a Data Relay Client (or the other direction), the client MUST set a permission for the peer's address. The permissions also install a forwarding rule for each direction, similar to TURN's channels, based on the Security Parameter Index (SPI) values in the ESP packets.¶ Permissions are not required for HIP control packets. However, if a relayed address (as conveyed in the RELAYED_ADDRESS parameter from the Data Relay Server) is selected to be used for data, the Control Relay Client MUST send an UPDATE message to the Data Relay Server containing a PEER_PERMISSION parameter (see Section 5.13) with the following information: the UDP port and address for the server-reflexive address, the UDP port and address of the peer, and the inbound and outbound SPIs used for ESP. The packet MUST be sent to the same UDP tunnel the Client employed in the base exchange to contact the Server (i.e., not to the port occupied by the server-reflexive candidate). To avoid packet dropping of ESP packets, the Control Relay Client SHOULD send the PEER_PERMISSION parameter before connectivity checks both in the case of base exchange and a mobility handover. It is worth noting that the UPDATE message includes a SEQ parameter (as specified in [RFC7401]) that the Data Relay Server must acknowledge, so that the Control Relay Client can resend the message with the PEER_PERMISSION parameter if it gets lost.¶ When a Data Relay Server receives an UPDATE with a PEER_PERMISSION parameter, it MUST check if the sender of the UPDATE is registered for data-relaying service, and drop the UPDATE if the host was not registered. If the host was registered, the Data Relay Server checks if there is a permission with matching information (protocol, addresses, ports, and SPI values). If there is no such permission, a new permission MUST be created and its lifetime MUST be set to 5 minutes. If an identical permission already existed, it MUST be refreshed by setting the lifetime to 5 minutes. A Data Relay Client SHOULD refresh permissions 1 minute before the expiration when the permission is still needed.¶ When a Data Relay Server receives an UPDATE from a registered client but without a PEER_PERMISSION parameter and with a new locator set, the Data Relay Server can assume that the mobile host has changed its location and is thus not reachable in its previous location. In such an event, the Data Relay Server SHOULD deactivate the permission and stop relaying data plane traffic to the client.¶ The relayed address MUST be activated with the PEER_PERMISSION parameter both after a base exchange and after a handover procedure with another ICE-HIP-UDP-capable host. Unless activated, the Data Relay Server MUST drop all ESP packets. It is worth noting that a Data Relay Client does not have to renew its registration upon a change of location UPDATE, but only when the lifetime of the registration is close to end.¶ 4.12.2. HIP Data Relay and Relaying of Control Packets When a Data Relay Server accepts to relay UDP-encapsulated ESP between a Data Relay Client and its peer, the Data Relay Server opens a UDP port (relayed address) for this purpose as described in Section 4.1. This port can be used for also delivering control packets because connectivity checks also cover the path through the Data Relay Server. If the Data Relay Server receives a UDP-encapsulated HIP control packet on that port, it MUST forward the packet to the Data Relay Client and add a RELAY_FROM parameter to the packet as if the Data Relay Server were acting as a Control Relay Server. When the Data Relay Client replies to a control packet with a RELAY_FROM parameter via its Data Relay Server, the Data Relay Client MUST add a RELAY_TO parameter containing the peer's address and use the address of its Data Relay Server as the destination address. Further, the Data Relay Server MUST send this packet to the peer's address from the relayed address.¶ If the Data Relay Server receives a UDP packet that is not a HIP control packet to the relayed address, it MUST check if it has a permission set for the peer the packet is arriving from (i.e., the sender's address and SPI value matches to an installed permission). If permissions are set, the Data Relay Server MUST forward the packet to the Data Relay Client that created the permission. The Data Relay Server MUST also implement the similar checks for the reverse direction (i.e., ESP packets from the Data Relay Client to the peer). Packets without a permission MUST be dropped silently.¶ 4.12.3. Handling Conflicting SPI Values From the viewpoint of a host, its remote peers can have overlapping inbound SPI numbers because the IPsec also uses the destination IP address to index the remote peer host. However, a Data Relay Server can represent multiple remote peers, thus masquerading the actual destination. Since a Data Relay Server may have to deal with a multitude of Relay Clients and their peers, a Data Relay Server may experience collisions in the SPI namespace, thus being unable to forward datagrams to the correct destination. Since the SPI space is 32 bits and the SPI values should be random, the probability for a conflicting SPI value is fairly small but could occur on a busy Data Relay Server. The two problematic cases are described in this section.¶ In the first scenario, the SPI collision problem occurs if two hosts have registered to the same Data Relay Server and a third host initiates base exchange with both of them. Here, the two Responders (i.e., Data Relay Clients) claim the same inbound SPI number with the same Initiator (peer). However, in this case, the Data Relay Server has allocated separate UDP ports for the two Data Relay Clients acting now as Responders (as recommended in Section 7.5). When the third host sends an ESP packet, the Data Relay Server is able to forward the packet to the correct Data Relay Client because the destination UDP port is different for each of the clients.¶ In the second scenario, an SPI collision may occur when two Initiators run a base exchange to the same Responder (i.e., Data Relay Client), and both of the Initiators claim the same inbound SPI at the Data Relay Server using the PEER_PERMISSION parameter. In this case, the Data Relay Server cannot disambiguate the correct destination of an ESP packet originating from the Data Relay Client because the SPI could belong to either of the peers (and the destination IP and UDP port belonging to the Data Relay Server are not unique either). The recommended way and a contingency plan to solve this issue are described below.¶ The recommend way to mitigate the problem is as follows. For each new HIP association, a Data Relay Client acting as a Responder SHOULD register a new server-reflexive candidate as described in Section 4.2. Similarly, the Data Relay Server SHOULD NOT reuse the port numbers as described in Section 7.5. This way, each server-reflexive candidate for the Data Relay Client has a separate UDP port that the Data Relay Server can use to disambiguate packet destinations in case of SPI collisions.¶ When the Data Relay Client is not registering or failed to register a new relay candidate for a new peer, the Data Relay Client MUST follow a contingency plan as follows. Upon receiving an I2 with a colliding SPI, the Data Relay Client acting as the Responder MUST NOT include the relayed address candidate in the R2 message because the Data Relay Server would not be able to demultiplex the related ESP packet to the correct Initiator. The same also applies to the handover procedures; the Data Relay Client MUST NOT include the relayed address candidate when sending its new locator set in an UPDATE to its peer if it would cause an SPI conflict with another peer.¶ 5. Packet Formats The following subsections define the parameter and packet encodings for the HIP and ESP packets. All values MUST be in network byte order.¶ It is worth noting that all of the parameters are shown for the sake of completeness even though they are specified already in Legacy ICE-HIP [RFC5770]. New parameters are explicitly described as new.¶ 5.1. HIP Control Packets Figure 7 illustrates the packet format for UDP-encapsulated HIP. The format is identical to Legacy ICE-HIP [RFC5770].¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Source Port | Destination Port | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Length | Checksum | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 32 bits of zeroes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | ~ HIP Header and Parameters ~ | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 7: Format of UDP-Encapsulated HIP Control Packets HIP control packets are encapsulated in UDP packets as defined in Section 2.2 of [RFC3948], \"IKE Header Format for Port 4500\", except that a different port number is used. Figure 7 illustrates the encapsulation. The UDP header is followed by 32 zero bits that can be used to differentiate HIP control packets from ESP packets. The HIP header and parameters follow the conventions of [RFC7401] with the exception that the HIP header checksum MUST be zero. The HIP header checksum is zero for two reasons. First, the UDP header already contains a checksum. Second, the checksum definition in [RFC7401] includes the IP addresses in the checksum calculation. The NATs that are unaware of HIP cannot recompute the HIP checksum after changing IP addresses.¶ A Control/Data Relay Server or a non-relay Responder SHOULD listen at UDP port 10500 for incoming UDP-encapsulated HIP control packets. If some other port number is used, it needs to be known by potential Initiators.¶ UDP encapsulation of HIP packets reduces the Maximum Transmission Unit (MTU) size of the control plane by 12 bytes (8-byte UDP header plus 4-byte zero SPI marker), and the data plane by 8 bytes. Additional HIP relay parameters, such as RELAY_HMAC, RELAY_UDP_HIP, RELAY_UDP_ESP, etc., further increase the size of certain HIP packets. In regard to MTU, the following aspects need to be considered in an implementation:¶ A HIP host SHOULD implement ICMP message handling to support Path MTU Discovery (PMTUD) as described in [RFC1191] and [RFC8201].¶ Reliance on IP fragmentation is unlikely to be a viable strategy through NATs. If ICMP MTU discovery is not working, MTU-related path black holes may occur.¶ A mitigation strategy is to constrain the MTU, especially for virtual interfaces, to expected safe MTU values, e.g., 1400 bytes for the underlying interfaces that support 1500 bytes MTU.¶ Further extensions to this specification may define a HIP-based mechanism to find a working path MTU without unnecessary constraining that size using Packetization Layer Path MTU Discovery for Datagram Transports [RFC8899]. For instance, such a mechanism could be implemented between a HIP Relay Client and HIP Relay Server.¶ It is worth noting that further HIP extensions can trim off 8 bytes in the ESP header by negotiating implicit initialization vector (IV) support in the ESP_TRANSFORM parameter as described in [RFC8750].¶ 5.2. Connectivity Checks HIP connectivity checks are HIP UPDATE packets. The format is specified in [RFC7401].¶ 5.3. Keepalives The RECOMMENDED encoding format for keepalives is HIP NOTIFY packets as specified in [RFC7401] with the Notify message type field set to NAT_KEEPALIVE (16385) and with an empty Notification data field. It is worth noting that the sending of such a HIP NOTIFY message SHOULD be omitted if the host is sending some other traffic (HIP or ESP) to the peer host over the related UDP tunnel during the Tr period. For instance, the host MAY actively send ICMPv6 requests (or respond with an ICMPv6 response) inside the ESP tunnel to test the health of the associated IPsec security association. Alternatively, the host MAY use UPDATE packets as a substitute. A minimal UPDATE packet would consist of a SEQ and a single ECHO_REQ_SIGN parameter, and a more complex one would involve rekeying procedures as specified in Section 6.8 of [RFC7402]. It is worth noting that a host actively sending periodic UPDATE packets to a busy server may increase the computational load of the server since it has to verify HMACs and signatures in UPDATE messages.¶ 5.4. NAT Traversal Mode Parameter The format of the NAT traversal mode parameter is defined in Legacy ICE-HIP [RFC5770] but repeated here for completeness. The format of the NAT_TRAVERSAL_MODE parameter is similar to the format of the ESP_TRANSFORM parameter in [RFC7402] and is shown in Figure 8. The Native ICE-HIP extension specified in this document defines the new NAT traversal mode identifier for ICE-HIP-UDP and reuses the UDP-ENCAPSULATION mode from Legacy ICE-HIP [RFC5770]. The identifier named RESERVED is reserved for future use. Future specifications may define more traversal modes.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | Mode ID #1 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Mode ID #2 | Mode ID #3 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Mode ID #n | Padding | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 8: Format of the NAT_TRAVERSAL_MODE Parameter Type: 608¶ Length: Length in octets, excluding Type, Length, and Padding¶ Reserved: Zero when sent, ignored when received¶ Mode ID: Defines the proposed or selected NAT traversal mode(s)¶ The following NAT traversal mode IDs are defined:¶ Table 1: NAT Traversal Mode IDs ID name Value RESERVED 0 UDP-ENCAPSULATION 1 ICE-STUN-UDP 2 ICE-HIP-UDP 3 The sender of a NAT_TRAVERSAL_MODE parameter MUST make sure that there are no more than six (6) Mode IDs in one NAT_TRAVERSAL_MODE parameter. Conversely, a recipient MUST be prepared to handle received NAT traversal mode parameters that contain more than six Mode IDs by accepting the first six Mode IDs and dropping the rest. The limited number of Mode IDs sets the maximum size of the NAT_TRAVERSAL_MODE parameter. The modes MUST be in preference order, most preferred mode(s) first.¶ Implementations conforming to this specification MUST implement UDP-ENCAPSULATION and SHOULD implement ICE-HIP-UDP modes.¶ 5.5. Connectivity Check Transaction Pacing Parameter The TRANSACTION_PACING parameter is defined in [RFC5770] but repeated in Figure 9 for completeness. It contains only the connectivity check pacing value, expressed in milliseconds, as a 32-bit unsigned integer.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Min Ta | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 9: Format of the TRANSACTION_PACING Parameter Type: 610¶ Length: 4¶ Min Ta: The minimum connectivity check transaction pacing value the host would use (in milliseconds)¶ 5.6. Relay and Registration Parameters The format of the REG_FROM, RELAY_FROM, and RELAY_TO parameters is shown in Figure 10. All parameters are identical except for the type. Of the three, only REG_FROM is covered by the signature.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Port | Protocol | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Address | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 10: Format of the REG_FROM, RELAY_FROM, and RELAY_TO Parameters Type: REG_FROM: 950¶ RELAY_FROM: 63998¶ RELAY_TO: 64002¶ Length: 20¶ Port: Transport port number; zero when plain IP is used¶ Protocol: IANA-assigned, Internet Protocol number. 17 for UDP; 0 for plain IP¶ Reserved: Reserved for future use; zero when sent, ignored when received¶ Address: An IPv6 address or an IPv4 address in \"IPv4-mapped IPv6 address\" format¶ REG_FROM contains the transport address and protocol from which the Control Relay Server sees the registration coming. RELAY_FROM contains the address from which the relayed packet was received by the Control Relay Server and the protocol that was used. RELAY_TO contains the same information about the address to which a packet should be forwarded.¶ 5.7. LOCATOR_SET Parameter This specification reuses the format for UDP-based locators as specified in Legacy ICE-HIP [RFC5770] to be used for communicating the address candidates between two hosts. The generic and NAT-traversal-specific locator parameters are illustrated in Figure 11.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Traffic Type | Locator Type | Locator Length| Reserved |P| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Locator Lifetime | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Locator | | | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ . . +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Traffic Type | Loc Type = 2 | Locator Length| Reserved |P| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Locator Lifetime | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Transport Port | Transp. Proto| Kind | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Priority | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SPI | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Address | | | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 11: LOCATOR_SET Parameter The individual fields in the LOCATOR_SET parameter are described in Table 2.¶ Table 2: Fields of the LOCATOR_SET Parameter Field Value(s) Purpose Type 193 Parameter type Length Variable Length in octets, excluding Type and Length fields and padding Traffic Type 0-2 The locator for either HIP signaling (1) or ESP (2), or for both (0) Locator Type 2 \"Transport address\" locator type Locator Length 7 Length of the fields after Locator Lifetime in 4-octet units Reserved 0 Reserved for future extensions Preferred (P) bit 0 or 1 Set to 1 for a Locator in R1 if the Responder can use it for the rest of the base exchange, otherwise set to zero Locator Lifetime Variable Locator lifetime in seconds, see Section 4 of [RFC8046] Transport Port Variable Transport-layer port number Transport Protocol Variable IANA-assigned, transport-layer Internet Protocol number. Currently, only UDP (17) is supported. Kind Variable 0 for host, 1 for server reflexive, 2 for peer reflexive (currently unused), or 3 for relayed address Priority Variable Locator's priority as described in [RFC8445]. It is worth noting that while the priority of a single locator candidate is 32 bits, an implementation should a 64-bit integer to calculate the priority of a candidate pair for the ICE priority algorithm. SPI Variable Security Parameter Index (SPI) value that the host expects to see in incoming ESP packets that use this locator Address Variable IPv6 address or an \"IPv4-mapped IPv6 address\" format IPv4 address [RFC4291] The LOCATOR parameter MUST be encapsulated inside an ENCRYPTED parameter.¶ 5.8. RELAY_HMAC Parameter As specified in Legacy ICE-HIP [RFC5770], the RELAY_HMAC parameter value has the TLV type 65520. It has the same semantics as RVS_HMAC as specified in Section 4.2.1 of [RFC8004]. Similar to RVS_HMAC, RELAY_HMAC is also keyed with the HIP integrity key (HIP-lg or HIP-gl as specified in Section 6.5 of [RFC7401]), established during the relay registration procedure as described in Section 4.1.¶ 5.9. Registration Types The REG_INFO, REG_REQ, REG_RESP, and REG_FAILED parameters contain Registration Type [RFC8003] values for Control Relay Server registration. The value for RELAY_UDP_HIP is 2 as specified in Legacy ICE-HIP [RFC5770]. The value for RELAY_UDP_ESP is 3.¶ 5.10. Notify Packet Types A Control/Data Relay Server and end hosts can use NOTIFY packets to signal different error conditions. The NOTIFY packet types are the same as in Legacy ICE-HIP [RFC5770] except for the two last ones, which are new.¶ The Notify Packet Types [RFC7401] are shown below. The Notification Data field for the error notifications SHOULD contain the HIP header of the rejected packet and SHOULD be empty for the CONNECTIVITY_CHECKS_FAILED type.¶ Table 3: Notify Packet Types NOTIFICATION PARAMETER - ERROR TYPES Value NO_VALID_NAT_TRAVERSAL_MODE_PARAMETER¶ If a Control Relay Server does not forward a base exchange packet due to a missing NAT traversal mode parameter, or the Initiator selects a NAT traversal mode that the (non-relay) Responder did not expect, the Control Relay Server or the Responder may send back a NOTIFY error packet with this type.¶ 60 CONNECTIVITY_CHECKS_FAILED¶ Used by the end hosts to signal that NAT traversal connectivity checks failed and did not produce a working path.¶ 61 MESSAGE_NOT_RELAYED¶ Used by a Control Relay Server to signal that it was not able or willing to relay a HIP packet.¶ 62 SERVER_REFLEXIVE_CANDIDATE_ALLOCATION_FAILED¶ Used by a Data Relay Server to signal that it was not able or willing to allocate a new server-reflexive candidate for the Data Relay Client.¶ 63 RVS_HMAC_PROHIBITED_WITH_RELAY¶ In the unintended event that a Control Relay Server sends any HIP message with an RVS_HMAC parameter, the Control Relay Client drops the received HIP message and sends a notify message back to the Control Relay Server using this notify type.¶ 64 5.11. ESP Data Packets The format for ESP data packets is identical to Legacy ICE-HIP [RFC5770].¶ [RFC3948] describes the UDP encapsulation of the IPsec ESP transport and tunnel mode. On the wire, the HIP ESP packets do not differ from the transport mode ESP; thus, the encapsulation of the HIP ESP packets is same as the UDP encapsulation transport mode ESP. However, the (semantic) difference to Bound End-to-End Tunnel (BEET) mode ESP packets used by HIP is that the IP header is not used in BEET integrity protection calculation.¶ During the HIP base exchange, the two peers exchange parameters that enable them to define a pair of IPsec ESP security associations (SAs) as described in [RFC7402]. When two peers perform a UDP-encapsulated base exchange, they MUST define a pair of IPsec SAs that produces UDP-encapsulated ESP data traffic.¶ The management of encryption/authentication protocols and SPIs is defined in [RFC7402]. The UDP encapsulation format and processing of HIP ESP traffic is described in Section 6.1 of [RFC7402].¶ 5.12. RELAYED_ADDRESS and MAPPED_ADDRESS Parameters While the type values are new, the format of the RELAYED_ADDRESS and MAPPED_ADDRESS parameters (Figure 12) is identical to REG_FROM, RELAY_FROM, and RELAY_TO parameters. This document specifies only the use of UDP relaying; thus, only protocol 17 is allowed. However, future documents may specify support for other protocols.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Port | Protocol | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Address | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 12: Format of the RELAYED_ADDRESS and MAPPED_ADDRESS Parameters Type: RELAYED_ADDRESS: 4650¶ MAPPED_ADDRESS: 4660¶ Length: 20¶ Port: The UDP port number¶ Protocol: IANA-assigned, Internet Protocol number (17 for UDP)¶ Reserved: Reserved for future use; zero when sent, ignored when received¶ Address: An IPv6 address or an IPv4 address in \"IPv4-mapped IPv6 address\" format¶ 5.13. PEER_PERMISSION Parameter The format of the new PEER_PERMISSION parameter is shown in Figure 13. The parameter is used for setting up and refreshing forwarding rules and the permissions for data packets at the Data Relay Server. The parameter contains one or more sets of Port, Protocol, Address, Outbound SPI (OSPI), and Inbound SPI (ISPI) values. One set defines a rule for one peer address.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | RPort | PPort | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Protocol | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | RAddress | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | PAddress | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | OSPI | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ISPI | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 13: Format of the PEER_PERMISSION Parameter Type: 4680¶ Length: 48¶ RPort: The transport-layer (UDP) port at the Data Relay Server (i.e., the port of the server-reflexive candidate)¶ PPort: The transport-layer (UDP) port number of the peer¶ Protocol: IANA-assigned, Internet Protocol number (17 for UDP)¶ Reserved: Reserved for future use; zero when sent, ignored when received¶ RAddress: An IPv6 address, or an IPv4 address in \"IPv4-mapped IPv6 address\" format, of the server-reflexive candidate¶ PAddress: An IPv6 address, or an IPv4 address in \"IPv4-mapped IPv6 address\" format, of the peer¶ OSPI: The outbound SPI value the Data Relay Client is using for the peer¶ ISPI: The inbound SPI value the Data Relay Client is using for the peer¶ 5.14. HIP Connectivity Check Packets The connectivity request messages are HIP UPDATE packets containing a new CANDIDATE_PRIORITY parameter (Figure 14). Response UPDATE packets contain a MAPPED_ADDRESS parameter (Figure 12).¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Priority | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 14: Format of the CANDIDATE_PRIORITY Parameter Type: 4700¶ Length: 4¶ Priority: The priority of a (potential) peer-reflexive candidate¶ 5.15. NOMINATE Parameter Figure 15 shows the NOMINATE parameter that is used to conclude the candidate nomination process.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 15: Format of the NOMINATE Parameter Type: 4710¶ Length: 4¶ Reserved: Reserved for future extension purposes¶ 6. IAB Considerations The ICE specification [RFC8445] discusses \"Unilateral Self-Address Fixing\" in Section 18. This protocol is based on ICE; thus, the same considerations also apply here.¶ 7. Security Considerations Since the control plane protocol and Control Relay Server are essentially the same (with some minor differences) in this document as in Legacy ICE-HIP [RFC5770], the same security considerations (in Sections 7.1, 7.2, 7.3, and 7.4) are still valid, but are repeated here for the sake of completeness. New security considerations related to the new Data Relay Server are discussed in Section 7.5, and considerations related to the new connectivity check protocol are discussed in Sections 7.6 and 7.7.¶ 7.1. Privacy Considerations It is also possible that end users may not want to reveal all locators to each other. For example, tracking the physical location of a multihoming end host may become easier if it reveals all locators to its peer during a base exchange. Also, revealing host addresses exposes information about the local topology that may not be allowed in all corporate environments. For these two local policy reasons, it might be tempting to exclude certain host addresses from the LOCATOR_SET parameter of an end host, but this is NOT RECOMMENDED. For instance, such behavior creates non-optimal paths when the hosts are located behind the same NAT. Especially, this could be problematic with a legacy NAT that does not support routing from the private address realm back to itself through the outer address of the NAT. This scenario is referred to as the hairpin problem [RFC5128]. With such a legacy NAT, the only option left would be to use a relayed transport address from a Data Relay Server.¶ The use of Control and Data Relay Servers can also be useful for privacy purposes. For example, a privacy-concerned Responder may reveal only its Control Relay Server and Relayed candidates to Initiators. This partially protects the Responder against Denial-of-Service (DoS) attacks by allowing the Responder to initiate new connections even if its relays would be unavailable due to a DoS attack.¶ 7.2. Opportunistic Mode In opportunistic HIP mode (cf. Section 4.1.8 of [RFC7401]), an Initiator sends an I1 without setting the destination HIT of the Responder (i.e., the Control Relay Client). A Control Relay Server SHOULD have a unique IP address per the Control Relay Client when the Control Relay Server is serving more than one Control Relay Client and supports opportunistic mode. Otherwise, the Control Relay Server cannot guarantee to deliver the I1 packet to the intended recipient. Future extensions of this document may allow opportunistic mode to be used with non-unique IP addresses to be utilized either as a HIP-level anycast or multicast mechanism. Both of the mentioned cases would require separate registration parameters that the Control Relay Server proposes and the Control Client Server accepts during registration.¶ 7.3. Base Exchange Replay Protection for Control Relay Server In certain scenarios, it is possible that an attacker, or two attackers, can replay an earlier base exchange through a Control Relay Server by masquerading as the original Initiator and Responder. The attack does not require the attacker(s) to compromise the private key(s) of the attacked host(s). However, for this attack to succeed, the legitimate Responder has to be disconnected from the Control Relay Server.¶ The Control Relay Server can protect itself against replay attacks by becoming involved in the base exchange by introducing nonces that the end hosts (Initiator and Responder) are required to sign. One way to do this is to add ECHO_REQUEST_M parameters to the R1 and I2 packets as described in [HIP-MIDDLEBOXES] and drop the I2 or R2 packets if the corresponding ECHO_RESPONSE_M parameters are not present.¶ 7.4. Demultiplexing Different HIP Associations Section 5.1 of [RFC3948] describes a security issue for the UDP encapsulation in the standard IP tunnel mode when two hosts behind different NATs have the same private IP address and initiate communication to the same Responder in the public Internet. The Responder cannot distinguish between two hosts because security associations are based on the same inner IP addresses.¶ This issue does not exist with the UDP encapsulation of HIP ESP transport format because the Responder uses HITs to distinguish between different Initiators.¶ 7.5. Reuse of Ports at the Data Relay Server If the Data Relay Server uses the same relayed address and port (as conveyed in the RELAYED_ADDRESS parameter) for multiple Data Relay Clients, it appears to all the peers, and their firewalls, that all the Data Relay Clients are at the same address. Thus, a stateful firewall may allow packets to pass from hosts that would not normally be able to send packets to a peer behind the firewall. Therefore, a Data Relay Server SHOULD NOT reuse the port numbers. If port numbers need to be reused, the Data Relay Server SHOULD have a sufficiently large pool of port numbers and randomly select ports from the pool to decrease the chances of a Data Relay Client obtaining the same address that another host behind the same firewall is using.¶ 7.6. Amplification Attacks A malicious host may send an invalid list of candidates to its peer that are used for targeting a victim host by flooding it with connectivity checks. To mitigate the attack, this protocol adopts the ICE mechanism to cap the total amount of connectivity checks as defined in Section 4.7.¶ 7.7. Attacks against Connectivity Checks and Candidate Gathering Section 19.2 of [RFC8445] describes attacks against ICE connectivity checks. HIP bases its control plane security on Diffie-Hellman key exchange, public keys, and Hashed Message Authentication codes, meaning that the mentioned security concerns do not apply to HIP either. The mentioned section also discusses man-in-the-middle replay attacks that are difficult to prevent. The connectivity checks in this protocol are effectively immune against replay attacks because a connectivity request includes a random nonce that the recipient must sign and send back as a response.¶ Section 19.3 of [RFC8445] describes attacks on server-reflexive address gathering. Similarly here, if the DNS, a Control Relay Server, or a Data Relay Server has been compromised, not much can be done. However, the case where attackers can inject fake messages (located on a shared network segment like Wi-Fi) does not apply here. HIP messages are integrity and replay protected, so it is not possible to inject fake server-reflexive address candidates.¶ Section 19.4 of [RFC8445] describes attacks on relayed candidate gathering. Similarly to ICE TURN servers, a Data Relay Server requires an authenticated base exchange that protects relayed address gathering against fake requests and responses. Further, replay attacks are not possible because the HIP base exchange (and also UPDATE procedure) is protected against replay attacks.¶ 7.8. Cross-Protocol Attacks Section 4.1 explains how a Control Relay Client registers for the RELAY_UDP_HIP service from a Control Relay Server. However, the same server may also offer Rendezvous functionality; thus, a client can register both to a RELAY_UDP_HIP and a RENDEZVOUS (see [RFC8004]) service from the same server. Potentially, this introduces a cross-protocol attack (or actually a \"cross-message\" attack) because the key material is the same for the Control Relay Service and Rendezvous HMACs. While the problem could be avoided by deriving different keys for the Control Relay Service, a more simple measure was chosen because the exact attack scenario was unclear. Consequently, this section defines a mandatory mitigation mechanism against the cross-protocol attack that works by preventing the simultaneous use of Rendezvous and Control Relay Service in the context of a single HIP Association.¶ The registration involves three parameters typically delivered sequentially in R1 (REG_INFO parameter), I2 (REG_REQUEST), and R2 (REG_RESPONSE) messages but can also be delivered in UPDATE messages as described in [RFC8003]. The parameters and the modifications to their processing are described below:¶ REG_INFO: The Control Relay Server advertises its available services using this parameter. RELAY_UDP_HIP and RENDEZVOUS services MAY be included in the first advertisement for the HIP association, but subsequent ones MUST include only one of them as agreed in earlier registrations (see steps 2 and 3).¶ REG_REQUEST: The Control Relay Client chooses the services it requires using this parameter. If the Control Relay Server offered both RENDEZVOUS or RELAY_UDP_HIP, the Control Relay Client MUST choose only one of them in the REG_REQUEST parameter. Upon choosing one of the two, it persists throughout the lifetime of the HIP association, and the Control Relay Client MUST NOT register the other remaining one in a subsequent UPDATE message.¶ REG_RESPONSE: The Control Relay Server verifies the services requested by the Control Relay Client using this parameter. If the Control Relay Server offered both RENDEZVOUS and RELAY_UDP_HIP service, and the Control Relay Client requested for both of them, the Control Relay Client MUST offer only RELAY_UDP_HIP service in the REG_RESPONSE parameter and include a REG_FAILED parameter in the same message, with RENDEZVOUS as the Registration Type and 9 as the Failure Type.¶ As a further measure against cross-protocol attacks, the Control Relay Client MUST drop any HIP message that includes an RVS_HMAC parameter when it originates from a successfully registered Control Relay Server. Upon such an (unintended) event, the Control Relay Client MUST send a NOTIFY message with RVS_HMAC_PROHIBITED_WITH_RELAY as the Notify Message Type to the Control Relay Server.¶ 8. IANA Considerations This section is to be interpreted according to [RFC8126].¶ This document reuses the same default UDP port number 10500 as specified by Legacy ICE-HIP [RFC5770] for tunneling both HIP control and data plane traffic. The port was registered separately for [RFC5770] to coauthor Ari Keränen originally, but it has been reassigned for IESG control. With the permission of Ari Keränen, the new assignee is the IESG and the contact is <chair@ietf.org>. In addition, IANA has added a reference to this document in the entry for UDP port 10500 in the \"Service Name and Transport Protocol Port Number Registry\". The selection between Legacy ICE-HIP and Native ICE-HIP mode is negotiated using the NAT_TRAVERSAL_MODE parameter during the base exchange. By default, hosts listen to this port for incoming UDP datagrams and can also use it for sending UDP datagrams. Other ephemeral port numbers are negotiated and utilized dynamically.¶ IANA has assigned the following values in the HIP \"Parameter Types\" registry [RFC7401]: 4650 for RELAYED_ADDRESS (length 20), 4660 for MAPPED_ADDRESS (length 20; defined in Section 5.12), 4680 for PEER_PERMISSION (length 48; defined in Section 5.13), 4700 for CANDIDATE_PRIORITY (length 4; defined in Section 5.14), and 4710 for NOMINATE (length 4; defined in Section 5.15).¶ IANA has assigned the following value in the \"HIP NAT Traversal Modes\" registry specified in Legacy ICE-HIP [RFC5770]: 3 for ICE-HIP-UDP (defined in Section 5.4).¶ IANA has assigned the following values in the HIP \"Notify Message Types\" registry: 16385 for NAT_KEEPALIVE in Section 5.3, 63 for SERVER_REFLEXIVE_CANDIDATE_ALLOCATION_FAILED in Section 5.10, and 64 for RVS_HMAC_PROHIBITED_WITH_RELAY in Section 5.10.¶ IANA has assigned the following values in the \"Registration Types\" registry for the HIP Registration Extension [RFC8003]: 3 for RELAY_UDP_ESP (defined in Section 5.9) for allowing registration with a Data Relay Server for ESP-relaying service, and 4 for CANDIDATE_DISCOVERY (defined in Section 4.2) for performing server-reflexive candidate discovery.¶ IANA has assigned one value in the \"Registration Failure Types\" registry as defined in Section 7.8. The value is 9, and the Registration Failure Type is \"Simultaneous Rendezvous and Control Relay Service usage prohibited\".¶ 9. References 9.1. Normative References [RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191, DOI 10.17487/RFC1191, November 1990, <https://www.rfc-editor.org/info/rfc1191>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4291] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 4291, DOI 10.17487/RFC4291, February 2006, <https://www.rfc-editor.org/info/rfc4291>. [RFC5770] Komu, M., Henderson, T., Tschofenig, H., Melen, J., and A. Keranen, Ed., \"Basic Host Identity Protocol (HIP) Extensions for Traversal of Network Address Translators\", RFC 5770, DOI 10.17487/RFC5770, April 2010, <https://www.rfc-editor.org/info/rfc5770>. [RFC7050] Savolainen, T., Korhonen, J., and D. Wing, \"Discovery of the IPv6 Prefix Used for IPv6 Address Synthesis\", RFC 7050, DOI 10.17487/RFC7050, November 2013, <https://www.rfc-editor.org/info/rfc7050>. [RFC7401] Moskowitz, R., Ed., Heer, T., Jokela, P., and T. Henderson, \"Host Identity Protocol Version 2 (HIPv2)\", RFC 7401, DOI 10.17487/RFC7401, April 2015, <https://www.rfc-editor.org/info/rfc7401>. [RFC7402] Jokela, P., Moskowitz, R., and J. Melen, \"Using the Encapsulating Security Payload (ESP) Transport Format with the Host Identity Protocol (HIP)\", RFC 7402, DOI 10.17487/RFC7402, April 2015, <https://www.rfc-editor.org/info/rfc7402>. [RFC8003] Laganier, J. and L. Eggert, \"Host Identity Protocol (HIP) Registration Extension\", RFC 8003, DOI 10.17487/RFC8003, October 2016, <https://www.rfc-editor.org/info/rfc8003>. [RFC8004] Laganier, J. and L. Eggert, \"Host Identity Protocol (HIP) Rendezvous Extension\", RFC 8004, DOI 10.17487/RFC8004, October 2016, <https://www.rfc-editor.org/info/rfc8004>. [RFC8005] Laganier, J., \"Host Identity Protocol (HIP) Domain Name System (DNS) Extension\", RFC 8005, DOI 10.17487/RFC8005, October 2016, <https://www.rfc-editor.org/info/rfc8005>. [RFC8046] Henderson, T., Ed., Vogt, C., and J. Arkko, \"Host Mobility with the Host Identity Protocol\", RFC 8046, DOI 10.17487/RFC8046, February 2017, <https://www.rfc-editor.org/info/rfc8046>. [RFC8047] Henderson, T., Ed., Vogt, C., and J. Arkko, \"Host Multihoming with the Host Identity Protocol\", RFC 8047, DOI 10.17487/RFC8047, February 2017, <https://www.rfc-editor.org/info/rfc8047>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8201] McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed., \"Path MTU Discovery for IP version 6\", STD 87, RFC 8201, DOI 10.17487/RFC8201, July 2017, <https://www.rfc-editor.org/info/rfc8201>. [RFC8445] Keranen, A., Holmberg, C., and J. Rosenberg, \"Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal\", RFC 8445, DOI 10.17487/RFC8445, July 2018, <https://www.rfc-editor.org/info/rfc8445>. [RFC8489] Petit-Huguenin, M., Salgueiro, G., Rosenberg, J., Wing, D., Mahy, R., and P. Matthews, \"Session Traversal Utilities for NAT (STUN)\", RFC 8489, DOI 10.17487/RFC8489, February 2020, <https://www.rfc-editor.org/info/rfc8489>. [RFC8961] Allman, M., \"Requirements for Time-Based Loss Detection\", BCP 233, RFC 8961, DOI 10.17487/RFC8961, November 2020, <https://www.rfc-editor.org/info/rfc8961>. 9.2. Informative References [HIP-MIDDLEBOXES] Heer, T., Hummen, R., Wehrle, K., and M. Komu, \"End-Host Authentication for HIP Middleboxes\", Work in Progress, Internet-Draft, draft-heer-hip-middle-auth-04, 31 October 2011, <https://datatracker.ietf.org/doc/html/draft-heer-hip-middle-auth-04>. [ICE-NONSIP] Rosenberg, J., \"Guidelines for Usage of Interactive Connectivity Establishment (ICE) by non Session Initiation Protocol (SIP) Protocols\", Work in Progress, Internet-Draft, draft-rosenberg-mmusic-ice-nonsip-01, 14 July 2008, <https://datatracker.ietf.org/doc/html/draft-rosenberg-mmusic-ice-nonsip-01>. [RFC2475] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z., and W. Weiss, \"An Architecture for Differentiated Services\", RFC 2475, DOI 10.17487/RFC2475, December 1998, <https://www.rfc-editor.org/info/rfc2475>. [RFC3264] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with Session Description Protocol (SDP)\", RFC 3264, DOI 10.17487/RFC3264, June 2002, <https://www.rfc-editor.org/info/rfc3264>. [RFC3948] Huttunen, A., Swander, B., Volpe, V., DiBurro, L., and M. Stenberg, \"UDP Encapsulation of IPsec ESP Packets\", RFC 3948, DOI 10.17487/RFC3948, January 2005, <https://www.rfc-editor.org/info/rfc3948>. [RFC5128] Srisuresh, P., Ford, B., and D. Kegel, \"State of Peer-to-Peer (P2P) Communication across Network Address Translators (NATs)\", RFC 5128, DOI 10.17487/RFC5128, March 2008, <https://www.rfc-editor.org/info/rfc5128>. [RFC5207] Stiemerling, M., Quittek, J., and L. Eggert, \"NAT and Firewall Traversal Issues of Host Identity Protocol (HIP) Communication\", RFC 5207, DOI 10.17487/RFC5207, April 2008, <https://www.rfc-editor.org/info/rfc5207>. [RFC5245] Rosenberg, J., \"Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols\", RFC 5245, DOI 10.17487/RFC5245, April 2010, <https://www.rfc-editor.org/info/rfc5245>. [RFC6146] Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful NAT64: Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146, April 2011, <https://www.rfc-editor.org/info/rfc6146>. [RFC6147] Bagnulo, M., Sullivan, A., Matthews, P., and I. van Beijnum, \"DNS64: DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers\", RFC 6147, DOI 10.17487/RFC6147, April 2011, <https://www.rfc-editor.org/info/rfc6147>. [RFC6538] Henderson, T. and A. Gurtov, \"The Host Identity Protocol (HIP) Experiment Report\", RFC 6538, DOI 10.17487/RFC6538, March 2012, <https://www.rfc-editor.org/info/rfc6538>. [RFC8656] Reddy, T., Ed., Johnston, A., Ed., Matthews, P., and J. Rosenberg, \"Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)\", RFC 8656, DOI 10.17487/RFC8656, February 2020, <https://www.rfc-editor.org/info/rfc8656>. [RFC8750] Migault, D., Guggemos, T., and Y. Nir, \"Implicit Initialization Vector (IV) for Counter-Based Ciphers in Encapsulating Security Payload (ESP)\", RFC 8750, DOI 10.17487/RFC8750, March 2020, <https://www.rfc-editor.org/info/rfc8750>. [RFC8899] Fairhurst, G., Jones, T., Tüxen, M., Rüngeler, I., and T. Völker, \"Packetization Layer Path MTU Discovery for Datagram Transports\", RFC 8899, DOI 10.17487/RFC8899, September 2020, <https://www.rfc-editor.org/info/rfc8899>. [RFC9063] Moskowitz, R., Ed. and M. Komu, \"Host Identity Protocol Architecture\", RFC 9063, DOI 10.17487/RFC9063, July 2021, <https://www.rfc-editor.org/info/rfc9063>. Appendix A. Selecting a Value for Check Pacing Selecting a suitable value for the connectivity check transaction pacing is essential for the performance of connectivity check-based NAT traversal. The value should not be so small that the checks cause network congestion or overwhelm the NATs. On the other hand, a pacing value that is too high makes the checks last for a long time, thus increasing the connection setup delay.¶ The Ta value may be configured by the user in environments where the network characteristics are known beforehand. However, if the characteristics are not known, it is recommended that the value is adjusted dynamically. In this case, it is recommended that the hosts estimate the round-trip time (RTT) between them, and they SHOULD set the minimum Ta value so that at most a single connectivity check message is sent on every RTT.¶ One way to estimate the RTT is to use the time that it takes for the Control Relay Server registration exchange to complete; this would give an estimate on the registering host's access link's RTT. Also, the I1/R1 exchange could be used for estimating the RTT, but since the R1 can be cached in the network, or the relaying service can increase the delay notably, this is not recommended. In general, estimating RTT can be difficult and error prone; thus, the guidelines for choosing a Ta value in Section 4.4 MUST be followed.¶ Appendix B. Differences with Respect to ICE Legacy ICE-HIP reuses the ICE/STUN/TURN protocol stack as it is. The benefits of such as an approach include the reuse of STUN/TURN infrastructure and possibly the reuse of existing software libraries, but there are also drawbacks with the approach. For example, ICE is meant for application-layer protocols, whereas HIP operates at layer 3.5 between transport and network layers. This is particularly problematic because the implementations employ kernel-space IPsec ESP as their data plane: demultiplexing of incoming ESP, HIP, and TURN messages required the capturing of all UDP packets destined to port 10500 to the userspace (due to different, incompatible markers in ESP and STUN), thus causing additional software complexity and an unnecessary latency/throughput bottleneck for the dataplane performance. It is also worth noting that the demultiplexing of STUN packets in the kernel would also incur a performance impact (albeit smaller than with userspace demultiplexing), and secure verification of STUN messages would require communication between the kernel-space STUN detector and HIP daemon typically residing in the userspace (thus again increasing the performance overhead).¶ Legacy ICE-HIP also involves some other complexities when compared to the approach taken in this document. The relaying of ESP packets via TURN relays was not considered that simple because TURN relays require adding and removing extra TURN framing for the relayed packets. Finally, the developers of the two Legacy ICE-HIP implementations concluded that effort needed for integrating an ICE library into a HIP implementation turned out to be quite a bit higher than initially estimated. Also, the amount of extra code (some 10 kLoC) needed for all the new parsers, state machines, etc., was quite high and by reusing the HIP code, one should be able to do with much less. This should result in smaller binary size, less bugs, and easier debugging.¶ Consequently, the HIP working group decided to follow ICE methodology but reuse HIP messaging format to achieve the same functionality as ICE; the result of that is this document, which specifies the Native ICE-HIP protocol.¶ The Native ICE-HIP protocol specified in this document follows the semantics of ICE as close as possible, and most of the differences are syntactical due to the use of a different protocol. In this section, we describe the differences to the ICE protocol.¶ ICE operates at the application layer, whereas this protocol operates between transport and network layers, thus hiding the protocol details from the application.¶ The STUN protocol is not employed. Instead, Native ICE-HIP reuses the HIP control plane format in order to simplify the demultiplexing of different protocols. For example, the STUN binding response is replaced with a HIP UPDATE message containing an ECHO_REQUEST_SIGNED parameter and the STUN binding response with a HIP UPDATE message containing an ECHO_RESPONSE_SIGNED parameter as defined in Section 4.6. It is worth noting that a drawback of not employing STUN is that discovery of the address candidates requires creating (using HIP base exchange) and maintaining (using HIP UPDATE procedures) state at the Control Relay Client and Control Relay Server. Future extensions to this document may define a stateless, HIP-specific mechanism for an end host to discover its address candidates.¶ The TURN protocol is not utilized. Instead, Native ICE-HIP reuses Control Relay Servers for the same purpose.¶ ICMP errors may be used in ICE to signal failure. In the Native ICE-HIP protocol, HIP NOTIFY messages are used instead.¶ Instead of the ICE username fragment and password mechanism for credentials, Native ICE-HIP uses the HIT, derived from a public key, for the same purpose. The username fragments are \"transient host identifiers, bound to a particular session established as part of the candidate exchange\" [RFC8445]. Generally in HIP, a local public key and the derived HIT are considered long-term identifiers and invariant across different host associations and different transport-layer flows.¶ In ICE, the conflict when two communicating endpoints take the same controlling role is solved using random values (a so-called tie-breaker value). In the Native ICE-HIP protocol, the conflict is solved by the standard HIP base exchange procedure, where the host with the \"larger\" HIT switches to the Responder role, thus also changing to the controlled role.¶ The ICE-CONTROLLED and ICE-CONTROLLING attributes are not included in the connectivity checks.¶ The foundation concept is unnecessary in Native ICE-HIP because only a single UDP flow for the IPsec tunnel will be negotiated.¶ Frozen candidates are omitted for the same reason the foundation concept is excluded.¶ Components are omitted for the same reason the foundation concept is excluded.¶ Native ICE-HIP supports only \"full ICE\" where the two communicating hosts participate actively to the connectivity checks, and the \"lite\" mode is not supported. This design decision follows the guidelines of ICE, which recommends full ICE implementations. However, it should be noted that a publicly reachable Responder may refuse to negotiate the ICE mode as described in Section 4.7.2. This would result in a HIP base exchange (as per [RFC7401]) tunneled over UDP, followed by ESP traffic over the same tunnel, without the connectivity check procedures defined in this document (in some sense, this mode corresponds to the case where two ICE lite implementations connect since no connectivity checks are sent).¶ As the \"ICE lite\" is not adopted here and both sides are capable of ICE-HIP-UDP mode (negotiated during the base exchange), default candidates are not employed in Native ICE-HIP.¶ If the agent is using Diffserv Codepoint markings [RFC2475] in its media packets, it SHOULD apply those same markings to its connectivity checks.¶ Unlike in ICE, the addresses are not XORed in the Native ICE-HIP protocol but rather encrypted to avoid middlebox tampering.¶ ICE defines Related Address and Port attributes used for diagnostic/SIP purposes, but the Native ICE-HIP protocol does not employ these attributes.¶ The minimum RTO is 500 ms in ICE but 1000 ms in the Native ICE-HIP protocol in favor of [RFC8961].¶ Appendix C. Differences to Base Exchange and UPDATE Procedures This section gives some design guidance for implementers on how the extensions in this protocol extend and differ from [RFC7401] and [RFC8046].¶ Both the control and data plane are operated on top of UDP, not directly on IP.¶ A minimal implementation would conform only to Sections 4.7.1 or 4.7.2, thus merely tunneling HIP control and data traffic over UDP. The drawback here is that it works only in the limited cases where the Responder has a public address.¶ It is worth noting that while a Rendezvous Server [RFC8004] has not been designed to be used in NATed scenarios because it just relays the first I1 packet and does not employ UDP encapsulation, the Control Relay Server forwards all control traffic and, hence, is more suitable in NATed environments. Further, the Data Relay Server guarantees forwarding of data plane traffic also in cases where the NAT traversal procedures fail.¶ Registration procedures with a Control/Data Relay Server are similar as with a Rendezvous Server. However, a Control/Data Relay Server has different registration parameters than a Rendezvous Server because it offers a different service. Also, the Control/Data Relay Server also includes a REG_FROM parameter that informs the Control/Data Relay Client about its server-reflexive address. A Data Relay Server also includes a RELAYED_ADDRESS containing the relayed address for the Data Relay Client.¶ In [RFC7401], the Initiator and Responder can start to exchange application payload immediately after the base exchange. While exchanging data immediately after a base exchange via a Data Control Relay would also be possible here, we follow the ICE methodology to establish a direct path between two hosts using connectivity checks. This means that there will be some additional delay after the base exchange before application payload can be transmitted. The same applies for the UPDATE procedure as the connectivity checks introduce some additional delay.¶ In HIP without any NAT traversal support, the base exchange acts as an implicit connectivity check, and the mobility and multihoming extensions support explicit connectivity checks. After a base exchange or UPDATE-based connectivity checks, a host can use the associated address pair for transmitting application payload. In this Native ICE-HIP extension, we follow the ICE methodology where one endpoint acting in the controlled role chooses the used address pair also on behalf of the other endpoint acting in the controlled role, which is different from HIP without NAT traversal support. Another difference is that the process of choosing an address pair is explicitly signaled using the nomination packets. The nomination process in this protocol supports only a single address pair, and multihoming extensions are left for further study.¶ The UPDATE procedure resembles the mobility extensions defined in [RFC8046]. The first UPDATE message from the mobile host is exactly the same as in the mobility extensions. The second UPDATE message from the peer host and third from the mobile host are different in the sense that they merely acknowledge and conclude the reception of the candidates through the Control Relay Server. In other words, they do not yet test for connectivity (besides reachability through the Control Relay Server) unlike in the mobility extensions. The idea is that the connectivity check procedure follows the ICE specification, which is somewhat different from the HIP mobility extensions.¶ The connectivity checks as defined in the mobility extensions [RFC8046] are triggered only by the peer of the mobile host. Since successful NAT traversal requires that both endpoints test connectivity, both the mobile host and its peer host have to test for connectivity. In addition, this protocol also validates the UDP ports; the ports in the connectivity check must match with the response, as required by ICE.¶ In HIP mobility extensions [RFC8046], an outbound locator has some associated state: UNVERIFIED means that the locator has not been tested for reachability, ACTIVE means that the address has been verified for reachability and is being used actively, and DEPRECATED means that the locator lifetime has expired. In the subset of ICE specifications used by this protocol, an individual address candidate has only two properties: type and priority. Instead, the actual state in ICE is associated with candidate pairs rather than individual addresses. The subset of ICE specifications utilized by this protocol require the following attributes for a candidate pair: valid bit, nominated bit, base, and the state of the connectivity check. The connectivity checks have the following states: Waiting, In-progress, Succeeded, and Failed. Handling of this state attribute requires some additional logic when compared to the mobility extensions, since the state is associated with a local-remote address pair rather than just a remote address; thus, the mobility and ICE states do not have an unambiguous one-to-one mapping.¶ Credit-based authorization as defined in [RFC8046] could be used before candidate nomination has been concluded upon discovering working candidate pairs. However, this may result in the use of asymmetric paths for a short time period in the beginning of communications. Thus, support of credit-based authorization is left for further study.¶ Appendix D. Multihoming Considerations This document allows a host to collect address candidates from multiple interfaces but does not support activation and the simultaneous use of multiple address candidates. While multihoming extensions to support functionality similar to that found in [RFC8047] are left for further study and experimentation, we envision here some potential compatibility improvements to support multihoming:¶ Data Relay Registration: a Data Relay Client acting as an Initiator with another peer host should register a new server-reflexive candidate for each local transport address candidate. A Data Relay Client acting as a Responder should register a new server-reflexive candidate for each {local transport address candidate, new peer host} pair for the reasons described in Section 4.12.3. In both cases, the Data Relay Client should request the additional server-reflexive candidates by sending UPDATE messages originating from each of the local address candidates as described in Section 4.1. As the UPDATE messages are originating from an unknown location from the viewpoint of the Data Relay Server, it must also include an ECHO_REQUEST_SIGNED in the response in order to test for return routability.¶ Data Relay unregistration: This follows the procedure in Section 4, but the Data Relay Client should unregister using the particular transport address to be unregistered. All transport address pair registrations can be unregistered when no RELAYED_ADDRESS parameter is included.¶ PEER_PERMISSION parameter: This needs to be extended or an additional parameter is needed to declare the specific local candidate of the Data Relay Client. Alternatively, the use of the PEER_PERMISSION could be used as a wild card to open permissions for a specific peer to all of the candidates of the Data Relay Client.¶ Connectivity checks: The controlling host should be able to nominate multiple candidates (by repeating step 7 in Figure 5 in Section 4.6 using the additional candidate pairs).¶ Keepalives: These should be sent for all the nominated candidate pairs. Similarly, the Control/Data Relay Client should send keepalives from its local candidates to its Control/Data Relay Server transport addresses.¶ Appendix E. DNS Considerations This section updates Appendix B of [RFC5770], which will be replaced with the mechanism described in this section.¶ [RFC5770] did not specify how an end host can look up another end host via DNS and initiate a UDP-based HIP base exchange with it, so this section makes an attempt to fill this gap.¶ [RFC8005] specifies how a HIP end host and its Rendezvous Server is registered to DNS. Essentially, the public key of the end host is stored as a HI record and its Rendezvous Server as an A or AAAA record. This way, the Rendezvous Server can act as an intermediary for the end host and forward packets to it based on the DNS configuration. The Control Relay Server offers similar functionality to the Rendezvous Server, with the difference being that the Control Relay Server forwards all control messages, not just the first I1 message.¶ Prior to this document, the A and AAAA records in the DNS refer either to the HIP end host itself or a Rendezvous Server [RFC8005], and control and data plane communication with the associated host has been assumed to occur directly over IPv4 or IPv6. However, this specification extends the records to be used for UDP-based communications.¶ Let us consider the case of a HIP Initiator with the default policy to employ UDP encapsulation and the extensions defined in this document. The Initiator looks up the Fully Qualified Domain Name (FQDN) of a Responder, and retrieves its HI, A, and AAAA records. Since the default policy is to use UDP encapsulation, the Initiator MUST send the I1 message over UDP to destination port 10500 (either over IPv4 in the case of an A record or over IPv6 in the case of an AAAA record). It MAY send an I1 message both with and without UDP encapsulation in parallel. In the case in which the Initiator receives R1 messages both with and without UDP encapsulation from the Responder, the Initiator SHOULD ignore the R1 messages without UDP encapsulation.¶ The UDP-encapsulated I1 packet could be received by four different types of hosts:¶ HIP Control Relay Server: In this case, the A/AAAA records refer to a Control Relay Server, which will forward the packet to the corresponding Control Relay Client based on the destination HIT in the I1 packet.¶ HIP Responder supporting UDP encapsulation: In this case, the A/AAAA records refer to the end host. Assuming the destination HIT belongs to the Responder, the Responder receives and processes the I1 packet according to the negotiated NAT traversal mechanism. The support for the protocol defined in this document, as opposed to the support defined in [RFC5770], is dynamically negotiated during the base exchange. The details are specified in Section 4.3.¶ HIP Rendezvous Server: This entity is not listening to UDP port 10500, so it will drop the I1 message.¶ HIP Responder not supporting UDP encapsulation: The targeted end host is not listening to UDP port 10500, so it will drop the I1 message.¶ The A/AAAA record MUST NOT be configured to refer to a Data Relay Server unless the host in question also supports Control Relay Server functionality.¶ It is also worth noting that SRV records are not employed in this specification. While they could be used for more flexible UDP port selection, they are not suitable for end-host discovery but rather would be more suitable for the discovery of HIP-specific infrastructure. Further extensions to this document may define SRV records for Control and Data Relay Server discovery within a DNS domain.¶ Acknowledgments Thanks to Jonathan Rosenberg, Christer Holmberg, and the rest of the MMUSIC WG folks for the excellent work on ICE. The authors would also like to thank Andrei Gurtov, Simon Schuetz, Martin Stiemerling, Lars Eggert, Vivien Schmitt, and Abhinav Pathak for their contributions, and Tobias Heer, Teemu Koponen, Juhana Mattila, Jeffrey M. Ahrenholz, Kristian Slavov, Janne Lindqvist, Pekka Nikander, Lauri Silvennoinen, Jukka Ylitalo, Juha Heinanen, Joakim Koskela, Samu Varjonen, Dan Wing, Tom Henderson, Alex Elsayed, Jani Hautakorpi, Tero Kauppinen, and Timo Simanainen for their comments to [RFC5770] and this document. Thanks to Éric Vyncke, Alvaro Retana, Adam Roach, Ben Campbell, Eric Rescorla, Mirja Kühlewind, Spencer Dawkins, Derek Fawcus, Tianran Zhou, Amanda Barber, Colin Perkins, Roni Even, Alissa Cooper, Carl Wallace, Martin Duke, and Benjamin Kaduk for reviewing this document.¶ This work has been partially funded by the Cyber Trust Program by Digile/Tekes in Finland.¶ Contributors Marcelo Bagnulo, Philip Matthews, and Hannes Tschofenig have contributed to [RFC5770]. This document leans heavily on the work in that RFC.¶ Authors' Addresses Ari Keränen Ericsson Hirsalantie 11 FI-02420 Jorvas Finland Email: ari.keranen@ericsson.com Jan Melén Ericsson Hirsalantie 11 FI-02420 Jorvas Finland Email: jan.melen@ericsson.com Miika Komu (editor) Ericsson Hirsalantie 11 FI-02420 Jorvas Finland Email: miika.komu@ericsson.com"
    },
    {
        "Number": "9029",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Updates to the Allocation Policy for the Border Gateway Protocol - Link State (BGP-LS) Parameters Registries",
        "Authors": [
            "A. Farrel"
        ],
        "Date": "2021-06",
        "More Info": "Obsoleted by RFC 9552, Updates RFC 7752",
        "Status": "Proposed Standard",
        "Abstract": "RFC 7752 defines the Border Gateway Protocol - Link State (BGP-LS).  IANA created a registry consistent with that document called \"Border Gateway Protocol - Link State (BGP-LS) Parameters\" with a number of subregistries.  The allocation policy applied by IANA for those registries is \"Specification Required\", as defined in RFC 8126.  This document updates RFC 7752 by changing the allocation policy for all of the registries to \"Expert Review\" and by updating the guidance to the designated experts.",
        "Keywords": [
            "BGP-LS",
            "IANA"
        ],
        "Content": "RFC 9029: Updates to the Allocation Policy for the Border Gateway Protocol - Link State (BGP-LS) Parameters Registries RFC 9029 BGP-LS Registry Update June 2021 Farrel Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9029 Updates: 7752 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Author: A. Farrel Old Dog Consulting RFC 9029 Updates to the Allocation Policy for the Border Gateway Protocol - Link State (BGP-LS) Parameters Registries Abstract RFC 7752 defines the Border Gateway Protocol - Link State (BGP-LS). IANA created a registry consistent with that document called \"Border Gateway Protocol - Link State (BGP-LS) Parameters\" with a number of subregistries. The allocation policy applied by IANA for those registries is \"Specification Required\", as defined in RFC 8126.¶ This document updates RFC 7752 by changing the allocation policy for all of the registries to \"Expert Review\" and by updating the guidance to the designated experts.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9029.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 2.  IANA Considerations 2.1.  Guidance for Designated Experts 3.  Security Considerations 4.  Normative References Acknowledgements Author's Address 1. Introduction \"North-Bound Distribution of Link-State and Traffic Engineering (TE) Information Using BGP\" [RFC7752] requested IANA to create a registry called \"Border Gateway Protocol - Link State (BGP-LS) Parameters\" with a number of subregistries. The allocation policy applied by IANA for those registries is \"Specification Required\", as defined in [RFC8126].¶ The \"Specification Required\" policy requires evaluation of any assignment request by a \"designated expert\", and guidelines for any such experts are given in Section 5.1 of [RFC7752]. In addition, this policy requires that \"the values and their meanings must be documented in a permanent and readily available public specification, in sufficient detail so that interoperability between independent implementations is possible\" [RFC8126]. Further, the intention behind \"permanent and readily available\" is that \"a document can reasonably be expected to be findable and retrievable long after IANA assignment of the requested value\" [RFC8126].¶ Another allocation policy called \"Expert Review\" is defined in [RFC8126]. This policy also requires Expert Review but has no requirement for a formal document.¶ All reviews by designated experts are guided by advice given in the document that defined the registry and set the allocation policy.¶ This document updates [RFC7752] by changing the allocation policy for all of the registries to \"Expert Review\" and updating the guidance to the designated experts.¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2. IANA Considerations IANA maintains a registry called \"Border Gateway Protocol - Link State (BGP-LS) Parameters\". This registry contains four subregistries:¶ BGP-LS NLRI-Types¶ BGP-LS Protocol-IDs¶ BGP-LS Well-Known Instance-IDs¶ BGP-LS Node Descriptor, Link Descriptor, Prefix Descriptor, and Attribute TLVs¶ IANA has changed the assignment policy for each of these registries to \"Expert Review\".¶ IANA has also added this document as a reference for the registries mentioned above.¶ 2.1. Guidance for Designated Experts Section 5.1 of [RFC7752] gives guidance to designated experts. This section replaces that guidance.¶ In all cases of review by the designated expert described here, the designated expert is expected to check the clarity of purpose and use of the requested code points. The following points apply to the registries discussed in this document:¶ Application for a code point allocation may be made to the designated experts at any time and MUST be accompanied by technical documentation explaining the use of the code point. Such documentation SHOULD be presented in the form of an Internet-Draft but MAY arrive in any form that can be reviewed and exchanged amongst reviewers.¶ The designated experts SHOULD only consider requests that arise from Internet-Drafts that have already been accepted as working group documents or that are planned for progression as AD-Sponsored documents in the absence of a suitably chartered working group.¶ In the case of working group documents, the designated experts MUST check with the working group chairs that there is consensus within the working group to make the allocation at this time. In the case of AD-Sponsored documents, the designated experts MUST check with the AD for approval to make the allocation at this time.¶ If the document is not adopted by the IDR Working Group (or its successor), the designated expert MUST notify the IDR mailing list (or its successor) of the request and MUST provide access to the document. The designated expert MUST allow two weeks for any response. Any comments received MUST be considered by the designated expert as part of the subsequent step.¶ The designated experts MUST then review the assignment requests on their technical merit. The designated experts MAY raise issues related to the allocation request with the authors and on the IDR (or successor) mailing list for further consideration before the assignments are made.¶ The designated expert MUST ensure that any request for a code point does not conflict with work that is active or already published within the IETF.¶ Once the designated experts have granted approval, IANA will update the registry by marking the allocated code points with a reference to the associated document.¶ In the event that the document is a working group document or is AD Sponsored, and that document fails to progress to publication as an RFC, the working group chairs or AD SHOULD contact IANA to coordinate about marking the code points as deprecated. A deprecated code point is not marked as allocated for use and is not available for allocation in a future document. The WG chairs may inform IANA that a deprecated code point can be completely deallocated (i.e., made available for new allocations) at any time after it has been deprecated if there is a shortage of unallocated code points in the registry.¶ 3. Security Considerations The security considerations described in Section 8 of [RFC7752] still apply.¶ Note that the change to the Expert Review guidelines makes the registry and the designated experts slightly more vulnerable to denial-of-service attacks through excessive and bogus requests for code points. It is expected that the registry cannot be effectively attacked because the designated experts would, themselves, fall to any such attack first. Designated experts are expected to report to the IDR Working Group chairs and responsible Area Director if they believe an attack to be in progress and should immediately halt all requests for allocation. This may temporarily block all legitimate requests until mitigations have been put in place.¶ 4. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC7752] Gredler, H., Ed., Medved, J., Previdi, S., Farrel, A., and S. Ray, \"North-Bound Distribution of Link-State and Traffic Engineering (TE) Information Using BGP\", RFC 7752, DOI 10.17487/RFC7752, March 2016, <https://www.rfc-editor.org/info/rfc7752>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. Acknowledgements This work is based on the IANA Considerations described in Section 5 of [RFC7752]. The author thanks the people who worked on that document.¶ The author would like to thank John Scudder for suggesting the need for this document.¶ Thanks to John Scudder, Donald Eastlake 3rd, Ketan Talaulikar, and Alvaro Retana for their review, comments, and discussion.¶ Additional thanks to Gyan Mishra, Acee Lindem, Ketan Talaulikar, Les Ginsberg, Bruno Decraene, Benjamin Kaduk, and Martin Vigoureux for engaging in discussion on the details of this work.¶ Author's Address Adrian Farrel Old Dog Consulting Email: adrian@olddog.co.uk"
    },
    {
        "Number": "9031",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Constrained Join Protocol (CoJP) for 6TiSCH",
        "Authors": [
            "M. Vučinić",
            "Ed.",
            "J. Simon",
            "K. Pister",
            "M. Richardson"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document describes the minimal framework required for a new device, called a \"pledge\", to securely join a 6TiSCH (IPv6 over the Time-Slotted Channel Hopping mode of IEEE 802.15.4) network. The framework requires that the pledge and the JRC (Join Registrar/Coordinator, a central entity), share a symmetric key. How this key is provisioned is out of scope of this document. Through a single CoAP (Constrained Application Protocol) request-response exchange secured by OSCORE (Object Security for Constrained RESTful Environments), the pledge requests admission into the network, and the JRC configures it with link-layer keying material and other parameters. The JRC may at any time update the parameters through another request-response exchange secured by OSCORE. This specification defines the Constrained Join Protocol and its CBOR (Concise Binary Object Representation) data structures, and it describes how to configure the rest of the 6TiSCH communication stack for this join process to occur in a secure manner. Additional security mechanisms may be added on top of this minimal framework.",
        "Keywords": [
            "bootstrapping",
            "onboarding",
            "oscore"
        ],
        "Content": "RFC 9031: Constrained Join Protocol (CoJP) for 6TiSCH RFC 9031 CoJP for 6TiSCH May 2021 Vučinić, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9031 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: M. Vučinić, Ed. Inria J. Simon Analog Devices K. Pister University of California Berkeley M. Richardson Sandelman Software Works RFC 9031 Constrained Join Protocol (CoJP) for 6TiSCH Abstract This document describes the minimal framework required for a new device, called a \"pledge\", to securely join a 6TiSCH (IPv6 over the Time-Slotted Channel Hopping mode of IEEE 802.15.4) network. The framework requires that the pledge and the JRC (Join Registrar/Coordinator, a central entity), share a symmetric key. How this key is provisioned is out of scope of this document. Through a single CoAP (Constrained Application Protocol) request-response exchange secured by OSCORE (Object Security for Constrained RESTful Environments), the pledge requests admission into the network, and the JRC configures it with link-layer keying material and other parameters. The JRC may at any time update the parameters through another request-response exchange secured by OSCORE. This specification defines the Constrained Join Protocol and its CBOR (Concise Binary Object Representation) data structures, and it describes how to configure the rest of the 6TiSCH communication stack for this join process to occur in a secure manner. Additional security mechanisms may be added on top of this minimal framework.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9031.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  Provisioning Phase 4.  Join Process Overview 4.1.  Step 1 - Enhanced Beacon 4.2.  Step 2 - Neighbor Discovery 4.3.  Step 3 - Constrained Join Protocol (CoJP) Execution 4.4.  The Special Case of the 6LBR Pledge Joining 5.  Link-Layer Configuration 5.1.  Distribution of Time 6.  Network-Layer Configuration 6.1.  Identification of Unauthenticated Traffic 7.  Application-Layer Configuration 7.1.  Statelessness of the JP 7.2.  Recommended Settings 7.3.  OSCORE 8.  Constrained Join Protocol (CoJP) 8.1.  Join Exchange 8.2.  Parameter Update Exchange 8.3.  Error Handling 8.4.  CoJP Objects 8.5.  Recommended Settings 9.  Security Considerations 10. Privacy Considerations 11. IANA Considerations 11.1.  Constrained Join Protocol (CoJP) Parameters 11.2.  Constrained Join Protocol (CoJP) Key Usage 11.3.  Constrained Join Protocol (CoJP) Unsupported Configuration Codes 12. References 12.1.  Normative References 12.2.  Informative References Appendix A.  Example Appendix B.  Lightweight Implementation Option Acknowledgments Authors' Addresses 1. Introduction This document defines a \"secure join\" solution for a new device, called a \"pledge\", to securely join a 6TiSCH network. The term \"secure join\" refers to network access authentication, authorization, and parameter distribution as defined in [RFC9030]. The Constrained Join Protocol (CoJP) defined in this document handles parameter distribution needed for a pledge to become a joined node. Mutual authentication during network access and implicit authorization are achieved through the use of a secure channel as configured according to this document. This document also specifies a configuration of different layers of the 6TiSCH protocol stack that reduces the Denial of Service (DoS) attack surface during the join process.¶ This document presumes a 6TiSCH network as described by [RFC7554] and [RFC8180]. By design, nodes in a 6TiSCH network [RFC7554] have their radio turned off most of the time in order to conserve energy. As a consequence, the link used by a new device for joining the network has limited bandwidth [RFC8180]. The secure join solution defined in this document therefore keeps the number of over-the-air exchanges to a minimum.¶ The microcontrollers at the heart of 6TiSCH nodes have small amounts of code memory. It is therefore paramount to reuse existing protocols available as part of the 6TiSCH stack. At the application layer, the 6TiSCH stack already relies on CoAP [RFC7252] for web transfer and on OSCORE [RFC8613] for its end-to-end security. The secure join solution defined in this document therefore reuses those two protocols as its building blocks.¶ CoJP is a generic protocol that can be used as-is in all modes of IEEE Std 802.15.4 [IEEE802.15.4], including the Time-Slotted Channel Hopping (TSCH) mode on which 6TiSCH is based. CoJP may also be used in other (low-power) networking technologies where efficiency in terms of communication overhead and code footprint is important. In such a case, it may be necessary to define through companion documents the configuration parameters specific to the technology in question. The overall process is described in Section 4, and the configuration of the stack is specific to 6TiSCH.¶ CoJP assumes the presence of a Join Registrar/Coordinator (JRC), a central entity. The configuration defined in this document assumes that the pledge and the JRC share a unique symmetric cryptographic key, called PSK (pre-shared key). The PSK is used to configure OSCORE to provide a secure channel to CoJP. How the PSK is installed is out of scope of this document: this may happen during the provisioning phase or by a key exchange protocol that may precede the execution of CoJP.¶ When the pledge seeks admission to a 6TiSCH network, it first synchronizes to it by initiating the passive scan defined in [IEEE802.15.4]. The pledge then exchanges CoJP messages with the JRC; for this end-to-end communication to happen, the messages are forwarded by nodes, called Join Proxies, that are already part of the 6TiSCH network. The messages exchanged allow the JRC and the pledge to mutually authenticate based on the properties provided by OSCORE. They also allow the JRC to configure the pledge with link-layer keying material, a short identifier, and other parameters. After this secure join process successfully completes, the joined node can interact with its neighbors to request additional bandwidth using the 6TiSCH Operation Sublayer (6top) Protocol [RFC8480] and can start sending application traffic.¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ The reader is expected to be familiar with the terms and concepts defined in [RFC9030], [RFC7252], [RFC8613], and [RFC8152].¶ The specification also includes a set of informative specifications using the Concise Data Definition Language (CDDL) [RFC8610].¶ The following terms defined in [RFC9030] are used extensively throughout this document:¶ pledge¶ joined node¶ Join Proxy (JP)¶ Join Registrar/Coordinator (JRC)¶ Enhanced Beacon (EB)¶ join protocol¶ join process¶ The following terms defined in [RFC8505] are also used throughout this document:¶ 6LoWPAN Border Router (6LBR)¶ 6LoWPAN Node (6LN)¶ The term \"6LBR\" is used interchangeably with the term \"DODAG root\" defined in [RFC6550] on the assumption that the two entities are co-located, as recommended by [RFC9030].¶ The term \"pledge\", as used throughout the document, explicitly denotes non-6LBR devices attempting to join the network using their IEEE Std 802.15.4 network interface. The device that attempts to join as the 6LBR of the network and does so over another network interface is explicitly denoted as the \"6LBR pledge\". When the text applies equally to the pledge and the 6LBR pledge, the \"(6LBR) pledge\" form is used.¶ In addition, we use generic terms \"pledge identifier\" and \"network identifier\". See Section 3.¶ 3. Provisioning Phase The (6LBR) pledge is provisioned with certain parameters before attempting to join the network, and the same parameters are provisioned to the JRC. There are many ways by which this provisioning can be done. Physically, the parameters can be written into the (6LBR) pledge with a number of mechanisms, such as using a JTAG (Joint Test Action Group) interface, using a serial (craft) console interface, pushing buttons simultaneously on different devices, configuring over-the-air in a Faraday cage, etc. The provisioning can be done by the vendor, the manufacturer, the integrator, etc.¶ Details of how this provisioning is done are out of scope of this document. What is assumed is that there can be a secure, private conversation between the JRC and the (6LBR) pledge, and that the two devices can exchange the parameters.¶ Parameters that are provisioned to the (6LBR) pledge include:¶ pledge identifier: The pledge identifier identifies the (6LBR) pledge. The pledge identifier MUST be unique in the set of all pledge identifiers managed by a JRC. The pledge identifier uniqueness is an important security requirement, as discussed in Section 9. The pledge identifier is typically the globally unique 64-bit Extended Unique Identifier (EUI-64) of the IEEE Std 802.15.4 device, in which case it is provisioned by the hardware manufacturer. The pledge identifier is used to generate the IPv6 addresses of the (6LBR) pledge and to identify it during the execution of the join protocol. Depending on the configuration, the pledge identifier may also be used after the join process to identify the joined node. For privacy reasons (see Section 10), it is possible to use a pledge identifier different from the EUI-64. For example, a pledge identifier may be a random byte string, but care needs to be taken that such a string meets the uniqueness requirement.¶ Pre-Shared Key (PSK): A symmetric cryptographic key shared between the (6LBR) pledge and the JRC. To look up the PSK for a given pledge, the JRC additionally needs to store the corresponding pledge identifier. Each (6LBR) pledge MUST be provisioned with a unique PSK. The PSK MUST be a cryptographically strong key, with at least 128 bits of entropy, indistinguishable by feasible computation from a random uniform string of the same length. How the PSK is generated and/or provisioned is out of scope of this specification. This could be done during a provisioning step, or companion documents can specify the use of a key-agreement protocol. Common pitfalls when generating PSKs are discussed in Section 9. In the case of recommissioning a device to a new owner, the PSK MUST be changed. Note that the PSK is different from the link-layer keys K1 and K2 specified in [RFC8180]. The PSK is a long-term secret used to protect the execution of the secure join protocol specified in this document; the link-layer keys are transported as part of the secure join protocol.¶ Optionally, a network identifier: The network identifier identifies the 6TiSCH network. The network identifier MUST be carried within Enhanced Beacon (EB) frames. Typically, the 16-bit Personal Area Network Identifier (PAN ID) defined in [IEEE802.15.4] is used as the network identifier. However, PAN ID is not considered a stable network identifier as it may change during network lifetime if a collision with another network is detected. Companion documents can specify the use of a different network identifier for join purposes, but this is out of scope of this specification. Provisioning the network identifier to a pledge is RECOMMENDED. However, due to operational constraints, the network identifier may not be known at the time of provisioning. If this parameter is not provisioned to the pledge, the pledge will attempt to join one advertised network at a time, which significantly prolongs the join process. This parameter MUST be provisioned to the 6LBR pledge.¶ Optionally, any non-default algorithms: The default algorithms are specified in Section 7.3.3. When algorithm identifiers are not provisioned, the use of these default algorithms is implied.¶ Additionally, the 6LBR pledge that is not co-located with the JRC needs to be provisioned with the following:¶ Global IPv6 address of the JRC: This address is used by the 6LBR pledge to address the JRC during the join process. The 6LBR pledge may also obtain the IPv6 address of the JRC through other available mechanisms, such as DHCPv6 [RFC8415], Generic Autonomic Signaling Protocol (GRASP) [RFC8990], or Multicast DNS (mDNS) [RFC6762]; the use of these mechanisms is out of scope of this document. Pledges do not need to be provisioned with this address as they discover it dynamically through CoJP.¶ 4. Join Process Overview This section describes the steps taken by a pledge in a 6TiSCH network. When a pledge seeks admission to a 6TiSCH network, the following exchange occurs:¶ The pledge listens for an Enhanced Beacon (EB) frame [IEEE802.15.4]. This frame provides network synchronization information, telling the device when it can send a frame to the node sending the beacons, which acts as a Join Proxy (JP) for the pledge, and when it can expect to receive a frame. The EB provides the link-layer address of the JP, and it may also provide its link-local IPv6 address.¶ The pledge configures its link-local IPv6 address and advertises it to the JP using Neighbor Discovery. The advertisement step may be omitted if the link-local address has been derived from a known unique interface identifier, such as an EUI-64 address.¶ The pledge sends a Join Request to the JP in order to securely identify itself to the network. The Join Request is forwarded to the JRC.¶ In the case of successful processing of the request, the pledge receives a Join Response from the JRC (via the JP). The Join Response contains configuration parameters necessary for the pledge to join the network.¶ From the pledge's perspective, joining is a local phenomenon -- the pledge only interacts with the JP, and it needs not know how far it is from the 6LBR or how to route to the JRC. Only after establishing one or more link-layer keys does it need to know about the particulars of a 6TiSCH network.¶ The join process is shown as a transaction diagram in Figure 1:¶ +--------+ +-------+ +--------+ | pledge | | JP | | JRC | | | | | | | +--------+ +-------+ +--------+ | | | |<---Enhanced Beacon (1)---| | | | | |<-Neighbor Discovery (2)->| | | | | |-----Join Request (3a)----|----Join Request (3a)---->| \\ | | | | CoJP |<----Join Response (3b)---|----Join Response (3b)----| / | | | Figure 1: Overview of a successful join process. As for other nodes in the network, the 6LBR node may act as the JP. The 6LBR may in addition be co-located with the JRC.¶ The details of each step are described in the following sections.¶ 4.1. Step 1 - Enhanced Beacon The pledge synchronizes to the network by listening for, and receiving, an EB sent by a node already in the network. This process is entirely defined by [IEEE802.15.4] and described in [RFC7554].¶ Once the pledge hears an EB, it synchronizes to the joining schedule using the cells contained in the EB. The pledge can hear multiple EBs; the selection of which EB to use is out of the scope for this document and is discussed in [RFC7554]. Implementers should make use of information such as the following: which network identifier the EB contains, the value of the Join Metric field within EBs, whether the source link-layer address of the EB has been tried before, at which signal strength the different EBs were received, etc. In addition, the pledge may be preconfigured to search for EBs with a specific network identifier.¶ If the pledge is not provisioned with the network identifier, it attempts to join one network at a time, as described in Section 8.1.1.¶ Once the pledge selects the EB, it synchronizes to it and transitions into a low-power mode. It follows the schedule information contained in the EB, which indicates the slots that the pledge may use for the join process. During the remainder of the join process, the node that has sent the EB to the pledge acts as the JP.¶ At this point, the pledge may either proceed to step 2 or continue to listen for additional EBs.¶ 4.2. Step 2 - Neighbor Discovery The pledge forms its link-local IPv6 address based on the interface identifier per [RFC4944]. The pledge MAY perform the Neighbor Solicitation / Neighbor Advertisement exchange with the JP per Section 5.6 of [RFC8505]. Per [RFC8505], there is no need to perform duplicate address detection for the link-local address. The pledge and the JP use their link-local IPv6 addresses for all subsequent communication during the join process.¶ Note that Neighbor Discovery exchanges at this point are not protected with link-layer security as the pledge is not in possession of the keys. How the JP accepts these unprotected frames is discussed in Section 5.¶ 4.3. Step 3 - Constrained Join Protocol (CoJP) Execution The pledge triggers the join exchange of the Constrained Join Protocol (CoJP). The join exchange consists of two messages: the Join Request message (Step 3a (Section 4.3.1)) and the Join Response message, conditioned on the successful security processing of the request (Step 3b (Section 4.3.2)).¶ All CoJP messages are exchanged over a secure end-to-end channel that provides confidentiality, data authenticity, and replay protection. Frames carrying CoJP messages are not protected with link-layer security when exchanged between the pledge and the JP as the pledge is not in possession of the link-layer keys in use. How the JP and pledge accept these unprotected frames is discussed in Section 5. When frames carrying CoJP messages are exchanged between nodes that have already joined the network, the link-layer security is applied according to the security configuration used in the network.¶ 4.3.1. Step 3a - Join Request The Join Request is a message sent from the pledge to the JP, and which the JP forwards to the JRC. The pledge indicates in the Join Request the role it requests to play in the network, as well as the identifier of the network it requests to join. The JP forwards the Join Request to the JRC on the existing links. How exactly this happens is out of scope of this document; some networks may wish to dedicate specific link-layer resources for this join traffic.¶ 4.3.2. Step 3b - Join Response The Join Response is sent by the JRC to the pledge, and it is forwarded through the JP. The packet containing the Join Response travels from the JRC to the JP using the operating routes in the network. The JP delivers it to the pledge. The JP operates as an application-layer proxy, see Section 7.¶ The Join Response contains various parameters needed by the pledge to become a fully operational network node. These parameters include the link-layer key(s) currently in use in the network, the short address assigned to the pledge, the IPv6 address of the JRC needed by the pledge to operate as the JP, among others.¶ 4.4. The Special Case of the 6LBR Pledge Joining The 6LBR pledge performs Section 4.3 of the join process just like any other pledge, albeit over a different network interface. There is no JP intermediating the communication between the 6LBR pledge and the JRC, as described in Section 6. The other steps of the described join process do not apply to the 6LBR pledge. How the 6LBR pledge obtains an IPv6 address and triggers the execution of CoJP is out of scope of this document.¶ 5. Link-Layer Configuration In an operational 6TiSCH network, all frames use link-layer frame security [RFC8180]. The IEEE Std 802.15.4 security attributes include frame authenticity and optionally frame confidentiality (i.e., encryption).¶ Any node sending EB frames MUST be prepared to act as a JP for potential pledges.¶ The pledge does not initially perform an authenticity check of the EB frames because it does not possess the link-layer key(s) in use. The pledge is still able to parse the contents of the received EBs and synchronize to the network, as EBs are not encrypted [RFC8180].¶ When sending frames during the join process, the pledge sends unencrypted and unauthenticated frames at the link layer. In order for the join process to be possible, the JP must accept these unsecured frames for the duration of the join process. This behavior may be implemented by setting the \"secExempt\" attribute in the IEEE Std 802.15.4 security configuration tables. It is expected that the lower layer provides an interface to indicate to the upper layer that unsecured frames are being received from a device. The upper layer can use that information to determine that a join process is in place and that the unsecured frames should be processed. How the JP makes such a determination and interacts with the lower layer is out of scope of this specification. The JP can additionally use information such as the value of the join rate parameter (Section 8.4.2) set by the JRC, physical button press, etc.¶ When the pledge initially synchronizes with the network, it has no means of verifying the authenticity of EB frames. Because an attacker can craft a frame that looks like a legitimate EB frame, this opens up a DoS vector, as discussed in Section 9.¶ 5.1. Distribution of Time Nodes in a 6TiSCH network keep a global notion of time known as the Absolute Slot Number. The Absolute Slot Number is used in the construction of the link-layer nonce, as defined in [IEEE802.15.4]. The pledge initially synchronizes with the EB frame sent by the JP and uses the value of the Absolute Slot Number found in the TSCH Synchronization Information Element. At the time of the synchronization, the EB frame can neither be authenticated nor its freshness verified. During the join process, the pledge sends frames that are unprotected at the link-layer and protected end-to-end instead. The pledge does not obtain the time information as the output of the join process as this information is local to the network and may not be known at the JRC.¶ This enables an attack on the pledge where the attacker replays to the pledge legitimate EB frames obtained from the network and acts as a man-in-the-middle between the pledge and the JP. The EB frames will make the pledge believe that the replayed Absolute Slot Number value is the current notion of time in the network. By forwarding the join traffic to the legitimate JP, the attacker enables the pledge to join the network. Under different conditions relating to the reuse of the pledge's short address by the JRC or its attempt to rejoin the network, this may cause the pledge to reuse the link-layer nonce in the first frame it sends protected after the join process is completed.¶ For this reason, all frames originated at the JP and destined to the pledge during the join process MUST be authenticated at the link layer using the key that is normally in use in the network. Link-layer security processing at the pledge for these frames will fail as the pledge is not yet in possession of the key. The pledge acknowledges these frames without link-layer security, and JP accepts the unsecured acknowledgment due to the secExempt attribute set for the pledge. The frames should be passed to the upper layer for processing using the promiscuous mode of [IEEE802.15.4] or another appropriate mechanism. When the upper-layer processing on the pledge is completed, and the link-layer keys are configured, the upper layer MUST trigger the security processing of the corresponding frame. Once the security processing of the frame carrying the Join Response message is successful, the current Absolute Slot Number kept locally at the pledge SHALL be declared as valid.¶ 6. Network-Layer Configuration The pledge and the JP SHOULD keep a separate neighbor cache for untrusted entries and use it to store each other's information during the join process. Mixing neighbor entries belonging to pledges and nodes that are part of the network opens up the JP to a DoS attack, as the attacker may fill the JP's neighbor table and prevent the discovery of legitimate neighbors.¶ Once the pledge obtains link-layer keys and becomes a joined node, it is able to securely communicate with its neighbors, obtain the network IPv6 prefix, and form its global IPv6 address. The joined node then undergoes an independent process to bootstrap its neighbor cache entries, possibly with a node that formerly acted as a JP, following [RFC8505]. From the point of view of the JP, there is no relationship between the neighbor cache entry belonging to a pledge and the joined node that formerly acted as a pledge.¶ The pledge does not communicate with the JRC at the network layer. This allows the pledge to join without knowing the IPv6 address of the JRC. Instead, the pledge communicates with the JP at the network layer using link-local addressing, and with the JRC at the application layer, as specified in Section 7.¶ The JP communicates with the JRC over global IPv6 addresses. The JP discovers the network IPv6 prefix and configures its global IPv6 address upon successful completion of the join process and the obtention of link-layer keys. The pledge learns the IPv6 address of the JRC from the Join Response, as specified in Section 8.1.2; it uses it once joined in order to operate as a JP.¶ As a special case, the 6LBR pledge may have an additional network interface that it uses in order to obtain the configuration parameters from the JRC and to start advertising the 6TiSCH network. This additional interface needs to be configured with a global IPv6 address, by a mechanism that is out of scope of this document. The 6LBR pledge uses this interface to directly communicate with the JRC using global IPv6 addressing.¶ The JRC can be co-located on the 6LBR. In this special case, the IPv6 address of the JRC can be omitted from the Join Response message for space optimization. The 6LBR then MUST set the DODAGID field in the RPL DODAG Information Objects (DIOs) [RFC6550] to its IPv6 address. The pledge learns the address of the JRC once joined and upon the reception of the first RPL DIO message, and uses it to operate as a JP.¶ 6.1. Identification of Unauthenticated Traffic The traffic that is proxied by the JP comes from unauthenticated pledges, and there may be an arbitrary amount of it. In particular, an attacker may send fraudulent traffic in an attempt to overwhelm the network.¶ When operating as part of a 6TiSCH minimal network [RFC8180] using distributed scheduling algorithms, the traffic from unauthenticated pledges may cause intermediate nodes to request additional bandwidth. An attacker could use this property to cause the network to overcommit bandwidth (and energy) to the join process.¶ The JP is aware of what traffic originates from unauthenticated pledges, and so can avoid allocating additional bandwidth itself. The JP implements a data cap on outgoing join traffic by implementing the recommendation of 1 packet per 3 seconds in Section 3.1.3 of [RFC8085]. This can be achieved with the congestion control mechanism specified in Section 4.7 of [RFC7252]. This cap will not protect intermediate nodes as they cannot tell join traffic from regular traffic. Despite the data cap implemented separately on each JP, the aggregate join traffic from many JPs may cause intermediate nodes to decide to allocate additional cells. It is undesirable to do so in response to the traffic originated from unauthenticated pledges. In order to permit the intermediate nodes to avoid this, the traffic needs to be tagged. [RFC2597] defines a set of per-hop behaviors that may be encoded into the Diffserv Code Points (DSCPs). Based on the DSCP, intermediate nodes can decide whether to act on a given packet.¶ 6.1.1. Traffic from JP to JRC The JP SHOULD set the DSCP of packets that it produces as part of the forwarding process to AF43 code point (See Section 6 of [RFC2597]). A JP that does not require a specific DSCP value on forwarded traffic should set it to zero so that it is compressed out.¶ A Scheduling Function (SF) running on 6TiSCH nodes SHOULD NOT allocate additional cells as a result of traffic with code point AF43. Companion SF documents SHOULD specify how this recommended behavior is achieved.¶ 6.1.2. Traffic from JRC to JP The JRC SHOULD set the DSCP of Join Response packets addressed to the JP to the AF42 code point. AF42 has lower drop probability than AF43, giving this traffic priority in buffers over the traffic going towards the JRC.¶ The 6LBR links are often the most congested within a DODAG, and from that point down, there is progressively less (or equal) congestion. If the 6LBR paces itself when sending Join Response traffic, then it ought to never exceed the bandwidth allocated to the best effort traffic cells. If the 6LBR has the capacity (if it is not constrained), then it should provide some buffers in order to satisfy the Assured Forwarding behavior.¶ Companion SF documents SHOULD specify how traffic with code point AF42 is handled with respect to cell allocation. If the recommended behavior described in this section is not followed, the network may become prone to the attack discussed in Section 6.1.¶ 7. Application-Layer Configuration The CoJP join exchange in Figure 1 is carried over CoAP [RFC7252] and the secure channel provided by OSCORE [RFC8613]. The (6LBR) pledge acts as a CoAP client; the JRC acts as a CoAP server. The JP implements CoAP forward proxy functionality [RFC7252]. Because the JP can also be a constrained device, it cannot implement a cache.¶ The pledge designates a JP as a proxy by including the Proxy-Scheme option in the CoAP requests that it sends to the JP. The pledge also includes in the requests the Uri-Host option with its value set to the well-known JRC's alias, as specified in Section 8.1.1.¶ The JP resolves the alias to the IPv6 address of the JRC that it learned when it acted as a pledge and joined the network. This allows the JP to reach the JRC at the network layer and forward the requests on behalf of the pledge.¶ 7.1. Statelessness of the JP The CoAP proxy defined in [RFC7252] keeps per-client state information in order to forward the response towards the originator of the request. This state information includes at least the CoAP token, the IPv6 address of the client, and the UDP source port number. Since the JP can be a constrained device that acts as a CoAP proxy, memory limitations make it prone to a DoS attack.¶ This DoS vector on the JP can be mitigated by making the JP act as a stateless CoAP proxy, where \"state\" encompasses the information related to individual pledges. The JP can wrap the state it needs to keep for a given pledge throughout the network stack in a \"state object\" and include it as a CoAP token in the forwarded request to the JRC. The JP may use the CoAP token as defined in [RFC7252], if the size of the serialized state object permits, or use the extended CoAP token defined in [RFC8974] to transport the state object. The JRC and any other potential proxy on the JP-JRC path MUST support extended token lengths, as defined in [RFC8974]. Since the CoAP token is echoed back in the response, the JP is able to decode the state object and configure the state needed to forward the response to the pledge. The information that the JP needs to encode in the state object to operate in a fully stateless manner with respect to a given pledge is implementation specific.¶ It is RECOMMENDED that the JP operates in a stateless manner and signals the per-pledge state within the CoAP token for every request that it forwards into the network on behalf of unauthenticated pledges. When the JP is operating in a stateless manner, the security considerations from [RFC8974] apply, and the type of the CoAP message that the JP forwards on behalf of the pledge MUST be non-confirmable (NON), regardless of the message type received from the pledge. The use of a non-confirmable message by the JP alleviates the JP from keeping CoAP message exchange state. The retransmission burden is then entirely shifted to the pledge. A JP that operates in a stateless manner still needs to keep congestion control state with the JRC, see Section 9. Recommended values of CoAP settings for use during the join process, both by the pledge and the JP, are given in Section 7.2.¶ Note that in some networking stack implementations, a fully (per-pledge) stateless operation of the JP may be challenging from the implementation's point of view. In those cases, the JP may operate as a stateful proxy that stores the per-pledge state until the response is received or timed out, but this comes at a price of a DoS vector.¶ 7.2. Recommended Settings This section gives RECOMMENDED values of CoAP settings during the join process.¶ Table 1: Recommended CoAP settings. Name Default Value ACK_TIMEOUT 10 seconds ACK_RANDOM_FACTOR 1.5 MAX_RETRANSMIT 4 NSTART 1 DEFAULT_LEISURE 5 seconds PROBING_RATE 1 byte/second These values may be configured to values specific to the deployment. The default values have been chosen to accommodate a wide range of deployments, taking into account dense networks.¶ The PROBING_RATE value at the JP is controlled by the join rate parameter, see Section 8.4.2. Following [RFC7252], the average data rate in sending to the JRC must not exceed PROBING_RATE. For security reasons, the average data rate SHOULD be measured over a rather short window, e.g., ACK_TIMEOUT, see Section 9.¶ 7.3. OSCORE Before the (6LBR) pledge and the JRC start exchanging CoAP messages protected with OSCORE, they need to derive the OSCORE security context from the provisioned parameters, as discussed in Section 3.¶ The OSCORE security context MUST be derived per Section 3 of [RFC8613].¶ The Master Secret MUST be the PSK.¶ The Master Salt MUST be the empty byte string.¶ The ID Context MUST be set to the pledge identifier.¶ The ID of the pledge MUST be set to the empty byte string. This identifier is used as the OSCORE Sender ID of the pledge in the security context derivation, since the pledge initially acts as a CoAP client.¶ The ID of the JRC MUST be set to the byte string 0x4a5243 (\"JRC\" in ASCII). This identifier is used as the OSCORE Recipient ID of the pledge in the security context derivation, as the JRC initially acts as a CoAP server.¶ The Algorithm MUST be set to the value from [RFC8152], agreed to out-of-band by the same mechanism used to provision the PSK. The default is AES-CCM-16-64-128.¶ The key derivation function MUST be agreed out-of-band by the same mechanism used to provision the PSK. Default is HKDF SHA-256 [RFC5869].¶ Since the pledge's OSCORE Sender ID is the empty byte string, when constructing the OSCORE option, the pledge sets the 'kid' flag in the OSCORE flag bits but indicates a 0-length 'kid'. The pledge transports its pledge identifier within the 'kid context' field of the OSCORE option. The derivation in [RFC8613] results in OSCORE keys and a Common Initialization Vector (IV) for each side of the conversation. Nonces are constructed by XORing the Common IV with the current sequence number. For details on nonce and OSCORE option construction, refer to [RFC8613].¶ Implementations MUST ensure that multiple CoAP requests, including to different JRCs, are properly incrementing the sequence numbers, so that the same sequence number is never reused in distinct requests protected under the same PSK. The pledge typically sends requests to different JRCs if it is not provisioned with the network identifier and attempts to join one network at a time. Failure to comply will break the security guarantees of the Authenticated Encryption with Associated Data (AEAD) algorithm because of nonce reuse.¶ This OSCORE security context is used for the initial joining of the (6LBR) pledge, where the (6LBR) pledge acts as a CoAP client, as well as for any later parameter updates, where the JRC acts as a CoAP client and the joined node as a CoAP server, as discussed in Section 8.2. Note that when the (6LBR) pledge and the JRC change roles between CoAP client and CoAP server, the same OSCORE security context as initially derived remains in use, and the derived parameters are unchanged, for example, Sender ID when sending and Recipient ID when receiving (see Section 3.1 of [RFC8613]). A (6LBR) pledge is expected to have exactly one OSCORE security context with the JRC.¶ 7.3.1. Replay Window and Persistency Both the (6LBR) pledge and the JRC MUST implement a replay-protection mechanism. The use of the default OSCORE replay-protection mechanism specified in Section 3.2.2 of [RFC8613] is RECOMMENDED.¶ Implementations MUST ensure that mutable OSCORE context parameters (Sender Sequence Number, Replay Window) are stored in persistent memory. A technique detailed in Appendix B.1.1 of [RFC8613] that prevents reuse of sequence numbers MUST be implemented. Each update of the OSCORE Replay Window MUST be written to persistent memory.¶ This is an important security requirement in order to guarantee nonce uniqueness and resistance to replay attacks across reboots and rejoins. Traffic between the (6LBR) pledge and the JRC is rare, making security outweigh the cost of writing to persistent memory.¶ 7.3.2. OSCORE Error Handling Errors raised by OSCORE during the join process MUST be silently dropped, with no error response being signaled. The pledge MUST silently discard any response not protected with OSCORE, including error codes.¶ Such errors may happen for a number of reasons, including failed lookup of an appropriate security context (e.g., the pledge attempting to join a wrong network), failed decryption, positive Replay Window lookup, formatting errors (possibly due to malicious alterations in transit). Silently dropping OSCORE messages prevents a DoS attack on the pledge where the attacker could send bogus error responses, forcing the pledge to attempt joining one network at a time, until all networks have been tried.¶ 7.3.3. Mandatory-to-Implement Algorithms The mandatory-to-implement AEAD algorithm for use with OSCORE is AES-CCM-16-64-128 from [RFC8152]. This is the algorithm used for securing IEEE Std 802.15.4 frames, and hardware acceleration for it is present in virtually all compliant radio chips. With this choice, CoAP messages are protected with an 8-byte CCM authentication tag, and the algorithm uses 13-byte long nonces.¶ The mandatory-to-implement hash algorithm is SHA-256 [RFC4231]. The mandatory-to-implement key derivation function is HKDF [RFC5869], instantiated with a SHA-256 hash. See Appendix B for implementation guidance when code footprint is important.¶ 8. Constrained Join Protocol (CoJP) The Constrained Join Protocol (CoJP) is a lightweight protocol over CoAP [RFC7252] and a secure channel provided by OSCORE [RFC8613]. CoJP allows a (6LBR) pledge to request admission into a network managed by the JRC. It enables the JRC to configure the pledge with the necessary parameters. The JRC may update the parameters at any time, by reaching out to the joined node that formerly acted as a (6LBR) pledge. For example, network-wide rekeying can be implemented by updating the keying material on each node.¶ CoJP relies on the security properties provided by OSCORE. This includes end-to-end confidentiality, data authenticity, replay protection, and a secure binding of responses to requests.¶ +-----------------------------------+ | Constrained Join Protocol (CoJP) | +-----------------------------------+ +-----------------------------------+ \\ | Requests / Responses | | |-----------------------------------| | | OSCORE | | CoAP |-----------------------------------| | | Messaging Layer | | +-----------------------------------+ / +-----------------------------------+ | UDP | +-----------------------------------+ Figure 2: Abstract layering of CoJP. When a (6LBR) pledge requests admission to a given network, it undergoes the CoJP join exchange that consists of:¶ The Join Request message, sent by the (6LBR) pledge to the JRC, potentially proxied by the JP. The Join Request message and its mapping to CoAP is specified in Section 8.1.1.¶ The Join Response message, sent by the JRC to the (6LBR) pledge, if the JRC successfully processes the Join Request using OSCORE and it determines through a mechanism that is out of scope of this specification that the (6LBR) pledge is authorized to join the network. The Join Response message is potentially proxied by the JP. The Join Response message and its mapping to CoAP is specified in Section 8.1.2.¶ When the JRC needs to update the parameters of a joined node that formerly acted as a (6LBR) pledge, it executes the CoJP parameter update exchange that consists of the following:¶ The Parameter Update message, sent by the JRC to the joined node that formerly acted as a (6LBR) pledge. The Parameter Update message and its mapping to CoAP is specified in Section 8.2.1.¶ The payload of CoJP messages is encoded with CBOR [RFC8949]. The CBOR data structures that may appear as the payload of different CoJP messages are specified in Section 8.4.¶ 8.1. Join Exchange This section specifies the messages exchanged when the (6LBR) pledge requests admission and configuration parameters from the JRC.¶ 8.1.1. Join Request Message The Join Request message that the (6LBR) pledge sends SHALL be mapped to a CoAP request:¶ The request method is POST.¶ The type is Confirmable (CON).¶ The Proxy-Scheme option is set to \"coap\".¶ The Uri-Host option is set to \"6tisch.arpa\". This is an anycast type of identifier of the JRC that is resolved to its IPv6 address by the JP or the 6LBR pledge.¶ The Uri-Path option is set to \"j\".¶ The OSCORE option SHALL be set according to [RFC8613]. The OSCORE security context used is the one derived in Section 7.3. The OSCORE 'kid context' allows the JRC to retrieve the security context for a given pledge.¶ The payload is a Join_Request CBOR object, as defined in Section 8.4.1.¶ Since the Join Request is a confirmable message, the transmission at (6LBR) pledge will be controlled by CoAP's retransmission mechanism. The JP, when operating in a stateless manner, forwards this Join Request as a non-confirmable (NON) CoAP message, as specified in Section 7. If the CoAP implementation at the (6LBR) pledge declares the message transmission a failure, the (6LBR) pledge SHOULD attempt to join a 6TiSCH network advertised with a different network identifier. See Section 7.2 for recommended values of CoAP settings to use during the join exchange.¶ If all join attempts to advertised networks have failed, the (6LBR) pledge SHOULD signal the presence of an error condition, through some out-of-band mechanism.¶ BCP 190 [RFC8820] provides guidelines on URI design and ownership. It recommends that whenever a third party wants to mandate a URI to web authority that it SHOULD go under \"/.well-known\" (per [RFC8615]). In the case of CoJP, the Uri-Host option is always set to \"6tisch.arpa\", and based upon the recommendations in Section 1 of [RFC8820], it is asserted that this document is the owner of the CoJP service. As such, the concerns of [RFC8820] do not apply, and thus the Uri-Path is only \"j\".¶ 8.1.2. Join Response Message The Join Response message that the JRC sends SHALL be mapped to a CoAP response:¶ The Response Code is 2.04 (Changed).¶ The payload is a Configuration CBOR object, as defined in Section 8.4.2.¶ 8.2. Parameter Update Exchange During the network lifetime, parameters returned as part of the Join Response may need to be updated. One typical example is the update of link-layer keying material for the network, a process known as rekeying. This section specifies a generic mechanism when this parameter update is initiated by the JRC.¶ At the time of the join, the (6LBR) pledge acts as a CoAP client and requests the network parameters through a representation of the \"/j\" resource exposed by the JRC. In order for the update of these parameters to happen, the JRC needs to asynchronously contact the joined node. The use of the CoAP Observe option for this purpose is not feasible due to the change in the IPv6 address when the pledge becomes the joined node and obtains a global address.¶ Instead, once the (6LBR) pledge receives and successfully validates the Join Response and so becomes a joined node, it becomes a CoAP server. The joined node creates a CoAP service at the Uri-Host value of \"6tisch.arpa\", and the joined node exposes the \"/j\" resource that is used by the JRC to update the parameters. Consequently, the JRC operates as a CoAP client when updating the parameters. The request/response exchange between the JRC and the (6LBR) pledge happens over the already-established OSCORE secure channel.¶ 8.2.1. Parameter Update Message The Parameter Update message that the JRC sends to the joined node SHALL be mapped to a CoAP request:¶ The request method is POST.¶ The type is Confirmable (CON).¶ The Uri-Host option is set to \"6tisch.arpa\".¶ The Uri-Path option is set to \"j\".¶ The OSCORE option SHALL be set according to [RFC8613]. The OSCORE security context used is the one derived in Section 7.3. When a joined node receives a request with the Sender ID set to 0x4a5243 (ID of the JRC), it is able to correctly retrieve the security context with the JRC.¶ The payload is a Configuration CBOR object, as defined in Section 8.4.2.¶ The JRC has implicit knowledge of the global IPv6 address of the joined node, as it knows the pledge identifier that the joined node used when it acted as a pledge and the IPv6 network prefix. The JRC uses this implicitly derived IPv6 address of the joined node to directly address CoAP messages to it.¶ If the JRC does not receive a response to a Parameter Update message, it attempts multiple retransmissions as configured by the underlying CoAP retransmission mechanism triggered for confirmable messages. Finally, if the CoAP implementation declares the transmission a failure, the JRC may consider this as a hint that the joined node is no longer in the network. How the JRC decides when to stop attempting to contact a previously joined node is out of scope of this specification, but the security considerations on the reuse of assigned resources apply, as discussed in Section 9.¶ 8.3. Error Handling 8.3.1. CoJP CBOR Object Processing CoJP CBOR objects are transported within both CoAP requests and responses. This section describes handling the cases in which certain CoJP CBOR object parameters are not supported by the implementation or their processing fails. See Section 7.3.2 for the handling of errors that may be raised by the underlying OSCORE implementation.¶ When such a parameter is detected in a CoAP request (Join Request message, Parameter Update message), a Diagnostic Response message MUST be returned. A Diagnostic Response message maps to a CoAP response and is specified in Section 8.3.2.¶ When a parameter that cannot be acted upon is encountered while processing a CoJP object in a CoAP response (Join Response message), a (6LBR) pledge SHOULD reattempt to join. In this case, the (6LBR) pledge SHOULD include the Unsupported Configuration CBOR object within the Join Request object in the following Join Request message. The Unsupported Configuration CBOR object is self-contained and enables the (6LBR) pledge to signal any parameters that the implementation of the networking stack may not support. A (6LBR) pledge MUST NOT attempt more than COJP_MAX_JOIN_ATTEMPTS number of attempts to join if the processing of the Join Response message fails each time. If the COJP_MAX_JOIN_ATTEMPTS number of attempts is reached without success, the (6LBR) pledge SHOULD signal the presence of an error condition through some out-of-band mechanism.¶ Note that COJP_MAX_JOIN_ATTEMPTS relates to the application-layer handling of the CoAP response and is different from CoAP's MAX_RETRANSMIT setting, which drives the retransmission mechanism of the underlying CoAP message.¶ 8.3.2. Diagnostic Response Message The Diagnostic Response message is returned for any CoJP request when the processing of the payload failed. The Diagnostic Response message is protected by OSCORE as any other CoJP message.¶ The Diagnostic Response message SHALL be mapped to a CoAP response:¶ The Response Code is 4.00 (Bad Request).¶ The payload is an Unsupported Configuration CBOR object, as defined in Section 8.4.5, containing more information about the parameter that triggered the sending of this message.¶ 8.3.3. Failure Handling The parameter update exchange may be triggered at any time during the network lifetime, which may span several years. During this period, a joined node or the JRC may experience unexpected events such as reboots or complete failures.¶ This document mandates that the mutable parameters in the security context are written to persistent memory (see Section 7.3.1) by both the JRC and pledges (joined nodes). As the pledge (joined node) is typically a constrained device that handles the write operations to persistent memory in a predictable manner, the retrieval of mutable security-context parameters is feasible across reboots such that there is no risk of AEAD nonce reuse due to reinitialized Sender Sequence Numbers or of a replay attack due to the reinitialized Replay Window. The JRC may be hosted on a generic machine where the write operation to persistent memory may lead to unpredictable delays due to caching. If a reboot event occurs at the JRC before the cached data is written to persistent memory, the loss of mutable security-context parameters is likely, which consequently poses the risk of AEAD nonce reuse.¶ In the event of a complete device failure, where the mutable security-context parameters cannot be retrieved, it is expected that a failed joined node will be replaced with a new physical device, using a new pledge identifier and a PSK. When such a failure event occurs at the JRC, it is possible that the static information on provisioned pledges, like PSKs and pledge identifiers, can be retrieved through available backups. However, it is likely that the information about joined nodes, their assigned short identifiers and mutable security-context parameters, is lost. If this is the case, the network administrator MUST force all the networks managed by the failed JRC to rejoin through out-of-band means during the process of JRC reinitialization, e.g., reinitialize the 6LBR nodes and freshly generate dynamic cryptographic keys and other parameters that influence the security properties of the network.¶ In order to recover from such a failure event, the reinitialized JRC can trigger the renegotiation of the OSCORE security context through the procedure described in Appendix B.2 of [RFC8613]. Aware of the failure event, the reinitialized JRC responds to the first Join Request of each pledge it is managing with a 4.01 (Unauthorized) error and a random nonce. The pledge verifies the error response and then initiates the CoJP join exchange using a new OSCORE security context derived from an ID Context consisting of the concatenation of two nonces, one that it received from the JRC and the other that the pledge generates locally. After verifying the Join Request with the new ID Context and the derived OSCORE security context, the JRC should consequently map the new ID Context to the previously used pledge identifier. How the JRC handles this mapping is out of scope of this document.¶ The use of the procedure specified in Appendix B.2 of [RFC8613] is RECOMMENDED in order to handle the failure events or any other event that may lead to the loss of mutable security-context parameters. The length of nonces exchanged using this procedure MUST be at least 8 bytes.¶ The procedure requires both the pledge and the JRC to have good sources of randomness. While this is typically not an issue at the JRC side, the constrained device hosting the pledge may pose limitations in this regard. If the procedure outlined in Appendix B.2 of [RFC8613] is not supported by the pledge, the network administrator MUST reprovision the concerned devices with freshly generated parameters through out-of-band means.¶ 8.4. CoJP Objects This section specifies the structure of CoJP CBOR objects that may be carried as the payload of CoJP messages. Some of these objects may be received both as part of the CoJP join exchange when the device operates as a (CoJP) pledge or as part of the parameter update exchange when the device operates as a joined (6LBR) node.¶ 8.4.1. Join Request Object The Join_Request structure is built on a CBOR map object.¶ The set of parameters that can appear in a Join_Request object is summarized below. The labels can be found in the \"Constrained Join Protocol (CoJP) Parameters\" registry, Section 11.1.¶ role: The identifier of the role that the pledge requests to play in the network once it joins, encoded as an unsigned integer. Possible values are specified in Table 3. This parameter MAY be included. If the parameter is omitted, the default value of 0, i.e., the role \"6TiSCH Node\", MUST be assumed.¶ network identifier: The identifier of the network, as discussed in Section 3, encoded as a CBOR byte string. When present in the Join_Request, it hints to the JRC which network the pledge is requesting to join, enabling the JRC to manage multiple networks. The pledge obtains the value of the network identifier from the received EB frames. This parameter MUST be included in a Join_Request object regardless of the role parameter value.¶ unsupported configuration: The identifier of the parameters that are not supported by the implementation, encoded as an Unsupported_Configuration object described in Section 8.4.5. This parameter MAY be included. If a (6LBR) pledge previously attempted to join and received a valid Join Response message over OSCORE but failed to act on its payload (Configuration object), it SHOULD include this parameter to facilitate the recovery and debugging.¶ Table 2 summarizes the parameters that may appear in a Join_Request object.¶ Table 2: Summary of Join_Request parameters. Name Label CBOR Type role 1 unsigned integer network identifier 5 byte string unsupported configuration 8 array The CDDL fragment that represents the text above for the Join_Request follows:¶ Join_Request = { ? 1 : uint, ; role 5 : bstr, ; network identifier ? 8 : Unsupported_Configuration ; unsupported configuration } ¶ Table 3: Role values. Name Value Description Reference 6TiSCH Node 0 The pledge requests to play the role of a regular 6TiSCH node, i.e., non-6LBR node. RFC 9031 6LBR 1 The pledge requests to play the role of 6LoWPAN Border Router (6LBR). RFC 9031 8.4.2. Configuration Object The Configuration structure is built on a CBOR map object. The set of parameters that can appear in a Configuration object is summarized below. The labels can be found in \"Constrained Join Protocol (CoJP) Parameters\" registry, Section 11.1.¶ link-layer key set: An array encompassing a set of cryptographic keys and their identifiers that are currently in use in the network or that are scheduled to be used in the future. The encoding of individual keys is described in Section 8.4.3. The link-layer key set parameter MAY be included in a Configuration object. When present, the link-layer key set parameter MUST contain at least one key. This parameter is also used to implement rekeying in the network. The installation and use of keys differs for the 6LBR and other (regular) nodes, and this is explained in Sections 8.4.3.1 and 8.4.3.2.¶ short identifier: A compact identifier assigned to the pledge. The short identifier structure is described in Section 8.4.4. The short identifier parameter MAY be included in a Configuration object.¶ JRC address: The IPv6 address of the JRC, encoded as a byte string, with the length of 16 bytes. If the length of the byte string is different from 16, the parameter MUST be discarded. If the JRC is not co-located with the 6LBR and has a different IPv6 address than the 6LBR, this parameter MUST be included. In the special case where the JRC is co-located with the 6LBR and has the same IPv6 address as the 6LBR, this parameter MAY be included. If the JRC address parameter is not present in the Configuration object, this indicates that the JRC has the same IPv6 address as the 6LBR. The joined node can then discover the IPv6 address of the JRC through network control traffic. See Section 6.¶ blacklist: An array encompassing a list of pledge identifiers that are blacklisted by the JRC, with each pledge identifier encoded as a byte string. The blacklist parameter MAY be included in a Configuration object. When present, the array MUST contain zero or more byte strings encoding pledge identifiers. The joined node MUST silently drop any link-layer frames originating from the pledge identifiers enclosed in the blacklist parameter. When this parameter is received, its value MUST overwrite any previously set values. This parameter allows the JRC to configure the node acting as a JP to filter out traffic from misconfigured or malicious pledges before their traffic is forwarded into the network. If the JRC decides to remove a given pledge identifier from a blacklist, it omits the pledge identifier in the blacklist parameter value it sends next. Since the blacklist parameter carries the pledge identifiers, privacy considerations apply. See Section 10.¶ join rate: The average data rate (in units of bytes/second) of join traffic forwarded into the network that should not be exceeded when a joined node operates as a JP, encoded as an unsigned integer. The join rate parameter MAY be included in a Configuration object. This parameter allows the JRC to configure different nodes in the network to operate as JP and to act in case of an attack by throttling the rate at which JP forwards unauthenticated traffic into the network. When this parameter is present in a Configuration object, the value MUST be used to set the PROBING_RATE of CoAP at the joined node for communication with the JRC. If this parameter is set to zero, a joined node MUST silently drop any join traffic coming from unauthenticated pledges. If this parameter is omitted, the value of positive infinity SHOULD be assumed. A node operating as a JP MAY use another mechanism that is out of scope of this specification to configure the PROBING_RATE of CoAP in the absence of a join rate parameter from the Configuration object.¶ Table 4 summarizes the parameters that may appear in a Configuration object.¶ Table 4: Summary of Configuration parameters. Name Label CBOR Type link-layer key set 2 array short identifier 3 array JRC address 4 byte string blacklist 6 array join rate 7 unsigned integer The CDDL fragment that represents the text above for the Configuration follows. The structures Link_Layer_Key and Short_Identifier are specified in Sections 8.4.3 and 8.4.4, respectively.¶ Configuration = { ? 2 : [ +Link_Layer_Key ], ; link-layer key set ? 3 : Short_Identifier, ; short identifier ? 4 : bstr, ; JRC address ? 6 : [ *bstr ], ; blacklist ? 7 : uint ; join rate } ¶ Table 5: CoJP parameters map labels. Name Label CBOR type Description Reference role 1 unsigned integer Identifies the role parameter RFC 9031 link-layer key set 2 array Identifies the array carrying one or more link-layer cryptographic keys RFC 9031 short identifier 3 array Identifies the assigned short identifier RFC 9031 JRC address 4 byte string Identifies the IPv6 address of the JRC RFC 9031 network identifier 5 byte string Identifies the network identifier parameter RFC 9031 blacklist 6 array Identifies the blacklist parameter RFC 9031 join rate 7 unsigned integer Identifier the join rate parameter RFC 9031 unsupported configuration 8 array Identifies the unsupported configuration parameter RFC 9031 8.4.3. Link-Layer Key The Link_Layer_Key structure encompasses the parameters needed to configure the link-layer security module: the key identifier; the value of the cryptographic key; the link-layer algorithm identifier and the security level and the frame types with which it should be used for both outgoing and incoming security operations; and any additional information that may be needed to configure the key.¶ For encoding compactness, the Link_Layer_Key object is not enclosed in a top-level CBOR object. Rather, it is transported as a sequence of CBOR elements [RFC8742], some being optional.¶ The set of parameters that can appear in a Link_Layer_Key object is summarized below, in order:¶ key_id: The identifier of the key, encoded as a CBOR unsigned integer. This parameter MUST be included. If the decoded CBOR unsigned integer value is larger than the maximum link-layer key identifier, the key is considered invalid. If the key is considered invalid, the key MUST be discarded, and the implementation MUST signal the error as specified in Section 8.3.1.¶ key_usage: The identifier of the link-layer algorithm, security level, and link-layer frame types that can be used with the key, encoded as an integer. This parameter MAY be included. Possible values and the corresponding link-layer settings are specified in the IANA \"Constrained Join Protocol (CoJP) Key Usage\" registry (Section 11.2). If the parameter is omitted, the default value of 0 (6TiSCH-K1K2-ENC-MIC32) from Table 6 MUST be assumed. This default value has been chosen because it results in byte savings in the most constrained settings; its selection does not imply a recommendation for its general usage.¶ key_value: The value of the cryptographic key, encoded as a byte string. This parameter MUST be included. If the length of the byte string is different than the corresponding key length for a given algorithm specified by the key_usage parameter, the key MUST be discarded, and the implementation MUST signal the error as specified in Section 8.3.1.¶ key_addinfo: Additional information needed to configure the link-layer key, encoded as a byte string. This parameter MAY be included. The processing of this parameter is dependent on the link-layer technology in use and a particular keying mode.¶ To be able to decode the keys that are present in the link-layer key set and to identify individual parameters of a single Link_Layer_Key object, the CBOR decoder needs to differentiate between elements based on the CBOR type. For example, a uint that follows a byte string signals to the decoder that a new Link_Layer_Key object is being processed.¶ The CDDL fragment for the Link_Layer_Key that represents the text above follows:¶ Link_Layer_Key = ( key_id : uint, ? key_usage : int, key_value : bstr, ? key_addinfo : bstr, ) ¶ Table 6: Key Usage values. Name Value Algorithm Description 6TiSCH-K1K2-ENC-MIC32 0 IEEE802154-AES-CCM-128 Use MIC-32 for EBs, ENC-MIC-32 for DATA and ACKNOWLEDGMENT. 6TiSCH-K1K2-ENC-MIC64 1 IEEE802154-AES-CCM-128 Use MIC-64 for EBs, ENC-MIC-64 for DATA and ACKNOWLEDGMENT. 6TiSCH-K1K2-ENC-MIC128 2 IEEE802154-AES-CCM-128 Use MIC-128 for EBs, ENC-MIC-128 for DATA and ACKNOWLEDGMENT. 6TiSCH-K1K2-MIC32 3 IEEE802154-AES-CCM-128 Use MIC-32 for EBs, DATA and ACKNOWLEDGMENT. 6TiSCH-K1K2-MIC64 4 IEEE802154-AES-CCM-128 Use MIC-64 for EBs, DATA and ACKNOWLEDGMENT. 6TiSCH-K1K2-MIC128 5 IEEE802154-AES-CCM-128 Use MIC-128 for EBs, DATA and ACKNOWLEDGMENT. 6TiSCH-K1-MIC32 6 IEEE802154-AES-CCM-128 Use MIC-32 for EBs. 6TiSCH-K1-MIC64 7 IEEE802154-AES-CCM-128 Use MIC-64 for EBs. 6TiSCH-K1-MIC128 8 IEEE802154-AES-CCM-128 Use MIC-128 for EBs. 6TiSCH-K2-MIC32 9 IEEE802154-AES-CCM-128 Use MIC-32 for DATA and ACKNOWLEDGMENT. 6TiSCH-K2-MIC64 10 IEEE802154-AES-CCM-128 Use MIC-64 for DATA and ACKNOWLEDGMENT. 6TiSCH-K2-MIC128 11 IEEE802154-AES-CCM-128 Use MIC-128 for DATA and ACKNOWLEDGMENT. 6TiSCH-K2-ENC-MIC32 12 IEEE802154-AES-CCM-128 Use ENC-MIC-32 for DATA and ACKNOWLEDGMENT. 6TiSCH-K2-ENC-MIC64 13 IEEE802154-AES-CCM-128 Use ENC-MIC-64 for DATA and ACKNOWLEDGMENT. 6TiSCH-K2-ENC-MIC128 14 IEEE802154-AES-CCM-128 Use ENC-MIC-128 for DATA and ACKNOWLEDGMENT. 8.4.3.1. Rekeying of 6LBRs When the 6LBR receives the Configuration object containing a link-layer key set, it MUST immediately install and start using the new keys for all outgoing traffic and remove any old keys it has installed from the previous key set after a delay of COJP_REKEYING_GUARD_TIME has passed. This mechanism is used by the JRC to force the 6LBR to start sending traffic with the new key. The decision is made by the JRC when it has determined that the new key has been made available to all (or some overwhelming majority) of nodes. Any node that the JRC has not yet reached at that point is either nonfunctional or in extended sleep such that it will not be reached. To get the key update, such a node will need to go through the join process anew.¶ 8.4.3.2. Rekeying of 6LNs When a regular 6LN receives the Configuration object with a link-layer key set, it MUST install the new keys. The 6LN will use both the old and the new keys to decrypt and authenticate any incoming traffic that arrives based upon the key identifier in the packet. It MUST continue to use the old keys for all outgoing traffic until it has detected that the network has switched to the new key set.¶ The detection of the network switch is based upon the receipt of traffic secured with the new keys. Upon the reception and the successful security processing of a link-layer frame secured with a key from the new key set, a 6LN MUST then switch to sending all outgoing traffic using the keys from the new set. The 6LN MUST remove any keys it had installed from the previous key set after waiting COJP_REKEYING_GUARD_TIME since it started using the new key set.¶ Sending traffic with the new keys signals to other downstream nodes to switch to their new key, causing a ripple of key updates around each 6LBR.¶ 8.4.3.3. Use in IEEE Std 802.15.4 When Link_Layer_Key is used in the context of [IEEE802.15.4], the following considerations apply.¶ Signaling of different keying modes of [IEEE802.15.4] is done based on the parameter values present in a Link_Layer_Key object. For instance, the value of the key_id parameter in combination with key_addinfo denotes which of the four Key ID modes of [IEEE802.15.4] is used and how.¶ Key ID Mode 0x00 (Implicit, pairwise): The key_id parameter MUST be set to 0. The key_addinfo parameter MUST be present. The key_addinfo parameter MUST be set to the link-layer address(es) of a single peer with whom the key should be used. Depending on the configuration of the network, key_addinfo may carry the peer's long link-layer address (i.e., pledge identifier), short link-layer address, or their concatenation with the long address being encoded first. Which address type(s) is carried is determined from the length of the byte string.¶ Key ID Mode 0x01 (Key Index): The key_id parameter MUST be set to a value different from 0. The key_addinfo parameter MUST NOT be present.¶ Key ID Mode 0x02 (4-byte Explicit Key Source): The key_id parameter MUST be set to a value different from 0. The key_addinfo parameter MUST be present. The key_addinfo parameter MUST be set to a byte string, exactly 4 bytes long. The key_addinfo parameter carries the Key Source parameter used to configure [IEEE802.15.4].¶ Key ID Mode 0x03 (8-byte Explicit Key Source): The key_id parameter MUST be set to a value different from 0. The key_addinfo parameter MUST be present. The key_addinfo parameter MUST be set to a byte string, exactly 8 bytes long. The key_addinfo parameter carries the Key Source parameter used to configure [IEEE802.15.4].¶ In all cases, the key_usage parameter determines how a particular key should be used with respect to incoming and outgoing security policies.¶ For Key ID Modes 0x01 through 0x03, the key_id parameter sets the \"secKeyIndex\" parameter of [IEEE802.15.4] that is signaled in all outgoing frames secured with a given key. The maximum value that key_id can have is 254. The value of 255 is reserved in [IEEE802.15.4] and is therefore considered invalid.¶ Key ID Mode 0x00 (Implicit, pairwise) enables the JRC to act as a trusted third party and assign pairwise keys between nodes in the network. How the JRC learns about the network topology is out of scope of this specification, but it could be done through 6LBR-JRC signaling, for example. Pairwise keys could also be derived through a key agreement protocol executed between the peers directly, where the authentication is based on the symmetric cryptographic material provided to both peers by the JRC. Such a protocol is out of scope of this specification.¶ Implementations MUST use different link-layer keys when using different authentication tag (MIC) lengths, as using the same key with different authentication tag lengths might be unsafe. For example, this prohibits the usage of the same key for both MIC-32 and MIC-64 levels. See Annex B.4.3 of [IEEE802.15.4] for more information.¶ 8.4.4. Short Identifier The Short_Identifier object represents an identifier assigned to the pledge. It is encoded as a CBOR array object and contains, in order:¶ identifier: The short identifier assigned to the pledge, encoded as a byte string. This parameter MUST be included. The identifier MUST be unique in the set of all identifiers assigned in a network that is managed by a JRC. If the identifier is invalid, the decoder MUST silently ignore the Short_Identifier object.¶ lease_time: The validity of the identifier in hours after the reception of the CBOR object, encoded as a CBOR unsigned integer. This parameter MAY be included. The node MUST stop using the assigned short identifier after the expiry of the lease_time interval. It is up to the JRC to renew the lease before the expiry of the previous interval. The JRC updates the lease by executing the parameter update exchange with the node and including the Short_Identifier in the Configuration object, as described in Section 8.2. If the lease expires, then the node SHOULD initiate a new join exchange, as described in Section 8.1. If this parameter is omitted, then the value of positive infinity MUST be assumed, meaning that the identifier is valid for as long as the node participates in the network.¶ The CDDL fragment for the Short_Identifier that represents the text above follows:¶ Short_Identifier = [ identifier : bstr, ? lease_time : uint ] ¶ 8.4.4.1. Use in IEEE Std 802.15.4 When the Short_Identifier is used in the context of [IEEE802.15.4], the following considerations apply.¶ The identifier MUST be used to set the short address of the IEEE Std 802.15.4 module. When operating in TSCH mode, the identifier MUST be unique in the set of all identifiers assigned in multiple networks that share link-layer key(s). If the length of the byte string corresponding to the identifier parameter is different from 2, the identifier is considered invalid. The values 0xfffe and 0xffff are reserved by [IEEE802.15.4], and their use is considered invalid.¶ The security properties offered by the [IEEE802.15.4] link-layer in TSCH mode are conditioned on the uniqueness requirement of the short identifier (i.e., short address). The short address is one of the inputs in the construction of the nonce, which is used to protect link-layer frames. If a misconfiguration occurs, and the same short address is assigned twice under the same link-layer key, the loss of security properties is imminent. For this reason, practices where the pledge generates the short identifier locally are not safe and are likely to result in the loss of link-layer security properties.¶ The JRC MUST ensure that at any given time there are never two of the same short identifiers being used under the same link-layer key. If the lease_time parameter of a given Short_Identifier object is set to positive infinity, care needs to be taken that the corresponding identifier is not assigned to another node until the JRC is certain that it is no longer in use, potentially through out-of-band signaling. If the lease_time parameter expires for any reason, the JRC should take into consideration potential ongoing transmissions by the joined node, which may be hanging in the queues, before assigning the same identifier to another node.¶ Care needs to be taken on how the pledge (joined node) configures the expiration of the lease. Since units of the lease_time parameter are in hours after the reception of the CBOR object, the pledge needs to convert the received time to the corresponding Absolute Slot Number in the network. The joined node (pledge) MUST only use the Absolute Slot Number as the appropriate reference of time to determine whether the assigned short identifier is still valid.¶ 8.4.5. Unsupported Configuration Object The Unsupported_Configuration object is encoded as a CBOR array, containing at least one Unsupported_Parameter object. Each Unsupported_Parameter object is a sequence of CBOR elements without an enclosing top-level CBOR object for compactness. The set of parameters that appear in an Unsupported_Parameter object is summarized below, in order:¶ code: Indicates the capability of acting on the parameter signaled by parameter_label, encoded as an integer. This parameter MUST be included. Possible values of this parameter are specified in the IANA \"Constrained Join Protocol (CoJP) Unsupported Configuration Codes\" registry (Section 11.3).¶ parameter_label: Indicates the parameter. This parameter MUST be included. Possible values of this parameter are specified in the label column of the IANA \"Constrained Join Protocol (CoJP) Parameters\" registry\" (Section 11.1).¶ parameter_addinfo: Additional information about the parameter that cannot be acted upon. This parameter MUST be included. If the code is set to \"Unsupported\", parameter_addinfo gives additional information to the JRC. If the parameter indicated by parameter_label cannot be acted upon regardless of its value, parameter_addinfo MUST be set to null, signaling to the JRC that it SHOULD NOT attempt to configure the parameter again. If the pledge can act on the parameter, but cannot configure the setting indicated by the parameter value, the pledge can hint this to the JRC. In this case, parameter_addinfo MUST be set to the value of the parameter that cannot be acted upon following the normative parameter structure specified in this document. For example, it is possible to include the link-layer key set object, signaling that either a subset or the entire key set that was received cannot be acted upon. In that case, the value of parameter_addinfo follows the link-layer key set structure defined in Section 8.4.2. If the code is set to \"Malformed\", parameter_addinfo MUST be set to null, signaling to the JRC that it SHOULD NOT attempt to configure the parameter again.¶ The CDDL fragment for the Unsupported_Configuration and Unsupported_Parameter objects that represents the text above follows:¶ Unsupported_Configuration = [ + parameter : Unsupported_Parameter ] Unsupported_Parameter = ( code : int, parameter_label : int, parameter_addinfo : nil / any ) ¶ Table 7: Unsupported Configuration code values. Name Value Description Reference Unsupported 0 The indicated setting is not supported by the networking stack implementation. RFC 9031 Malformed 1 The indicated parameter value is malformed. RFC 9031 8.5. Recommended Settings This section gives RECOMMENDED values of CoJP settings.¶ Table 8: Recommended CoJP settings. Name Default Value COJP_MAX_JOIN_ATTEMPTS 4 COJP_REKEYING_GUARD_TIME 12 seconds The COJP_REKEYING_GUARD_TIME value SHOULD take into account possible retransmissions at the link layer due to imperfect wireless links.¶ 9. Security Considerations Since this document uses the pledge identifier to set the ID Context parameter of OSCORE, an important security requirement is that the pledge identifier is unique in the set of all pledge identifiers managed by a JRC. The uniqueness of the pledge identifier ensures unique (key, nonce) pairs for the AEAD algorithm used by OSCORE. It also allows the JRC to retrieve the correct security context upon the reception of a Join Request message. The management of pledge identifiers is simplified if the globally unique EUI-64 is used, but this comes with privacy risks, as discussed in Section 10.¶ This document further mandates that the (6LBR) pledge and the JRC are provisioned with unique PSKs. While the process of provisioning PSKs to all pledges can result in a substantial operational overhead, it is vital to do so for the security properties of the network. The PSK is used to set the OSCORE Master Secret during security context derivation. This derivation process results in OSCORE keys that are important for mutual authentication of the (6LBR) pledge and the JRC. The resulting security context shared between the pledge (joined node) and the JRC is used for the purpose of joining and is long-lived in that it can be used throughout the lifetime of a joined node for parameter update exchanges. Should an attacker come to know the PSK, then a man-in-the-middle attack is possible.¶ Note that while OSCORE provides replay protection, it does not provide an indication of freshness in the presence of an attacker that can drop and/or reorder traffic. Since the Join Request contains no randomness, and the sequence number is predictable, the JRC could in principle anticipate a Join Request from a particular pledge and pre-calculate the response. In such a scenario, the JRC does not have to be alive at the time the request is received. This could be relevant in the case when the JRC was temporarily compromised and control was subsequently regained by the legitimate owner.¶ It is of utmost importance to avoid unsafe practices when generating and provisioning PSKs. The use of a single PSK shared among a group of devices is a common pitfall that results in poor security. In this case, the compromise of a single device is likely to lead to a compromise of the entire batch, with the attacker having the ability to impersonate a legitimate device and join the network, generate bogus data, and disturb the network operation. Additionally, some vendors use methods such as scrambling or hashing device serial numbers or their EUI-64 identifiers to generate \"unique\" PSKs. Without any secret information involved, the effort that the attacker needs to invest into breaking these unsafe derivation methods is quite low, resulting in the possible impersonation of any device from the batch, without even needing to compromise a single device. The use of cryptographically secure random number generators to generate the PSK is RECOMMENDED, see [NIST800-90A] for different mechanisms using deterministic methods.¶ The JP forwards the unauthenticated join traffic into the network. A data cap on the JP prevents it from forwarding more traffic than the network can handle and enables throttling in case of an attack. Note that this traffic can only be directed at the JRC so that the JRC needs to be prepared to handle such unsanitized inputs. The data cap can be configured by the JRC by including a join rate parameter in the Join Response, and it is implemented through the CoAP's PROBING_RATE setting. The use of a data cap at a JP forces attackers to use more than one JP if they wish to overwhelm the network. Marking the join traffic packets with a nonzero DSCP allows the network to carry the traffic if it has capacity, but it encourages the network to drop the extra traffic rather than add bandwidth due to that traffic.¶ The shared nature of the \"minimal\" cell used for the join traffic makes the network prone to a DoS attack by congesting the JP with bogus traffic. Such an attacker is limited by its maximum transmit power. The redundancy in the number of deployed JPs alleviates the issue and also gives the pledge the possibility to use the best available link for joining. How a network node decides to become a JP is out of scope of this specification.¶ At the beginning of the join process, the pledge has no means of verifying the content in the EB and has to accept it at \"face value\". If the pledge tries to join an attacker's network, the Join Response message will either fail the security check or time out. The pledge may implement a temporary blacklist in order to filter out undesired EBs and try to join using the next seemingly valid EB. This blacklist alleviates the issue but is effectively limited by the node's available memory. Note that this temporary blacklist is different from the one communicated as part of the CoJP Configuration object as it helps the pledge fight a DoS attack. The bogus beacons prolong the join time of the pledge and so does the time spent in \"minimal\" duty cycle mode [RFC8180]. The blacklist communicated as part of the CoJP Configuration object helps the JP fight a DoS attack by a malicious pledge.¶ During the network lifetime, the JRC may at any time initiate a parameter update exchange with a joined node. The Parameter Update message uses the same OSCORE security context as is used for the join exchange, except that the server and client roles are interchanged. As a consequence, each Parameter Update message carries the well-known OSCORE Sender ID of the JRC. A passive attacker may use the OSCORE Sender ID to identify the Parameter Update traffic if the link-layer protection does not provide confidentiality. A countermeasure against such a traffic-analysis attack is to use encryption at the link layer. Note that the join traffic does not undergo link-layer protection at the first hop, as the pledge is not yet in possession of cryptographic keys. Similarly, EB traffic in the network is not encrypted. This makes it easy for a passive attacker to identify these types of traffic.¶ 10. Privacy Considerations The join solution specified in this document relies on the uniqueness of the pledge identifier in the set of all pledge identifiers managed by a JRC. This identifier is transferred in the clear as an OSCORE 'kid context'. The use of the globally unique EUI-64 as pledge identifier simplifies the management but comes with certain privacy risks. The implications are thoroughly discussed in [RFC7721] and comprise correlation of activities over time, location tracking, address scanning, and device-specific vulnerability exploitation. Since the join process occurs rarely compared to the network lifetime, long-term threats that arise from using EUI-64 as the pledge identifier are minimal. However, after the join process completes, the use of EUI-64 in the form of a Layer 2 or Layer 3 address extends the aforementioned privacy threats to the long term.¶ As an optional mitigation technique, the Join Response message may contain a short address that is assigned by the JRC to the (6LBR) pledge. The assigned short address SHOULD be uncorrelated with the long-term pledge identifier. The short address is encrypted in the response. Once the join process completes, the new node may use the short addresses for all further Layer 2 (and Layer 3) operations. This reduces the privacy threats as the short Layer 2 address (visible even when the network is encrypted) does not disclose the manufacturer, as is the case of EUI-64. However, an eavesdropper with access to the radio medium during the join process may be able to correlate the assigned short address with the extended address based on timing information with a non-negligible probability. This probability decreases with an increasing number of pledges joining concurrently.¶ 11. IANA Considerations This document allocates a well-known name under the .arpa name space according to the rules given in [RFC3172] and [RFC6761]. The name \"6tisch.arpa\" is requested. No subdomains are expected, and addition of any such subdomains requires the publication of an IETF Standards Track RFC. No A, AAAA, or PTR record is requested.¶ 11.1. Constrained Join Protocol (CoJP) Parameters This section defines a subregistry within the \"IPv6 Over the TSCH Mode of IEEE 802.15.4 (6TiSCH)\" registry with the name \"Constrained Join Protocol (CoJP) Parameters\".¶ The columns of the registry are:¶ Name: This is a descriptive name that enables an easier reference to the item. It is not used in the encoding. The name MUST be unique.¶ Label: The value to be used to identify this parameter. The label is an integer. The label MUST be unique.¶ CBOR Type: This field contains the CBOR type for the field.¶ Description: This field contains a brief description for the field. The description MUST be unique.¶ Reference: This field contains a pointer to the public specification for the field, if one exists.¶ This registry is populated with the values in Table 5.¶ The amending formula for this subregistry is: Different ranges of values use different registration policies [RFC8126]. Integer values from -256 to 255 are designated as Standards Action. Integer values from -65536 to -257 and from 256 to 65535 are designated as Specification Required. Integer values greater than 65535 are designated as Expert Review. Integer values less than -65536 are marked as Private Use.¶ 11.2. Constrained Join Protocol (CoJP) Key Usage This section defines a subregistry within the \"IPv6 Over the TSCH Mode of IEEE 802.15.4 (6TiSCH)\" registry with the name \"Constrained Join Protocol (CoJP) Key Usage\".¶ The columns of this registry are:¶ Name: This is a descriptive name that enables easier reference to the item. It is not used in the encoding. The name MUST be unique.¶ Value: This is the value used to identify the key usage setting. These values MUST be unique. The value is an integer.¶ Algorithm: This is a descriptive name of the link-layer algorithm in use and uniquely determines the key length. The name is not used in the encoding. The algorithm MUST be unique.¶ Description: This field contains a description of the key usage setting. The field should describe in enough detail how the key is to be used with different frame types, specific for the link-layer technology in question. The description MUST be unique.¶ Reference: This contains a pointer to the public specification for the field, if one exists.¶ This registry is populated with the values in Table 6.¶ The amending formula for this subregistry is: Different ranges of values use different registration policies [RFC8126]. Integer values from -256 to 255 are designated as Standards Action. Integer values from -65536 to -257 and from 256 to 65535 are designated as Specification Required. Integer values greater than 65535 are designated as Expert Review. Integer values less than -65536 are marked as Private Use.¶ 11.3. Constrained Join Protocol (CoJP) Unsupported Configuration Codes This section defines a subregistry within the \"IPv6 Over the TSCH Mode of IEEE 802.15.4 (6TiSCH)\" registry with the name \"Constrained Join Protocol (CoJP) Unsupported Configuration Codes\".¶ The columns of this registry are:¶ Name: This is a descriptive name that enables easier reference to the item. It is not used in the encoding. The name MUST be unique.¶ Value: This is the value used to identify the diagnostic code. These values MUST be unique. The value is an integer.¶ Description: This is a descriptive human-readable name. The description MUST be unique. It is not used in the encoding.¶ Reference: This contains a pointer to the public specification for the field, if one exists.¶ This registry is to be populated with the values in Table 7.¶ The amending formula for this subregistry is: Different ranges of values use different registration policies [RFC8126]. Integer values from -256 to 255 are designated as Standards Action. Integer values from -65536 to -257 and from 256 to 65535 are designated as Specification Required. Integer values greater than 65535 are designated as Expert Review. Integer values less than -65536 are marked as Private Use.¶ 12. References 12.1. Normative References [IEEE802.15.4] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE Standard 802.15.4-2015, DOI 10.1109/IEEESTD.2016.7460875, April 2016, <https://ieeexplore.ieee.org/document/7460875>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2597] Heinanen, J., Baker, F., Weiss, W., and J. Wroclawski, \"Assured Forwarding PHB Group\", RFC 2597, DOI 10.17487/RFC2597, June 1999, <https://www.rfc-editor.org/info/rfc2597>. [RFC3172] Huston, G., Ed., \"Management Guidelines & Operational Requirements for the Address and Routing Parameter Area Domain (\"arpa\")\", BCP 52, RFC 3172, DOI 10.17487/RFC3172, September 2001, <https://www.rfc-editor.org/info/rfc3172>. [RFC5869] Krawczyk, H. and P. Eronen, \"HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\", RFC 5869, DOI 10.17487/RFC5869, May 2010, <https://www.rfc-editor.org/info/rfc5869>. [RFC6761] Cheshire, S. and M. Krochmal, \"Special-Use Domain Names\", RFC 6761, DOI 10.17487/RFC6761, February 2013, <https://www.rfc-editor.org/info/rfc6761>. [RFC7252] Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained Application Protocol (CoAP)\", RFC 7252, DOI 10.17487/RFC7252, June 2014, <https://www.rfc-editor.org/info/rfc7252>. [RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>. [RFC8085] Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085, March 2017, <https://www.rfc-editor.org/info/rfc8085>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8152] Schaad, J., \"CBOR Object Signing and Encryption (COSE)\", RFC 8152, DOI 10.17487/RFC8152, July 2017, <https://www.rfc-editor.org/info/rfc8152>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC8613] Selander, G., Mattsson, J., Palombini, F., and L. Seitz, \"Object Security for Constrained RESTful Environments (OSCORE)\", RFC 8613, DOI 10.17487/RFC8613, July 2019, <https://www.rfc-editor.org/info/rfc8613>. [RFC8820] Nottingham, M., \"URI Design and Ownership\", BCP 190, RFC 8820, DOI 10.17487/RFC8820, June 2020, <https://www.rfc-editor.org/info/rfc8820>. [RFC8949] Bormann, C. and P. Hoffman, \"Concise Binary Object Representation (CBOR)\", STD 94, RFC 8949, DOI 10.17487/RFC8949, December 2020, <https://www.rfc-editor.org/info/rfc8949>. [RFC8974] Hartke, K. and M. Richardson, \"Extended Tokens and Stateless Clients in the Constrained Application Protocol (CoAP)\", RFC 8974, DOI 10.17487/RFC8974, January 2021, <https://www.rfc-editor.org/info/rfc8974>. [RFC9030] Thubert, P., Ed., \"An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)\", RFC 9030, DOI 10.17487/RFC9030, May 2021, <https://www.rfc-editor.org/info/rfc9030>. 12.2. Informative References [NIST800-90A] National Institute of Standards and Technology, \"Recommendation for Random Number Generation Using Deterministic Random Bit Generators\", Special Publication 800-90A, Revision 1, DOI 10.6028/NIST.SP.800-90Ar1, June 2015, <https://doi.org/10.6028/NIST.SP.800-90Ar1>. [RFC4231] Nystrom, M., \"Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\", RFC 4231, DOI 10.17487/RFC4231, December 2005, <https://www.rfc-editor.org/info/rfc4231>. [RFC4944] Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler, \"Transmission of IPv6 Packets over IEEE 802.15.4 Networks\", RFC 4944, DOI 10.17487/RFC4944, September 2007, <https://www.rfc-editor.org/info/rfc4944>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6762] Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762, DOI 10.17487/RFC6762, February 2013, <https://www.rfc-editor.org/info/rfc6762>. [RFC7721] Cooper, A., Gont, F., and D. Thaler, \"Security and Privacy Considerations for IPv6 Address Generation Mechanisms\", RFC 7721, DOI 10.17487/RFC7721, March 2016, <https://www.rfc-editor.org/info/rfc7721>. [RFC8415] Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A., Richardson, M., Jiang, S., Lemon, T., and T. Winters, \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\", RFC 8415, DOI 10.17487/RFC8415, November 2018, <https://www.rfc-editor.org/info/rfc8415>. [RFC8480] Wang, Q., Ed., Vilajosana, X., and T. Watteyne, \"6TiSCH Operation Sublayer (6top) Protocol (6P)\", RFC 8480, DOI 10.17487/RFC8480, November 2018, <https://www.rfc-editor.org/info/rfc8480>. [RFC8610] Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures\", RFC 8610, DOI 10.17487/RFC8610, June 2019, <https://www.rfc-editor.org/info/rfc8610>. [RFC8615] Nottingham, M., \"Well-Known Uniform Resource Identifiers (URIs)\", RFC 8615, DOI 10.17487/RFC8615, May 2019, <https://www.rfc-editor.org/info/rfc8615>. [RFC8742] Bormann, C., \"Concise Binary Object Representation (CBOR) Sequences\", RFC 8742, DOI 10.17487/RFC8742, February 2020, <https://www.rfc-editor.org/info/rfc8742>. [RFC8990] Bormann, C., Carpenter, B., Ed., and B. Liu, Ed., \"GeneRic Autonomic Signaling Protocol (GRASP)\", RFC 8990, DOI 10.17487/RFC8990, May 2021, <https://www.rfc-editor.org/info/rfc8990>. Appendix A. Example Figure 3 illustrates a successful join protocol exchange. The pledge instantiates the OSCORE context and derives the OSCORE keys and nonces from the PSK. It uses the instantiated context to protect the Join Request addressed with a Proxy-Scheme option, the well-known host name of the JRC in the Uri-Host option, and it uses its EUI-64 as pledge identifier and OSCORE 'kid context'. Triggered by the presence of a Proxy-Scheme option, the JP forwards the request to the JRC and sets the CoAP token to the internally needed state. The JP learned the IPv6 address of the JRC when it acted as a pledge and joined the network. Once the JRC receives the request, it looks up the correct context based on the 'kid context' parameter. The OSCORE data authenticity verification ensures that the request has not been modified in transit. In addition, replay protection is ensured through persistent handling of mutable context parameters.¶ Once the JP receives the Join Response, it authenticates the state within the CoAP token before deciding where to forward. The JP sets its internal state to that found in the token and forwards the Join Response to the correct pledge. Note that the JP does not possess the key to decrypt the CoJP object (configuration) present in the payload. At the pledge, the Join Response is matched to the Join Request and verified for replay protection using OSCORE processing rules. In this example, the Join Response does not contain the IPv6 address of the JRC, hence the pledge understands that the JRC is co-located with the 6LBR.¶ <-----E2E OSCORE------> Client Proxy Server Pledge JP JRC | | | | Join | | Code: 0.02 (POST) | Request | | Token: - +--------->| | Proxy-Scheme: coap | | | Uri-Host: 6tisch.arpa | | | OSCORE: kid: -, | | | kid_context: EUI-64, | | | Partial IV: 1 | | | Payload: { Code: 0.02 (POST), | | | Uri-Path: \"j\", | | | join_request, <Tag> } | | | | | Join | Code: 0.02 (POST) | | Request | Token: opaque state | +--------->| OSCORE: kid: -, | | | kid_context: EUI-64, | | | Partial IV: 1 | | | Payload: { Code: 0.02 (POST), | | | Uri-Path: \"j\", | | | join_request, <Tag> } | | | | | | | | Join | Code: 2.04 (Changed) | | Response | Token: opaque state | |<---------+ OSCORE: - | | | Payload: { Code: 2.04 (Changed), | | | configuration, <Tag> } | | | | | | | Join | | Code: 2.04 (Changed) | Response | | Token: - |<---------+ | OSCORE: - | | | Payload: { Code: 2.04 (Changed), | | | configuration, <Tag> } | | | Figure 3: Example of a successful join protocol exchange. { ... } denotes authenticated encryption, <Tag> denotes the authentication tag. Where the join_request object is:¶ join_request: { 5 : h'cafe' / PAN ID of the network pledge is attempting to join / } ¶ Since the role parameter is not present, the default role of \"6TiSCH Node\" is implied.¶ The join_request object is converted to h'a10542cafe' with a size of 5 bytes.¶ And the configuration object is the following:¶ configuration: { 2 : [ / link-layer key set / 1, / key_id / h'e6bf4287c2d7618d6a9687445ffd33e6' / key_value / ], 3 : [ / short identifier / h'af93' / assigned short address / ] } ¶ Since the key_usage parameter is not present in the link-layer key set object, the default value of \"6TiSCH-K1K2-ENC-MIC32\" is implied. Since the key_addinfo parameter is not present and key_id is different from 0, Key ID Mode 0x01 (Key Index) is implied. Similarly, since the lease_time parameter is not present in the short identifier object, the default value of positive infinity is implied.¶ The configuration object is converted to the following:¶ h'a202820150e6bf4287c2d7618d6a9687445ffd33e6038142af93' with a size of 26 bytes.¶ Appendix B. Lightweight Implementation Option In environments where optimizing the implementation footprint is important, it is possible to implement this specification without having the implementations of HKDF [RFC5869] and SHA [RFC4231] on constrained devices. HKDF and SHA are used during the OSCORE security context derivation phase. This derivation can also be done by the JRC or a provisioning device on behalf of the (6LBR) pledge during the provisioning phase. In that case, the derived OSCORE security context parameters are written directly into the (6LBR) pledge, without requiring the PSK to be provisioned to the (6LBR) pledge.¶ The use of HKDF to derive OSCORE security context parameters ensures that the resulting OSCORE keys have good security properties and are unique as long as the input varies for different pledges. This specification ensures the uniqueness by mandating unique pledge identifiers and a unique PSK for each (6LBR) pledge. From the AEAD nonce reuse viewpoint, having a unique pledge identifier is a sufficient condition. However, as discussed in Section 9, the use of a single PSK shared among many devices is a common security pitfall. The compromise of this shared PSK on a single device would lead to the compromise of the entire batch. When using the implementation/deployment scheme outlined above, the PSK does not need to be written to individual pledges. As a consequence, even if a shared PSK is used, the scheme offers a level of security comparable to the scenario in which each pledge is provisioned with a unique PSK. In this case, there is still a latent risk of the shared PSK being compromised on the provisioning device, which would compromise all devices in the batch.¶ Acknowledgments The work on this document has been partially supported by the European Union's H2020 Programme for research, technological development and demonstration under grant agreements: No. 644852, project ARMOUR; No. 687884, project F-Interop and open-call project SPOTS; No. 732638, project Fed4FIRE+ and open-call project SODA.¶ The following individuals provided input to this document (in alphabetic order): Christian Amsüss, Tengfei Chang, Roman Danyliw, Linda Dunbar, Vijay Gurbani, Klaus Hartke, Barry Leiba, Benjamin Kaduk, Tero Kivinen, Mirja Kühlewind, John Mattsson, Hilarie Orman, Alvaro Retana, Adam Roach, Jim Schaad, Göran Selander, Yasuyuki Tanaka, Pascal Thubert, William Vignat, Xavier Vilajosana, Éric Vyncke, and Thomas Watteyne.¶ Authors' Addresses Mališa Vučinić (editor) Inria 2 Rue Simone Iff 75012 Paris France Email: malisa.vucinic@inria.fr Jonathan Simon Analog Devices 32990 Alvarado-Niles Road, Suite 910 Union City, CA 94587 United States of America Email: jonathan.simon@analog.com Kris Pister University of California Berkeley 512 Cory Hall Berkeley, CA 94720 United States of America Email: pister@eecs.berkeley.edu Michael Richardson Sandelman Software Works 470 Dawson Avenue Ottawa ON K1Z5V7 Canada Email: mcr+ietf@sandelman.ca"
    },
    {
        "Number": "9036",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Changing the Location-to-Service Translation (LoST) Location Profiles Registry Policy",
        "Authors": [
            "R. Gellens"
        ],
        "Date": "2021-06",
        "More Info": "Updates RFC 5222",
        "Status": "Proposed Standard",
        "Abstract": "This document changes the policy of the \"Location-to-Service Translation (LoST) Location Profiles\" IANA registry established by RFC 5222 from Standards Action to Specification Required.  This allows standards development organizations (SDOs) other than the IETF to add new values.",
        "Keywords": [],
        "Content": "RFC 9036: Changing the Location-to-Service Translation (LoST) Location Profiles Registry Policy RFC 9036 LoST Profiles Registry Policy June 2021 Gellens Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9036 Updates: 5222 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Author: R. Gellens Core Technology Consulting RFC 9036 Changing the Location-to-Service Translation (LoST) Location Profiles Registry Policy Abstract This document changes the policy of the \"Location-to-Service Translation (LoST) Location Profiles\" IANA registry established by RFC 5222 from Standards Action to Specification Required. This allows standards development organizations (SDOs) other than the IETF to add new values.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9036.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Document Scope 3.  Security Considerations 4.  IANA Considerations 5.  References 5.1.  Normative References 5.2.  Informative References Acknowledgements Author's Address 1. Introduction The Location-to-Service Translation (LoST) Protocol [RFC5222] uses a location profile when conveying location (e.g., in a mapping request and a service boundary result). [RFC5222] established an IANA registry of location profiles [reg] with a registry policy of Standards Action. This requires a Standards Track RFC for any new registry values. The National Emergency Number Association (NENA) is a standards development organization (SDO) that makes significant use of LoST in its emergency call specifications (e.g., [NENA-i3]) and has identified a need for additional location profiles. This document changes the registry policy to Specification Required, allowing other SDOs such as NENA to add values.¶ 2. Document Scope This document changes the policy of the \"Location-to-Service Translation (LoST) Location Profiles\" IANA registry [reg] established by [RFC5222] from Standards Action to Specification Required (as defined in [RFC8126]). This allows SDOs other than the IETF to add new values.¶ 3. Security Considerations No new security considerations are identified by this change in registry policy.¶ 4. IANA Considerations IANA has changed the policy of the \"Location-to-Service Translation (LoST) Location Profiles\" registry (established by [RFC5222]) to Specification Required. IANA has also added this document as a reference for the registry. The Expert Reviewer is designated per [RFC8126]. The reviewer should verify that:¶ the proposed new value is specified by the IETF, NENA, or a similar SDO in which location profiles are in scope;¶ the proposed new value has a clear need (which includes there not being an existing profile that meets the need); and¶ the profile specification is unambiguous and interoperable.¶ 5. References 5.1. Normative References [reg] IANA, \"Location-to-Service Translation (LoST) Location Profiles\", <https://www.iana.org/assignments/lost-location-profiles>. [RFC5222] Hardie, T., Newton, A., Schulzrinne, H., and H. Tschofenig, \"LoST: A Location-to-Service Translation Protocol\", RFC 5222, DOI 10.17487/RFC5222, August 2008, <https://www.rfc-editor.org/info/rfc5222>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. 5.2. Informative References [NENA-i3] National Emergency Number Association (NENA), \"Detailed Functional and Interface Standards for the NENA i3 Solution\", NENA i3 Solution - Stage 3, NENA-STA-010.2-2016, September 2016, <https://www.nena.org/page/i3_Stage3>. Acknowledgements Many thanks to Ted Hardie for his helpful review and suggestions and to Guy Caron for his suggestion to clarify that \"clear need\" includes there not being an existing profile.¶ Author's Address Randall Gellens Core Technology Consulting United States of America Email: rg+ietf@coretechnologyconsulting.com URI: http://www.coretechnologyconsulting.com"
    },
    {
        "Number": "9032",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Encapsulation of 6TiSCH Join and Enrollment Information Elements",
        "Authors": [
            "D. Dujovne",
            "Ed.",
            "M. Richardson"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "In the Time-Slotted Channel Hopping (TSCH) mode of IEEE Std 802.15.4, opportunities for broadcasts are limited to specific times and specific channels.  Routers in a TSCH network transmit Enhanced Beacon (EB) frames to announce the presence of the network.  This document provides a mechanism by which additional information critical for new nodes (pledges) and long-sleeping nodes may be carried within the EB in order to conserve use of broadcast opportunities.",
        "Keywords": [
            "BRSKI",
            "enroll",
            "zero-touch",
            "DODAG balancing",
            "LLN balancing"
        ],
        "Content": "RFC 9032: Encapsulation of 6TiSCH Join and Enrollment Information Elements RFC 9032 Enroll Beacon May 2021 Dujovne & Richardson Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9032 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: D. Dujovne, Ed. Universidad Diego Portales M. Richardson Sandelman Software Works RFC 9032 Encapsulation of 6TiSCH Join and Enrollment Information Elements Abstract In the Time-Slotted Channel Hopping (TSCH) mode of IEEE Std 802.15.4, opportunities for broadcasts are limited to specific times and specific channels. Routers in a TSCH network transmit Enhanced Beacon (EB) frames to announce the presence of the network. This document provides a mechanism by which additional information critical for new nodes (pledges) and long-sleeping nodes may be carried within the EB in order to conserve use of broadcast opportunities.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9032.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Terminology 1.2.  Layer 2 Synchronization 1.3.  Layer 3 Synchronization: IPv6 Router Solicitations and Advertisements 1.4.  Layer 2 Selection 2.  Protocol Definition 3.  Security Considerations 4.  Privacy Considerations 5.  IANA Considerations 6.  References 6.1.  Normative References 6.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction [RFC7554] describes the use of the Time-Slotted Channel Hopping (TSCH) mode of [IEEE.802.15.4].¶ In TSCH mode of IEEE Std 802.15.4, opportunities for broadcasts are limited to specific times and specific channels. Routers in a TSCH network transmit Enhanced Beacon (EB) frames during broadcast slots in order to announce the time and channel schedule.¶ This document defines a new IETF Information Element (IE) subtype to place into the EB to provide join and enrollment information to prospective pledges in a more efficient way.¶ The following subsections explain the problem being solved, which justifies carrying the join and enrollment information in the EB.¶ 1.1. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ Other terminology can be found in Section 2.1 of [RFC9030].¶ 1.2. Layer 2 Synchronization As explained in Section 4.5.2 of [RFC8180], the EB has a number of purposes: it carries synchronization information such as the Absolute Slot Number (ASN) and Join Metric and identifiers for the timeslot template and the channel hopping sequence, and it indicates the TSCH slotframe.¶ An EB announces the existence of a TSCH network and the nodes already joined to that network. Receiving an EB allows a Joining Node (pledge) to learn about the network and to synchronize with it.¶ The EB may also be used as a means for a node already part of the network to resynchronize [RFC7554].¶ There are a limited number of timeslots designated as broadcast slots by each router in the network. Considering 10 ms slots and a slotframe length of 100, these slots are rare and could result in only 1 slot per second for broadcasts, which needs to be used for the beacon. Additional broadcasts for Router Advertisements (RA) or Neighbor Discovery (ND) could be even more scarce.¶ 1.3. Layer 3 Synchronization: IPv6 Router Solicitations and Advertisements At Layer 3, [RFC4861] defines a mechanism by which nodes learn about routers by receiving multicast RAs. If no RA is received within a set time, then a Router Solicitation (RS) may be transmitted as a multicast, to which an RA will be received, usually unicast.¶ Although [RFC6775] reduces the amount of multicast necessary for address resolution via Neighbor Solicitation (NS) messages, it still requires multicast of either RAs or RSes. This is an expensive operation for two reasons: there are few multicast timeslots for unsolicited RAs; and if a pledge node does not receive an RA, and decides to transmit an RS, a broadcast Aloha slot (see Appendix A.5 of [RFC7554]) is consumed with unencrypted traffic. [RFC6775] already allows for a unicast reply to such an RS.¶ This is a particularly acute issue for the join process for the following reasons:¶ Use of a multicast slot by even a non-malicious unauthenticated node for a Router Solicitation (RS) may overwhelm that timeslot.¶ It may require many seconds of on-time before a new pledge receives a Router Advertisement (RA) that it can use.¶ A new pledge may have to receive many EBs before it can pick an appropriate network and/or closest Join Proxy to attach to. If it must remain in the receive state for an RA as well as find the EB, then the process may take dozens of seconds, even minutes for each enrollment attempt that it needs to make.¶ 1.4. Layer 2 Selection In a complex Low-power and Lossy Network (LLN), multiple LLNs may be connected together by Backbone Routers (technology such as [RFC8929]), resulting in an area that is serviced by multiple, distinct Layer 2 instances. These are called Personal Area Networks (PANs). Each instance will have a separate Layer 2 security profile and will be distinguished by a different PANID. The PANID is part of the Layer 2 header as defined in [IEEE.802.15.4]: it is a 16-bit value that is chosen to be unique, and it contributes context to the Layer 2 security mechanisms. The PANID provides a context similar to the Extended Service Set ID (ESSID) in 802.11 networking and can be considered similar to the 802.3 Ethernet VLAN tag in that it provides context for all Layer 2 addresses.¶ A device that is already enrolled in a network may find after a long sleep that it needs to resynchronize with the Layer 2 network. The device's enrollment keys will be specific to a PANID, but the device may have more than one set of keys. Such a device may wish to connect to a PAN that is experiencing less congestion or that has a shallower Routing Protocol for LLNs (RPL) tree [RFC6550]. It may even observe PANs for which it does not have keys, but for which it believes it may have credentials that would allow it to join.¶ In order to identify which PANs are part of the same backbone network, the network ID is introduced in this extension. PANs that are part of the same backbone will be configured to use the same network ID. For RPL networks [RFC6550], configuration of the network ID can be done with a configuration option, which is the subject of future work.¶ In order to provide some input to the choice of which PAN to use, the PAN priority field has been added. This lists the relative priority for the PAN among different PANs. Every EB from a given PAN will likely have the same PAN priority. Determination of the PAN priority is the subject of future work; but it is expected that it will be calculated by an algorithm in the 6LoWPAN Border Router (6LBR), possibly involving communication between 6LBRs over the backbone network.¶ The parent selection process [RFC6550] can only operate within a single PAN because it depends upon receiving RPL DIO messages from all available parents. As part of the PAN selection process, the device may wish to know how deep in the LLN mesh it will be if it joins a particular PAN, and the rank priority field provides an estimation of each announcer's rank. Once the device synchronizes with a particular PAN's TSCH schedule, it may receive DIOs that are richer in their diversity than this value. The use of this value in practice is the subject of future research, and the interpretation of this value of the structure is considered experimental.¶ 2. Protocol Definition [RFC8137] creates a registry for new IETF IE subtypes. This document allocates a new subtype.¶ The new IE subtype structure is as follows. As explained in [RFC8137], the length of the subtype content can be calculated from the container, so no length information is necessary.¶ 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | 2 |R|P| res | proxy prio | rank priority | +-+-+-+-+-+-+-+-+-+-------------+-------------+-----------------+ | PAN priority | | +---------------+ + | Join Proxy Interface ID | + (present if P=1) + | | + +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | +-+-+-+-+-+-+-+-+ + | network ID | + variable length, up to 16 bytes + ~ ~ + + | | + +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | +-+-+-+-+-+-+-+-+ Figure 1: IE Subtype Structure res: Reserved bits MUST be ignored upon receipt and SHOULD be set to 0 when sending.¶ R: The RA R-flag is set if the sending node will act as a router for host-only nodes relying on stateless address auto-configuration (SLAAC) to get their global IPv6 address. Those hosts MUST send a unicast RS message in order to receive an RA with the Prefix Information Option.¶ In most cases, every node sending a beacon will set this flag, and in a typical mesh, this will be every single node. When this bit is not set, it might indicate that this node may be under provisioned or that it may have no additional slots for additional nodes. This could make this node more interesting to an attacker.¶ P: If the Proxy Address P-flag is set, then the Join Proxy Interface ID bit field is present. Otherwise, it is not provided.¶ This bit only indicates if another part of the structure is present, and it has little security or privacy impact.¶ proxy prio (proxy priority): This field indicates the willingness of the sender to act as a Join Proxy. Lower value indicates greater willingness to act as a Join Proxy as described in [RFC9031]. Values range from 0x00 (most willing) to 0x7e (least willing). A priority of 0x7f indicates that the announcer should never be considered as a viable Join Proxy. Only unenrolled pledges look at this value.¶ Lower values in this field indicate that the transmitter may have more capacity to handle unencrypted traffic. A higher value may indicate that the transmitter is low on neighbor cache entries or other resources. Ongoing work such as [NETWORK-ENROLLMENT] documents one way to set this field.¶ rank priority: The rank priority is set by the IPv6 LLN Router (6LR) that sent the beacon and is an indication of how willing this 6LR is to serve as a RPL parent [RFC6550] within a particular network ID. Lower values indicate more willingness, and higher values indicate less willingness. This value is calculated by each 6LR according to algorithms specific to the routing metrics used by the RPL [RFC6550]. The exact process is a subject of significant research work. It will typically be calculated from the RPL rank, and it may include some modifications based upon current number of children or the number of neighbor cache entries available. Pledges MUST ignore this value. It helps enrolled devices only to compare connection points.¶ An attacker can use this value to determine which nodes are potentially more interesting. Nodes that are less willing to be parents likely have more traffic, and an attacker could use this information to determine which nodes would be more interesting to attack or disrupt.¶ PAN priority: The PAN priority is a value set by the Destination-Oriented Directed Acyclic Graph (DODAG) root (see [RFC6550], typically the 6LBR) to indicate the relative priority of this LLN compared to those with different PANIDs that the operator might control. This value may be used as part of the enrollment priority, but typically it is used by devices that have already enrolled and need to determine which PAN to pick when resuming from a long sleep. Unenrolled pledges MAY consider this value when selecting a PAN to join. Enrolled devices MAY consider this value when looking for an eligible parent device. Lower values indicate more willingness to accept new nodes.¶ An attacker can use this value, along with the observed PANID in the EB to determine which PANIDs have more network resources, and may have more interesting traffic.¶ Join Proxy Interface ID: If the P bit is set, then 64 bits (8 bytes) of address are present. This field provides the Interface ID (IID) of the link-local address of the Join Proxy. The associated prefix is well-known as fe80::/64. If this field is not present, then IID is derived from the Layer 2 address of the sender per SLAAC [RFC4862].¶ This field communicates the IID bits that should be used for this node's Layer 3 address, if it should not be derived from the Layer 2 address. Communication with the Join Proxy occurs in the clear. This field avoids the need for an additional service-discovery process for the case where the Layer 3 address is not derived from the Layer 2 address. An attacker will see both Layer 2 and Layer 3 addresses, so this field provides no new information.¶ network ID: This is a variable length field, up to 16-bytes in size that uniquely identifies this network, potentially among many networks that are operating in the same frequencies in overlapping physical space. The length of this field can be calculated as being whatever is left in the IE.¶ In a 6TiSCH network, where RPL [RFC6550] is used as the mesh routing protocol, the network ID can be constructed from a truncated SHA-256 hash of the prefix (/64) of the network. This will be done by the RPL DODAG root and communicated by the RPL Configuration Option payloads, so it is not calculated more than once. This is just a suggestion for a default algorithm: it may be set in any convenient way that results in a non-identifying value. In some LLNs where multiple PANIDs may lead to the same management device (the Join Registrar/Coordinator (JRC)), then a common value that is the same across all the PANs MUST be configured. Pledges that see the same network ID will not waste time attempting to enroll multiple times with the same network when the network has multiple attachment points.¶ If the network ID is derived as suggested, then it will be an opaque, seemingly random value and will not directly reveal any information about the network. An attacker can match this value across many transmissions to map the extent of a network beyond what the PANID might already provide.¶ 3. Security Considerations All of the contents of this IE are transmitted in the clear. The content of the EB is not encrypted. This is a restriction in the cryptographic architecture of the 802.15.4 mechanism. In order to decrypt or do integrity checking of Layer 2 frames in TSCH, the TSCH ASN is needed. The EB provides the ASN to new (and long-sleeping) nodes.¶ The sensitivity of each field is described within the description of each field.¶ The EB is authenticated at the Layer 2 level using 802.15.4 mechanisms using the network-wide keying material. Nodes that are enrolled will have the network-wide keying material and can validate the beacon.¶ Pledges that have not yet enrolled are unable to authenticate the beacons and will be forced to temporarily take the contents on faith. After enrollment, a newly enrolled node will be able to return to the beacon and validate it.¶ In addition to the enrollment and join information described in this document, the EB contains a description of the TSCH schedule to be used by the transmitter of this packet. The schedule can provide an attacker with a list of channels and frequencies on which communication will occur. Knowledge of this can help an attacker to more efficiently jam communications, although there is future work being considered to make some of the schedule less visible. Encrypting the schedule does not prevent an attacker from jamming, but rather increases the energy cost of doing that jamming.¶ 4. Privacy Considerations The use of a network ID may reveal information about the network. The use of a SHA-256 hash of the DODAGID (see [RFC6550]), rather than using the DODAGID itself directly provides some privacy for the addresses used within the network, as the DODAGID is usually the IPv6 address of the root of the RPL mesh.¶ An interloper with a radio sniffer would be able to use the network ID to map out the extent of the mesh network.¶ 5. IANA Considerations IANA has assigned the following value in the \"IEEE Std 802.15.4 IETF IE Subtype IDs\" registry, as defined by [RFC8137].¶ Table 1 Value Subtype ID Reference 2 6tisch-Join-Info RFC 9032 6. References 6.1. Normative References [IEEE.802.15.4] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE Standard 802.15.4-2015, DOI 10.1109/IEEESTD.2016.7460875, April 2016, <https://ieeexplore.ieee.org/document/7460875>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman, \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861, DOI 10.17487/RFC4861, September 2007, <https://www.rfc-editor.org/info/rfc4861>. [RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. Bormann, \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 6775, DOI 10.17487/RFC6775, November 2012, <https://www.rfc-editor.org/info/rfc6775>. [RFC8137] Kivinen, T. and P. Kinney, \"IEEE 802.15.4 Information Element for the IETF\", RFC 8137, DOI 10.17487/RFC8137, May 2017, <https://www.rfc-editor.org/info/rfc8137>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC9031] Vučinić, M., Ed., Simon, J., Pister, K., and M. Richardson, \"Constrained Join Protocol (CoJP) for 6TiSCH\", RFC 9031, DOI 10.17487/RFC9031, May 2021, <https://www.rfc-editor.org/info/rfc9031>. 6.2. Informative References [NETWORK-ENROLLMENT] Richardson, M., Jadhav, R. A., Thubert, P., and H. She, \"Controlling Secure Network Enrollment in RPL networks\", Work in Progress, Internet-Draft, draft-ietf-roll-enrollment-priority-04, 7 February 2021, <https://tools.ietf.org/html/draft-ietf-roll-enrollment-priority-04>. [RFC4862] Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless Address Autoconfiguration\", RFC 4862, DOI 10.17487/RFC4862, September 2007, <https://www.rfc-editor.org/info/rfc4862>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>. [RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>. [RFC8929] Thubert, P., Ed., Perkins, C.E., and E. Levy-Abegnoli, \"IPv6 Backbone Router\", RFC 8929, DOI 10.17487/RFC8929, November 2020, <https://www.rfc-editor.org/info/rfc8929>. [RFC9030] Thubert, P., Ed., \"An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)\", RFC 9030, DOI 10.17487/RFC9030, May 2021, <https://www.rfc-editor.org/info/rfc9030>. Acknowledgments Thomas Watteyne provided extensive editorial comments on the document. Carles Gomez Montenegro generated a detailed review of the document at Working Group Last Call. Tim Evens provided a number of useful editorial suggestions.¶ Authors' Addresses Diego Dujovne (editor) Universidad Diego Portales Escuela de Informática y TelecomunicacionesAv. Ejército 441 Santiago Región Metropolitana Chile Phone: +56 (2) 676-8121 Email: diego.dujovne@mail.udp.cl Michael Richardson Sandelman Software Works Email: mcr+ietf@sandelman.ca"
    },
    {
        "Number": "9033",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "6TiSCH Minimal Scheduling Function (MSF)",
        "Authors": [
            "T. Chang",
            "Ed.",
            "M. Vučinić",
            "X. Vilajosana",
            "S. Duquennoy",
            "D. Dujovne"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This specification defines the \"IPv6 over the TSCH mode of IEEE 802.15.4\" (6TiSCH) Minimal Scheduling Function (MSF). This Scheduling Function describes both the behavior of a node when joining the network and how the communication schedule is managed in a distributed fashion. MSF is built upon the 6TiSCH Operation Sublayer Protocol (6P) and the minimal security framework for 6TiSCH.",
        "Keywords": [
            "TSCH",
            "communication schedule",
            "6P"
        ],
        "Content": "RFC 9033: 6TiSCH Minimal Scheduling Function (MSF) RFC 9033 6TiSCH MSF May 2021 Chang, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9033 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: T. Chang, Ed. Inria M. Vučinić Inria X. Vilajosana Universitat Oberta de Catalunya S. Duquennoy RISE SICS D. Dujovne Universidad Diego Portales RFC 9033 6TiSCH Minimal Scheduling Function (MSF) Abstract This specification defines the \"IPv6 over the TSCH mode of IEEE 802.15.4\" (6TiSCH) Minimal Scheduling Function (MSF). This Scheduling Function describes both the behavior of a node when joining the network and how the communication schedule is managed in a distributed fashion. MSF is built upon the 6TiSCH Operation Sublayer Protocol (6P) and the minimal security framework for 6TiSCH.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9033.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 1.2.  Related Documents 2.  Interface to the Minimal 6TiSCH Configuration 3.  Autonomous Cells 4.  Node Behavior at Boot 4.1.  Start State 4.2.  Step 1 - Choosing Frequency 4.3.  Step 2 - Receiving EBs 4.4.  Step 3 - Setting up Autonomous Cells for the Join Process 4.5.  Step 4 - Acquiring a RPL Rank 4.6.  Step 5 - Setting up First Tx Negotiated Cells 4.7.  Step 6 - Sending EBs and DIOs 4.8.  End State 5.  Rules for Adding and Deleting Cells 5.1.  Adapting to Traffic 5.2.  Switching Parent 5.3.  Handling Schedule Collisions 6.  6P SIGNAL Command 7.  Scheduling Function Identifier 8.  Rules for CellList 9.  6P Timeout Value 10. Rule for Ordering Cells 11. Meaning of the Metadata Field 12. 6P Error Handling 13. Schedule Inconsistency Handling 14. MSF Constants 15. MSF Statistics 16. Security Considerations 17. IANA Considerations 17.1.  MSF Scheduling Function Identifiers 18. References 18.1.  Normative References 18.2.  Informative References Appendix A.  Example Implementation of the SAX Hash Function Contributors Authors' Addresses 1. Introduction The 6TiSCH Minimal Scheduling Function (MSF), defined in this specification, is a 6TiSCH Scheduling Function (SF). The role of an SF is entirely defined in [RFC8480]. This specification complements [RFC8480] by providing the rules of when to add and delete cells in the communication schedule. This specification satisfies all the requirements for an SF listed in Section 4.2 of [RFC8480].¶ MSF builds on top of the following specifications: \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\" [RFC8180], \"6TiSCH Operation Sublayer (6top) Protocol (6P)\" [RFC8480], and \"Constrained Join Protocol (CoJP) for 6TiSCH\" [RFC9031].¶ MSF defines both the behavior of a node when joining the network, and how the communication schedule is managed in a distributed fashion. When a node running MSF boots up, it joins the network by following the six steps described in Section 4. The end state of the join process is that the node is synchronized to the network, has mutually authenticated with the network, has identified a routing parent, and has scheduled one negotiated Tx cell (defined in Section 5.1) to/from its routing parent. After the join process, the node can continuously add, delete, and relocate cells as described in Section 5. It does so for three reasons: to match the link-layer resources to the traffic, to handle changing parent, and to handle a schedule collision.¶ MSF works closely with the IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL), specifically the routing parent defined in [RFC6550]. This specification only describes how MSF works with the routing parent; this parent is referred to as the \"selected parent\". The activity of MSF towards the single routing parent is called a \"MSF session\". Though the performance of MSF is evaluated only when the \"selected parent\" represents the node's preferred parent, there should be no restrictions to use multiple MSF sessions, one per parent. The distribution of traffic over multiple parents is a routing decision that is out of scope for MSF.¶ MSF is designed to operate in a wide range of application domains. It is optimized for applications with regular upstream traffic, from the nodes to the Destination-Oriented Directed Acyclic Graph (DODAG) root [RFC6550].¶ This specification follows the recommended structure of an SF specification, given in Appendix A of [RFC8480], with the following adaptations:¶ We have reordered some sections, in particular to have the section on the node behavior at boot (Section 4) appear early in this specification.¶ We added sections on the interface to the minimal 6TiSCH configuration (Section 2), the use of the SIGNAL command (Section 6), the MSF constants (Section 14), and the MSF statistics (Section 15).¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 1.2. Related Documents This specification uses messages and variables defined in IEEE Std 802.15.4-2015 [IEEE802154]. It is expected that those resources will remain in the future versions of IEEE Std 802.15.4; in which case, this specification also applies to those future versions. In the remainder of the document, we use [IEEE802154] to refer to IEEE Std 802.15.4-2015 as well as future versions of IEEE Std 802.15.4 that remain compatible.¶ 2. Interface to the Minimal 6TiSCH Configuration In a Time-Slotted Channel Hopping (TSCH) network, time is sliced up into time slots. The time slots are grouped as one or multiple slotframes that repeat over time. The TSCH schedule instructs a node what to do at each time slot, such as transmit, receive, or sleep [RFC7554]. For time slots for transmitting or receiving, a channel is assigned to the time slot. The tuple (slot, channel) is indicated as a cell of the TSCH schedule. MSF is one of the policies defining how to manage the TSCH schedule.¶ A node implementing MSF SHOULD implement the minimal 6TiSCH configuration [RFC8180], which defines the \"minimal cell\", a single shared cell providing minimal connectivity between the nodes in the network. The MSF implementation provided in this specification is based on the implementation of the minimal 6TiSCH configuration. However, an implementor MAY implement MSF based on other specifications as long as the specification defines a way to advertise the Enhanced Beacons (EBs) and DODAG Information Objects (DIOs) among the network.¶ MSF uses the minimal cell for broadcast frames such as Enhanced Beacons (EBs) [IEEE802154] and broadcast DODAG Information Objects (DIOs) [RFC6550]. Cells scheduled by MSF are meant to be used only for unicast frames.¶ To ensure there is enough bandwidth available on the minimal cell, a node implementing MSF SHOULD enforce some rules for limiting the traffic of broadcast frames. For example, the overall broadcast traffic among the node and its neighbors SHOULD NOT exceed one-third of the bandwidth of minimal cell. One of the algorithms that fulfills this requirement is the Trickle timer defined in [RFC6206], which is applied to DIO messages [RFC6550]. However, any such algorithm of limiting the broadcast traffic to meet those rules is implementation-specific and is out of the scope of MSF.¶ Three slotframes are used in MSF. MSF schedules autonomous cells at Slotframe 1 (Section 3) and 6P negotiated cells at Slotframe 2 (Section 5), while Slotframe 0 is used for the bootstrap traffic as defined in the minimal 6TiSCH configuration. The same slotframe length for Slotframe 0, 1, and 2 is RECOMMENDED. Thus it is possible to avoid the scheduling collision between the autonomous cells and 6P negotiated cells (Section 3). The default slotframe length (SLOTFRAME_LENGTH) is RECOMMENDED for Slotframe 0, 1, and 2, although any value can be advertised in the EBs.¶ 3. Autonomous Cells MSF nodes initialize Slotframe 1 with a set of default cells for unicast communication with their neighbors. These cells are called \"autonomous cells\", because they are maintained autonomously by each node without negotiation through 6P. Cells scheduled by 6P Transaction are called \"negotiated cells\", which are reserved on Slotframe 2. How to schedule negotiated cells is detailed in Section 5. There are two types of autonomous cells:¶ Autonomous Rx Cell (AutoRxCell): One cell at a [slotOffset,channelOffset] computed as a hash of the 64-bit Extended Unique Identifier (EUI-64) of the node itself (detailed next). Its cell options bits are assigned as TX=0, RX=1, SHARED=0.¶ Autonomous Tx Cell (AutoTxCell): One cell at a [slotOffset,channelOffset] computed as a hash of the Layer 2 EUI-64 destination address in the unicast frame to be transmitted (detailed in Section 4.4). Its cell options bits are assigned as TX=1, RX=0, SHARED=1.¶ To compute a [slotOffset,channelOffset] from an EUI-64 address, nodes MUST use the hash function SAX as defined in Section 2 of [SAX-DASFAA] with consistent input parameters, for example, those defined in Appendix A. The coordinates are computed to distribute the cells across all channel offsets, and all but the first slot offset of Slotframe 1. The first time offset is skipped to avoid colliding with the minimal cell in Slotframe 0. The slot coordinates derived from a given EUI-64 address are computed as follows:¶ slotOffset(MAC) = 1 + hash(EUI64, length(Slotframe_1) - 1)¶ channelOffset(MAC) = hash(EUI64, NUM_CH_OFFSET)¶ The second input parameter defines the maximum return value of the hash function. Other optional parameters defined in SAX determine the performance of SAX hash function. Those parameters could be broadcast in an EB frame or preconfigured. For interoperability purposes, Appendix A provides the reference values of those parameters.¶ AutoTxCell is not permanently installed in the schedule but is added or deleted on demand when there is a frame to be sent. Throughout the network lifetime, nodes maintain the autonomous cells as follows:¶ Add an AutoTxCell to the Layer 2 destination address, which is indicated in a frame when there is no 6P negotiated Tx cell in the schedule for that frame to transmit.¶ Remove an AutoTxCell when:¶ there is no frame to transmit on that cell, or¶ there is at least one 6P negotiated Tx cell in the schedule for the frames to transmit.¶ The AutoRxCell MUST always remain scheduled after synchronization. 6P CLEAR MUST NOT erase any autonomous cells.¶ Because of hash collisions, there will be cases that the AutoTxCell and AutoRxCell are scheduled at the same slot offset and/or channel offset. In such cases, AutoTxCell always take precedence over AutoRxCell. Notice AutoTxCell is a shared type cell that applies a back-off mechanism. When the AutoTxCell and AutoRxCell collide, AutoTxCell takes precedence if there is a packet to transmit. When in a back-off period, AutoRxCell is used. In the case of conflict with a negotiated cell, autonomous cells take precedence over negotiated cells, which is stated in [IEEE802154]. However, when the Slotframe 0, 1, and 2 use the same length value, it is possible for a negotiated cell to avoid the collision with AutoRxCell. Hence, the same slotframe length for Slotframe 0, 1, and 2 is RECOMMENDED.¶ 4. Node Behavior at Boot This section details the behavior the node SHOULD follow from the moment it is switched on until it has successfully joined the network. Alternative behaviors may be involved, for example, when alternative security solutions are used for the network. Section 4.1 details the start state; Section 4.8 details the end state. The other sections detail the six steps of the joining process. We use the term \"pledge\" and \"joined node\", as defined in [RFC9031].¶ 4.1. Start State A node implementing MSF SHOULD implement the Constrained Join Protocol (CoJP) for 6TiSCH [RFC9031]. As a corollary, this means that a pledge, before being switched on, may be preconfigured with the Pre-Shared Key (PSK) for joining, as well as any other configuration detailed in [RFC9031]. This is not necessary if the node implements a security solution that is not based on PSKs, such as [ZEROTOUCH-JOIN].¶ 4.2. Step 1 - Choosing Frequency When switched on, the pledge randomly chooses a frequency from the channels through which the network cycles and starts listening for EBs on that frequency.¶ 4.3. Step 2 - Receiving EBs Upon receiving the first EB, the pledge continues listening for additional EBs to learn:¶ the number of neighbors N in its vicinity, and¶ which neighbor to choose as a Join Proxy (JP) for the joining process.¶ After having received the first EB, a node MAY keep listening for at most MAX_EB_DELAY seconds or until it has received EBs from NUM_NEIGHBOURS_TO_WAIT distinct neighbors. This behavior is defined in [RFC8180].¶ During this step, the pledge only gets synchronized when it has received enough EB from the network it wishes to join. How to decide whether an EB originates from a node from the network it wishes to join is implementation-specific, but MAY involve filtering EBs by the PANID field it contains, the presence and contents of the Information Element (IE) defined in [RFC9032], or the key used to authenticate it.¶ The decision of which neighbor to use as a JP is implementation-specific and is discussed in [RFC9031].¶ 4.4. Step 3 - Setting up Autonomous Cells for the Join Process After having selected a JP, a node generates a Join Request and installs an AutoTxCell to the JP. The Join Request is then sent by the pledge to its selected JP over the AutoTxCell. The AutoTxCell is removed by the pledge when the Join Request is sent out. The JP receives the Join Request through its AutoRxCell. Then it forwards the Join Request to the Join Registrar/Coordinator (JRC), possibly over multiple hops, over the 6P negotiated Tx cells. Similarly, the JRC sends the Join Response to the JP, possibly over multiple hops, over AutoTxCells or the 6P negotiated Tx cells. When the JP receives the Join Response from the JRC, it installs an AutoTxCell to the pledge and sends that Join Response to the pledge over AutoTxCell. The AutoTxCell is removed by the JP when the Join Response is sent out. The pledge receives the Join Response from its AutoRxCell, thereby learns the keying material used in the network, as well as other configuration settings, and becomes a \"joined node\".¶ When 6LoWPAN Neighbor Discovery (ND) [RFC8505] is implemented, the unicast packets used by ND are sent on the AutoTxCell. The specific process how the ND works during the join process is detailed in [RFC9030].¶ 4.5. Step 4 - Acquiring a RPL Rank Per [RFC6550], the joined node receives DIOs, computes its own Rank, and selects a routing parent.¶ 4.6. Step 5 - Setting up First Tx Negotiated Cells Once it has selected a routing parent, the joined node MUST generate a 6P ADD Request and install an AutoTxCell to that parent. The 6P ADD Request is sent out through the AutoTxCell, containing the following fields:¶ CellOptions: Set to TX=1, RX=0, SHARED=0.¶ NumCells: Set to 1.¶ CellList: At least 5 cells, chosen according to Section 8.¶ The joined node removes the AutoTxCell to the selected parent when the 6P Request is sent out. That parent receives the 6P ADD Request from its AutoRxCell. Then it generates a 6P ADD Response and installs an AutoTxCell to the joined node. When the parent sends out the 6P ADD Response, it MUST remove that AutoTxCell. The joined node receives the 6P ADD Response from its AutoRxCell and completes the 6P Transaction. In the case that the 6P ADD transaction failed, the node MUST issue another 6P ADD Request and repeat until the Tx cell is installed to the parent.¶ 4.7. Step 6 - Sending EBs and DIOs The node starts sending EBs and DIOs on the minimal cell, while following the transmit rules for broadcast frames from Section 2.¶ 4.8. End State At the end state of the joining process, a new node:¶ is synchronized to the network,¶ is using the link-layer keying material it learned through the secure joining process,¶ has selected one neighbor as its routing parent,¶ has one AutoRxCell,¶ has one negotiated Tx cell to the selected parent,¶ starts to send DIOs, potentially serving as a router for other nodes' traffic, and¶ starts to send EBs, potentially serving as a JP for new pledges.¶ 5. Rules for Adding and Deleting Cells Once a node has joined the 6TiSCH network, it adds/deletes/relocates cells with the selected parent for three reasons:¶ to match the link-layer resources to the traffic between the node and the selected parent (Section 5.1),¶ to handle switching the parent (Section 5.2), or¶ to handle a schedule collision (Section 5.3).¶ These cells are called \"negotiated cells\" as they are scheduled through 6P and negotiated with the node's parent. Without specific declaration, all cells mentioned in this section are negotiated cells, and they are installed at Slotframe 2.¶ 5.1. Adapting to Traffic A node implementing MSF MUST implement the behavior described in this section.¶ The goal of MSF is to manage the communication schedule in the 6TiSCH schedule in a distributed manner. For a node, this translates into monitoring the current usage of the cells it has to one of its neighbors, in most cases to the selected parent.¶ If the node determines that the number of link-layer frames it is attempting to exchange with the selected parent per unit of time is larger than the capacity offered by the TSCH negotiated cells it has scheduled with it, the node issues a 6P ADD command to that parent to add cells to the TSCH schedule.¶ If the traffic is lower than the capacity, the node issues a 6P DELETE command to that parent to delete cells from the TSCH schedule.¶ The node MUST maintain two separate pairs of the following counters for the selected parent: one for the negotiated Tx cells to that parent and one for the negotiated Rx cells to that parent.¶ NumCellsElapsed: Counts the number of negotiated cells that have elapsed since the counter was initialized. This counter is initialized at 0. When the current cell is declared as a negotiated cell to the selected parent, NumCellsElapsed is incremented by exactly 1, regardless of whether the cell is used to transmit or receive a frame.¶ NumCellsUsed: Counts the number of negotiated cells that have been used. This counter is initialized at 0. NumCellsUsed is incremented by exactly 1 when, during a negotiated cell to the selected parent, either of the following happens:¶ The node sends a frame to the parent. The counter increments regardless of whether a link-layer acknowledgment was received or not.¶ The node receives a valid frame from the parent. The counter increments only when a valid frame per [IEEE802154] is received by the node from its parent.¶ The cell option of cells listed in CellList in a 6P Request frame SHOULD be either (Tx=1, Rx=0) only or (Tx=0, Rx=1) only. Both NumCellsElapsed and NumCellsUsed counters can be used for both types of negotiated cells.¶ As there is no negotiated Rx cell installed at initial time, the AutoRxCell is taken into account as well for downstream traffic adaptation. In this case:¶ NumCellsElapsed is incremented by exactly 1 when the current cell is AutoRxCell.¶ NumCellsUsed is incremented by exactly 1 when the node receives a frame from the selected parent on AutoRxCell.¶ Implementors MAY choose to create the same counters for each neighbor and add them as additional statistics in the neighbor table.¶ The counters are used as follows:¶ Both NumCellsElapsed and NumCellsUsed are initialized to 0 when the node boots.¶ When the value of NumCellsElapsed reaches MAX_NUM_CELLS:¶ If NumCellsUsed is greater than LIM_NUMCELLSUSED_HIGH, trigger 6P to add a single cell to the selected parent.¶ If NumCellsUsed is less than LIM_NUMCELLSUSED_LOW, trigger 6P to remove a single cell to the selected parent.¶ Reset both NumCellsElapsed and NumCellsUsed to 0 and restart #2.¶ The value of MAX_NUM_CELLS is chosen according to the traffic type of the network. Generally speaking, the larger the value MAX_NUM_CELLS is, the more accurately the cell usage is calculated. By using a larger value of MAX_NUM_CELLS, the 6P traffic overhead could be reduced as well. Meanwhile, the latency won't increase much by using a larger value of MAX_NUM_CELLS for periodic traffic type. For bursty traffic, a larger value of MAX_NUM_CELLS indeed introduces higher latency. The latency caused by slight changes of traffic load can be alleviated by the additional scheduled cells. In this sense, MSF is a Scheduling Function that trades latency with energy by scheduling more cells than needed. Setting MAX_NUM_CELLS to a value at least four times the recent maximum number of cells used in a slotframe is RECOMMENDED. For example, a two packets/slotframe traffic load results in an average of four cells scheduled (two cells are used), using at least the value of double the number of scheduled cells (which is eight) as MAX_NUM_CELLS gives a good resolution on the cell usage calculation.¶ In the case that a node has booted or has disappeared from the network, the cell reserved at the selected parent may be kept in the schedule forever. A cleanup mechanism MUST be provided to resolve this issue. The cleanup mechanism is implementation-specific. The goal is to confirm that those negotiated cells are not used anymore by the associated neighbors and remove them from the schedule.¶ 5.2. Switching Parent A node implementing MSF SHOULD implement the behavior described in this section.¶ As part of its normal operation, RPL can have a node switch parent. The procedure for switching from the old parent to the new parent is the following:¶ The node counts the number of negotiated cells it has per slotframe to the old parent.¶ The node triggers one or more 6P ADD commands to schedule the same number of negotiated cells with same cell options to the new parent.¶ When that successfully completes, the node issues a 6P CLEAR command to its old parent.¶ The type of negotiated cell that should be installed first depends on which traffic has the higher priority, upstream or downstream, which is application-specific and out of scope of MSF.¶ 5.3. Handling Schedule Collisions A node implementing MSF SHOULD implement the behavior described in this section. Other algorithms for handling schedule collisions can be an alternative to the algorithm proposed in this section.¶ Since scheduling is entirely distributed, there is a nonzero probability that two pairs of nearby neighbor nodes schedule a negotiated cell at the same [slotOffset,channelOffset] location in the TSCH schedule. In that case, data exchanged by the two pairs may collide on that cell. We call this case a \"schedule collision\".¶ The node MUST maintain the following counters for each negotiated Tx cell to the selected parent:¶ NumTx: Counts the number of transmission attempts on that cell. Each time the node attempts to transmit a frame on that cell, NumTx is incremented by exactly 1.¶ NumTxAck: Counts the number of successful transmission attempts on that cell. Each time the node receives an acknowledgment for a transmission attempt, NumTxAck is incremented by exactly 1.¶ Since both NumTx and NumTxAck are initialized to 0, we necessarily have NumTxAck less than or equal to NumTx. We call Packet Delivery Ratio (PDR) the ratio NumTxAck/NumTx and represent it as a percentage. A cell with a PDR equal to 50% means that half of the frames transmitted are not acknowledged.¶ Each time the node switches parent (or during the join process when the node selects a parent for the first time), both NumTx and NumTxAck MUST be reset to 0. They increment over time, as the schedule is executed, and the node sends frames to that parent. When NumTx reaches MAX_NUMTX, both NumTx and NumTxAck MUST be divided by 2. MAX_NUMTX needs to be a power of two to avoid division error. For example, when MAX_NUMTX is set to 256, and NumTx=255 and NumTxAck=127, the counters become NumTx=128 and NumTxAck=64 if one frame is sent to the parent with an acknowledgment received. This operation does not change the value of the PDR but allows the counters to keep incrementing. The value of MAX_NUMTX is implementation-specific.¶ The key for detecting a schedule collision is that, if a node has several cells to the selected parent, all cells should exhibit the same PDR. A cell that exhibits a PDR significantly lower than the others indicates that there are collisions on that cell.¶ Every HOUSEKEEPINGCOLLISION_PERIOD, the node executes the following steps:¶ It computes, for each negotiated Tx cell with the parent (not for the autonomous cell), that cell's PDR.¶ Any cell that hasn't yet had NumTx divided by 2 since it was last reset is skipped in steps 3 and 4. This avoids triggering cell relocation when the values of NumTx and NumTxAck are not statistically significant yet.¶ It identifies the cell with the highest PDR.¶ For any other cell, it compares its PDR against that of the cell with the highest PDR. If the subtraction difference between the PDR of the cell and the highest PDR is larger than RELOCATE_PDRTHRES, it triggers the relocation of that cell using a 6P RELOCATE command.¶ The RELOCATION for negotiated Rx cells is not supported by MSF.¶ 6. 6P SIGNAL Command The 6P SIGNAL command is not used by MSF.¶ 7. Scheduling Function Identifier The Scheduling Function Identifier (SFID) of MSF is 0. How the value of 0 was chosen is described in Section 17.¶ 8. Rules for CellList MSF uses two-step 6P Transactions exclusively. 6P Transactions are only initiated by a node towards its parent. As a result, the cells to put in the CellList of a 6P ADD command, and in the candidate CellList of a RELOCATE command, are chosen by the node initiating the 6P Transaction. In both cases, the same rules apply:¶ The CellList is RECOMMENDED to have five or more cells.¶ Each cell in the CellList MUST have a different slotOffset value.¶ For each cell in the CellList, the node MUST NOT have any scheduled cell on the same slotOffset.¶ The slotOffset value of any cell in the CellList MUST NOT be the same as the slotOffset of the minimal cell (slotOffset=0).¶ The slotOffset of a cell in the CellList SHOULD be randomly and uniformly chosen among all the slotOffset values that satisfy the restrictions above.¶ The channelOffset of a cell in the CellList SHOULD be randomly and uniformly chosen from [0..numFrequencies], where numFrequencies represents the number of frequencies a node can communicate on.¶ As a consequence of random cell selection, there is a nonzero chance that nodes in the vicinity have installed cells with same slotOffset and channelOffset. An implementer MAY implement a strategy to monitor the candidate cells before adding them in CellList to avoid collision. For example, a node MAY maintain a candidate cell pool for the CellList. The candidate cells in the pool are preconfigured as Rx cells to promiscuously listen to detect transmissions on those cells. If transmissions that rely on [IEEE802154] are observed on one cell over multiple iterations of the schedule, that cell is probably used by a TSCH neighbor. It is moved out from the pool, and a new cell is selected as a candidate cell. The cells in CellList are picked from the candidate pool directly when required.¶ 9. 6P Timeout Value The timeout value is calculated for the worst case that a 6P response is received, which means the 6P response is sent out successfully at the very latest retransmission. And for each retransmission, it backs off with largest value. Hence the 6P timeout value is calculated as ((2MAXBE) - 1) * MAXRETRIES * SLOTFRAME_LENGTH, where:¶ MAXBE, defined in [IEEE802154], is the maximum backoff exponent used.¶ MAXRETRIES, defined in [IEEE802154], is the maximum retransmission times.¶ SLOTFRAME_LENGTH represents the length of slotframe.¶ 10. Rule for Ordering Cells Cells are ordered by slotOffset first, channelOffset second.¶ The following sequence is correctly ordered (each element represents the [slotOffset,channelOffset] of a cell in the schedule):¶ [1,3],[1,4],[2,0],[5,3],[6,0],[6,3],[7,9]¶ 11. Meaning of the Metadata Field The Metadata field is not used by MSF.¶ 12. 6P Error Handling Section 6.2.4 of [RFC8480] lists the 6P return codes. Table 1 lists the same error codes and the behavior a node implementing MSF SHOULD follow.¶ Table 1: Recommended Behavior for Each 6P Error Code Code RECOMMENDED Behavior RC_SUCCESS nothing RC_EOL nothing RC_ERR quarantine RC_RESET quarantine RC_ERR_VERSION quarantine RC_ERR_SFID quarantine RC_ERR_SEQNUM clear RC_ERR_CELLLIST clear RC_ERR_BUSY waitretry RC_ERR_LOCKED waitretry The meaning of each behavior from Table 1 is:¶ nothing: Indicates that this return code is not an error. No error handling behavior is triggered.¶ clear: Abort the 6P Transaction. Issue a 6P CLEAR command to that neighbor (this command may fail at the link layer). Remove all cells scheduled with that neighbor from the local schedule.¶ quarantine: Same behavior as for \"clear\". In addition, remove the node from the neighbor and routing tables. Place the node's identifier in a quarantine list for QUARANTINE_DURATION. When in quarantine, drop all frames received from that node.¶ waitretry: Abort the 6P Transaction. Wait for a duration randomly and uniformly chosen from [WAIT_DURATION_MIN,WAIT_DURATION_MAX]. Retry the same transaction.¶ 13. Schedule Inconsistency Handling The behavior when schedule inconsistency is detected is explained in Table 1, for 6P return code RC_ERR_SEQNUM.¶ 14. MSF Constants Table 2 lists MSF constants and their RECOMMENDED values.¶ Table 2: MSF Constants and Their RECOMMENDED Values Name RECOMMENDED value SLOTFRAME_LENGTH 101 slots NUM_CH_OFFSET 16 MAX_NUM_CELLS 100 LIM_NUMCELLSUSED_HIGH 75 LIM_NUMCELLSUSED_LOW 25 MAX_NUMTX 256 HOUSEKEEPINGCOLLISION_PERIOD 1 min RELOCATE_PDRTHRES 50 % QUARANTINE_DURATION 5 min WAIT_DURATION_MIN 30 s WAIT_DURATION_MAX 60 s 15. MSF Statistics Table 3 lists MSF statistics and their RECOMMENDED widths.¶ Table 3: MSF Statistics and Their RECOMMENDED Widths Name RECOMMENDED width NumCellsElapsed 1 byte NumCellsUsed 1 byte NumTx 1 byte NumTxAck 1 byte 16. Security Considerations MSF defines a series of \"rules\" for the node to follow. It triggers several actions that are carried out by the protocols defined in the following specifications: \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\" [RFC8180], \"6TiSCH Operation Sublayer (6top) Protocol (6P)\" [RFC8480], and \"Constrained Join Protocol (CoJP) for 6TiSCH\" [RFC9031]. Confidentiality and authentication of MSF control and data traffic are provided by these specifications whose security considerations continue to apply to MSF. In particular, MSF does not define a new protocol or packet format.¶ MSF uses autonomous cells for initial bootstrap and the transport of join traffic. Autonomous cells are computed as a hash of nodes' EUI-64 addresses. This makes the coordinates of autonomous cell an easy target for an attacker, as EUI-64 addresses are visible on the wire and are not encrypted by the link-layer security mechanism. With the coordinates of autonomous cells available, the attacker can launch a selective jamming attack against any node's AutoRxCell. If the attacker targets a node acting as a JP, it can prevent pledges from using that JP to join the network. The pledge detects such a situation through the absence of a link-layer acknowledgment for its Join Request. As it is expected that each pledge will have more than one JP available to join the network, one available countermeasure for the pledge is to pseudorandomly select a new JP when the link to the previous JP appears bad. Such a strategy alleviates the issue of the attacker randomly jamming to disturb the network but does not help in the case the attacker is targeting a particular pledge. In that case, the attacker can jam the AutoRxCell of the pledge in order to prevent it from receiving the join response. This situation should be detected through the absence of a particular node from the network and handled by the network administrator through out-of-band means.¶ MSF adapts to traffic containing packets from the IP layer. It is possible that the IP packet has a nonzero DSCP (Differentiated Services Code Point) [RFC2474] value in its IPv6 header. The decision how to handle that packet belongs to the upper layer and is out of scope of MSF. As long as the decision is made to hand over to MAC layer to transmit, MSF will take that packet into account when adapting to traffic.¶ Note that nonzero DSCP values may imply that the traffic originated at unauthenticated pledges (see [RFC9031]). The implementation at the IPv6 layer SHOULD rate limit this join traffic before it is passed to the 6top sublayer where MSF can observe it. If there is no rate limit for join traffic, intermediate nodes in the 6TiSCH network may be prone to a resource exhaustion attack, with the attacker injecting unauthenticated traffic from the network edge. The assumption is that the rate-limiting function is aware of the available bandwidth in the 6top Layer 3 bundle(s) towards a next hop, not directly from MSF, but from an interaction with the 6top sublayer that ultimately manages the bundles under MSF's guidance. How this rate limit is implemented is out of scope of MSF.¶ 17. IANA Considerations 17.1. MSF Scheduling Function Identifiers This document adds the following number to the \"6P Scheduling Function Identifiers\" subregistry, part of the \"IPv6 Over the TSCH Mode of IEEE 802.15.4 (6TiSCH)\" registry, as defined by [RFC8480]:¶ Table 4: New SFID in the \"6P Scheduling Function Identifiers\" Subregistry SFID Name Reference 0 Minimal Scheduling Function (MSF) RFC 9033 The SFID was chosen from the range 0-127, which has the registration procedure of IETF Review or IESG Approval [RFC8126].¶ 18. References 18.1. Normative References [IEEE802154] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE Standard 802.15.4-2015, DOI 10.1109/IEEESTD.2016.7460875, April 2016, <https://ieeexplore.ieee.org/document/7460875>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2474] Nichols, K., Blake, S., Baker, F., and D. Black, \"Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers\", RFC 2474, DOI 10.17487/RFC2474, December 1998, <https://www.rfc-editor.org/info/rfc2474>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>. [RFC8480] Wang, Q., Ed., Vilajosana, X., and T. Watteyne, \"6TiSCH Operation Sublayer (6top) Protocol (6P)\", RFC 8480, DOI 10.17487/RFC8480, November 2018, <https://www.rfc-editor.org/info/rfc8480>. [RFC9030] Thubert, P., Ed., \"An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)\", RFC 9030, DOI 10.17487/RFC9030, May 2021, <https://www.rfc-editor.org/info/rfc9030>. [RFC9031] Vučinić, M., Ed., Simon, J., Pister, K., and M. Richardson, \"Constrained Join Protocol (CoJP) for 6TiSCH\", RFC 9031, DOI 10.17487/RFC9031, May 2021, <https://www.rfc-editor.org/info/rfc9031>. [RFC9032] Dujovne, D., Ed. and M. Richardson, \"Encapsulation of 6TiSCH Join and Enrollment Information Elements\", RFC 9032, DOI 10.17487/RFC9032, May 2021, <https://www.rfc-editor.org/info/rfc9032>. [SAX-DASFAA] Ramakrishna, M.V. and J. Zobel, \"Performance in Practice of String Hashing Functions\", DASFAA, DOI 10.1142/9789812819536_0023, 1997, <https://doi.org/10.1142/9789812819536_0023>. 18.2. Informative References [RFC6206] Levis, P., Clausen, T., Hui, J., Gnawali, O., and J. Ko, \"The Trickle Algorithm\", RFC 6206, DOI 10.17487/RFC6206, March 2011, <https://www.rfc-editor.org/info/rfc6206>. [RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [ZEROTOUCH-JOIN] Richardson, M., \"6tisch Zero-Touch Secure Join protocol\", Work in Progress, Internet-Draft, draft-ietf-6tisch-dtsecurity-zerotouch-join-04, 8 July 2019, <https://tools.ietf.org/html/draft-ietf-6tisch-dtsecurity-zerotouch-join-04>. Appendix A. Example Implementation of the SAX Hash Function To support interoperability, this section provides an example implementation of the SAX hash function [SAX-DASFAA]. The input parameters of the function are:¶ T, which is the hashing table length.¶ c, which is the characters of string s, to be hashed.¶ In MSF, the T is replaced by the length of slotframe 1. String s is replaced by the node EUI-64 address. The characters of the string, c0 through c7, are the eight bytes of the EUI-64 address.¶ The SAX hash function requires shift operation, which is defined as follow:¶ L_shift(v,b), which refers to the left shift of variable v by b bits¶ R_shift(v,b), which refers to the right shift of variable v by b bits¶ The steps to calculate the hash value of SAX hash function are:¶ Initialize variable h, which is the intermediate hash value, to h0 and variable i, which is the index of the bytes of the EUI-64 address, to 0.¶ Sum the value of L_shift(h,l_bit), R_shift(h,r_bit), and ci.¶ Calculate the result of the exclusive OR between the sum value in Step 2 and h.¶ Modulo the result of Step 3 by T.¶ Assign the result of Step 4 to h.¶ Increase i by 1.¶ Repeat Step 2 to Step 6 until i reaches to 8.¶ The value of variable h is the hash value of the SAX hash function.¶ The values of h0, l_bit, and r_bit in Step 1 and Step 2 are configured as:¶ h0 = 0¶ l_bit = 0¶ r_bit = 1¶ The appropriate values of l_bit and r_bit could vary depending on the set of nodes' EUI-64 address. How to find those values is out of the scope of this specification.¶ Contributors Beshr Al Nahas Chalmers University Email: beshr@chalmers.se Olaf Landsiedel Chalmers University Email: olafl@chalmers.se Yasuyuki Tanaka Toshiba Email: yatch1.tanaka@toshiba.co.jp Authors' Addresses Tengfei Chang (editor) Inria 2 rue Simone Iff 75012 Paris France Email: tengfei.chang@gmail.com Mališa Vučinić Inria 2 rue Simone Iff 75012 Paris France Email: malisa.vucinic@inria.fr Xavier Vilajosana Universitat Oberta de Catalunya 156 Rambla Poblenou 08018 Barcelona Catalonia Spain Email: xvilajosana@uoc.edu Simon Duquennoy RISE SICS Isafjordsgatan 22 SE-164 29 Kista Sweden Email: simon.duquennoy@gmail.com Diego Dujovne Universidad Diego Portales Escuela de Informática y TelecomunicacionesAv. Ejército 441 Santiago Región Metropolitana Chile Phone: +56 (2) 676-8121 Email: diego.dujovne@mail.udp.cl"
    },
    {
        "Number": "9034",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Packet Delivery Deadline Time in the Routing Header for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)",
        "Authors": [
            "L. Thomas",
            "S. Anamalamudi",
            "S.V.R. Anand",
            "M. Hegde",
            "C. Perkins"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies a new type for the 6LoWPAN routing header containing the deadline time for data packets, designed for use over constrained networks. The deadline time enables forwarding and scheduling decisions for time-critical machine-to-machine (M2M) applications running on Internet-enabled devices that operate within time-synchronized networks. This document also specifies a representation for the deadline time values in such networks.",
        "Keywords": [
            "Routing header",
            "Timestamp"
        ],
        "Content": "RFC 9034: Packet Delivery Deadline Time in the Routing Header for IPv6 over Low‑Power Wireless Personal Area Networks (6LoWPANs) RFC 9034 6lo Delivery Deadline Time June 2021 Thomas, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9034 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: L. Thomas C-DAC S. Anamalamudi SRM University-AP S.V.R. Anand Indian Institute of Science M. Hegde Indian Institute of Science C. Perkins Lupin Lodge RFC 9034 Packet Delivery Deadline Time in the Routing Header for IPv6 over Low‑Power Wireless Personal Area Networks (6LoWPANs) Abstract This document specifies a new type for the 6LoWPAN routing header containing the deadline time for data packets, designed for use over constrained networks. The deadline time enables forwarding and scheduling decisions for time-critical machine-to-machine (M2M) applications running on Internet-enabled devices that operate within time-synchronized networks. This document also specifies a representation for the deadline time values in such networks.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9034.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  6LoRHE Generic Format 4.  Deadline-6LoRHE 5.  Deadline-6LoRHE Format 6.  Deadline-6LoRHE in Three Network Scenarios 6.1.  Scenario 1: Endpoints in the Same DODAG (N1) 6.2.  Scenario 2: Endpoints in Networks with Dissimilar L2 Technologies 6.3.  Scenario 3: Packet Transmission across Different DODAGs (N1 to N2) 7.  IANA Considerations 8.  Synchronization Aspects 9.  Security Considerations 10. References 10.1.  Normative References 10.2.  Informative References Appendix A.  Modular Arithmetic Considerations Acknowledgments Authors' Addresses 1. Introduction Low-Power and Lossy Networks (LLNs) are likely to be deployed for real-time industrial applications requiring end-to-end delay guarantees [RFC8578]. A Deterministic Network (\"DetNet\") typically requires some data packets to reach their receivers within strict time bounds. Intermediate nodes use the deadline information to make appropriate packet forwarding and scheduling decisions to meet the time bounds.¶ This document specifies a new type for the Elective 6LoWPAN Routing Header (6LoRHE), Deadline-6LoRHE, so that the deadline time (i.e., the time of latest acceptable delivery) of data packets can be included within the 6LoRHE. [RFC8138] specifies the 6LoWPAN Routing Header (6LoRH), compression schemes for RPL (Routing Protocol for Low-Power and Lossy Networks) source routing [RFC6554], header compression of RPL packet information [RFC6553], and IP-in-IP encapsulation. This document also specifies the handling of the deadline time when packets traverse time-synchronized networks operating in different time zones or distinct reference clocks. Time-synchronization techniques are outside the scope of this document. There are a number of standards available for this purpose, including IEEE 1588 [IEEE.1588.2008], IEEE 802.1AS [IEEE.802.1AS.2011], IEEE 802.15.4-2015 Time-Slotted Channel Hopping (TSCH) [IEEE.802.15.4], and more.¶ The Deadline-6LoRHE can be used in any time-synchronized 6LoWPAN network. A 6TiSCH (IPv6 over the TSCH mode of IEEE 802.15.4) network is used to describe the implementation of the Deadline-6LoRHE, but this does not preclude its use in scenarios other than 6TiSCH. For instance, there is a growing interest in using 6LoWPAN over a Bluetooth Low Energy (BLE) mesh network [6LO-BLEMESH] in industrial IoT (Internet of Things) [IEEE-BLE-MESH]. BLE mesh time synchronization is being explored by the Bluetooth community. There are also cases under consideration in Wi-SUN [PHY-SPEC] [Wi-SUN].¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ This document uses the terminology defined in [RFC6550] and [RFC9030].¶ 3. 6LoRHE Generic Format Note: this section is not normative and is included for convenience. The generic header format of the 6LoRHE is specified in [RFC8138]. Figure 1 illustrates the 6LoRHE generic format.¶ 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ... -+ |1|0|1| Length | Type | Options | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ... -+ <--- length ---> Figure 1: 6LoRHE Format Length: Length of the 6LoRHE expressed in bytes, excluding the first 2 bytes. This enables a node to skip a 6LoRHE if the Type is not recognized or supported.¶ Type (variable length): Type of the 6LoRHE (see Section 7).¶ 4. Deadline-6LoRHE The Deadline-6LoRHE (see Figure 3) is a 6LoRHE [RFC8138] that provides the Deadline Time (DT) for an IPv6 datagram in a compressed form. Along with the DT, the header can include the Origination Time Delta (OTD) packet, which contains the time when the packet was enqueued for transmission (expressed as a value to be subtracted from DT); this enables a close estimate of the total delay incurred by a packet. The OTD field is initialized by the sender based on the current time at the outgoing network interface through which the packet is forwarded. Since the OTD is a delta, the length of the OTD field (i.e., OTL) will require fewer bits than the length of the DT field (i.e., DTL).¶ The DT field contains the value of the deadline time for the packet -- in other words, the time by which the application expects the packet to be delivered to the receiver.¶ packet_deadline_time = packet_origination_time + max_delay¶ In order to support delay-sensitive, deterministic applications, all nodes within the network should process the Deadline-6LoRHE. The DT and OTD packets are represented in time units determined by a scaling parameter in the Routing Header. The Network ASN (Absolute Slot Number) can be used as a time unit in a time-slotted synchronized network (for instance, a 6TiSCH network, where global time is maintained in the units of slot lengths of a certain resolution).¶ The delay experienced by packets in the network is a useful metric for network diagnostics and performance monitoring. Whenever a packet crosses into a network using a different reference clock, the DT field is updated to represent the same deadline time, but expressed using the reference clock of the interface into the new network. Then the origination time is the same as the current time when the packet is transmitted into the new network, minus the delay already experienced by the packet, say 'current_dly'. In this way, within the newly entered network, the packet will appear to have originated 'current_dly' time units earlier with respect to the reference clock of the new network.¶ new_network_origin_time = time_now_in_new_network - current_dly¶ The following example illustrates these calculations when a packet travels between three networks, each in a different time zone (TZ). 'x' can be 1, 2, or 3. Suppose that the deadline time as measured in TZ1 is 1050, and the origination time is 50. Suppose that the difference between TZ2 and TZ1 is 900, and the difference between TZ2 and TZ3 is 3600. In the figure, OT is the origination time as measured in the current time zone, and is equal to DT - OTD, that is, DT - 1000. Figure 2 uses the following abbreviations:¶ TxA: Time of arrival of packet in the network 'x'¶ TxD: Departure time of packet from the network 'x'¶ dlyx: Delay experienced by the packet in the previous network(s)¶ TZx: The time zone of network 'x'¶ TZ1 TZ2 TZ3 T1A=50| | | |---- dly1=50 | | | \\ | | | \\ | | | \\ T1D=100 |T2A=1000 | | -------->|----- dly2=450 | | | \\ | | | \\ | | | \\ T2D=1400 | T3A=5000 | | ------------------->|----------> | | | v v v dly0 = 0 dly1 = T1D-OT1 dly2 = T2D-OT2 = 100-50 = 1400 - 950 = 50 = 450 OT1 = T1A-dly0 OT2 = T2A-dly1 OT3 = T3A-dly2 = 50 = 1000-50 = 5000 - 450 = 950 = 4550 Figure 2: Deadline Time Update Example There are multiple ways that a packet can be delayed, including queuing delay, Media Access Control (MAC) layer contention delay, serialization delay, and propagation delay. Sometimes there are processing delays as well. For the purpose of determining whether or not the deadline has already passed, these various delays are not distinguished.¶ 5. Deadline-6LoRHE Format 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |1|0|1| Length | 6LoRH Type |D| TU| DTL | OTL | BinaryPt | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | DT (variable length) | OTD(variable length)(optional)| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 3: Deadline-6LoRHE Format Length (5 bits): Length represents the total length of the Deadline-6LoRHE Type measured in octets.¶ 6LoRH Type: 7 (See Section 7.)¶ D flag (1 bit): The 'D' flag, set by the sender, qualifies the action to be taken when a 6LoWPAN Router (6LR) detects that the deadline time has elapsed.¶ If 'D' bit is 1, then the 6LR MUST drop the packet if the deadline time is elapsed.¶ If 'D' bit is 0, the packet MAY be forwarded on an exception basis, if the forwarding node is NOT in a situation of constrained resource, and if there are reasons to suspect that downstream nodes might find it useful (delay measurements, interpolations, etc.).¶ TU (2 bits): Indicates the time units for DT and OTD fields. The encodings for the DT and OTD fields use the same time units and precision.¶ 00 Time represented in seconds and fractional seconds¶ 01 Reserved¶ 10 Network ASN¶ 11 Reserved¶ DTL (4 bits): Length of the DT field as an unsigned 4-bit integer, encoding the length of the field in hex digits, minus one.¶ OTL (3 bits): Length of the OTD field as an unsigned 3-bit integer, encoding the length of the field in hex digits. If OTL == 0, the OTD field is not present. The value of OTL MUST NOT exceed the value of DTL plus one.¶ For example, DTL = 0b0000 means the DT field in the 6LoRHE is 1 hex digit (4 bits) long. OTL = 0b111 means the OTD field is 7 hex digits (28 bits) long.¶ BinaryPt (6 bits): If zero, the number of bits of the integer part the DT is equal to the number of bits of the fractional part of the DT. If nonzero, the BinaryPt is a (2's complement) signed integer determining the position of the binary point within the value for the DT. This allows BinaryPt to be within the range [-32,31].¶ If BinaryPt value is positive, then the number of bits for the integer part of the DT is increased by the value of BinaryPt, and the number of bits for the fractional part of the DT is correspondingly reduced. This increases the range of DT.¶ If BinaryPt value is negative, then the number of bits for the integer part of the DT is decreased by the value of BinaryPt, and the number of bits for the fractional part of the DT is correspondingly increased. This increases the precision of the fractional seconds part of DT.¶ DT Value (4..64 bits): An unsigned integer of DTL+1 hex digits giving the DT value.¶ OTD Value (4..28 bits): If present, an unsigned integer of OTL hex digits giving the origination time as a negative offset from the DT value.¶ Whenever a sender initiates the IP datagram, it includes the Deadline-6LoRHE along with other 6LoRH information. For information about the time-synchronization requirements between sender and receiver, see Section 8.¶ For the chosen time unit, a compressed time representation is available as follows. First, the application on the originating node determines how many time bits are needed to represent the difference between the time at which the packet is launched and the deadline time, including the representation of fractional time units. That number of bits (say, N_bits) determines DTL as follows:¶ DTL = ((N_bits - 1) / 4)¶ The number of bits determined by DTL allows the counting of any number of fractional time units in the range of interest determined by DT and the OT. Denote this number of fractional time units to be Epoch_Range(DTL) (i.e., Epoch_Range is a function of DTL):¶ Epoch_Range(DTL) = 24*(DTL+1)¶ Each point of time between OT and DT is represented by a time unit and a fractional time unit; in this section, this combined representation is called a rational time unit (RTU). 1 RTU measures the smallest fractional time that can be represented between two points of time in the epoch (i.e., within the range of interest).¶ DT - OT cannot exceed 24*(DTL+1) == 16DTL+1. A low value of DTL leads to a small Epoch_Range; if DTL = 0, there will only be 16 RTUs within the Epoch_Range (i.e., Epoch_Range(DTL) = 161) for any TU. The values that can be represented in the current epoch are in the range [0, (Epoch_Range(DTL) - 1)].¶ Assuming wraparound does not occur, OT is represented by the value (OT mod Epoch_Range), and DT is represented by the value (DT mod Epoch_Range). All arithmetic is to be performed modulo (Epoch_Range(DTL)), yielding only positive values for DT - OT.¶ In order to allow fine-grained control over the setting of the deadline time, the fields for DT and OTD use fractional seconds. This is done by specifying a binary point, which allocates some of the bits for fractional times. Thus, all such fractions are restricted to be negative powers of 2. Each point of time between OT and DT is then represented by a time unit (either seconds or ASNs) and a fractional time unit.¶ Let OT_abs, DT_abs, and CT_abs denote the true (absolute) values (on the synchronized timelines) for OT, DT, and current time. Let N be the number of bits to be used to represent the integer parts of OT_abs, DT_abs, and CT_abs:¶ N = {4*(DTL+1)/2} + BinaryPt¶ The originating node has to pick a segment size (2^N) so that DT_abs - OT_abs < 2^N, and so that intermediate network nodes can detect whether or not CT_abs > DT_abs.¶ Given a value for N, the value for DT is represented in the deadline-time format by DT = (DT_abs mod 2^N). DT is typically represented as a positive value (even though negative modular values make sense). Also, let OT = OT_abs mod 2^N and CT = CT_abs mod 2^N, where both OT and CT are also considered as non-negative values.¶ When the packet is launched by the originating node, CT_abs == OT_abs and CT == OT. Given a particular value for N, then in order for downstream nodes to detect whether or not the deadline has expired (i.e., whether DT_abs > CT_abs), the following is required:¶ Assumption 1: DT_abs - OT_abs < 2^N.¶ Otherwise the ambiguity inherent in the modulus arithmetic yielding OT and DT will cause failure: one cannot measure time differences greater than 2^N using numbers in a time segment of length less than 2^N.¶ Under Assumption 1, downstream nodes must effectively check whether or not their current time is later than the DT -- but the value of the DT has to be inferred from the value of DT in the 6LoRHE, which is a number less than 2^N. This inference cannot be expected to reliably succeed unless Assumption 1 is valid, which means that the originating node has to be careful to pick proper values for DTL and for BinaryPt.¶ Since OT is not necessarily provided in the 6loRHE, there may be a danger of ambiguity. Surely, when DT = CT, the deadline time is expiring and the packet should be dropped. However, what if an intermediate node measures that CT = DT+1? Was the packet launched a short time before arrival at the intermediate node, or has the current time wrapped around so that CT_abs - OT_abs > 2^N?¶ In order to solve this problem, a safety margin has to be provided, in addition to requiring that DT_abs - OT_abs < 2^N. The value of this safety margin is proportional to 2^N and is determined by a new parameter, called the \"SAFETY_FACTOR\". Then, for safety the originating node MUST further ensure that (DT_abs - OT_abs) < 2^N*(1-SAFETY_FACTOR).¶ Each intermediate node that receives the packet with the Deadline-6LoRHE must determine whether ((CT - DT) mod 2^N) > SAFETY_FACTOR*2^N. If this test condition is not satisfied, the deadline time has expired. See Appendix A for more explanation about the test condition. All nodes that receive a packet with a Deadline-6LoRHE included MUST use the same value for the SAFETY_FACTOR. The SAFETY_FACTOR is to be chosen so that a packet with the Deadline-6LoRHE included will be tested against the current time at least once during every subinterval of length SAFETY_FACTOR*2^N. In this way, it can be guaranteed that the packet will be tested often enough to make sure it can be dropped whenever CT_abs > DT_abs. The value of SAFETY_FACTOR is specified in this document to be 20%.¶ Example: Consider a 6TiSCH network with time-slot length of 10 ms. Let the time units be ASNs (TU == (binary)0b10). Let the current ASN when the packet is originated be 54400, and the maximum allowable delay (max_delay) for the packet delivery be 1 second from the packet origination, then:¶ deadline_time = packet_origination_time + max_delay¶ = 0xD480 + 0x64 (Network ASNs)¶ = 0xD4E4 (Network ASNs)¶ Then, the Deadline-6LoRHE encoding with nonzero OTL is:¶ DTL = 3, OTL = 2, TU = 0b10, BinaryPt = 8, DT = 0xD4E4, OTD = 0x64¶ 6. Deadline-6LoRHE in Three Network Scenarios In this section, the Deadline-6LoRHE operation is described for three network scenarios. Figure 4 depicts a constrained time-synchronized LLN that has two subnets, N1 and N2, connected through 6LoWPAN Border Routers (6LBRs) [RFC8929] with different reference clock times, T1 and T2.¶ +-------------------+ | Time-Synchronized | | Network | +---------+---------+ | | | +--------------+--------------+ | | +-----+ +-----+ | | Backbone | | Backbone o | | router | | router +-----+ +-----+ o o o o o o o o o o o o o LLN o o LLN o o o o o o o o o o o 6LoWPAN Network (subnet N1) 6LoWPAN Network (subnet N2) Figure 4: Intra-Network Time Zone Scenario 6.1. Scenario 1: Endpoints in the Same DODAG (N1) In Scenario 1, shown in Figure 5, the Sender 'S' has an IP datagram to be routed to a Receiver 'R' within the same Destination-Oriented Directed Acyclic Graph (DODAG). For the route segment from the sender to the 6LBR, the sender includes a Deadline-6LoRHE by encoding the deadline time contained in the packet. Subsequently, each 6LR will perform hop-by-hop routing to forward the packet towards the 6LBR. Once the 6LBR receives the IP datagram, it sends the packet downstream towards 'R'.¶ In the case of a network running in RPL non-storing mode, the 6LBR generates an IPv6-in-IPv6 encapsulated packet when sending the packet downwards to the receiver [RFC9008]. The 6LBR copies the Deadline-6LoRHE from the sender-originated IP header to the outer IP header. The Deadline-6LoRHE contained in the inner IP header is removed.¶ +-------+ ^ | 6LBR | | | | | | | +-------+ | Upward | / /| \\ | Downward routing | (F) / | \\ | routing | / \\ (C) | (D) | | / \\ | | / |\\ | | (A) (B) : (E) : R | | /|\\ | \\ / \\ | | S : : : : : : v Figure 5: Endpoints within the Same DODAG (Subnet N1) At the tunnel endpoint of the encapsulation, the Deadline-6LoRHE is copied back from the outer header to inner header, and the inner IP packet is delivered to 'R'.¶ 6.2. Scenario 2: Endpoints in Networks with Dissimilar L2 Technologies In Scenario 2, shown in Figure 6, the Sender 'S' (belonging to DODAG 1) has an IP datagram to be routed to a Receiver 'R' over a time-synchronized IPv6 network. For the route segment from 'S' to 6LBR, 'S' includes a Deadline-6LoRHE. Subsequently, each 6LR will perform hop-by-hop routing to forward the packet towards the 6LBR. Once the deadline time information reaches the 6LBR, the packet will be encoded according to the mechanism prescribed in the other time-synchronized network depicted as \"Time-Synchronized Network\" in Figure 6. The specific data encapsulation mechanisms followed in the new network are beyond the scope of this document.¶ +----------------+ | Time- | | Synchronized |------R | Network | +----------------+ | | ----------+----------- ^ | | +---+---+ | | 6LBR | Upward | | | routing | +------++ | (F)/ /| \\ | / \\ / | \\ | / \\ (C) | (D) | (A) (B) | | / |\\ | /|\\ |\\ : (E) : : | S : : : : / \\ : : Figure 6: Packet Transmission in Dissimilar L2 Technologies or Internet For instance, the IP datagram could be routed to another time-synchronized, deterministic network using the mechanism specified in In-situ Operations, Administration, and Maintenance (IOAM) [IOAM-DATA], and then the deadline time would be updated according to the measurement of the current time in the new network.¶ 6.3. Scenario 3: Packet Transmission across Different DODAGs (N1 to N2) Consider the scenario depicted in Figure 7, in which the Sender 'S' (belonging to DODAG 1) has an IP datagram to be sent to Receiver 'R' belonging to another DODAG (DODAG 2). The operation of this scenario can be decomposed into a combination of Scenarios 1 and 2. For the route segment from 'S' to 6LBR1, 'S' includes the Deadline-6LoRHE. Subsequently, each 6LR will perform hop-by-hop operations to forward the packet towards 6LBR1. Once the IP datagram reaches 6LBR1 of DODAG1, 6LBR1 applies the same rule as described in Scenario 2 while routing the packet to 6LBR2 over a (likely) time-synchronized wired backhaul. The wired side of 6LBR2 can be mapped to the receiver of Scenario 2. Once the packet reaches 6LBR2, it updates the Deadline-6LoRHE by adding or subtracting the difference of time of DODAG2 and sends the packet downstream towards 'R'.¶ Time-Synchronized Network -+---------------------------+- | | DODAG1 +---+---+ +---+---+ DODAG2 | 6LBR1 | | 6LBR2 | | | | | +-------+ +-------+ (F)/ /| \\ (F)/ /| \\ / \\ / | \\ / \\ / | \\ / \\ (C) | (D) / \\ (C) | (D) (A) (B) | | / |\\ (A) (B) | | |\\ /|\\ |\\ : (E) : : /|\\ |\\ : (E) : : S : : : : / \\ : : : : : / \\ : : : R Network N1, time zone T1 Network N2, time zone T2 Figure 7: Packet Transmission in Different DODAGs (N1 to N2) Consider an example of a 6TiSCH network in which S in DODAG1 generates the packet at ASN 20000 to R in DODAG2. Let the maximum allowable delay be 1 second. The time-slot length in DODAG1 and DODAG2 is assumed to be 10 ms. Once the deadline time is encoded in Deadline-6LoRHE, the packet is forwarded to 6LBR1 of DODAG1. Suppose the packet reaches 6LBR1 of DODAG1 at ASN 20030.¶ current_time = ASN at 6LBR * slot_length_value¶ remaining_time = deadline_time - current_time¶ = ((packet_origination_time + max_delay) - current time)¶ = (20000 + 100) - 20030¶ = 30 (in Network ASNs)¶ = 30 * 103 milliseconds¶ Once the deadline time information reaches 6LBR2, the packet will be encoded according to the mechanism prescribed in the other time-synchronized network.¶ 7. IANA Considerations This document defines a new Elective 6LoWPAN Routing Header Type, and IANA has assigned the value 7 from the 6LoWPAN Dispatch Page 1 number space for this purpose.¶ Table 1: Entry in the \"Elective 6LoWPAN Routing Header Type\" Registry Value Description Reference 7 Deadline-6LoRHE RFC 9034 8. Synchronization Aspects The document supports time representation of the deadline and origination times carried in the packets traversing networks of different time zones having different time-synchronization mechanisms. For instance, in a 6TiSCH network where the time is maintained as ASN time slots, the time synchronization is achieved through beaconing among the nodes as described in [RFC7554]. There could be 6lo networks that employ NTP where the nodes are synchronized with an external reference clock from an NTP server. The specification of the time-synchronization method that needs to be followed by a network is beyond the scope of the document.¶ The number of hex digits chosen to represent DT, and the portion of that field allocated to represent the integer number of seconds, determines the meaning of t0, i.e., the meaning of DT == 0 in the chosen representation. If DTL == 0, then there are only 4 bits that can be used to count the time units, so that DT == 0 can never be more than 16 time units (or fractional time units) in the past. This then requires that the time synchronization between sender and receiver has to be tighter than 16 units. If the binary point were moved so that all the bits were used for fractional time units (e.g., fractional seconds or fractional ASNs), the time-synchronization requirement would be correspondingly tighter.¶ A 4-bit field for DT allows up to 16 hex digits, which is 64 bits. That is enough to represent the NTP 64-bit timestamp format [RFC5905], which is more than enough for the purposes of establishing deadline times. Unless the binary point is moved, this is enough to represent time since year 1900.¶ For example, suppose that DTL = 0b0000 and the DT bits are split evenly; then we can count up to 3.75 seconds by quarter-seconds.¶ If DTL = 3 and the DT bits are again split evenly, then we can count up to 256 seconds (in steps of 1/256 of a second).¶ In all cases, t0 is defined as specified in Section 5.¶ t0 = [current_time - (current_time mod (24*(DTL+1)))]¶ regardless of the choice of TU.¶ For TU = 0b00, the time units are seconds. With DTL == 15, and BinaryPt == 0, the epoch is (by default) January 1, 1900, at 00:00 UTC. The resolution is then 2-32 seconds, which is the maximum possible. This time format wraps around every 232 seconds, which is roughly 136 years.¶ For TU = 0b10, the time units are ASNs. The start time is relative, and updated by a mechanism that is out of scope for this document. With 10 ms slots, DTL = 15, and BinaryPt == 0, it would take over a year for the ASN to wrap around. Typically, the number of hex digits allocated for TU = 0b10 would be less than 15.¶ 9. Security Considerations The security considerations of [RFC4944] (Section 13), [RFC6282] (Section 6), and [RFC6553] (Section 5) apply. Using a compressed format as opposed to the full inline format is logically equivalent and does not create an opening for a new threat when compared to [RFC6550], [RFC6553], and [RFC6554].¶ The protocol elements specified in this document are designed to work in controlled operational environments (e.g., industrial process control and automation). In order to avoid misuse of the deadline information that could potentially result in a Denial of Service (DoS) attack, proper functioning of this deadline time mechanism requires the provisioning and management of network resources for supporting traffic flows with deadlines, performance monitoring, and admission control policy enforcement. The network provisioning can be done either centrally or in a distributed fashion. For example, tracks in a 6TiSCH network could be established by a centralized Path Computation Element (PCE), as described in the 6TiSCH architecture [RFC9030].¶ The security considerations of DetNet architecture [RFC8655] (Section 5) mostly apply to this document as well, as follows. To secure the request and control of resources allocated for tracks, authentication and authorization can be used for each device and network controller devices. In the case of distributed control protocols, security is expected to be provided by the security properties of the protocols in use.¶ The identification of deadline-bearing flows on a per-flow basis may provide attackers with additional information about the data flows compared to networks that do not include per-flow identification. The security implications of disclosing that additional information deserve consideration when implementing this deadline specification.¶ Because of the requirement of precise time synchronization, the accuracy, availability, and integrity of time synchronization is of critical importance. Extensive discussion of this topic can be found in [RFC7384].¶ 10. References 10.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4944] Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler, \"Transmission of IPv6 Packets over IEEE 802.15.4 Networks\", RFC 4944, DOI 10.17487/RFC4944, September 2007, <https://www.rfc-editor.org/info/rfc4944>. [RFC5905] Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch, \"Network Time Protocol Version 4: Protocol and Algorithms Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010, <https://www.rfc-editor.org/info/rfc5905>. [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6553] Hui, J. and JP. Vasseur, \"The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams\", RFC 6553, DOI 10.17487/RFC6553, March 2012, <https://www.rfc-editor.org/info/rfc6553>. [RFC6554] Hui, J., Vasseur, JP., Culler, D., and V. Manral, \"An IPv6 Routing Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6554, DOI 10.17487/RFC6554, March 2012, <https://www.rfc-editor.org/info/rfc6554>. [RFC7384] Mizrahi, T., \"Security Requirements of Time Protocols in Packet Switched Networks\", RFC 7384, DOI 10.17487/RFC7384, October 2014, <https://www.rfc-editor.org/info/rfc7384>. [RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>. [RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing Header\", RFC 8138, DOI 10.17487/RFC8138, April 2017, <https://www.rfc-editor.org/info/rfc8138>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC9030] Thubert, P., Ed., \"An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)\", RFC 9030, DOI 10.17487/RFC9030, May 2021, <https://www.rfc-editor.org/info/rfc9030>. 10.2. Informative References [6LO-BLEMESH] Gomez, C., Darroudi, S. M., Savolainen, T., and M. Spoerk, \"IPv6 Mesh over BLUETOOTH(R) Low Energy using IPSP\", Work in Progress, Internet-Draft, draft-ietf-6lo-blemesh-10, 22 April 2021, <https://tools.ietf.org/html/draft-ietf-6lo-blemesh-10>. [IEEE-BLE-MESH] Leonardi, L., Patti, G., and L. Lo Bello, \"Multi-Hop Real-Time Communications Over Bluetooth Low Energy Industrial Wireless Mesh Networks\", IEEE Access, Vol 6, pp. 26505-26519, DOI 10.1109/ACCESS.2018.2834479, May 2018, <https://doi.org/10.1109/ACCESS.2018.2834479>. [IEEE.1588.2008] IEEE, \"IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems\", DOI 10.1109/IEEESTD.2008.4579760, July 2008, <https://doi.org/10.1109/IEEESTD.2008.4579760>. [IEEE.802.15.4] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE Standard 802.15.4-2015, DOI 10.1109/IEEESTD.2016.7460875, April 2016, <https://ieeexplore.ieee.org/document/7460875>. [IEEE.802.1AS.2011] IEEE, \"IEEE Standard for Local and Metropolitan Area Networks - Timing and Synchronization for Time-Sensitive Applications in Bridged Local Area Networks\", IEEE Std 802.1AS-2011, DOI 10.1109/IEEESTD.2011.5741898, March 2011, <https://doi.org/10.1109/IEEESTD.2011.5741898>. [IOAM-DATA] Brockners, F., Ed., Bhandari, S., Ed., and T. Mizrahi, Ed., \"Data Fields for In-situ OAM\", Work in Progress, Internet-Draft, draft-ietf-ippm-ioam-data-12, 21 February 2021, <https://tools.ietf.org/html/draft-ietf-ippm-ioam-data-12>. [PHY-SPEC] Wi-SUN Alliance, \"Wi-SUN PHY Specification V1.0\", March 2016, <http://wi-sun.org>. [RFC8578] Grossman, E., Ed., \"Deterministic Networking Use Cases\", RFC 8578, DOI 10.17487/RFC8578, May 2019, <https://www.rfc-editor.org/info/rfc8578>. [RFC8929] Thubert, P., Ed., Perkins, C.E., and E. Levy-Abegnoli, \"IPv6 Backbone Router\", RFC 8929, DOI 10.17487/RFC8929, November 2020, <https://www.rfc-editor.org/info/rfc8929>. [RFC9008] Robles, M.I., Richardson, M., and P. Thubert, \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\", RFC 9008, DOI 10.17487/RFC9008, April 2021, <https://www.rfc-editor.org/info/rfc9008>. [Wi-SUN] Harada, H., Mizutani, K., Fujiwara, J., Mochizuki, K., Obata, K., and R. Okumura, \"IEEE 802.15.4g Based Wi-SUN Communication Systems\", IEICE Transactions on Communications, Volume E100.B, Issue 7, pp. 1032-1043, DOI 10.1587/transcom.2016SCI0002, January 2017, <https://doi.org/10.1587/transcom.2016SCI0002>. Appendix A. Modular Arithmetic Considerations Graphically, one might visualize the timeline as follows:¶ OT_abs CT_abs DT_abs -------|-------------|-------------|------------------> Figure 8: Absolute Timeline Representation In Figure 8, the value of CT_abs is envisioned as traveling to the right as time progresses, getting farther away from OT_abs and getting closer to DT_abs. The timeline is considered to be subdivided into time subintervals [i,j] starting and ending at absolute times equal to k*(2^N), for integer values of k. Let I_k = k*(2^N) and I_(k+1) = (k+1)*2^N. Intervals starting at I_k and I_(k+1) may occur at various placements in the above timeline. Even though OT_abs is always less than DT_abs, it could be that DT < OT because of the way that DT and OT are represented within the range [0, 2^N) and similarly for CT_abs and CT compared to OT and DT.¶ Representing the above situation in time segments of length 2^N (and values OT, CT, DT) results in several cases where the deadline time has not elapsed:¶ 1) OT < CT < DT (e.g., I_k < OT_abs < CT_abs < DT_abs < I_(k+1) )¶ 2) DT < OT < CT (e.g., I_k < OT_abs < CT_abs < I_(k+1) < DT_abs )¶ 3) CT < DT < OT (e.g., I_k < OT_abs < I_(k+1) < CT_abs < DT_abs )¶ In the following cases, the deadline time has elapsed and the packet should be dropped.¶ 4) DT < CT < OT 5) OT < DT < CT 6) CT < OT < DT Again in Figure 8, consider CT_abs as time moving away from OT_abs and towards DT_abs. For times CT_abs before the expiration of the deadline time, we also have CT_abs - OT_abs == CT - OT mod 2^N and similarly for DT_abs - CT_abs.¶ As time proceeds, DT_abs - CT_abs gets smaller. When the deadline time expires, DT_abs - CT_abs begins to grow negative. A proper selection for SAFETY_FACTOR allows it to go slightly negative but for an intermediate point to detect that it has gone negative. Note that in modular arithmetic, \"slightly negative\" means exactly the same as \"almost as large as the modulus (i.e., 2^N)\". Now consider the test condition ((CT - DT) mod 2^N) > SAFETY_FACTOR*2^N.¶ (DT_abs - OT_abs) < 2^N*(1-SAFETY_FACTOR) satisfies the test condition when CT_abs == OT_abs (i.e., when the packet is launched). In modular arithmetic, 2^N*(1-SAFETY_FACTOR) == 2^N - 2^N*SAFETY_FACTOR == -2^N*(SAFETY_FACTOR). Then DT_abs - OT_abs < -2^N*(1-SAFETY_FACTOR). Inverting the inequality, OT_abs - DT_abs > 2^N*(1-SAFETY_FACTOR), and thus at launch CT_abs - DT_abs > 2^N*(1-SAFETY_FACTOR).¶ As CT_abs grows larger, CT_abs - DT_abs gets LARGER in (non-negative) modular arithmetic until the time at which CT_ABS == DT_ABS, and suddenly CT_ABS - DT_abs becomes zero. Also suddenly, the test condition is no longer fulfilled.¶ As CT_abs grows still larger, CT_abs > DT_abs, and we need to detect this condition as soon as possible. Requiring the SAFETY_FACTOR enables this detection until CT_abs exceeds DT_abs by an amount equal to SAFETY_FACTOR*2^N.¶ A note about \"inverting the inequality\". Observe that a < b implies that -a > -b on the real number line. Also, (a - b) == -(b - a). These facts hold also for modular arithmetic.¶ During the times prior to the expiration of the deadline, for Safe = 2^N*SAFETY_FACTOR we have:¶ (DT_abs - 2^N) < OT_abs < CT_abs < DT_abs < DT_abs+Safe¶ Naturally, DT_abs - 2^N == DT_abs mod 2^N == DT.¶ Again considering Figure 8, it is easy to see that {CT_abs - (DT_abs - 2^N)} gets larger and larger until the time at which CT_abs = DT_abs, which is the first time at which CT - DT == 0 mod 2^N. As CT_abs increases past the deadline time, 0 < CT_abs - DT_abs < Safe. In this range, any intermediate node can detect that the deadline has expired. As CT_abs increases past DT_abs+Safe, it is no longer possible for an intermediate node to determine with certainty whether or not the deadline time has expired. These statements also apply when reduced to modular arithmetic in the modulus 2^N.¶ In particular, the test condition no longer allows detection of deadline expiration when the current time becomes later than (DT_abs+Safe). In order to maintain correctness even for packets that are forwarded after expiration (i.e., the 'D' flag), N has to be chosen to be so large that the test condition will not fail -- i.e., that in all scenarios of interest, the packet will be dropped before the current time becomes equal to DT_abs+2^N*SAFETY_FACTOR.¶ Acknowledgments The authors thank Pascal Thubert for suggesting the idea and encouraging the work. Thanks to Shwetha Bhandari's suggestions, which were instrumental in extending the timing information to heterogeneous networks. The authors acknowledge the 6TiSCH WG members for their inputs on the mailing list. Special thanks to Jerry Daniel, Dan Frost (Routing Directorate), Charlie Kaufman (Security Directorate), Seema Kumar, Tal Mizrahi, Avinash Mohan, Shalu Rajendran, Anita Varghese, and Dale Worley (General Area Review Team (Gen-ART) review) for their support and valuable feedback.¶ Authors' Addresses Lijo Thomas Centre for Development of Advanced Computing Vellayambalam Trivandrum 695033 India Email: lijo@cdac.in Satish Anamalamudi SRM University-AP Amaravati Campus Amaravati, Andhra Pradesh 522 502 India Email: satishnaidu80@gmail.com S.V.R. Anand Indian Institute of Science Bangalore 560012 India Email: anandsvr@iisc.ac.in Malati Hegde Indian Institute of Science Bangalore 560012 India Email: malati@iisc.ac.in Charles E. Perkins Lupin Lodge 20600 Aldercroft Heights Rd. Los Gatos, CA 95033 United States of America Email: charliep@computer.org"
    },
    {
        "Number": "9037",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Deterministic Networking (DetNet) Data Plane: MPLS over IEEE 802.1 Time-Sensitive Networking (TSN)",
        "Authors": [
            "B. Varga",
            "Ed.",
            "J. Farkas",
            "A. Malis",
            "S. Bryant"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document specifies the Deterministic Networking (DetNet) MPLS data plane when operating over an IEEE 802.1 Time-Sensitive Networking (TSN) sub-network. This document does not define new procedures or processes.  Whenever this document makes statements or recommendations, they are taken from normative text in the referenced RFCs.",
        "Keywords": [
            "sub-network",
            "flow mapping"
        ],
        "Content": "RFC 9037: Deterministic Networking (DetNet) Data Plane: MPLS over IEEE 802.1 Time-Sensitive Networking (TSN) RFC 9037 DetNet MPLS over TSN June 2021 Varga, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9037 Category: Informational Published: June 2021 ISSN: 2070-1721 Authors: B. Varga, Ed. Ericsson J. Farkas Ericsson A. Malis Malis Consulting S. Bryant Futurewei Technologies RFC 9037 Deterministic Networking (DetNet) Data Plane: MPLS over IEEE 802.1 Time-Sensitive Networking (TSN) Abstract This document specifies the Deterministic Networking (DetNet) MPLS data plane when operating over an IEEE 802.1 Time-Sensitive Networking (TSN) sub-network. This document does not define new procedures or processes. Whenever this document makes statements or recommendations, they are taken from normative text in the referenced RFCs.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9037.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Terms Used in This Document 2.2.  Abbreviations 3.  DetNet MPLS Data Plane Overview 4.  DetNet MPLS Operation over IEEE 802.1 TSN Sub-networks 4.1.  Functions for DetNet Flow to TSN Stream Mapping 4.2.  TSN Requirements of MPLS DetNet Nodes 4.3.  Service Protection within the TSN Sub-network 4.4.  Aggregation during DetNet Flow to TSN Stream Mapping 5.  Management and Control Implications 6.  Security Considerations 7.  IANA Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction Deterministic Networking (DetNet) is a service that can be offered by a network to DetNet flows. DetNet provides these flows with low packet loss rate and assured maximum end-to-end delivery latency. General background and concepts of DetNet can be found in [RFC8655].¶ The DetNet architecture decomposes DetNet-related data plane functions into two sub-layers: a service sub-layer and a forwarding sub-layer. The service sub-layer is used to provide DetNet service protection and reordering. The forwarding sub-layer is used to provide congestion protection (low loss, assured latency, and limited reordering) leveraging MPLS Traffic Engineering mechanisms.¶ [RFC8964] specifies the DetNet data plane operation for an MPLS-based PSN. MPLS-encapsulated DetNet flows can be carried over network technologies that can provide the DetNet-required level of service. This document focuses on the scenario where MPLS (DetNet) nodes are interconnected by an IEEE 802.1 TSN sub-network. There is close cooperation between the IETF DetNet Working Group and the IEEE 802.1 Time-Sensitive Networking Task Group (TSN TG).¶ 2. Terminology 2.1. Terms Used in This Document This document uses the terminology established in the DetNet architecture [RFC8655] [RFC8964]. TSN-specific terms are defined in the TSN TG of the IEEE 802.1 Working Group. The reader is assumed to be familiar with these documents and their terminology.¶ 2.2. Abbreviations The following abbreviations are used in this document:¶ A-Label Aggregation label; a special case of an S-Label.¶ d-CW DetNet Control Word¶ DetNet Deterministic Networking¶ F-Label Forwarding label that identifies the LSP used by a DetNet flow.¶ FRER Frame Replication and Elimination for Redundancy (TSN function)¶ L2 Layer 2¶ L3 Layer 3¶ LSP Label Switched Path¶ MPLS Multiprotocol Label Switching¶ PREOF Packet Replication, Elimination, and Ordering Functions¶ PSN Packet Switched Network¶ PW Pseudowire¶ RSVP-TE Resource Reservation Protocol - Traffic Engineering¶ S-Label Service label¶ TSN Time-Sensitive Networking¶ 3. DetNet MPLS Data Plane Overview The basic approach defined in [RFC8964] supports the DetNet service sub-layer based on existing PW encapsulations and mechanisms and supports the DetNet forwarding sub-layer based on existing MPLS Traffic Engineering encapsulations and mechanisms.¶ A node operates on a DetNet flow in the DetNet service sub-layer, i.e., a node processing a DetNet packet that has the service label (S-Label) as the top of stack uses the local context associated with that S-Label, for example, a received forwarding label (F-Label), to determine what local DetNet operation(s) is applied to that packet. An S-Label may be unique when taken from the platform label space [RFC3031], which would enable correct DetNet flow identification regardless of which input interface or LSP the packet arrives on. The service sub-layer functions (i.e., PREOF) use a d-CW.¶ The DetNet MPLS data plane builds on MPLS Traffic Engineering encapsulations and mechanisms to provide a forwarding sub-layer that is responsible for providing resource allocation and explicit routes. The forwarding sub-layer is supported by one or more F-Labels.¶ DetNet edge/relay nodes are DetNet service sub-layer-aware, understand the particular needs of DetNet flows, and provide both DetNet service and forwarding sub-layer functions. They add, remove, and process d-CWs, S-Labels, and F-Labels as needed. MPLS DetNet nodes and transit nodes include DetNet forwarding sub-layer functions, notable support for explicit routes, and resource allocation to eliminate (or reduce) congestion loss and jitter. Unlike other DetNet node types, transit nodes provide no service sub-layer processing.¶ MPLS (DetNet) nodes and transit nodes interconnected by a TSN sub-network are the primary focus of this document. The mapping of DetNet MPLS flows to TSN Streams and TSN protection mechanisms are covered in Section 4.¶ 4. DetNet MPLS Operation over IEEE 802.1 TSN Sub-networks The DetNet WG collaborates with IEEE 802.1 TSN in order to define a common architecture for both Layer 2 and Layer 3 that maintains consistency across diverse networks. Both DetNet MPLS and TSN use the same techniques to provide their deterministic service:¶ Service protection¶ Resource allocation¶ Explicit routes¶ As described in the DetNet architecture [RFC8655], from the MPLS perspective, a sub-network provides a single-hop connection between MPLS (DetNet) nodes. Functions used for resource allocation and explicit routes are treated as domain internal functions and do not require function interworking across the DetNet MPLS network and the TSN sub-network.¶ In the case of the service protection function, due to the similarities of the DetNet PREOF and TSN FRER functions, some level of interworking is possible. However, such interworking is out of scope of this document and left for further study.¶ Figure 1 illustrates a scenario where two MPLS (DetNet) nodes are interconnected by a TSN sub-network. Node-1 is single-homed, and Node-2 is dual-homed to the TSN sub-network.¶ MPLS (DetNet) MPLS (DetNet) Node-1 Node-2 +----------+ +----------+ <--| Service* |-- DetNet flow ---| Service* |--> +----------+ +----------+ |Forwarding| |Forwarding| +--------.-+ <-TSN Str-> +-.-----.--+ \\ ,-------. / / +----[ TSN Sub-]---+ / [ network ]--------+ `-------' <---------------- DetNet MPLS ---------------> Note: * no service sub-layer required for transit nodes Figure 1: DetNet-Enabled MPLS Network over a TSN Sub-network At the time of this writing, the TSN TG of the IEEE 802.1 Working Group have defined (and are defining) a number of amendments to [IEEE8021Q] that provide zero congestion loss and bounded latency in bridged networks. Furthermore, [IEEE8021CB] defines frame replication and elimination functions for reliability that should prove both compatible with and useful to DetNet networks. All these functions have to identify flows that require TSN treatment (i.e., applying TSN functions during forwarding).¶ TSN capabilities of the TSN sub-network are made available for MPLS (DetNet) flows via the protocol interworking function defined in Annex C.5 of [IEEE8021CB]. For example, when applied on the TSN edge port, it can convert an ingress unicast MPLS (DetNet) flow to use a specific Layer 2 multicast destination Media Access Control (MAC) address and a VLAN, in order to direct the packet through a specific path inside the bridged network. A similar interworking function pair at the other end of the TSN sub-network would restore the packet to its original Layer 2 destination MAC address and VLAN.¶ The placement of TSN functions depends on the TSN capabilities of the nodes along the path. MPLS (DetNet) nodes may or may not support TSN functions. For a given TSN Stream (i.e., DetNet flow), an MPLS (DetNet) node is treated as a Talker or a Listener inside the TSN sub-network.¶ 4.1. Functions for DetNet Flow to TSN Stream Mapping Mapping of a DetNet MPLS flow to a TSN Stream is provided via the combination of a passive and an active Stream identification function that operate at the frame level. The passive Stream identification function is used to catch the MPLS label(s) of a DetNet MPLS flow, and the active Stream identification function is used to modify the Ethernet header according to the ID of the mapped TSN Stream.¶ Clause 6.8 of [IEEEP8021CBdb] defines a Mask-and-Match Stream identification function that can be used as a passive function for MPLS DetNet flows.¶ Clause 6.6 of [IEEE8021CB] defines an Active Destination MAC and a VLAN Stream identification function that can replace some Ethernet header fields, namely (1) the destination MAC address, (2) the VLAN-ID, and (3) priority parameters with alternate values. Replacement is provided for the frame that is passed either down the stack from the upper layers or up the stack from the lower layers.¶ Active Destination MAC and VLAN Stream identification can be used within a Talker to set flow identity or a Listener to recover the original addressing information. It can also be used in a TSN bridge that is providing translation as a proxy service for an end system.¶ 4.2. TSN Requirements of MPLS DetNet Nodes This section covers required behavior of a TSN-aware MPLS (DetNet) node using a TSN sub-network. The implementation of TSN packet-processing functions must be compliant with the relevant IEEE 802.1 standards.¶ From the TSN sub-network perspective, MPLS (DetNet) nodes are treated as a Talker or Listener, which may be (1) TSN-unaware or (2) TSN-aware.¶ In cases of TSN-unaware MPLS DetNet nodes, the TSN relay nodes within the TSN sub-network must modify the Ethernet encapsulation of the DetNet MPLS flow (e.g., MAC translation, VLAN-ID setting, sequence number addition, etc.) to allow proper TSN-specific handling inside the sub-network. There are no requirements defined for TSN-unaware MPLS DetNet nodes in this document.¶ MPLS (DetNet) nodes that are TSN-aware can be treated as a combination of a TSN-unaware Talker/Listener and a TSN-Relay, as shown in Figure 2. In such cases, the MPLS (DetNet) node must provide the TSN sub-network-specific Ethernet encapsulation over the link(s) towards the sub-network.¶ MPLS (DetNet) Node <----------------------------------> +----------+ <--| Service* |-- DetNet flow ------------------ +----------+ |Forwarding| +----------+ +---------------+ | L2 | | L2 Relay with |<--- TSN --- | | | TSN function | Stream +-----.----+ +--.------.---.-+ \\__________/ \\ \\______ \\_________ TSN-unaware Talker / TSN-Bridge Listener Relay <----- TSN Sub-network ----- <------- TSN-aware Tlk/Lstn -------> Note: * no service sub-layer required for transit nodes Figure 2: MPLS (DetNet) Node with TSN Functions A TSN-aware MPLS (DetNet) node implementation must support the Stream identification TSN component for recognizing flows.¶ A Stream identification component must be able to instantiate the following functions: (1) Active Destination MAC and VLAN Stream identification function, (2) Mask-and-Match Stream identification function, and (3) the related managed objects in Clause 9 of [IEEE8021CB] and [IEEEP8021CBdb].¶ A TSN-aware MPLS (DetNet) node implementation must support the Sequencing function and the Sequence encode/decode function as defined in Clauses 7.4 and 7.6 of [IEEE8021CB] in order for FRER to be used inside the TSN sub-network.¶ The Sequence encode/decode function must support the Redundancy tag (R-TAG) format as per Clause 7.8 of [IEEE8021CB].¶ A TSN-aware MPLS (DetNet) node implementation must support the Stream splitting function and the Individual recovery function as defined in Clauses 7.5 and 7.7 of [IEEE8021CB] in order for that node to be a replication or elimination point for FRER.¶ 4.3. Service Protection within the TSN Sub-network TSN Streams supporting DetNet flows may use FRER as defined in Clause 8 of [IEEE8021CB] based on the loss service requirements of the TSN Stream, which is derived from the DetNet service requirements of the DetNet mapped flow. The specific operation of FRER is not modified by the use of DetNet and follows [IEEE8021CB].¶ FRER function and the provided service recovery is available only within the TSN sub-network as the TSN Stream-ID and the TSN sequence number are not valid outside the sub-network. An MPLS (DetNet) node represents an L3 border, and as such, it terminates all related information elements encoded in the L2 frames.¶ As the Stream-ID and the TSN sequence number are paired with similar MPLS flow parameters, FRER can be combined with PREOF functions. Such service protection interworking scenarios may require moving sequence number fields among TSN (L2) and PW (MPLS) encapsulations, and they are left for further study.¶ 4.4. Aggregation during DetNet Flow to TSN Stream Mapping Implementation of this document shall use management and control information to map a DetNet flow to a TSN Stream. N:1 mapping (aggregating DetNet flows in a single TSN Stream) shall be supported. The management or control function that provisions flow mapping shall ensure that adequate resources are allocated and configured to provide proper service requirements of the mapped flows.¶ 5. Management and Control Implications Information related to DetNet flow and TSN Stream mapping is required only for TSN-aware MPLS (DetNet) nodes. From the data plane perspective, there is no practical difference based on the origin of flow-mapping-related information (management plane or control plane).¶ The following summarizes the set of information that is needed to configure DetNet MPLS over TSN:¶ DetNet MPLS-related configuration information according to the DetNet role of the DetNet MPLS node, as per [RFC8964].¶ TSN-related configuration information according to the TSN role of the DetNet MPLS node, as per [IEEE8021Q], [IEEE8021CB], and [IEEEP8021CBdb].¶ Mapping between a DetNet MPLS flow(s) (label information: A-Labels, S-Labels, and F-Labels as defined in [RFC8964]) and a TSN Stream(s) (as Stream identification information defined in [IEEEP8021CBdb]). Note that managed objects for TSN Stream identification can be found in [IEEEP8021CBcv].¶ This information must be provisioned per DetNet flow.¶ Mappings between DetNet and TSN management and control planes are out of scope of this document. Some of the challenges are highlighted below.¶ TSN-aware MPLS DetNet nodes are members of both the DetNet domain and the TSN sub-network. Within the TSN sub-network, the TSN-aware MPLS (DetNet) node has a TSN-aware Talker/Listener role, so TSN-specific management and control plane functionalities must be implemented. There are many similarities in the management plane techniques used in DetNet and TSN, but that is not the case for the control plane protocols. For example, RSVP-TE and the Multiple Stream Registration Protocol (MSRP) behave differently. Therefore, management and control plane design are important aspects of scenarios where mapping between DetNet and TSN is required.¶ In order to use a TSN sub-network between DetNet nodes, DetNet-specific information must be converted to information specific to the TSN sub-network. DetNet flow ID and flow-related parameters/requirements must be converted to a TSN Stream ID and stream-related parameters/requirements. Note that, as the TSN sub-network is just a portion of the end-to-end DetNet path (i.e., a single hop from the MPLS perspective), some parameters (e.g., delay) may differ significantly. Other parameters (like bandwidth) also may have to be tuned due to the L2 encapsulation used within the TSN sub-network.¶ In some cases, it may be challenging to determine some TSN-Stream-related information. For example, on a TSN-aware MPLS (DetNet) node that acts as a Talker, it is quite obvious which DetNet node is the Listener of the mapped TSN Stream (i.e., the MPLS next hop). However, it may be not trivial to locate the point/interface where that Listener is connected to the TSN sub-network. Such attributes may require interaction between control and management plane functions and between DetNet and TSN domains.¶ Mapping between DetNet flow identifiers and TSN Stream identifiers, if not provided explicitly, can be done by a TSN-aware MPLS (DetNet) node locally based on information provided for configuration of the TSN Stream identification functions (Mask-and-Match Stream identification and active Stream identification).¶ Triggering the setup/modification of a TSN Stream in the TSN sub-network is an example where management and/or control plane interactions are required between the DetNet and TSN sub-network. TSN-unaware MPLS (DetNet) nodes make such a triggering even more complicated as they are fully unaware of the sub-network and run independently.¶ Configuration of TSN-specific functions (e.g., FRER) inside the TSN sub-network is a TSN-domain-specific decision and may not be visible in the DetNet domain. Service protection interworking scenarios are left for further study.¶ 6. Security Considerations Security considerations for DetNet are described in detail in [DETNET-SECURITY]. General security considerations are described in [RFC8655]. Considerations specific to the DetNet MPLS data plane are summarized in [RFC8964]. This section considers exclusively security considerations that are specific to the DetNet MPLS over TSN sub-network scenario.¶ The sub-network between DetNet nodes needs to be subject to appropriate confidentiality. Additionally, knowledge of what DetNet/TSN services are provided by a sub-network may supply information that can be used in a variety of security attacks. The ability to modify information exchanges between connected DetNet nodes may result in bogus operations. Therefore, it is important that the interface between DetNet nodes and the TSN sub-network are subject to authorization, authentication, and encryption.¶ The TSN sub-network operates at Layer 2, so various security mechanisms defined by IEEE can be used to secure the connection between the DetNet nodes (e.g., encryption may be provided using MACsec [IEEE802.1AE-2018]).¶ 7. IANA Considerations This document has no IANA actions.¶ 8. References 8.1. Normative References [IEEE8021CB] IEEE, \"IEEE Standard for Local and metropolitan area networks -- Frame Replication and Elimination for Reliability\", IEEE Std 802.1CB-2017, DOI 10.1109/IEEESTD.2017.8091139, October 2017, <https://ieeexplore.ieee.org/document/8091139>. [IEEEP8021CBdb] IEEE, \"Draft Standard for Local and metropolitan area networks -- Frame Replication and Elimination for Reliability -- Amendment: Extended Stream Identification Functions\", IEEE P802.1CBdb / D1.3, April 2021, <https://1.ieee802.org/tsn/802-1cbdb/>. [RFC3031] Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol Label Switching Architecture\", RFC 3031, DOI 10.17487/RFC3031, January 2001, <https://www.rfc-editor.org/info/rfc3031>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8964] Varga, B., Ed., Farkas, J., Berger, L., Malis, A., Bryant, S., and J. Korhonen, \"Deterministic Networking (DetNet) Data Plane: MPLS\", RFC 8964, DOI 10.17487/RFC8964, January 2021, <https://www.rfc-editor.org/info/rfc8964>. 8.2. Informative References [DETNET-SECURITY] Grossman, E., Ed., Mizrahi, T., and A. Hacker, \"Deterministic Networking (DetNet) Security Considerations\", Work in Progress, Internet-Draft, draft-ietf-detnet-security-16, 2 March 2021, <https://tools.ietf.org/html/draft-ietf-detnet-security-16>. [IEEE802.1AE-2018] IEEE, \"IEEE Standard for Local and metropolitan area networks-Media Access Control (MAC) Security\", IEEE Std 802.1AE-2018, DOI 10.1109/IEEESTD.2018.8585421, December 2018, <https://ieeexplore.ieee.org/document/8585421>. [IEEE8021Q] IEEE, \"IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks\", IEEE Std 802.1Q-2018, DOI 10.1109/IEEESTD.2018.8403927, July 2018, <https://ieeexplore.ieee.org/document/8403927/>. [IEEEP8021CBcv] IEEE 802.1, \"Draft Standard for Local and metropolitan area networks -- Frame Replication and Elimination for Reliability -- Amendment: Information Model, YANG Data Model and Management Information Base Module\", IEEE P802.1CBcv, Draft 1.1, February 2021, <https://1.ieee802.org/tsn/802-1cbcv/>. Acknowledgements The authors wish to thank Norman Finn, Lou Berger, Craig Gunther, Christophe Mangin, and Jouni Korhonen for their various contributions to this work.¶ Authors' Addresses Balázs Varga (editor) Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: balazs.a.varga@ericsson.com János Farkas Ericsson Budapest Magyar Tudosok krt. 11. 1117 Hungary Email: janos.farkas@ericsson.com Andrew G. Malis Malis Consulting Email: agmalis@gmail.com Stewart Bryant Futurewei Technologies Email: sb@stewartbryant.com"
    },
    {
        "Number": "9038",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Extensible Provisioning Protocol (EPP) Unhandled Namespaces",
        "Authors": [
            "J. Gould",
            "M. Casanova"
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "The Extensible Provisioning Protocol (EPP), as defined in RFC 5730, includes a method for the client and server to determine the objects to be managed during a session and the object extensions to be used during a session.  The services are identified using namespace URIs, and an \"unhandled namespace\" is one that is associated with a service not supported by the client. This document defines an operational practice that enables the server to return information associated with unhandled namespace URIs and that maintains compliance with the negotiated services defined in RFC 5730.",
        "Keywords": [
            "login",
            "greeting",
            "URI",
            "namespace",
            "response",
            "general",
            "poll",
            "object-level",
            "command-response",
            "signal",
            "signaling"
        ],
        "Content": "RFC 9038: Extensible Provisioning Protocol (EPP) Unhandled Namespaces RFC 9038 Unhandled Namespaces May 2021 Gould & Casanova Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9038 Category: Standards Track Published: May 2021 ISSN: 2070-1721 Authors: J. Gould VeriSign, Inc. M. Casanova SWITCH RFC 9038 Extensible Provisioning Protocol (EPP) Unhandled Namespaces Abstract The Extensible Provisioning Protocol (EPP), as defined in RFC 5730, includes a method for the client and server to determine the objects to be managed during a session and the object extensions to be used during a session. The services are identified using namespace URIs, and an \"unhandled namespace\" is one that is associated with a service not supported by the client. This document defines an operational practice that enables the server to return information associated with unhandled namespace URIs and that maintains compliance with the negotiated services defined in RFC 5730.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9038.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Conventions Used in This Document 2.  Unhandled Namespaces 3.  Use of EPP <extValue> for Unhandled Namespace Data 3.1.  Unhandled Object-Level Extension 3.2.  Unhandled Command-Response Extension 4.  Signaling Client and Server Support 5.  Usage with General EPP Responses 6.  Usage with Poll-Message EPP Responses 7.  Implementation Considerations 7.1.  Client Implementation Considerations 7.2.  Server Implementation Considerations 8.  IANA Considerations 8.1.  XML Namespace 8.2.  EPP Extension Registry 9.  Security Considerations 10. References 10.1.  Normative References 10.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction The Extensible Provisioning Protocol (EPP), as defined in [RFC5730], includes a method for the client and server to determine the objects to be managed during a session and the object extensions to be used during a session. The services are identified using namespace URIs. How should the server handle service data that needs to be returned in the response when the client does not support the required service namespace URI, which is referred to as an \"unhandled namespace\"? An unhandled namespace is a significant issue for the processing of the poll messages described in [RFC5730], since poll messages are inserted by the server prior to knowing the supported client services, and the client needs to be capable of processing all poll messages. Returning an unhandled namespace poll message is not compliant with the negotiated services defined in [RFC5730], and returning an error makes the unhandled namespace poll message a poison message by halting the processing of the poll queue. An unhandled namespace is also an issue for general EPP responses when the server has information that it cannot return to the client due to the client's supported services. The server should be able to return unhandled namespace information that the client can process later. This document defines an operational practice that enables the server to return information associated with unhandled namespace URIs and that maintains compliance with the negotiated services defined in [RFC5730].¶ 1.1. Conventions Used in This Document The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ XML [W3C.REC-xml11-20060816] is case sensitive. Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented in order to develop a conforming implementation.¶ In examples, \"S:\" represents lines returned by a protocol server. Indentation and white space in examples are provided only to illustrate element relationships and are not required features of this protocol.¶ The examples reference XML namespace prefixes that are used for the associated XML namespaces. Implementations MUST NOT depend on the example XML namespaces and instead employ a proper namespace-aware XML parser and serializer to interpret and output the XML documents. The example namespace prefixes used and their associated XML namespaces include:¶ changePoll: urn:ietf:params:xml:ns:changePoll-1.0¶ domain: urn:ietf:params:xml:ns:domain-1.0¶ secDNS: urn:ietf:params:xml:ns:secDNS-1.1¶ In the template example XML, placeholder content is represented by the following variables:¶ [NAMESPACE-XML]: XML content associated with a login service namespace URI. An example is the <domain:infData> element content in [RFC5731].¶ [NAMESPACE-URI]: XML namespace URI associated with the [NAMESPACE-XML] XML content. An example is \"urn:ietf:params:xml:ns:domain-1.0\" in [RFC5731].¶ 2. Unhandled Namespaces An unhandled namespace is an XML namespace that is associated with a response extension that is not included in the client-specified EPP login services of [RFC5730]. The EPP login services consist of the set of XML namespace URIs included in the <objURI> or <extURI> elements of the EPP <login> command [RFC5730]. The services supported by the server are included in the <objURI> and <extURI> elements of the EPP <greeting> [RFC5730], which should be a superset of the login services included in the EPP <login> command. A server may have information associated with a specific namespace that it needs to return in the response to a client. The unhandled namespaces problem exists when the server has information that it needs to return to the client, but the namespace of the information is not supported by the client based on the negotiated EPP <login> command services.¶ 3. Use of EPP <extValue> for Unhandled Namespace Data In [RFC5730], the <extValue> element is used to provide additional error diagnostic information, including the <value> element that identifies the client-provided element that caused a server error condition and the <reason> element containing the human-readable message that describes the reason for the error. This operational practice extends the use of the <extValue> element for the purpose of returning unhandled namespace information in a successful response.¶ When a server has data to return to the client that the client does not support based on the login services, the server MAY return a successful response with the data for each unsupported namespace moved into an <extValue> element [RFC5730]. The unhandled namespace will not cause an error response, but the unhandled namespace data will instead be moved to an <extValue> element, along with a reason why the unhandled namespace data could not be included in the appropriate location of the response. The <extValue> element will not be processed by the XML processor. The <extValue> element contains the following child elements:¶ <value>: Contains a child element with the unhandled namespace XML. The unhandled namespace MUST be declared in the child element or any containing element, including the root element. XML processing of the <value> element is disabled by the XML schema in [RFC5730], so the information can safely be returned in the <value> element.¶ <reason>: A formatted, human-readable message that indicates the reason the unhandled namespace data was not returned in the appropriate location of the response. The formatted reason SHOULD follow the Augmented Backus-Naur Form (ABNF) grammar [RFC5234] format: NAMESPACE-URI \" not in login services\", where NAMESPACE-URI is the unhandled XML namespace like \"urn:ietf:params:xml:ns:domain-1.0\" in [RFC5731].¶ This document applies to the handling of unsupported namespaces for object-level extensions and command-response extensions [RFC3735]. This document does not apply to the handling of unsupported namespaces for protocol-level extensions or authentication-information extensions [RFC3735]. Refer to the following sections on how to handle an unsupported object-level extension namespace or an unsupported command-response extension namespace.¶ 3.1. Unhandled Object-Level Extension An object-level extension in [RFC5730] is a child element of the <resData> element. If the client does not handle the namespace of the object-level extension, then the <resData> element is removed and its object-level extension child element is moved into an <extValue> <value> element [RFC5730], with the namespace URI included in the corresponding <extValue> <reason> element. The response becomes a general EPP response without the <resData> element.¶ Below is a template response for a supported object-level extension. The [NAMESPACE-XML] variable represents the object-level extension XML.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: </result> S: <resData> S: [NAMESPACE-XML] S: </resData> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ Below is a template for an unhandled namespace response for an unsupported object-level extension. The [NAMESPACE-XML] variable represents the object-level extension XML, and the [NAMESPACE-URI] variable represents the object-level extension XML namespace URI.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: <extValue> S: <value> S: [NAMESPACE-XML] S: </value> S: <reason> S: [NAMESPACE-URI] not in login services S: </reason> S: </extValue> S: </result> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ The EPP response is converted from an object response to a general EPP response by the server when the client does not support the object-level extension namespace URI.¶ Below is an example of a <transfer> query response (see Section 3.1.3 of [RFC5731]) converted into an unhandled namespace response.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: <extValue> S: <value> S: <domain:trnData S: xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"> S: <domain:name>example.com</domain:name> S: <domain:trStatus>pending</domain:trStatus> S: <domain:reID>ClientX</domain:reID> S: <domain:reDate>2000-06-06T22:00:00.0Z</domain:reDate> S: <domain:acID>ClientY</domain:acID> S: <domain:acDate>2000-06-11T22:00:00.0Z</domain:acDate> S: <domain:exDate>2002-09-08T22:00:00.0Z</domain:exDate> S: </domain:trnData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:domain-1.0 not in login services S: </reason> S: </extValue> S: </result> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ 3.2. Unhandled Command-Response Extension A command-response extension in [RFC5730] is a child element of the <extension> element. If the client does not handle the namespace of the command-response extension, the command-response child element is moved into an <extValue> <value> element [RFC5730], with the namespace URI included in the corresponding <extValue> <reason> element. Afterwards, if there are no additional command-response child elements, the <extension> element MUST be removed.¶ Below is a template response for a supported command-response extension. The [NAMESPACE-XML] variable represents the command-response extension XML.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: </result> S: <extension> S: [NAMESPACE-XML] S: </extension> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ Below is a template of an unhandled namespace response for an unsupported command-response extension. The [NAMESPACE-XML] variable represents the command-response extension XML, and the [NAMESPACE-URI] variable represents the command-response extension XML namespace URI.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: <extValue> S: <value> S: [NAMESPACE-XML] S: </value> S: <reason> S: [NAMESPACE-URI] not in login services S: </reason> S: </extValue> S: </result> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ The EPP response is converted to an unhandled namespace response by moving the unhandled command-response extension from under the <extension> to an <extValue> element.¶ Below is example of the Delegation Signer (DS) Data Interface <info> response (see Section 5.1.2 of [RFC5910]) converted to an unhandled namespace response.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\" S: xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: <extValue> S: <value> S: <secDNS:infData S: xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\"> S: <secDNS:dsData> S: <secDNS:keyTag>12345</secDNS:keyTag> S: <secDNS:alg>3</secDNS:alg> S: <secDNS:digestType>1</secDNS:digestType> S: <secDNS:digest>49FD46E6C4B45C55D4AC</secDNS:digest> S: </secDNS:dsData> S: </secDNS:infData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:secDNS-1.1 not in login services S: </reason> S: </extValue> S: </result> S: <resData> S: <domain:infData S: xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"> S: <domain:name>example.com</domain:name> S: <domain:roid>EXAMPLE1-REP</domain:roid> S: <domain:status s=\"ok\"/> S: <domain:registrant>jd1234</domain:registrant> S: <domain:contact type=\"admin\">sh8013</domain:contact> S: <domain:contact type=\"tech\">sh8013</domain:contact> S: <domain:ns> S: <domain:hostObj>ns1.example.com</domain:hostObj> S: <domain:hostObj>ns2.example.com</domain:hostObj> S: </domain:ns> S: <domain:host>ns1.example.com</domain:host> S: <domain:host>ns2.example.com</domain:host> S: <domain:clID>ClientX</domain:clID> S: <domain:crID>ClientY</domain:crID> S: <domain:crDate>1999-04-03T22:00:00.0Z</domain:crDate> S: <domain:upID>ClientX</domain:upID> S: <domain:upDate>1999-12-03T09:00:00.0Z</domain:upDate> S: <domain:exDate>2005-04-03T22:00:00.0Z</domain:exDate> S: <domain:trDate>2000-04-08T09:00:00.0Z</domain:trDate> S: <domain:authInfo> S: <domain:pw>2fooBAR</domain:pw> S: </domain:authInfo> S: </domain:infData> S: </resData> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ 4. Signaling Client and Server Support This document does not define new EPP protocol elements but rather specifies an operational practice using the existing EPP protocol, where the client and the server can signal support for the operational practice using a namespace URI in the login and greeting extension services. The namespace URI \"urn:ietf:params:xml:ns:epp:unhandled-namespaces-1.0\" is used to signal support for the operational practice. The client includes the namespace URI in an <svcExtension> <extURI> element of the <login> command [RFC5730]. The server includes the namespace URI in an <svcExtension> <extURI> element of the greeting [RFC5730].¶ A client that receives the namespace URI in the server's greeting extension services can expect the following supported behavior by the server:¶ support unhandled namespace object-level extensions and command-response extensions in EPP poll messages, per Section 6¶ support the option of unhandled namespace command-response extensions in general EPP responses, per Section 5¶ A server that receives the namespace URI in the client's <login> command extension services can expect the following supported behavior by the client:¶ support monitoring the EPP poll messages and general EPP responses for unhandled namespaces¶ 5. Usage with General EPP Responses The unhandled namespace approach defined in Section 3 MAY be used for a general EPP response to an EPP command. A general EPP response includes any EPP response that is not a poll message. The use of the unhandled namespace approach for poll-message EPP responses is defined in Section 6. The server MAY exclude the unhandled namespace information in the general EPP response or MAY include it using the unhandled namespace approach.¶ The unhandled namespace approach for general EPP responses SHOULD only be applicable to command-response extensions, defined in Section 3.2, since the server SHOULD NOT accept an object-level EPP command if the client did not include the object-level namespace URI in the login services. An object-level EPP response extension is returned when the server successfully executes an object-level EPP command extension. The server MAY return an unhandled object-level extension to the client, as defined in Section 3.1.¶ Returning domain name Redemption Grace Period (RGP) data, based on [RFC3915], provides an example of applying the unhandled namespace approach for a general EPP response. If the client does not include the \"urn:ietf:params:xml:ns:rgp-1.0\" namespace URI in the login services and the domain <info> response of a domain name does have RGP information, the server MAY exclude the <rgp:infData> element from the EPP response or MAY include it under the <extValue> element, per Section 3.2.¶ Below is an example of a domain name <info> response [RFC5731] converted to an unhandled <rgp:infData> element (see Section 4.1.1 of [RFC3915]) included under an <extValue> element:¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\" S: xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" S: xsi:schemaLocation=\"urn:ietf:params:xml:ns:epp-1.0 S: epp-1.0.xsd\"> S: <response> S: <result code=\"1000\"> S: <msg>Command completed successfully</msg> S: <extValue> S: <value> S: <rgp:infData xmlns:rgp=\"urn:ietf:params:xml:ns:rgp-1.0\" S: xsi:schemaLocation=\"urn:ietf:params:xml:ns:rgp-1.0 S: rgp-1.0.xsd\"> S: <rgp:rgpStatus s=\"redemptionPeriod\"/> S: </rgp:infData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:rgp-1.0 not in login services S: </reason> S: </extValue> S: </result> S: <resData> S: <domain:infData S: xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\" S: xsi:schemaLocation=\"urn:ietf:params:xml:ns:domain-1.0 S: domain-1.0.xsd\"> S: <domain:name>example.com</domain:name> S: <domain:roid>EXAMPLE1-REP</domain:roid> S: <domain:status s=\"pendingDelete\"/> S: <domain:registrant>jd1234</domain:registrant> S: <domain:contact type=\"admin\">sh8013</domain:contact> S: <domain:contact type=\"tech\">sh8013</domain:contact> S: <domain:ns> S: <domain:hostObj>ns1.example.com</domain:hostObj> S: <domain:hostObj>ns1.example.net</domain:hostObj> S: </domain:ns> S: <domain:host>ns1.example.com</domain:host> S: <domain:host>ns2.example.com</domain:host> S: <domain:clID>ClientX</domain:clID> S: <domain:crID>ClientY</domain:crID> S: <domain:crDate>1999-04-03T22:00:00.0Z</domain:crDate> S: <domain:upID>ClientX</domain:upID> S: <domain:upDate>1999-12-03T09:00:00.0Z</domain:upDate> S: <domain:exDate>2005-04-03T22:00:00.0Z</domain:exDate> S: <domain:trDate>2000-04-08T09:00:00.0Z</domain:trDate> S: <domain:authInfo> S: <domain:pw>2fooBAR</domain:pw> S: </domain:authInfo> S: </domain:infData> S: </resData> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ 6. Usage with Poll-Message EPP Responses The unhandled namespace approach, defined in Section 3, MUST be used if there is unhandled namespace information included in a <poll> response. The server inserts poll messages into the client's poll queue independent of knowing the supported client login services; therefore, there may be unhandled object-level extensions and command-response extensions included in a client's poll queue. In [RFC5730], the <poll> command is used by the client to retrieve and acknowledge poll messages that have been inserted by the server. The <poll> response is an EPP response that includes the <msgQ> element that provides poll queue metadata about the message. The unhandled namespace approach, defined in Section 3, is used for an unhandled object-level extension and for each of the unhandled command-response extensions attached to the <poll> response. The resulting <poll> response MAY have either or both the object-level extension or command-response extensions moved to <extValue> elements, as defined in Section 3.¶ The change poll message, as defined in Section 3.1.2 of [RFC8590], which is an extension of any EPP object, is an example of applying the unhandled namespace approach for <poll> responses. Below are examples of converting the domain name <info> response example in Section 3.1.2 of [RFC8590] to an unhandled namespace response. The object that will be used in the examples is a domain name object [RFC5731].¶ Below is a domain name <info> <poll> response [RFC5731] with the unhandled <changePoll:changeData> element [RFC8590] included under an <extValue> element.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1301\"> S: <msg lang=\"en-US\"> S: Command completed successfully; ack to dequeue</msg> S: <extValue> S: <value> S: <changePoll:changeData S: xmlns:changePoll=\"urn:ietf:params:xml:ns:changePoll-1.0\" S: state=\"after\"> S: <changePoll:operation>update</changePoll:operation> S: <changePoll:date> S: 2013-10-22T14:25:57.0Z</changePoll:date> S: <changePoll:svTRID>12345-XYZ</changePoll:svTRID> S: <changePoll:who>URS Admin</changePoll:who> S: <changePoll:caseId type=\"urs\">urs123 S: </changePoll:caseId> S: <changePoll:reason>URS Lock</changePoll:reason> S: </changePoll:changeData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:changePoll-1.0 not in login services S: </reason> S: </extValue> S: </result> S: <msgQ count=\"201\" id=\"1\"> S: <qDate>2013-10-22T14:25:57.0Z</qDate> S: <msg>Registry initiated update of domain.</msg> S: </msgQ> S: <resData> S: <domain:infData S: xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"> S: <domain:name>domain.example</domain:name> S: <domain:roid>EXAMPLE1-REP</domain:roid> S: <domain:status s=\"ok\"/> S: <domain:registrant>jd1234</domain:registrant> S: <domain:contact type=\"admin\">sh8013</domain:contact> S: <domain:contact type=\"tech\">sh8013</domain:contact> S: <domain:clID>ClientX</domain:clID> S: <domain:crID>ClientY</domain:crID> S: <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate> S: <domain:exDate>2014-04-03T22:00:00.0Z</domain:exDate> S: </domain:infData> S: </resData> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ Below is an unhandled domain name <info> <poll> response [RFC5731] and the unhandled <changePoll:changeData> element [RFC8590] included under an <extValue> element.¶ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"> S: <response> S: <result code=\"1301\"> S: <msg>Command completed successfully; ack to dequeue</msg> S: <extValue> S: <value> S: <domain:infData S: xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"> S: <domain:name>domain.example</domain:name> S: <domain:roid>EXAMPLE1-REP</domain:roid> S: <domain:status s=\"ok\"/> S: <domain:registrant>jd1234</domain:registrant> S: <domain:contact type=\"admin\">sh8013</domain:contact> S: <domain:contact type=\"tech\">sh8013</domain:contact> S: <domain:clID>ClientX</domain:clID> S: <domain:crID>ClientY</domain:crID> S: <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate> S: <domain:exDate>2014-04-03T22:00:00.0Z</domain:exDate> S: </domain:infData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:domain-1.0 not in login services S: </reason> S: </extValue> S: <extValue> S: <value> S: <changePoll:changeData S: xmlns:changePoll= S: \"urn:ietf:params:xml:ns:changePoll-1.0\" S: state=\"after\"> S: <changePoll:operation>update</changePoll:operation> S: <changePoll:date> S: 2013-10-22T14:25:57.0Z</changePoll:date> S: <changePoll:svTRID>12345-XYZ</changePoll:svTRID> S: <changePoll:who>URS Admin</changePoll:who> S: <changePoll:caseId type=\"urs\">urs123 S: </changePoll:caseId> S: <changePoll:reason>URS Lock</changePoll:reason> S: </changePoll:changeData> S: </value> S: <reason> S: urn:ietf:params:xml:ns:changePoll-1.0 not in login services S: </reason> S: </extValue> S: </result> S: <msgQ count=\"201\" id=\"1\"> S: <qDate>2013-10-22T14:25:57.0Z</qDate> S: <msg>Registry initiated update of domain.</msg> S: </msgQ> S: <trID> S: <clTRID>ABC-12345</clTRID> S: <svTRID>54322-XYZ</svTRID> S: </trID> S: </response> S:</epp> ¶ 7. Implementation Considerations There are implementation considerations for the client and the server to help address the risk of the client ignoring unhandled namespace information included in an EPP response that is needed to meet technical, policy, or legal requirements.¶ 7.1. Client Implementation Considerations To reduce the likelihood of a client receiving unhandled namespace information, the client should consider implementing the following:¶ Ensure that the client presents the complete set of what it supports when presenting its login services. If there are gaps between the services supported by the client and the login services included in the login command, the client may receive unhandled namespace information that the client could have supported.¶ Support all of the services included in the server greeting services that may be included in an EPP response, including the <poll> responses. The client should evaluate the gaps between the greeting services and the login services provided in the login command to identify extensions that need to be supported.¶ Proactively monitor for unhandled namespace information in the EPP responses by looking for the inclusion of the <extValue> element in successful responses, record the unsupported namespace included in the <reason> element, and record the unhandled namespace information included in the <value> element for later processing. The unhandled namespace should be implemented by the client to ensure that information is processed fully in future EPP responses.¶ 7.2. Server Implementation Considerations To assist the clients in recognizing unhandled namespaces, the server should consider implementing the following:¶ Monitor for returning unhandled namespace information to clients and report it to the clients out of band to EPP, so the clients can add support for the unhandled namespaces.¶ Look for the unhandled namespace support in the login services when returning optional unhandled namespace information in general EPP responses.¶ 8. IANA Considerations 8.1. XML Namespace This document uses URNs to describe XML namespaces conforming to a registry mechanism described in [RFC3688]. The following URI assignment has been made by IANA.¶ URI: urn:ietf:params:xml:ns:epp:unhandled-namespaces-1.0¶ Registrant Contact: IESG¶ XML: None. Namespace URIs do not represent an XML specification.¶ 8.2. EPP Extension Registry The EPP operational practice described in this document has been registered by IANA in the \"Extensions for the Extensible Provisioning Protocol (EPP)\" registry described in [RFC7451]. The details of the registration are as follows:¶ Name of Extension: \"Extensible Provisioning Protocol (EPP) Unhandled Namespaces\"¶ Document Status: Standards Track¶ Reference: RFC 9038¶ Registrant: IETF, <iesg@ietf.org>¶ TLDs: Any¶ IPR Disclosure: None¶ Status: Active¶ Notes: None¶ 9. Security Considerations This document does not provide any security services beyond those described by EPP [RFC5730] and protocol layers used by EPP. The security considerations described in these other specifications apply to this specification as well. Since the unhandled namespace content is XML that is not processed in the first pass by the XML parser, the client SHOULD validate the XML when the content is processed to protect against the inclusion of malicious content.¶ 10. References 10.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, DOI 10.17487/RFC3688, January 2004, <https://www.rfc-editor.org/info/rfc3688>. [RFC5234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, DOI 10.17487/RFC5234, January 2008, <https://www.rfc-editor.org/info/rfc5234>. [RFC5730] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\", STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009, <https://www.rfc-editor.org/info/rfc5730>. [RFC5731] Hollenbeck, S., \"Extensible Provisioning Protocol (EPP) Domain Name Mapping\", STD 69, RFC 5731, DOI 10.17487/RFC5731, August 2009, <https://www.rfc-editor.org/info/rfc5731>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [W3C.REC-xml11-20060816] Bray, T., Paoli, J., Sperberg-McQueen, M., Maler, E., Yergeau, F., and J. Cowan, \"Extensible Markup Language (XML) 1.1 (Second Edition)\", World Wide Web Consortium Recommendation REC-xml11-20060816, 16 August 2006, <https://www.w3.org/TR/2006/REC-xml11-20060816>. 10.2. Informative References [RFC3735] Hollenbeck, S., \"Guidelines for Extending the Extensible Provisioning Protocol (EPP)\", RFC 3735, DOI 10.17487/RFC3735, March 2004, <https://www.rfc-editor.org/info/rfc3735>. [RFC3915] Hollenbeck, S., \"Domain Registry Grace Period Mapping for the Extensible Provisioning Protocol (EPP)\", RFC 3915, DOI 10.17487/RFC3915, September 2004, <https://www.rfc-editor.org/info/rfc3915>. [RFC5910] Gould, J. and S. Hollenbeck, \"Domain Name System (DNS) Security Extensions Mapping for the Extensible Provisioning Protocol (EPP)\", RFC 5910, DOI 10.17487/RFC5910, May 2010, <https://www.rfc-editor.org/info/rfc5910>. [RFC7451] Hollenbeck, S., \"Extension Registry for the Extensible Provisioning Protocol\", RFC 7451, DOI 10.17487/RFC7451, February 2015, <https://www.rfc-editor.org/info/rfc7451>. [RFC8590] Gould, J. and K. Feher, \"Change Poll Extension for the Extensible Provisioning Protocol (EPP)\", RFC 8590, DOI 10.17487/RFC8590, May 2019, <https://www.rfc-editor.org/info/rfc8590>. Acknowledgements The authors wish to thank the following people for their feedback and suggestions: Thomas Corte, Scott Hollenbeck, Patrick Mevzek, and Marcel Parodi.¶ Authors' Addresses James Gould VeriSign, Inc. 12061 Bluemont Way Reston, VA 20190 United States of America Email: jgould@verisign.com URI: http://www.verisign.com Martin Casanova SWITCH P.O. Box CH-8021 Zurich Switzerland Email: martin.casanova@switch.ch URI: http://www.switch.ch"
    },
    {
        "Number": "9030",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)",
        "Authors": [
            "P. Thubert",
            "Ed."
        ],
        "Date": "2021-05",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document describes a network architecture that provides low-latency, low-jitter, and high-reliability packet delivery.  It combines a high-speed powered backbone and subnetworks using IEEE 802.15.4 time-slotted channel hopping (TSCH) to meet the requirements of low-power wireless deterministic applications.",
        "Keywords": [
            "deterministic wireless",
            "radio",
            "mesh"
        ],
        "Content": "RFC 9030: An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH) RFC 9030 6TiSCH Architecture May 2021 Thubert Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9030 Category: Informational Published: May 2021 ISSN: 2070-1721 Author: P. Thubert, Ed. Cisco Systems RFC 9030 An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH) Abstract This document describes a network architecture that provides low-latency, low-jitter, and high-reliability packet delivery. It combines a high-speed powered backbone and subnetworks using IEEE 802.15.4 time-slotted channel hopping (TSCH) to meet the requirements of low-power wireless deterministic applications.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9030.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  New Terms 2.2.  Abbreviations 2.3.  Related Documents 3.  High-Level Architecture 3.1.  A Non-broadcast Multi-access Radio Mesh Network 3.2.  A Multi-Link Subnet Model 3.3.  TSCH: a Deterministic MAC Layer 3.4.  Scheduling TSCH 3.5.  Distributed vs. Centralized Routing 3.6.  Forwarding over TSCH 3.7.  6TiSCH Stack 3.8.  Communication Paradigms and Interaction Models 4.  Architecture Components 4.1.  6LoWPAN (and RPL) 4.1.1.  RPL-Unaware Leaves and 6LoWPAN ND 4.1.2.  6LBR and RPL Root 4.2.  Network Access and Addressing 4.2.1.  Join Process 4.2.2.  Registration 4.3.  TSCH and 6top 4.3.1.  6top 4.3.2.  Scheduling Functions and the 6top Protocol 4.3.3.  6top and RPL Objective Function Operations 4.3.4.  Network Synchronization 4.3.5.  Slotframes and CDU Matrix 4.3.6.  Distributing the Reservation of Cells 4.4.  Schedule Management Mechanisms 4.4.1.  Static Scheduling 4.4.2.  Neighbor-to-Neighbor Scheduling 4.4.3.  Remote Monitoring and Schedule Management 4.4.4.  Hop-by-Hop Scheduling 4.5.  On Tracks 4.5.1.  General Behavior of Tracks 4.5.2.  Serial Track 4.5.3.  Complex Track with Replication and Elimination 4.5.4.  DetNet End-to-End Path 4.5.5.  Cell Reuse 4.6.  Forwarding Models 4.6.1.  Track Forwarding 4.6.2.  IPv6 Forwarding 4.6.3.  Fragment Forwarding 4.7.  Advanced 6TiSCH Routing 4.7.1.  Packet Marking and Handling 4.7.2.  Replication, Retries, and Elimination 5.  IANA Considerations 6.  Security Considerations 6.1.  Availability of Remote Services 6.2.  Selective Jamming 6.3.  MAC-Layer Security 6.4.  Time Synchronization 6.5.  Validating ASN 6.6.  Network Keying and Rekeying 7.  References 7.1.  Normative References 7.2.  Informative References Appendix A.  Related Work in Progress A.1.  Unchartered IETF Work Items A.1.1.  6TiSCH Zero-Touch Security A.1.2.  6TiSCH Track Setup A.1.3.  Using BIER in a 6TiSCH Network A.2.  External (Non-IETF) Work Items Acknowledgments Contributors Author's Address 1. Introduction Wireless networks enable a wide variety of devices of any size to get interconnected, often at a very low marginal cost per device, at any range, and in circumstances where wiring may be impractical, for instance, on fast-moving or rotating devices.¶ On the other hand, Deterministic Networking maximizes the packet delivery ratio within a bounded latency so as to enable mission-critical machine-to-machine (M2M) operations. Applications that need such networks are presented in [RFC8578] and [RAW-USE-CASES], which presents a number of additional use cases for Reliable and Available Wireless networks (RAW). The considered applications include professional media, Industrial Automation and Control Systems (IACS), building automation, in-vehicle command and control, commercial automation and asset tracking with mobile scenarios, as well as gaming, drones and edge robotic control, and home automation applications.¶ The Time-Slotted Channel Hopping (TSCH) [RFC7554] mode of the IEEE Std 802.15.4 [IEEE802154] Medium Access Control (MAC) was introduced with the IEEE Std 802.15.4e [IEEE802154e] amendment and is now retrofitted in the main standard. For all practical purposes, this document is expected to be insensitive to the revisions of that standard, which is thus referenced without a date. TSCH is both a Time-Division Multiplexing (TDM) and a Frequency-Division Multiplexing (FDM) technique, whereby a different channel can be used for each transmission. TSCH allows the scheduling of transmissions for deterministic operations and applies to the slower and most energy-constrained wireless use cases.¶ The scheduled operation provides for a more reliable experience, which can be used to monitor and manage resources, e.g., energy and water, in a more efficient fashion.¶ Proven deterministic networking standards for use in process control, including ISA100.11a [ISA100.11a] and WirelessHART [WirelessHART], have demonstrated the capabilities of the IEEE Std 802.15.4 TSCH MAC for high reliability against interference, low-power consumption on well-known flows, and its applicability for Traffic Engineering (TE) from a central controller.¶ To enable the convergence of information technology (IT) and operational technology (OT) in Low-Power and Lossy Networks (LLNs), the 6TiSCH architecture supports an IETF suite of protocols over the IEEE Std 802.15.4 TSCH MAC to provide IP connectivity for energy and otherwise constrained wireless devices.¶ The 6TiSCH architecture relies on IPv6 [RFC8200] and the use of routing to provide large scaling capabilities. The addition of a high-speed federating backbone adds yet another degree of scalability to the design. The backbone is typically a Layer 2 transit link such as an Ethernet bridged network, but it can also be a more complex routed structure.¶ The 6TiSCH architecture introduces an IPv6 multi-link subnet model that is composed of a federating backbone and a number of IEEE Std 802.15.4 TSCH low-power wireless networks federated and synchronized by Backbone Routers. If the backbone is a Layer 2 transit link, then the Backbone Routers can operate as an IPv6 Neighbor Discovery (IPv6 ND) proxy [RFC4861].¶ The 6TiSCH architecture leverages 6LoWPAN [RFC4944] to adapt IPv6 to the constrained media and the Routing Protocol for Low-Power and Lossy Networks (RPL) [RFC6550] for the distributed routing operations.¶ Centralized routing refers to a model where routes are computed and resources are allocated from a central controller. This is particularly helpful to schedule deterministic multihop transmissions. In contrast, distributed routing refers to a model that relies on concurrent peer-to-peer protocol exchanges for TSCH resource allocation and routing operations.¶ The architecture defines mechanisms to establish and maintain routing and scheduling in a centralized, distributed, or mixed fashion, for use in multiple OT environments. It is applicable in particular to highly scalable solutions such as those used in Advanced Metering Infrastructure [AMI] solutions that leverage distributed routing to enable multipath forwarding over large LLN meshes.¶ 2. Terminology 2.1. New Terms The document does not reuse terms from the IEEE Std 802.15.4 [IEEE802154] standard such as \"path\" or \"link\", which bear a meaning that is quite different from classical IETF parlance.¶ This document adds the following terms:¶ 6TiSCH (IPv6 over the TSCH mode of IEEE 802.15.4): 6TiSCH defines an adaptation sublayer for IPv6 over TSCH called 6top, a set of protocols for setting up a TSCH schedule in distributed approach, and a security solution. 6TiSCH may be extended in the future for other MAC/Physical Layer (PHY) pairs providing a service similar to TSCH.¶ 6top (6TiSCH Operation Sublayer): The next higher layer of the IEEE Std 802.15.4 TSCH MAC layer. 6top provides the abstraction of an IP link over a TSCH MAC, schedules packets over TSCH cells, and exposes a management interface to schedule TSCH cells.¶ 6P (6top Protocol): The protocol defined in [RFC8480]. 6P enables Layer 2 peers to allocate, move, or de-allocate cells in their respective schedules to communicate. 6P operates at the 6top sublayer.¶ 6P transaction: A 2-way or 3-way sequence of 6P messages used by Layer 2 peers to modify their communication schedule.¶ ASN (Absolute Slot Number): Defined in [IEEE802154], the ASN is the total number of timeslots that have elapsed since the Epoch time when the TSCH network started. Incremented by one at each timeslot. It is wide enough to not roll over in practice.¶ bundle: A group of equivalent scheduled cells, i.e., cells identified by different slotOffset/channelOffset, which are scheduled for a same purpose, with the same neighbor, with the same flags, and the same slotframe. The size of the bundle refers to the number of cells it contains. For a given slotframe length, the size of the bundle translates directly into bandwidth. A bundle is a local abstraction that represents a half-duplex link for either sending or receiving, with bandwidth that amounts to the sum of the cells in the bundle.¶ Layer 2 vs. Layer 3 bundle: Bundles are associated with either Layer 2 (switching) or Layer 3 (routing) forwarding operations. A pair of Layer 3 bundles (one for each direction) maps to an IP link with a neighbor, whereas a set of Layer 2 bundles (of an \"arbitrary\" cardinality and direction) corresponds to the relation of one or more incoming bundle(s) from the previous-hop neighbor(s) with one or more outgoing bundle(s) to the next-hop neighbor(s) along a Track as part of the switching role, which may include replication and elimination.¶ CCA (Clear Channel Assessment): A mechanism defined in [IEEE802154] whereby nodes listen to the channel before sending to detect ongoing transmissions from other parties. Because the network is synchronized, CCA cannot be used to detect colliding transmissions within the same network, but it can be used to detect other radio networks in the vicinity.¶ cell: A unit of transmission resource in the CDU matrix, a cell is identified by a slotOffset and a channelOffset. A cell can be scheduled or unscheduled.¶ Channel Distribution/Usage (CDU) matrix: : A matrix of cells (i,j) representing the spectrum (channel) distribution among the different nodes in the 6TiSCH network. The CDU matrix has width in timeslots equal to the period of the network scheduling operation, and height equal to the number of available channels. Every cell (i,j) in the CDU, identified by slotOffset/channelOffset, belongs to a specific chunk.¶ channelOffset: Identifies a row in the TSCH schedule. The number of channelOffset values is bounded by the number of available frequencies. The channelOffset translates into a frequency with a function that depends on the absolute time when the communication takes place, resulting in a channel-hopping operation.¶ chunk: A well-known list of cells, distributed in time and frequency, within a CDU matrix. A chunk represents a portion of a CDU matrix. The partition of the CDU matrix in chunks is globally known by all the nodes in the network to support the appropriation process, which is a negotiation between nodes within an interference domain. A node that manages to appropriate a chunk gets to decide which transmissions will occur over the cells in the chunk within its interference domain, i.e., a parent node will decide when the cells within the appropriated chunk are used and by which node among its children.¶ CoJP (Constrained Join Protocol): The Constrained Join Protocol (CoJP) enables a pledge to securely join a 6TiSCH network and obtain network parameters over a secure channel. \"Constrained Join Protocol (CoJP) for 6TiSCH\" [RFC9031] defines the minimal CoJP setup with pre-shared keys defined. In that mode, CoJP can operate with a single round-trip exchange.¶ dedicated cell: A cell that is reserved for a given node to transmit to a specific neighbor.¶ deterministic network: The generic concept of a deterministic network is defined in the \"Deterministic Networking Architecture\" [RFC8655] document. When applied to 6TiSCH, it refers to the reservation of Tracks, which guarantees an end-to-end latency and optimizes the Packet Delivery Ratio (PDR) for well-characterized flows.¶ distributed cell reservation: A reservation of a cell done by one or more in-network entities.¶ distributed Track reservation: A reservation of a Track done by one or more in-network entities.¶ EB (Enhanced Beacon): A special frame defined in [IEEE802154] used by a node, including the Join Proxy (JP), to announce the presence of the network. It contains enough information for a pledge to synchronize to the network.¶ hard cell: A scheduled cell that the 6top sublayer may not relocate.¶ hopping sequence: Ordered sequence of frequencies, identified by a Hopping_Sequence_ID, used for channel hopping when translating the channelOffset value into a frequency.¶ IE (Information Element): Type-Length-Value containers placed at the end of the MAC header and used to pass data between layers or devices. Some IE identifiers are managed by the IEEE [IEEE802154]. Some IE identifiers are managed by the IETF [RFC8137]. [RFC9032] uses one subtype to support the selection of the Join Proxy.¶ join process: The overall process that includes the discovery of the network by pledge(s) and the execution of the join protocol.¶ join protocol: The protocol that allows the pledge to join the network. The join protocol encompasses authentication, authorization, and parameter distribution. The join protocol is executed between the pledge and the JRC.¶ joined node: The new device after having completed the join process, often just called a node.¶ JP (Join Proxy): A node already part of the 6TiSCH network that serves as a relay to provide connectivity between the pledge and the JRC. The JP announces the presence of the network by regularly sending EB frames.¶ JRC (Join Registrar/Coordinator): Central entity responsible for the authentication, authorization, and configuration of the pledge.¶ link: A communication facility or medium over which nodes can communicate at the link layer, which is the layer immediately below IP. In 6TiSCH, the concept is implemented as a collection of Layer 3 bundles. Note: the IETF parlance for the term \"link\" is adopted, as opposed to the IEEE Std 802.15.4 terminology.¶ operational technology: OT refers to technology used in automation, for instance in industrial control networks. The convergence of IT and OT is the main object of the Industrial Internet of Things (IIOT).¶ pledge: A new device that attempts to join a 6TiSCH network.¶ (to) relocate a cell: The action operated by the 6top sublayer of changing the slotOffset and/or channelOffset of a soft cell.¶ (to) schedule a cell: The action of turning an unscheduled cell into a scheduled cell.¶ scheduled cell: A cell that is assigned a neighbor MAC address (broadcast address is also possible) and one or more of the following flags: TX, RX, Shared, and Timekeeping. A scheduled cell can be used by the IEEE Std 802.15.4 TSCH implementation to communicate. A scheduled cell can either be a hard or a soft cell.¶ SF (6top Scheduling Function): The cell management entity that adds or deletes cells dynamically based on application networking requirements. The cell negotiation with a neighbor is done using 6P.¶ SFID (6top Scheduling Function Identifier): A 4-bit field identifying an SF.¶ shared cell: A cell marked with both the TX and Shared flags. This cell can be used by more than one transmitter node. A back-off algorithm is used to resolve contention.¶ slotframe: A collection of timeslots repeating in time, analogous to a superframe in that it defines periods of communication opportunities. It is characterized by a slotframe_ID and a slotframe_size. Multiple slotframes can coexist in a node's schedule, i.e., a node can have multiple activities scheduled in different slotframes based on the priority of its packets/traffic flows. The timeslots in the slotframe are indexed by the slotOffset; the first timeslot is at slotOffset 0.¶ slotOffset: A column in the TSCH schedule, i.e., the number of timeslots since the beginning of the current iteration of the slotframe.¶ soft cell: A scheduled cell that the 6top sublayer can relocate.¶ time source neighbor: A neighbor that a node uses as its time reference, and to which it needs to keep its clock synchronized.¶ timeslot: A basic communication unit in TSCH that allows a transmitter node to send a frame to a receiver neighbor and that allows the receiver neighbor to optionally send back an acknowledgment.¶ Track: A Track is a Directed Acyclic Graph (DAG) that is used as a complex multihop path to the destination(s) of the path. In the case of unicast traffic, the Track is a Destination-Oriented DAG (DODAG) where the Root of the DODAG is the destination of the unicast traffic. A Track enables replication, elimination, and reordering functions on the way (more on those functions in [RFC8655]). A Track reservation locks physical resources such as cells and buffers in every node along the DODAG. A Track is associated with an owner, which can be for instance the destination of the Track.¶ TrackID: A TrackID is either globally unique or locally unique to the Track owner, in which case the identification of the owner must be provided together with the TrackID to provide a full reference to the Track. Typically, the Track owner is the ingress of the Track, the IPv6 source address of packets along the Track can be used as identification of the owner, and a local InstanceID [RFC6550] in the namespace of that owner can be used as TrackID. If the Track is reversible, then the owner is found in the IPv6 destination address of a packet coming back along the Track. In that case, a RPL Packet Information [RFC6550] in an IPv6 packet can unambiguously identify the Track and can be expressed in a compressed form using [RFC8138].¶ TSCH: A medium access mode of the IEEE Std 802.15.4 [IEEE802154] standard that uses time synchronization to achieve ultra-low-power operation and channel hopping to enable high reliability.¶ TSCH Schedule: A matrix of cells, with each cell indexed by a slotOffset and a channelOffset. The TSCH schedule contains all the scheduled cells from all slotframes and is sufficient to qualify the communication in the TSCH network. The number of channelOffset values (the \"height\" of the matrix) is equal to the number of available frequencies.¶ Unscheduled Cell: A cell that is not used by the IEEE Std 802.15.4 TSCH implementation.¶ 2.2. Abbreviations This document uses the following abbreviations:¶ 6BBR: 6LoWPAN Backbone Router (router with a proxy ND function)¶ 6LBR: 6LoWPAN Border Router (authoritative on Duplicate Address Detection (DAD))¶ 6LN: 6LoWPAN Node¶ 6LR: 6LoWPAN Router (relay to the registration process)¶ 6CIO: Capability Indication Option¶ (E)ARO: (Extended) Address Registration Option¶ (E)DAR: (Extended) Duplicate Address Request¶ (E)DAC: (Extended) Duplicate Address Confirmation¶ DAD: Duplicate Address Detection¶ DODAG: Destination-Oriented Directed Acyclic Graph¶ LLN: Low-Power and Lossy Network (a typical IoT network)¶ NA: Neighbor Advertisement¶ NCE: Neighbor Cache Entry¶ ND: Neighbor Discovery¶ NDP: Neighbor Discovery Protocol¶ PCE: Path Computation Element¶ NME: Network Management Entity¶ ROVR: Registration Ownership Verifier (pronounced rover)¶ RPL: IPv6 Routing Protocol for LLNs (pronounced ripple)¶ RA: Router Advertisement¶ RS: Router Solicitation¶ TSCH: Time-Slotted Channel Hopping¶ TID: Transaction ID (a sequence counter in the EARO)¶ 2.3. Related Documents The document conforms to the terms and models described in [RFC3444] and [RFC5889], uses the vocabulary and the concepts defined in [RFC4291] for the IPv6 architecture, and refers to [RFC4080] for reservation.¶ The document uses domain-specific terminology defined or referenced in the following:¶ 6LoWPAN ND: \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\" [RFC6775] and \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\" [RFC8505],¶ \"Terms Used in Routing for Low-Power and Lossy Networks\" [RFC7102], and¶ RPL: \"Objective Function Zero for the Routing Protocol for Low-Power and Lossy Networks (RPL)\" [RFC6552] and \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550].¶ Other terms in use in LLNs are found in \"Terminology for Constrained-Node Networks\" [RFC7228].¶ Readers are expected to be familiar with all the terms and concepts that are discussed in the following:¶ \"Neighbor Discovery for IP version 6 (IPv6)\" [RFC4861] and¶ \"IPv6 Stateless Address Autoconfiguration\" [RFC4862].¶ In addition, readers would benefit from reading the following prior to this specification for a clear understanding of the art in ND-proxying and binding:¶ \"Problem Statement and Requirements for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing\" [RFC6606],¶ \"Multi-Link Subnet Issues\" [RFC4903], and¶ \"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals\" [RFC4919].¶ 3. High-Level Architecture 3.1. A Non-broadcast Multi-access Radio Mesh Network A 6TiSCH network is an IPv6 [RFC8200] subnet that, in its basic configuration illustrated in Figure 1, is a single Low-Power and Lossy Network (LLN) operating over a synchronized TSCH-based mesh.¶ ---+-------- ............ ------------ | External Network | | +-----+ +-----+ | NME | | | LLN Border | PCE | | | router (6LBR) +-----+ +-----+ o o o o o o o o o o 6LoWPAN + RPL o o o o o o Figure 1: Basic Configuration of a 6TiSCH Network Inside a 6TiSCH LLN, nodes rely on 6LoWPAN header compression (6LoWPAN HC) [RFC6282] to encode IPv6 packets. From the perspective of the network layer, a single LLN interface (typically an IEEE Std 802.15.4-compliant radio) may be seen as a collection of links with different capabilities for unicast or multicast services.¶ 6TiSCH nodes join a mesh network by attaching to nodes that are already members of the mesh (see Section 4.2.1). The security aspects of the join process are further detailed in Section 6. In a mesh network, 6TiSCH nodes are not necessarily reachable from one another at Layer 2, and an LLN may span over multiple links.¶ This forms a homogeneous non-broadcast multi-access (NBMA) subnet, which is beyond the scope of IPv6 Neighbor Discovery (IPv6 ND) [RFC4861] [RFC4862]. 6LoWPAN Neighbor Discovery (6LoWPAN ND) [RFC6775] [RFC8505] specifies extensions to IPv6 ND that enable ND operations in this type of subnet that can be protected against address theft and impersonation with [RFC8928].¶ Once it has joined the 6TiSCH network, a node acquires IPv6 addresses and registers them using 6LoWPAN ND. This guarantees that the addresses are unique and protects the address ownership over the subnet, more in Section 4.2.2.¶ Within the NBMA subnet, RPL [RFC6550] enables routing in the so-called \"route-over\" fashion, either in storing (stateful) or non-storing (stateless, with routing headers) mode. From there, some nodes can act as routers for 6LoWPAN ND and RPL operations, as detailed in Section 4.1.¶ With TSCH, devices are time synchronized at the MAC level. The use of a particular RPL Instance for time synchronization is discussed in Section 4.3.4. With this mechanism, the time synchronization starts at the RPL Root and follows the RPL loopless routing topology.¶ RPL forms Destination-Oriented Directed Acyclic Graphs (DODAGs) within Instances of the protocol, each Instance being associated with an Objective Function (OF) to form a routing topology. A particular 6TiSCH node, the LLN Border Router (6LBR), acts as RPL Root, 6LoWPAN HC terminator, and Border Router for the LLN to the outside. The 6LBR is usually powered. More on RPL Instances can be found in Section 3.1 of RPL [RFC6550], in particular \"3.1.2 RPL Identifiers\" and \"3.1.3 Instances, DODAGs, and DODAG Versions\". RPL adds artifacts in the data packets that are compressed with a 6LoWPAN Routing Header (6LoRH) [RFC8138]. In a preexisting network, the compression can be globally turned on in a DODAG once all nodes are migrated to support [RFC8138] using [RFC9035].¶ Additional routing and scheduling protocols may be deployed to establish on-demand, peer-to-peer routes with particular characteristics inside the 6TiSCH network. This may be achieved in a centralized fashion by a Path Computation Element (PCE) [PCE] that programs both the routes and the schedules inside the 6TiSCH nodes or in a distributed fashion by using a reactive routing protocol and a hop-by-hop scheduling protocol.¶ This architecture expects that a 6LoWPAN node can connect as a leaf to a RPL network, where the leaf support is the minimal functionality to connect as a host to a RPL network without the need to participate in the full routing protocol. The architecture also expects that a 6LoWPAN node that is unaware of RPL may also connect as described in [RFC9010].¶ 3.2. A Multi-Link Subnet Model An extended configuration of the subnet comprises multiple LLNs as illustrated in Figure 2. In the extended configuration, a Routing Registrar [RFC8505] may be connected to the node that acts as the RPL Root and/or 6LoWPAN 6LBR and provides connectivity to the larger campus or factory plant network over a high-speed backbone or a back-haul link. The Routing Registrar may perform IPv6 ND proxy operations; redistribute the registration in a routing protocol such as OSPF [RFC5340] or BGP [RFC2545]; or inject a route in a mobility protocol such as Mobile IPv6 (MIPv6) [RFC6275], Network Mobility (NEMO) [RFC3963], or Locator/ID Separation Protocol (LISP) [RFC6830].¶ Multiple LLNs can be interconnected and possibly synchronized over a backbone, which can be wired or wireless. The backbone can operate with IPv6 ND procedures [RFC4861] [RFC4862] or a hybrid of IPv6 ND and 6LoWPAN ND [RFC6775] [RFC8505] [RFC8928].¶ | +-----+ +-----+ +-----+ (default) | | (Optional) | | | | IPv6 Router | | 6LBR | | | | Node +-----+ +-----+ +-----+ | Backbone side | | --------+---+--------------------+-+---------------+------+--- | | | +-----------+ +-----------+ +-----------+ | Routing | | Routing | | Routing | | Registrar | | Registrar | | Registrar | +-----------+ +-----------+ +-----------+ o Wireless side o o o o o o o o o o o o o o o o o o o 6TiSCH o 6TiSCH o o o o 6TiSCH o o o LLN o o o o LLN o o LLN o o o o o o o o o o o o o o o Figure 2: Extended Configuration of a 6TiSCH Network A Routing Registrar that performs proxy IPv6 ND operations over the backbone on behalf of the 6TiSCH nodes is called a Backbone Router (6BBR) [RFC8929]. The 6BBRs are placed along the wireless edge of a backbone and federate multiple wireless links to form a single multi-link subnet. The 6BBRs synchronize with one another over the backbone, so as to ensure that the multiple LLNs that form the IPv6 subnet stay tightly synchronized.¶ The use of multicast can also be reduced on the backbone with a registrar that would contribute to Duplicate Address Detection as well as address lookup using only unicast request/response exchanges. [ND-UNICAST-LOOKUP] is a proposed method that presents an example of how this could be achieved with an extension of [RFC8505], using an optional 6LBR as a subnet-level registrar, as illustrated in Figure 2.¶ As detailed in Section 4.1, the 6LBR that serves the LLN and the Root of the RPL network need to share information about the devices that are learned through either 6LoWPAN ND or RPL, but not both. The preferred way of achieving this is to co-locate or combine them. The combined RPL Root and 6LBR may be co-located with the 6BBR, or directly attached to the 6BBR. In the latter case, it leverages the extended registration process defined in [RFC8505] to proxy the 6LoWPAN ND registration to the 6BBR on behalf of the LLN nodes, so that the 6BBR may in turn perform classical ND operations over the backbone as a proxy.¶ The \"Deterministic Networking Architecture\" [RFC8655] studies Layer 3 aspects of Deterministic Networks and covers networks that span multiple Layer 2 domains. If the backbone is deterministic (such as defined by the Time-Sensitive Networking (TSN) Task Group at IEEE), then the Backbone Router ensures that the end-to-end deterministic behavior is maintained between the LLN and the backbone.¶ 3.3. TSCH: a Deterministic MAC Layer Though at a different time scale (several orders of magnitude), both IEEE Std 802.1 TSN and IEEE Std 802.15.4 TSCH standards provide deterministic capabilities to the point that a packet pertaining to a certain flow may traverse a network from node to node following a precise schedule, as a train that enters and then leaves intermediate stations at precise times along its path.¶ With TSCH, time is formatted into timeslots, and individual communication cells are allocated to unicast or broadcast communication at the MAC level. The time-slotted operation reduces collisions, saves energy, and enables more closely engineering the network for deterministic properties. The channel-hopping aspect is a simple and efficient technique to combat multipath fading and co-channel interference.¶ 6TiSCH builds on the IEEE Std 802.15.4 TSCH MAC and inherits its advanced capabilities to enable them in multiple environments where they can be leveraged to improve automated operations. The 6TiSCH architecture also inherits the capability to perform a centralized route computation to achieve deterministic properties, though it relies on the IETF DetNet architecture [RFC8655] and IETF components such as the PCE [PCE] for the protocol aspects.¶ On top of this inheritance, 6TiSCH adds capabilities for distributed routing and scheduling operations based on RPL and capabilities for negotiating schedule adjustments between peers. These distributed routing and scheduling operations simplify the deployment of TSCH networks and enable wireless solutions in a larger variety of use cases from operational technology in general. Examples of such use cases in industrial environments include plant setup and decommissioning, as well as monitoring a multiplicity of minor notifications such as corrosion measurements, events, and access of local devices by mobile workers.¶ 3.4. Scheduling TSCH A scheduling operation allocates cells in a TDM/FDM matrix called a CDU either to individual transmissions or as multi-access shared resources. The CDU matrix can be formatted in chunks that can be allocated exclusively to particular nodes to enable distributed scheduling without collision. More in Section 4.3.5.¶ At the MAC layer, the schedule of a 6TiSCH node is the collection of the timeslots at which it must wake up for transmission, and the channels to which it should either send or listen at those times. The schedule is expressed as one or more repeating slotframes. Slotframes may collide and require a device to wake up at a same time, in which case the slotframe with the highest priority is actionable.¶ The 6top sublayer (see Section 4.3 for more) hides the complexity of the schedule from the upper layers. The link abstraction that IP traffic utilizes is composed of a pair of Layer 3 cell bundles, one to receive and one to transmit. Some of the cells may be shared, in which case the 6top sublayer must perform some arbitration.¶ Scheduling enables multiple simultaneous communications in a same interference domain using different channels; but a node equipped with a single radio can only either transmit or receive on one channel at any point of time. Scheduled cells that fulfill the same role, e.g., receive IP packets from a peer, are grouped in bundles.¶ The 6TiSCH architecture identifies four ways a schedule can be managed and CDU cells can be allocated: Static Scheduling, Neighbor-to-Neighbor Scheduling, Centralized (or Remote) Monitoring and Schedule Management, and Hop-by-Hop Scheduling.¶ Static Scheduling: This refers to the minimal 6TiSCH operation whereby a static schedule is configured for the whole network for use in a Slotted ALOHA [S-ALOHA] fashion. The static schedule is distributed through the native methods in the TSCH MAC layer and does not preclude other scheduling operations coexisting on a same 6TiSCH network. A static schedule is necessary for basic operations such as the join process and for interoperability during the network formation, which is specified as part of the Minimal 6TiSCH Configuration [RFC8180].¶ Neighbor-to-Neighbor Scheduling: This refers to the dynamic adaptation of the bandwidth of the links that are used for IPv6 traffic between adjacent peers. Scheduling Functions such as the \"6TiSCH Minimal Scheduling Function (MSF)\" [RFC9033] influence the operation of the MAC layer to add, update, and remove cells in its own and its peer's schedules using 6P [RFC8480] for the negotiation of the MAC resources.¶ Centralized (or Remote) Monitoring and Schedule Management: This refers to the central computation of a schedule and the capability to forward a frame based on the cell of arrival. In that case, the related portion of the device schedule as well as other device resources are managed by an abstract Network Management Entity (NME), which may cooperate with the PCE to minimize the interaction with, and the load on, the constrained device. This model is the TSCH adaption of the DetNet architecture [RFC8655], and it enables Traffic Engineering with deterministic properties.¶ Hop-by-Hop Scheduling: This refers to the possibility of reserving cells along a path for a particular flow using a distributed mechanism.¶ It is not expected that all use cases will require all those mechanisms. Static Scheduling with minimal configuration is the only one that is expected in all implementations, since it provides a simple and solid basis for convergecast routing and time distribution.¶ A deeper dive into those mechanisms can be found in Section 4.4.¶ 3.5. Distributed vs. Centralized Routing 6TiSCH enables a mixed model of centralized routes and distributed routes. Centralized routes can, for example, be computed by an entity such as a PCE. 6TiSCH leverages RPL [RFC6550] for interoperable, distributed routing operations.¶ Both methods may inject routes into the routing tables of the 6TiSCH routers. In either case, each route is associated with a 6TiSCH topology that can be a RPL Instance topology or a Track. The 6TiSCH topology is indexed by a RPLInstanceID, in a format that reuses the RPLInstanceID as defined in RPL.¶ RPL [RFC6550] is applicable to Static Scheduling and Neighbor-to-Neighbor Scheduling. The architecture also supports a centralized routing model for Remote Monitoring and Schedule Management. It is expected that a routing protocol that is more optimized for point-to-point routing than RPL [RFC6550], such as the \"Asymmetric AODV-P2P-RPL in Low-Power and Lossy Networks\" (AODV-RPL) [AODV-RPL], which derives from the \"Ad Hoc On-demand Distance Vector (AODVv2) Routing\" [AODVv2], will be selected for Hop-by-Hop Scheduling.¶ Both RPL and PCE rely on shared sources such as policies to define global and local RPLInstanceIDs that can be used by either method. It is possible for centralized and distributed routing to share the same topology. Generally they will operate in different slotframes, and centralized routes will be used for scheduled traffic and will have precedence over distributed routes in case of conflict between the slotframes.¶ 3.6. Forwarding over TSCH The 6TiSCH architecture supports three different forwarding models. One is the classical IPv6 Forwarding, where the node selects a feasible successor at Layer 3 on a per-packet basis and based on its routing table. The second derives from Generalized MPLS (GMPLS) for so-called Track Forwarding, whereby a frame received at a particular timeslot can be switched into another timeslot at Layer 2 without regard to the upper-layer protocol. The third model is the 6LoWPAN Fragment Forwarding, which allows the forwarding individual 6LoWPAN fragments along a route that is set up by the first fragment.¶ In more detail:¶ IPv6 Forwarding: This is the classical IP forwarding model, with a Routing Information Base (RIB) that is installed by RPL and used to select a feasible successor per packet. The packet is placed on an outgoing link, which the 6top sublayer maps into a (Layer 3) bundle of cells, and scheduled for transmission based on QoS parameters. Besides RPL, this model also applies to any routing protocol that may be operated in the 6TiSCH network and corresponds to all the distributed scheduling models: Static, Neighbor-to-Neighbor, and Hop-by-Hop Scheduling.¶ GMPLS Track Forwarding: This model corresponds to the Remote Monitoring and Schedule Management. In this model, a central controller (hosting a PCE) computes and installs the schedules in the devices per flow. The incoming (Layer 2) bundle of cells from the previous node along the path determines the outgoing (Layer 2) bundle towards the next hop for that flow as determined by the PCE. The programmed sequence for bundles is called a Track and can assume DAG shapes that are more complex than a simple direct sequence of nodes.¶ 6LoWPAN Fragment Forwarding: This is a hybrid model that derives from IPv6 forwarding for the case where packets must be fragmented at the 6LoWPAN sublayer. The first fragment is forwarded like any IPv6 packet and leaves a state in the intermediate hops to enable forwarding of the next fragments that do not have an IP header without the need to recompose the packet at every hop.¶ A deeper dive into these operations can be found in Section 4.6.¶ Table 1 summarizes how the forwarding models apply to the various routing and scheduling possibilities:¶ Table 1 Forwarding Model Routing Scheduling classical IPv6 / 6LoWPAN Fragment RPL Static (Minimal Configuration) Neighbor-to-Neighbor (SF+6P) Reactive Hop-by-Hop (AODV-RPL) GMPLS Track Forwarding PCE Remote Monitoring and Schedule Mgt 3.7. 6TiSCH Stack The IETF proposes multiple techniques for implementing functions related to routing, transport, or security.¶ The 6TiSCH architecture limits the possible variations of the stack and recommends a number of base elements for LLN applications to control the complexity of possible deployments and device interactions and to limit the size of the resulting object code. In particular, UDP [RFC0768], IPv6 [RFC8200], and the Constrained Application Protocol (CoAP) [RFC7252] are used as the transport/binding of choice for applications and management as opposed to TCP and HTTP.¶ The resulting protocol stack is represented in Figure 3:¶ +--------+--------+ | Applis | CoJP | +--------+--------+--------------+-----+ | CoAP / OSCORE | 6LoWPAN ND | RPL | +-----------------+--------------+-----+ | UDP | ICMPv6 | +-----------------+--------------------+ | IPv6 | +--------------------------------------+----------------------+ | 6LoWPAN HC / 6LoRH HC | Scheduling Functions | +--------------------------------------+----------------------+ | 6top inc. 6top Protocol | +-------------------------------------------------------------+ | IEEE Std 802.15.4 TSCH | +-------------------------------------------------------------+ Figure 3: 6TiSCH Protocol Stack RPL is the routing protocol of choice for LLNs. So far, there is no identified need to define a 6TiSCH-specific Objective Function. The Minimal 6TiSCH Configuration [RFC8180] describes the operation of RPL over a static schedule used in a Slotted ALOHA fashion [S-ALOHA], whereby all active slots may be used for emission or reception of both unicast and multicast frames.¶ 6LoWPAN header compression [RFC6282] is used to compress the IPv6 and UDP headers, whereas the 6LoWPAN Routing Header (6LoRH) [RFC8138] is used to compress the RPL artifacts in the IPv6 data packets, including the RPL Packet Information (RPI), the IP-in-IP encapsulation to/from the RPL Root, and the Source Routing Header (SRH) in non-storing mode. \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\" [RFC9008] provides the details on when headers or encapsulation are needed.¶ The Object Security for Constrained RESTful Environments (OSCORE) [RFC8613] is leveraged by the Constrained Join Protocol (CoJP) and is expected to be the primary protocol for the protection of the application payload as well. The application payload may also be protected by the Datagram Transport Layer Security (DTLS) [RFC6347] sitting either under CoAP or over CoAP so it can traverse proxies.¶ The 6TiSCH Operation Sublayer (6top) is a sublayer of a Logical Link Control (LLC) that provides the abstraction of an IP link over a TSCH MAC and schedules packets over TSCH cells, as further discussed in the next sections, providing in particular dynamic cell allocation with the 6top Protocol (6P) [RFC8480].¶ The reference stack presented in this document was implemented and interoperability-tested by a combination of open source, IETF, and ETSI efforts. One goal is to help other bodies to adopt the stack as a whole, making the effort to move to an IPv6-based IoT stack easier.¶ For a particular environment, some of the choices that are available in this architecture may not be relevant. For instance, RPL is not required for star topologies and mesh-under Layer 2 routed networks, and the 6LoWPAN compression may not be sufficient for ultra-constrained cases such as some Low-Power Wide Area (LPWA) networks. In such cases, it is perfectly doable to adopt a subset of the selection that is presented hereafter and then select alternate components to complete the solution wherever needed.¶ 3.8. Communication Paradigms and Interaction Models Section 2.1 provides the terms of Communication Paradigms and Interaction Models in combination with \"On the Difference between Information Models and Data Models\" [RFC3444]. A Communication Paradigm is an abstract view of a protocol exchange and has an Information Model for the information that is being exchanged. In contrast, an Interaction Model is more refined and points to standard operation such as a Representational State Transfer (REST) \"GET\" operation and matches a Data Model for the data that is provided over the protocol exchange.¶ Section 2.1.3 of [RPL-APPLICABILITY] and its following sections discuss application-layer paradigms such as source-sink, which is a multipeer-to-multipeer model primarily used for alarms and alerts, publish-subscribe, which is typically used for sensor data, as well as peer-to-peer and peer-to-multipeer communications.¶ Additional considerations on duocast -- one sender, two receivers for redundancy -- and its N-cast generalization are also provided. Those paradigms are frequently used in industrial automation, which is a major use case for IEEE Std 802.15.4 TSCH wireless networks with [ISA100.11a] and [WirelessHART], which provides a wireless access to [HART] applications and devices.¶ This document focuses on Communication Paradigms and Interaction Models for packet forwarding and TSCH resources (cells) management. Management mechanisms for the TSCH schedule at the link layer (one hop), network layer (multihop along a Track), and application layer (remote control) are discussed in Section 4.4. Link-layer frame forwarding interactions are discussed in Section 4.6, and network-layer packet routing is addressed in Section 4.7.¶ 4. Architecture Components 4.1. 6LoWPAN (and RPL) A RPL DODAG is formed of a Root, a collection of routers, and leaves that are hosts. Hosts are nodes that do not forward packets that they did not generate. RPL-aware leaves will participate in RPL to advertise their own addresses, whereas RPL-unaware leaves depend on a connected RPL router to do so. RPL interacts with 6LoWPAN ND at multiple levels, in particular at the Root and in the RPL-unaware leaves.¶ 4.1.1. RPL-Unaware Leaves and 6LoWPAN ND RPL needs a set of information to advertise a leaf node through a Destination Advertisement Object (DAO) message and establish reachability.¶ \"Routing for RPL Leaves\" [RFC9010] details the basic interaction of 6LoWPAN ND and RPL and enables a plain 6LN that supports [RFC8505] to obtain return connectivity via the RPL network as a RPL-unaware leaf. The leaf indicates that it requires reachability services for the Registered Address from a Routing Registrar by setting an 'R' flag in the Extended Address Registration Option [RFC8505], and it provides a TID that maps to the \"Path Sequence\" defined in Section 6.7.8 of [RFC6550], and its operation is defined in Section 7.2 of [RFC6550].¶ [RFC9010] also enables the leaf to signal with the RPLInstanceID that it wants to participate by using the Opaque field of the EARO. On the backbone, the RPLInstanceID is expected to be mapped to an overlay that matches the RPL Instance, e.g., a Virtual LAN (VLAN) or a virtual routing and forwarding (VRF) instance.¶ Though, at the time of this writing, the above specification enables a model where the separation is possible, this architecture recommends co-locating the functions of 6LBR and RPL Root.¶ 4.1.2. 6LBR and RPL Root With the 6LoWPAN ND [RFC6775], information on the 6LBR is disseminated via an Authoritative Border Router Option (ABRO) in RA messages. [RFC8505] extends [RFC6775] to enable a registration for routing and proxy ND. The capability to support [RFC8505] is indicated in the 6LoWPAN Capability Indication Option (6CIO). The discovery and liveliness of the RPL Root are obtained through RPL [RFC6550] itself.¶ When 6LoWPAN ND is coupled with RPL, the 6LBR and RPL Root functionalities are co-located in order that the address of the 6LBR is indicated by RPL DODAG Information Object (DIO) messages and to associate the ROVR from the Extended Duplicate Address Request/Confirmation (EDAR/EDAC) exchange [RFC8505] with the state that is maintained by RPL.¶ Section 7 of [RFC9010] specifies how the DAO messages are used to reconfirm the registration, thus eliminating a duplication of functionality between DAO and EDAR/EDAC messages, as illustrated in Figure 6. [RFC9010] also provides the protocol elements that are needed when the 6LBR and RPL Root functionalities are not co-located.¶ Even though the Root of the RPL network is integrated with the 6LBR, it is logically separated from the Backbone Router (6BBR) that is used to connect the 6TiSCH LLN to the backbone. This way, the Root has all information from 6LoWPAN ND and RPL about the LLN devices attached to it.¶ This architecture also expects that the Root of the RPL network (proxy-)registers the 6TiSCH nodes on their behalf to the 6BBR, for whatever operation the 6BBR performs on the backbone, such as ND proxy or redistribution in a routing protocol. This relies on an extension of the 6LoWPAN ND registration described in [RFC8929].¶ This model supports the movement of a 6TiSCH device across the multi-link subnet and allows the proxy registration of 6TiSCH nodes deep into the 6TiSCH LLN by the 6LBR / RPL Root. This is why in [RFC8505] the Registered Address is signaled in the Target Address field of the Neighbor Solicitation (NS) message as opposed to the IPv6 Source Address, which, in the case of a proxy registration, is that of the 6LBR / RPL Root itself.¶ 4.2. Network Access and Addressing 4.2.1. Join Process A new device, called the pledge, undergoes the join protocol to become a node in a 6TiSCH network. This usually occurs only once when the device is first powered on. The pledge communicates with the Join Registrar/Coordinator (JRC) of the network through a Join Proxy (JP), a radio neighbor of the pledge.¶ The JP is discovered though MAC-layer beacons. When multiple JPs from possibly multiple networks are visible, using trial and error until an acceptable position in the right network is obtained becomes inefficient. [RFC9032] adds a new subtype in the Information Element that was delegated to the IETF [RFC8137] and provides visibility into the network that can be joined and the willingness of the JP and the Root to be used by the pledge.¶ The join protocol provides the following functionality:¶ Mutual authentication¶ Authorization¶ Parameter distribution to the pledge over a secure channel¶ The Minimal Security Framework for 6TiSCH [RFC9031] defines the minimal mechanisms required for this join process to occur in a secure manner. The specification defines the Constrained Join Protocol (CoJP), which is used to distribute the parameters to the pledge over a secure session established through OSCORE [RFC8613] and which describes the secure configuration of the network stack. In the minimal setting with pre-shared keys (PSKs), CoJP allows the pledge to join after a single round-trip exchange with the JRC. The provisioning of the PSK to the pledge and the JRC needs to be done out of band, through a 'one-touch' bootstrapping process, which effectively enrolls the pledge into the domain managed by the JRC.¶ In certain use cases, the 'one-touch' bootstrapping is not feasible due to the operational constraints, and the enrollment of the pledge into the domain needs to occur in-band. This is handled through a 'zero-touch' extension of the Minimal Security Framework for 6TiSCH. The zero-touch extension [ZEROTOUCH-JOIN] leverages the \"Bootstrapping Remote Secure Key Infrastructure (BRSKI)\" [RFC8995] work to establish a shared secret between a pledge and the JRC without necessarily having them belong to a common (security) domain at join time. This happens through inter-domain communication occurring between the JRC of the network and the domain of the pledge, represented by a fourth entity, Manufacturer Authorized Signing Authority (MASA). Once the zero-touch exchange completes, the CoJP exchange defined in [RFC9031] is carried over the secure session established between the pledge and the JRC.¶ Figure 4 depicts the join process and where a Link-Local Address (LLA) is used, versus a Global Unicast Address (GUA).¶ 6LoWPAN Node 6LR 6LBR Join Registrar MASA (pledge) (Join Proxy) (Root) /Coordinator (JRC) | | | | | | 6LoWPAN ND |6LoWPAN ND+RPL | IPv6 network |IPv6 network | | LLN link |Route-Over mesh|(the Internet)|(the Internet)| | | | | | | Layer 2 | | | | |Enhanced Beacon| | | | |<--------------| | | | | | | | | | NS (EARO) | | | | | (for the LLA) | | | | |-------------->| | | | | NA (EARO) | | | | |<--------------| | | | | | | | | | (Zero-touch | | | | | handshake) | (Zero-touch handshake) | (Zero-touch | | using LLA | using GUA | handshake) | |<------------->|<---------------------------->|<------------>| | | | | | | CoJP Join Req | | | | \\ | using LLA | | | | | |-------------->| | | | | | | CoJP Join Request | | | | | using GUA | | | | |----------------------------->| | | C | | | | | | o | | CoJP Join Response | | | J | | using GUA | | | P | |<-----------------------------| | | |CoJP Join Resp | | | | | | using LLA | | | | | |<--------------| | | | / | | | | | Figure 4: Join Process in a Multi-Link Subnet. Parentheses () denote optional exchanges. 4.2.2. Registration Once the pledge successfully completes the CoJP exchange and becomes a network node, it obtains the network prefix from neighboring routers and registers its IPv6 addresses. As detailed in Section 4.1, the combined 6LoWPAN ND 6LBR and Root of the RPL network learn information such as an identifier (device EUI-64 [RFC6775] or a ROVR [RFC8505] (from 6LoWPAN ND)) and the updated Sequence Number (from RPL), and perform 6LoWPAN ND proxy registration to the 6BBR on behalf of the LLN nodes.¶ Figure 5 illustrates the initial IPv6 signaling that enables a 6LN to form a global address and register it to a 6LBR using 6LoWPAN ND [RFC8505]. It is then carried over RPL to the RPL Root and then to the 6BBR. This flow happens just once when the address is created and first registered.¶ 6LoWPAN Node 6LR 6LBR 6BBR (RPL leaf) (router) (Root) | | | | | 6LoWPAN ND |6LoWPAN ND+RPL | 6LoWPAN ND | IPv6 ND | LLN link |Route-Over mesh|Ethernet/serial| Backbone | | | | | RS (mcast) | | | |-------------->| | | |-----------> | | | |------------------> | | | RA (unicast) | | | |<--------------| | | | | | | | NS(EARO) | | | |-------------->| | | | 6LoWPAN ND | Extended DAR | | | |-------------->| | | | | NS(EARO) | | | |-------------->| | | | | NS-DAD | | | |------> | | | | (EARO) | | | | | | | NA(EARO) |<timeout> | | |<--------------| | | Extended DAC | | | |<--------------| | | NA(EARO) | | | |<--------------| | | | | | | Figure 5: Initial Registration Flow over Multi-Link Subnet Figure 6 illustrates the repeating IPv6 signaling that enables a 6LN to keep a global address alive and registered with its 6LBR using 6LoWPAN ND to the 6LR, RPL to the RPL Root, and then 6LoWPAN ND again to the 6BBR, which avoids repeating the Extended DAR/DAC flow across the network when RPL can suffice as a keep-alive mechanism.¶ 6LoWPAN Node 6LR 6LBR 6BBR (RPL leaf) (router) (Root) | | | | | 6LoWPAN ND |6LoWPAN ND+RPL | 6LoWPAN ND | IPv6 ND | LLN link |Route-Over mesh| ant IPv6 link | Backbone | | | | | | | | NS(EARO) | | | |-------------->| | | | NA(EARO) | | | |<--------------| | | | | DAO | | | |-------------->| | | | DAO-ACK | | | |<--------------| | | | | NS(EARO) | | | |-------------->| | | | NA(EARO) | | | |<--------------| | | | | | | | | Figure 6: Next Registration Flow over Multi-Link Subnet As the network builds up, a node should start as a leaf to join the RPL network and may later turn into both a RPL-capable router and a 6LR, so as to accept leaf nodes recursively joining the network.¶ 4.3. TSCH and 6top 4.3.1. 6top 6TiSCH expects a high degree of scalability together with a distributed routing functionality based on RPL. To achieve this goal, the spectrum must be allocated in a way that allows for spatial reuse between zones that will not interfere with one another. In a large and spatially distributed network, a 6TiSCH node is often in a good position to determine usage of the spectrum in its vicinity.¶ With 6TiSCH, the abstraction of an IPv6 link is implemented as a pair of bundles of cells, one in each direction. IP links are only enabled between RPL parents and children. The 6TiSCH operation is optimal when the size of a bundle minimizes both the energy wasted in idle listening and the packet drops due to congestion loss, while packets are forwarded within an acceptable latency.¶ Use cases for distributed routing are often associated with a statistical distribution of best-effort traffic with variable needs for bandwidth on each individual link. The 6TiSCH operation can remain optimal if RPL parents can adjust, dynamically and with enough reactivity to match the variations of best-effort traffic, the amount of bandwidth that is used to communicate between themselves and their children, in both directions. In turn, the agility to fulfill the needs for additional cells improves when the number of interactions with other devices and the protocol latencies are minimized.¶ 6top is a logical link control sitting between the IP layer and the TSCH MAC layer, which provides the link abstraction that is required for IP operations. The 6top Protocol, 6P, which is specified in [RFC8480], is one of the services provided by 6top. In particular, the 6top services are available over a management API that enables an external management entity to schedule cells and slotframes, and allows the addition of complementary functionality, for instance, a Scheduling Function that manages a dynamic schedule based on observed resource usage as discussed in Section 4.4.2. For this purpose, the 6TiSCH architecture differentiates \"soft\" cells and \"hard\" cells.¶ 4.3.1.1. Hard Cells \"Hard\" cells are cells that are owned and managed by a separate scheduling entity (e.g., a PCE) that specifies the slotOffset/channelOffset of the cells to be added/moved/deleted, in which case 6top can only act as instructed and may not move hard cells in the TSCH schedule on its own.¶ 4.3.1.2. Soft Cells In contrast, \"soft\" cells are cells that 6top can manage locally. 6top contains a monitoring process that monitors the performance of cells and that can add and remove soft cells in the TSCH schedule to adapt to the traffic needs, or move one when it performs poorly. To reserve a soft cell, the higher layer does not indicate the exact slotOffset/channelOffset of the cell to add, but rather the resulting bandwidth and QoS requirements. When the monitoring process triggers a cell reallocation, the two neighbor devices communicating over this cell negotiate its new position in the TSCH schedule.¶ 4.3.2. Scheduling Functions and the 6top Protocol In the case of soft cells, the cell management entity that controls the dynamic attribution of cells to adapt to the dynamics of variable rate flows is called a Scheduling Function (SF).¶ There may be multiple SFs that react more or less aggressively to the dynamics of the network.¶ An SF may be seen as divided between an upper bandwidth-adaptation logic that is unaware of the particular technology used to obtain and release bandwidth and an underlying service that maps those needs in the actual technology. In the case of TSCH using the 6top Protocol as illustrated in Figure 7, this means mapping the bandwidth onto cells.¶ +------------------------+ +------------------------+ | Scheduling Function | | Scheduling Function | | Bandwidth adaptation | | Bandwidth adaptation | +------------------------+ +------------------------+ | Scheduling Function | | Scheduling Function | | TSCH mapping to cells | | TSCH mapping to cells | +------------------------+ +------------------------+ | 6top cells negotiation | <- 6P -> | 6top cells negotiation | +------------------------+ +------------------------+ Device A Device B Figure 7: SF/6P Stack in 6top The SF relies on 6top services that implement the 6top Protocol (6P) [RFC8480] to negotiate the precise cells that will be allocated or freed based on the schedule of the peer. For instance, it may be that a peer wants to use a particular timeslot that is free in its schedule, but that timeslot is already in use by the other peer to communicate with a third party on a different cell. 6P enables the peers to find an agreement in a transactional manner that ensures the final consistency of the nodes' state.¶ MSF [RFC9033] is one of the possible Scheduling Functions. MSF uses the rendezvous slot from [RFC8180] for network discovery, neighbor discovery, and any other broadcast.¶ For basic unicast communication with any neighbor, each node uses a receive cell at a well-known slotOffset/channelOffset, which is derived from a hash of their own MAC address. Nodes can reach any neighbor by installing a transmit (shared) cell with slotOffset/channelOffset derived from the neighbor's MAC address.¶ For child-parent links, MSF continuously monitors the load between parents and children. It then uses 6P to install or remove unicast cells whenever the current schedule appears to be under-provisioned or over-provisioned.¶ 4.3.3. 6top and RPL Objective Function Operations An implementation of a RPL [RFC6550] Objective Function (OF), such as the RPL Objective Function Zero (OF0) [RFC6552] that is used in the Minimal 6TiSCH Configuration [RFC8180] to support RPL over a static schedule, may leverage for its internal computation the information maintained by 6top.¶ An OF may require metrics about reachability, such as the Expected Transmission Count (ETX) metric [RFC6551]. 6top creates and maintains an abstract neighbor table, and this state may be leveraged to feed an OF and/or store OF information as well. A neighbor table entry may contain a set of statistics with respect to that specific neighbor.¶ The neighbor information may include the time when the last packet has been received from that neighbor, a set of cell quality metrics, e.g., received signal strength indication (RSSI) or link quality indicator (LQI), the number of packets sent to the neighbor, or the number of packets received from it. This information can be made available through 6top management APIs and used, for instance, to compute a Rank Increment that will determine the selection of the preferred parent.¶ 6top provides statistics about the underlying layer so the OF can be tuned to the nature of the TSCH MAC layer. 6top also enables the RPL OF to influence the MAC behavior, for instance, by configuring the periodicity of IEEE Std 802.15.4 Extended Beacons (EBs). By augmenting the EB periodicity, it is possible to change the network dynamics so as to improve the support of devices that may change their point of attachment in the 6TiSCH network.¶ Some RPL control messages, such as the DODAG Information Object (DIO), are ICMPv6 messages that are broadcast to all neighbor nodes. With 6TiSCH, the broadcast channel requirement is addressed by 6top by configuring TSCH to provide a broadcast channel, as opposed to, for instance, piggybacking the DIO messages in Layer 2 Enhanced Beacons (EBs), which would produce undue timer coupling among layers and packet size issues, and could conflict with the policy of production networks where EBs are mostly eliminated to conserve energy.¶ 4.3.4. Network Synchronization Nodes in a TSCH network must be time synchronized. A node keeps synchronized to its time source neighbor through a combination of frame-based and acknowledgment-based synchronization. To maximize battery life and network throughput, it is advisable that RPL ICMP discovery and maintenance traffic (governed by the Trickle timer) be somehow coordinated with the transmission of time synchronization packets (especially with Enhanced Beacons).¶ This could be achieved through an interaction of the 6top sublayer and the RPL Objective Function, or could be controlled by a management entity.¶ Time distribution requires a loop-free structure. Nodes caught in a synchronization loop will rapidly desynchronize from the network and become isolated. 6TiSCH uses a RPL DAG with a dedicated global Instance for the purpose of time synchronization. That Instance is referred to as the Time Synchronization Global Instance (TSGI). The TSGI can be operated in either of the three modes that are detailed in Section 3.1.3 of RPL [RFC6550], \"Instances, DODAGs, and DODAG Versions\". Multiple uncoordinated DODAGs with independent Roots may be used if all the Roots share a common time source such as the Global Positioning System (GPS).¶ In the absence of a common time source, the TSGI should form a single DODAG with a virtual Root. A backbone network is then used to synchronize and coordinate RPL operations between the Backbone Routers that act as sinks for the LLN. Optionally, RPL's periodic operations may be used to transport the network synchronization. This may mean that 6top would need to trigger (override) the Trickle timer if no other traffic has occurred for such a time that nodes may get out of synchronization.¶ A node that has not joined the TSGI advertises a MAC-level Join Priority of 0xFF to notify its neighbors that is not capable of serving as time parent. A node that has joined the TSGI advertises a MAC-level Join Priority set to its DAGRank() in that Instance, where DAGRank() is the operation specified in Section 3.5.1 of [RFC6550], \"Rank Comparison\".¶ The provisioning of a RPL Root is out of scope for both RPL and this architecture, whereas RPL enables the propagation of configuration information down the DODAG. This applies to the TSGI as well; a Root is configured, or obtains by unspecified means, the knowledge of the RPLInstanceID for the TSGI. The Root advertises its DagRank in the TSGI, which must be less than 0xFF, as its Join Priority in its IEEE Std 802.15.4 EBs.¶ A node that reads a Join Priority of less than 0xFF should join the neighbor with the lesser Join Priority and use it as time parent. If the node is configured to serve as time parent, then the node should join the TSGI, obtain a Rank in that Instance, and start advertising its own DagRank in the TSGI as its Join Priority in its EBs.¶ 4.3.5. Slotframes and CDU Matrix 6TiSCH enables IPv6 best-effort (stochastic) transmissions over a MAC layer that is also capable of scheduled (deterministic) transmissions. A window of time is defined around the scheduled transmission where the medium must, as much as practically feasible, be free of contending energy to ensure that the medium is free of contending packets when the time comes for a scheduled transmission. One simple way to obtain such a window is to format time and frequencies in cells of transmission of equal duration. This is the method that is adopted in IEEE Std 802.15.4 TSCH as well as the Long Term Evolution (LTE) of cellular networks.¶ The 6TiSCH architecture defines a global concept that is called a Channel Distribution and Usage (CDU) matrix to describe that formatting of time and frequencies.¶ A CDU matrix is defined centrally as part of the network definition. It is a matrix of cells with a height equal to the number of available channels (indexed by channelOffsets) and a width (in timeslots) that is the period of the network scheduling operation (indexed by slotOffsets) for that CDU matrix. There are different models for scheduling the usage of the cells, which place the responsibility of avoiding collisions either on a central controller or on the devices themselves, at an extra cost in terms of energy to scan for free cells (more in Section 4.4).¶ The size of a cell is a timeslot duration, and values of 10 to 15 milliseconds are typical in 802.15.4 TSCH to accommodate for the transmission of a frame and an ack, including the security validation on the receive side, which may take up to a few milliseconds on some device architecture.¶ A CDU matrix iterates over a well-known channel rotation called the hopping sequence. In a given network, there might be multiple CDU matrices that operate with different widths, so they have different durations and represent different periodic operations. It is recommended that all CDU matrices in a 6TiSCH domain operate with the same cell duration and are aligned so as to reduce the chances of interferences from the Slotted ALOHA operations. The knowledge of the CDU matrices is shared between all the nodes and used in particular to define slotframes.¶ A slotframe is a MAC-level abstraction that is common to all nodes and contains a series of timeslots of equal length and precedence. It is characterized by a slotframe_ID and a slotframe_size. A slotframe aligns to a CDU matrix for its parameters, such as number and duration of timeslots.¶ Multiple slotframes can coexist in a node schedule, i.e., a node can have multiple activities scheduled in different slotframes. A slotframe is associated with a priority that may be related to the precedence of different 6TiSCH topologies. The slotframes may be aligned to different CDU matrices and thus have different widths. There is typically one slotframe for scheduled traffic that has the highest precedence and one or more slotframe(s) for RPL traffic. The timeslots in the slotframe are indexed by the slotOffset; the first cell is at slotOffset 0.¶ When a packet is received from a higher layer for transmission, 6top inserts that packet in the outgoing queue that matches the packet best (Differentiated Services [RFC2474] can therefore be used). At each scheduled transmit slot, 6top looks for the frame in all the outgoing queues that best matches the cells. If a frame is found, it is given to the TSCH MAC for transmission.¶ 4.3.6. Distributing the Reservation of Cells The 6TiSCH architecture introduces the concept of chunks (Section 2.1) to distribute the allocation of the spectrum for a whole group of cells at a time. The CDU matrix is formatted into a set of chunks, possibly as illustrated in Figure 8, each of the chunks identified uniquely by a chunk-ID. The knowledge of this formatting is shared between all the nodes in a 6TiSCH network. It could be conveyed during the join process, codified into a profile document, or obtained using some other mechanism. This is as opposed to Static Scheduling, which refers to the preprogrammed mechanism specified in [RFC8180] and which existed before the distribution of the chunk formatting.¶ +-----+-----+-----+-----+-----+-----+-----+ +-----+ chan.Off. 0 |chnkA|chnkP|chnk7|chnkO|chnk2|chnkK|chnk1| ... |chnkZ| +-----+-----+-----+-----+-----+-----+-----+ +-----+ chan.Off. 1 |chnkB|chnkQ|chnkA|chnkP|chnk3|chnkL|chnk2| ... |chnk1| +-----+-----+-----+-----+-----+-----+-----+ +-----+ ... +-----+-----+-----+-----+-----+-----+-----+ +-----+ chan.Off. 15 |chnkO|chnk6|chnkN|chnk1|chnkJ|chnkZ|chnkI| ... |chnkG| +-----+-----+-----+-----+-----+-----+-----+ +-----+ 0 1 2 3 4 5 6 M Figure 8: CDU Matrix Partitioning in Chunks The 6TiSCH architecture envisions a protocol that enables chunk ownership appropriation whereby a RPL parent discovers a chunk that is not used in its interference domain, claims the chunk, and then defends it in case another RPL parent would attempt to appropriate it while it is in use. The chunk is the basic unit of ownership that is used in that process.¶ As a result of the process of chunk ownership appropriation, the RPL parent has exclusive authority to decide which cell in the appropriated chunk can be used by which node in its interference domain. In other words, it is implicitly delegated the right to manage the portion of the CDU matrix that is represented by the chunk.¶ Initially, those cells are added to the heap of free cells, then dynamically placed into existing bundles, into new bundles, or allocated opportunistically for one transmission.¶ Note that a PCE is expected to have precedence in the allocation, so that a RPL parent would only be able to obtain portions that are not in use by the PCE.¶ 4.4. Schedule Management Mechanisms 6TiSCH uses four paradigms to manage the TSCH schedule of the LLN nodes: Static Scheduling, Neighbor-to-Neighbor Scheduling, Remote Monitoring and Scheduling Management, and Hop-by-Hop Scheduling. Multiple mechanisms are defined that implement the associated Interaction Models, and they can be combined and used in the same LLN. Which mechanism(s) to use depends on application requirements.¶ 4.4.1. Static Scheduling In the simplest instantiation of a 6TiSCH network, a common fixed schedule may be shared by all nodes in the network. Cells are shared, and nodes contend for slot access in a Slotted ALOHA manner.¶ A static TSCH schedule can be used to bootstrap a network, as an initial phase during implementation or as a fall-back mechanism in case of network malfunction. This schedule is preestablished, for instance, decided by a network administrator based on operational needs. It can be preconfigured into the nodes, or, more commonly, learned by a node when joining the network using standard IEEE Std 802.15.4 Information Elements (IE). Regardless, the schedule remains unchanged after the node has joined a network. RPL is used on the resulting network. This \"minimal\" scheduling mechanism that implements this paradigm is detailed in [RFC8180].¶ 4.4.2. Neighbor-to-Neighbor Scheduling In the simplest instantiation of a 6TiSCH network described in Section 4.4.1, nodes may expect a packet at any cell in the schedule and will waste energy idle listening. In a more complex instantiation of a 6TiSCH network, a matching portion of the schedule is established between peers to reflect the observed amount of transmissions between those nodes. The aggregation of the cells between a node and a peer forms a bundle that the 6top sublayer uses to implement the abstraction of a link for IP. The bandwidth on that link is proportional to the number of cells in the bundle.¶ If the size of a bundle is configured to fit an average amount of bandwidth, peak traffic is dropped. If the size is configured to allow for peak emissions, energy is wasted idle listening.¶ As discussed in more detail in Section 4.3, the 6top Protocol [RFC8480] specifies the exchanges between neighbor nodes to reserve soft cells to transmit to one another, possibly under the control of a Scheduling Function (SF). Because this reservation is done without global knowledge of the schedule of the other nodes in the LLN, scheduling collisions are possible.¶ And as discussed in Section 4.3.2, an optional SF is used to monitor bandwidth usage and to perform requests for dynamic allocation by the 6top sublayer. The SF component is not part of the 6top sublayer. It may be co-located on the same device or may be partially or fully offloaded to an external system. The \"6TiSCH Minimal Scheduling Function (MSF)\" [RFC9033] provides a simple SF that can be used by default by devices that support dynamic scheduling of soft cells.¶ Monitoring and relocation is done in the 6top sublayer. For the upper layer, the connection between two neighbor nodes appears as a number of cells. Depending on traffic requirements, the upper layer can request 6top to add or delete a number of cells scheduled to a particular neighbor, without being responsible for choosing the exact slotOffset/channelOffset of those cells.¶ 4.4.3. Remote Monitoring and Schedule Management Remote Monitoring and Schedule Management refers to a DetNet/SDN model whereby an NME and a scheduling entity, associated with a PCE, reside in a central controller and interact with the 6top sublayer to control IPv6 links and Tracks (Section 4.5) in a 6TiSCH network. The composite centralized controller can assign physical resources (e.g., buffers and hard cells) to a particular Track to optimize the reliability within a bounded latency for a well-specified flow.¶ The work in the 6TiSCH Working Group focused on nondeterministic traffic and did not provide the generic data model necessary for the controller to monitor and manage resources of the 6top sublayer. This is deferred to future work, see Appendix A.1.2.¶ With respect to centralized routing and scheduling, it is envisioned that the related component of the 6TiSCH architecture would be an extension of the DetNet architecture [RFC8655], which studies Layer 3 aspects of Deterministic Networks and covers networks that span multiple Layer 2 domains.¶ The DetNet architecture is a form of Software-Defined Networking (SDN) architecture and is composed of three planes: a (User) Application Plane, a Controller Plane (where the PCE operates), and a Network Plane, which can represent a 6TiSCH LLN.¶ \"Software-Defined Networking (SDN): Layers and Architecture Terminology\" [RFC7426] proposes a generic representation of the SDN architecture that is reproduced in Figure 9.¶ o--------------------------------o | | | +-------------+ +----------+ | | | Application | | Service | | | +-------------+ +----------+ | | Application Plane | o---------------Y----------------o | *-----------------------------Y---------------------------------* | Network Services Abstraction Layer (NSAL) | *------Y------------------------------------------------Y-------* | | | Service Interface | | | o------Y------------------o o---------------------Y------o | | Control Plane | | Management Plane | | | +----Y----+ +-----+ | | +-----+ +----Y----+ | | | Service | | App | | | | App | | Service | | | +----Y----+ +--Y--+ | | +--Y--+ +----Y----+ | | | | | | | | | | *----Y-----------Y----* | | *---Y---------------Y----* | | | Control Abstraction | | | | Management Abstraction | | | | Layer (CAL) | | | | Layer (MAL) | | | *----------Y----------* | | *----------Y-------------* | | | | | | | o------------|------------o o------------|---------------o | | | CP | MP | Southbound | Southbound | Interface | Interface | | *------------Y---------------------------------Y----------------* | Device and resource Abstraction Layer (DAL) | *------------Y---------------------------------Y----------------* | | | | | o-------Y----------o +-----+ o--------Y----------o | | | Forwarding Plane | | App | | Operational Plane | | | o------------------o +-----+ o-------------------o | | Network Device | +---------------------------------------------------------------+ Figure 9: SDN Layers and Architecture Terminology per RFC 7426 The PCE establishes end-to-end Tracks of hard cells, which are described in more detail in Section 4.6.1.¶ The DetNet work is expected to enable end-to-end deterministic paths across heterogeneous networks. This can be, for instance, a 6TiSCH LLN and an Ethernet backbone.¶ This model fits the 6TiSCH extended configuration, whereby a 6BBR federates multiple 6TiSCH LLNs in a single subnet over a backbone that can be, for instance, Ethernet or Wi-Fi. In that model, 6TiSCH 6BBRs synchronize with one another over the backbone, so as to ensure that the multiple LLNs that form the IPv6 subnet stay tightly synchronized.¶ If the backbone is deterministic, then the Backbone Router ensures that the end-to-end deterministic behavior is maintained between the LLN and the backbone. It is the responsibility of the PCE to compute a deterministic path end to end across the TSCH network and an IEEE Std 802.1 TSN Ethernet backbone, and it is the responsibility of DetNet to enable end-to-end deterministic forwarding.¶ 4.4.4. Hop-by-Hop Scheduling A node can reserve a Track (Section 4.5) to one or more destination(s) that are multiple hops away by installing soft cells at each intermediate node. This forms a Track of soft cells. A Track SF above the 6top sublayer of each node on the Track is needed to monitor these soft cells and trigger relocation when needed.¶ This hop-by-hop reservation mechanism is expected to be similar in essence to [RFC3209] and/or [RFC4080] and [RFC5974]. The protocol for a node to trigger hop-by-hop scheduling is not yet defined.¶ 4.5. On Tracks The architecture introduces the concept of a Track, which is a directed path from a source 6TiSCH node to one or more destination 6TiSCH node(s) across a 6TiSCH LLN.¶ A Track is the 6TiSCH instantiation of the concept of a deterministic path as described in [RFC8655]. Constrained resources such as memory buffers are reserved for that Track in intermediate 6TiSCH nodes to avoid loss related to limited capacity. A 6TiSCH node along a Track not only knows which bundles of cells it should use to receive packets from a previous hop but also knows which bundle(s) it should use to send packets to its next hop along the Track.¶ 4.5.1. General Behavior of Tracks A Track is associated with Layer 2 bundles of cells with related schedules and logical relationships that ensure that a packet that is injected in a Track will progress in due time all the way to destination.¶ Multiple cells may be scheduled in a Track for the transmission of a single packet, in which case the normal operation of IEEE Std 802.15.4 Automatic Repeat-reQuest (ARQ) can take place; the acknowledgment may be omitted in some cases, for instance, if there is no scheduled cell for a possible retry.¶ There are several benefits for using a Track to forward a packet from a source node to the destination node:¶ Track Forwarding, as further described in Section 4.6.1, is a Layer 2 forwarding scheme, which introduces less process delay and overhead than a Layer 3 forwarding scheme. Therefore, LLN devices can save more energy and resources, which is critical for resource-constrained devices.¶ Since channel resources, i.e., bundles of cells, have been reserved for communications between 6TiSCH nodes of each hop on the Track, the throughput and the maximum latency of the traffic along a Track are guaranteed, and the jitter is minimized.¶ By knowing the scheduled timeslots of incoming bundle(s) and outgoing bundle(s), 6TiSCH nodes on a Track could save more energy by staying in sleep state during inactive slots.¶ Tracks are protected from interfering with one another if a cell is scheduled to belong to at most one Track, and congestion loss is avoided if at most one packet can be presented to the MAC to use that cell. Tracks enhance the reliability of transmissions and thus further improve the energy consumption in LLN devices by reducing the chances of retransmission.¶ 4.5.2. Serial Track A Serial (or simple) Track is the 6TiSCH version of a circuit: a bundle of cells that are programmed to receive (RX-cells) is uniquely paired with a bundle of cells that are set to transmit (TX-cells), representing a Layer 2 forwarding state that can be used regardless of the network-layer protocol. A Serial Track is thus formed end-to-end as a succession of paired bundles: a receive bundle from the previous hop and a transmit bundle to the next hop along the Track.¶ For a given iteration of the device schedule, the effective channel of the cell is obtained by looping through a well-known hopping sequence beginning at Epoch time and starting at the cell's channelOffset, which results in a rotation of the frequency that is used for transmission. The bundles may be computed so as to accommodate both variable rates and retransmissions, so they might not be fully used in the iteration of the schedule.¶ 4.5.3. Complex Track with Replication and Elimination The art of Deterministic Networks already includes packet replication and elimination techniques. Example standards include the Parallel Redundancy Protocol (PRP) and the High-availability Seamless Redundancy (HSR) [IEC62439]. Similarly, and as opposed to a Serial Track that is a sequence of nodes and links, a Complex Track is shaped as a directed acyclic graph towards one or more destination(s) to support multipath forwarding and route around failures.¶ A Complex Track may branch off over noncongruent branches for the purpose of multicasting and/or redundancy, in which case, it reconverges later down the path. This enables the Packet Replication, Elimination, and Ordering Functions (PREOF) defined by DetNet. Packet ARQ, Replication, Elimination, and Overhearing (PAREO) adds radio-specific capabilities of Layer 2 ARQ and promiscuous listening to redundant transmissions to compensate for the lossiness of the medium and meet industrial expectations of a RAW network. Combining PAREO and PREOF, a Track may extend beyond the 6TiSCH network into a larger DetNet network.¶ In the art of TSCH, a path does not necessarily support PRE, but it is almost systematically multipath. This means that a Track is scheduled so as to ensure that each hop has at least two forwarding solutions, and the forwarding decision is to try the preferred one and use the other in case of Layer 2 transmission failure as detected by ARQ. Similarly, at each 6TiSCH hop along the Track, the PCE may schedule more than one timeslot for a packet, so as to support Layer 2 retries (ARQ). It is also possible that the field device only uses the second branch if sending over the first branch fails.¶ 4.5.4. DetNet End-to-End Path Ultimately, DetNet should enable extending a Track beyond the 6TiSCH LLN as illustrated in Figure 10. In that example, a Track is laid out from a field device in a 6TiSCH network to an IoT gateway that is located on an 802.1 Time-Sensitive Networking (TSN) backbone. A 6TiSCH-aware DetNet service layer handles the Packet Replication, Elimination, and Ordering Functions over the DODAG that forms a Track.¶ The Replication function in the 6TiSCH Node sends a copy of each packet over two different branches, and the PCE schedules each hop of both branches so that the two copies arrive in due time at the gateway. In case of a loss on one branch, hopefully the other copy of the packet still makes it in due time. If two copies make it to the IoT gateway, the Elimination function in the gateway ignores the extra packet and presents only one copy to upper layers.¶ +-=-=-+ | IoT | | G/W | +-=-=-+ ^ <=== Elimination Track branch | | +-=-=-=-+ +-=-=-=-=+ Subnet backbone | | +-=|-=+ +-=|-=+ | | | Backbone | | | Backbone o | | | Router | | | Router +-=/-=+ +-=|-=+ o / o o-=-o-=-=/ o o o-=-o-=/ o o o o o o \\ / o o LLN o o v <=== Replication o Figure 10: Example End-to-End DetNet Track 4.5.5. Cell Reuse The 6TiSCH architecture provides the means to avoid waste of cells as well as overflows in the transmit bundle of a Track, as follows:¶ A TX-cell that is not needed for the current iteration may be reused opportunistically on a per-hop basis for routed packets. When all of the frames that were received for a given Track are effectively transmitted, any available TX-cell for that Track can be reused for upper-layer traffic for which the next-hop router matches the next hop along the Track. In that case, the cell that is being used is effectively a TX-cell from the Track, but the short address for the destination is that of the next-hop router.¶ It results in a frame that is received in an RX-cell of a Track with a destination MAC address set to this node, as opposed to the broadcast MAC address that must be extracted from the Track and delivered to the upper layer. Note that a frame with an unrecognized destination MAC address is dropped at the lower MAC layer and thus is not received at the 6top sublayer.¶ On the other hand, it might happen that there are not enough TX-cells in the transmit bundle to accommodate the Track traffic, for instance, if more retransmissions are needed than provisioned. In that case, and if the frame transports an IPv6 packet, then it can be placed for transmission in the bundle that is used for Layer 3 traffic towards the next hop along the Track. The MAC address should be set to the next-hop MAC address to avoid confusion.¶ It results in a frame that is received over a Layer 3 bundle that may be in fact associated with a Track. In a classical IP link such as an Ethernet, off-Track traffic is typically in excess over reservation to be routed along the non-reserved path based on its QoS setting. But with 6TiSCH, since the use of the Layer 3 bundle may be due to transmission failures, it makes sense for the receiver to recognize a frame that should be re-Tracked and to place it back on the appropriate bundle if possible. A frame is re-Tracked by scheduling it for transmission over the transmit bundle associated with the Track, with the destination MAC address set to broadcast.¶ 4.6. Forwarding Models By forwarding, this document means the per-packet operation that allows delivery of a packet to a next hop or an upper layer in this node. Forwarding is based on preexisting state that was installed as a result of a routing computation, see Section 4.7. 6TiSCH supports three different forwarding models: (GMPLS) Track Forwarding, (classical) IPv6 Forwarding, and (6LoWPAN) Fragment Forwarding.¶ 4.6.1. Track Forwarding Forwarding along a Track can be seen as a Generalized Multiprotocol Label Switching (GMPLS) operation in that the information used to switch a frame is not an explicit label but is rather related to other properties of the way the packet was received, a particular cell in the case of 6TiSCH. As a result, as long as the TSCH MAC (and Layer 2 security) accepts a frame, that frame can be switched regardless of the protocol, whether this is an IPv6 packet, a 6LoWPAN fragment, or a frame from an alternate protocol such as WirelessHART or ISA100.11a.¶ A data frame that is forwarded along a Track normally has a destination MAC address that is set to broadcast or a multicast address depending on MAC support. This way, the MAC layer in the intermediate nodes accepts the incoming frame and 6top switches it without incurring a change in the MAC header. In the case of IEEE Std 802.15.4, this means effectively to broadcast, so that along the Track the short address for the destination of the frame is set to 0xFFFF.¶ There are two modes for a Track: an IPv6 native mode and a protocol-independent tunnel mode.¶ 4.6.1.1. Native Mode In native mode, the Protocol Data Unit (PDU) is associated with flow-dependent metadata that refers uniquely to the Track, so the 6top sublayer can place the frame in the appropriate cell without ambiguity. In the case of IPv6 traffic, this flow may be identified using a 6-tuple as discussed in [RFC8939]. In particular, implementations of this document should support identification of DetNet flows based on the IPv6 Flow Label field.¶ The flow follows a Track that is identified using a RPL Instance (see Section 3.1.3 of [RFC6550]), signaled in a RPL Packet Information (more in Section 11.2.2.1 of [RFC6550]) and the source address of a packet going down the DODAG formed by a local instance. One or more flows may be placed in a same Track and the Track identification (TrackID plus owner) may be placed in an IP-in-IP encapsulation. The forwarding operation is based on the Track and does not depend on the flow therein.¶ The Track identification is validated at egress before restoring the destination MAC address (DMAC) and punting to the upper layer.¶ Figure 11 illustrates the Track Forwarding operation that happens at the 6top sublayer, below IP.¶ | Packet flowing across the network ^ +--------------+ | | | IPv6 | | | +--------------+ | | | 6LoWPAN HC | | | +--------------+ ingress egress | 6top | sets +----+ +----+ restores +--------------+ DMAC to | | | | DMAC to | TSCH MAC | brdcst | | | | dest +--------------+ | | | | | | | LLN PHY | +-------+ +--...-----+ +-------+ +--------------+ Ingress Relay Relay Egress Stack Layer Node Node Node Node Figure 11: Track Forwarding, Native Mode 4.6.1.2. Tunnel Mode In tunnel mode, the frames originate from an arbitrary protocol over a compatible MAC that may or may not be synchronized with the 6TiSCH network. An example of this would be a router with a dual radio that is capable of receiving and sending WirelessHART or ISA100.11a frames with the second radio by presenting itself as an access point or a Backbone Router, respectively. In that mode, some entity (e.g., PCE) can coordinate with a WirelessHART Network Manager or an ISA100.11a System Manager to specify the flows that are transported.¶ +--------------+ | IPv6 | +--------------+ | 6LoWPAN HC | +--------------+ set restore | 6top | +DMAC+ +DMAC+ +--------------+ to|brdcst to|nexthop | TSCH MAC | | | | | +--------------+ | | | | | LLN PHY | +-------+ +--...-----+ +-------+ +--------------+ | ingress egress | | | +--------------+ | | | LLN PHY | | | +--------------+ | Packet flowing across the network | | TSCH MAC | | | +--------------+ | DMAC = | DMAC = |ISA100/WiHART | | nexthop v nexthop +--------------+ Source Ingress Egress Destination Stack Layer Node Node Node Node Figure 12: Track Forwarding, Tunnel Mode In that case, the TrackID that identifies the Track at the ingress 6TiSCH router is derived from the RX-cell. The DMAC is set to this node, but the TrackID indicates that the frame must be tunneled over a particular Track, so the frame is not passed to the upper layer. Instead, the DMAC is forced to broadcast, and the frame is passed to the 6top sublayer for switching.¶ At the egress 6TiSCH router, the reverse operation occurs. Based on tunneling information of the Track, which may for instance indicate that the tunneled datagram is an IP packet, the datagram is passed to the appropriate link-layer with the destination MAC restored.¶ 4.6.1.3. Tunneling Information Tunneling information coming with the Track configuration provides the destination MAC address of the egress endpoint as well as the tunnel mode and specific data depending on the mode, for instance, a service access point for frame delivery at egress.¶ If the tunnel egress point does not have a MAC address that matches the configuration, the Track installation fails.¶ If the Layer 3 destination address belongs to the tunnel termination, then it is possible that the IPv6 address of the destination is compressed at the 6LoWPAN sublayer based on the MAC address. Restoring the wrong MAC address at the egress would then also result in the wrong IP address in the packet after decompression. For that reason, a packet can be injected in a Track only if the destination MAC address is effectively that of the tunnel egress point. It is thus mandatory for the ingress router to validate that the MAC address used at the 6LoWPAN sublayer for compression matches that of the tunnel egress point before it overwrites it to broadcast. The 6top sublayer at the tunnel egress point reverts that operation to the MAC address obtained from the tunnel information.¶ 4.6.2. IPv6 Forwarding As the packets are routed at Layer 3, traditional QoS and Active Queue Management (AQM) operations are expected to prioritize flows.¶ | Packet flowing across the network ^ +--------------+ | | | IPv6 | | +-QoS+ +-QoS+ | +--------------+ | | | | | | | 6LoWPAN HC | | | | | | | +--------------+ | | | | | | | 6top | | | | | | | +--------------+ | | | | | | | TSCH MAC | | | | | | | +--------------+ | | | | | | | LLN PHY | +-------+ +--...-----+ +-------+ +--------------+ Source Ingress Egress Destination Stack Layer Node Router Router Node Figure 13: IP Forwarding 4.6.3. Fragment Forwarding Considering that, per Section 4 of [RFC4944], 6LoWPAN packets can be as large as 1280 bytes (the IPv6 minimum MTU) and that the non-storing mode of RPL implies source routing, which requires space for routing headers, and that an IEEE Std 802.15.4 frame with security may carry in the order of 80 bytes of effective payload, an IPv6 packet might be fragmented into more than 16 fragments at the 6LoWPAN sublayer.¶ This level of fragmentation is much higher than that traditionally experienced over the Internet with IPv4 fragments, where fragmentation is already known as harmful.¶ In the case of a multihop route within a 6TiSCH network, hop-by-hop recomposition occurs at each hop to reform the packet and route it. This creates additional latency and forces intermediate nodes to store a portion of a packet for an undetermined time, thus impacting critical resources such as memory and battery.¶ [RFC8930] describes a framework for forwarding fragments end-to-end across a 6TiSCH route-over mesh. Within that framework, [VIRTUAL-REASSEMBLY] details a virtual reassembly buffer mechanism whereby the datagram tag in the 6LoWPAN fragment is used as a label for switching at the 6LoWPAN sublayer.¶ Building on this technique, [RFC8931] introduces a new format for 6LoWPAN fragments that enables the selective recovery of individual fragments and allows for a degree of flow control based on an Explicit Congestion Notification (ECN).¶ | Packet flowing across the network ^ +--------------+ | | | IPv6 | | +----+ +----+ | +--------------+ | | | | | | | 6LoWPAN HC | | learn learn | +--------------+ | | | | | | | 6top | | | | | | | +--------------+ | | | | | | | TSCH MAC | | | | | | | +--------------+ | | | | | | | LLN PHY | +-------+ +--...-----+ +-------+ +--------------+ Source Ingress Egress Destination Stack Layer Node Router Router Node Figure 14: Forwarding First Fragment In that model, the first fragment is routed based on the IPv6 header that is present in that fragment. The 6LoWPAN sublayer learns the next-hop selection, generates a new datagram tag for transmission to the next hop, and stores that information indexed by the incoming MAC address and datagram tag. The next fragments are then switched based on that stored state.¶ | Packet flowing across the network ^ +--------------+ | | | IPv6 | | | +--------------+ | | | 6LoWPAN HC | | replay replay | +--------------+ | | | | | | | 6top | | | | | | | +--------------+ | | | | | | | TSCH MAC | | | | | | | +--------------+ | | | | | | | LLN PHY | +-------+ +--...-----+ +-------+ +--------------+ Source Ingress Egress Destination Stack Layer Node Router Router Node Figure 15: Forwarding Next Fragment A bitmap and an ECN echo in the end-to-end acknowledgment enable the source to resend the missing fragments selectively. The first fragment may be resent to carve a new path in case of a path failure. The ECN echo set indicates that the number of outstanding fragments should be reduced.¶ 4.7. Advanced 6TiSCH Routing 4.7.1. Packet Marking and Handling All packets inside a 6TiSCH domain must carry the RPLInstanceID that identifies the 6TiSCH topology (e.g., a Track) that is to be used for routing and forwarding that packet. The location of that information must be the same for all packets forwarded inside the domain.¶ For packets that are routed by a PCE along a Track, the tuple formed by 1) (typically) the IPv6 source or (possibly) destination address in the IPv6 header and 2) a local RPLInstanceID in the RPI that serves as TrackID, identify uniquely the Track and associated transmit bundle.¶ For packets that are routed by RPL, that information is the RPLInstanceID that is carried in the RPL Packet Information (RPI), as discussed in Section 11.2 of [RFC6550], \"Loop Avoidance and Detection\". The RPI is transported by a RPL Option in the IPv6 Hop-By-Hop Options header [RFC6553].¶ A compression mechanism for the RPL packet artifacts that integrates the compression of IP-in-IP encapsulation and the Routing Header type 3 [RFC6554] with that of the RPI in a 6LoWPAN dispatch/header type is specified in [RFC8025] and [RFC8138].¶ Either way, the method and format used for encoding the RPLInstanceID is generalized to all 6TiSCH topological Instances, which include both RPL Instances and Tracks.¶ 4.7.2. Replication, Retries, and Elimination 6TiSCH supports the PREOF operations of elimination and reordering of packets along a complex Track, but has no requirement about tagging a sequence number in the packet for that purpose. With 6TiSCH, the schedule can tell when multiple receive timeslots correspond to copies of a same packet, in which case the receiver may avoid listening to the extra copies once it has received one instance of the packet.¶ The semantics of the configuration enable correlated timeslots to be grouped for transmit (and receive, respectively) with 'OR' relations, and then an 'AND' relation can be configurable between groups. The semantics are such that if the transmit (and receive, respectively) operation succeeded in one timeslot in an 'OR' group, then all the other timeslots in the group are ignored. Now, if there are at least two groups, the 'AND' relation between the groups indicates that one operation must succeed in each of the groups.¶ On the transmit side, timeslots provisioned for retries along a same branch of a Track are placed in the same 'OR' group. The 'OR' relation indicates that if a transmission is acknowledged, then retransmissions of that packet should not be attempted for the remaining timeslots in that group. There are as many 'OR' groups as there are branches of the Track departing from this node. Different 'OR' groups are programmed for the purpose of replication, each group corresponding to one branch of the Track. The 'AND' relation between the groups indicates that transmission over any of branches must be attempted regardless of whether a transmission succeeded in another branch. It is also possible to place cells to different next-hop routers in the same 'OR' group. This allows routing along multipath Tracks, trying one next hop and then another only if sending to the first fails.¶ On the receive side, all timeslots are programmed in the same 'OR' group. Retries of the same copy as well as converging branches for elimination are converged, meaning that the first successful reception is enough and that all the other timeslots can be ignored. An 'AND' group denotes different packets that must all be received and transmitted over the associated transmit groups within their respected 'AND' or 'OR' rules.¶ As an example, say that we have a simple network as represented in Figure 16, and we want to enable PREOF between an ingress node I and an egress node E.¶ +-+ +-+ -- |A| ------ |C| -- / +-+ +-+ \\ / \\ +-+ +-+ |I| |E| +-+ +-+ \\ / \\ +-+ +-+ / -- |B| ------- |D| -- +-+ +-+ Figure 16: Scheduling PREOF on a Simple Network The assumption for this particular problem is that a 6TiSCH node has a single radio, so it cannot perform two receive and/or transmit operations at the same time, even on two different channels.¶ Say we have six possible channels, and at least ten timeslots per slotframe. Figure 17 shows a possible schedule whereby each transmission is retried two or three times, and redundant copies are forwarded in parallel via A and C on the one hand, and B and D on the other, providing time diversity, spatial diversity though different physical paths, and frequency diversity.¶ slotOffset 0 1 2 3 4 5 6 7 9 +----+----+----+----+----+----+----+----+----+ channelOffset 0 | | | | | | |B->D| | | ... +----+----+----+----+----+----+----+----+----+ channelOffset 1 | |I->A| |A->C|B->D| | | | | ... +----+----+----+----+----+----+----+----+----+ channelOffset 2 |I->A| | |I->B| |C->E| |D->E| | ... +----+----+----+----+----+----+----+----+----+ channelOffset 3 | | | | |A->C| | | | | ... +----+----+----+----+----+----+----+----+----+ channelOffset 4 | | |I->B| | |B->D| | |D->E| ... +----+----+----+----+----+----+----+----+----+ channelOffset 5 | | |A->C| | | |C->E| | | ... +----+----+----+----+----+----+----+----+----+ Figure 17: Example Global Schedule This translates into a different slotframe that provides the waking and sleeping times for every node, and the channelOffset to be used when awake. Figure 18 shows the corresponding slotframe for node A.¶ slotOffset 0 1 2 3 4 5 6 7 9 +----+----+----+----+----+----+----+----+----+ operation |rcv |rcv |xmit|xmit|xmit|none|none|none|none| ... +----+----+----+----+----+----+----+----+----+ channelOffset | 2 | 1 | 5 | 1 | 3 |N/A |N/A |N/A |N/A | ... +----+----+----+----+----+----+----+----+----+ Figure 18: Example Slotframe for Node A The logical relationship between the timeslots is given by Table 2:¶ Table 2 Node rcv slotOffset xmit slotOffset I N/A (0 OR 1) AND (2 OR 3) A (0 OR 1) (2 OR 3 OR 4) B (2 OR 3) (4 OR 5 OR 6) C (2 OR 3 OR 4) (5 OR 6) D (4 OR 5 OR 6) (7 OR 8) E (5 OR 6 OR 7 OR 8) N/A 5. IANA Considerations This document has no IANA actions.¶ 6. Security Considerations The \"Minimal Security Framework for 6TiSCH\" [RFC9031] was optimized for Low-Power and TSCH operations. The reader is encouraged to review the Security Considerations section of that document (Section 9), which discusses 6TiSCH security issues in more details.¶ 6.1. Availability of Remote Services The operation of 6TiSCH Tracks inherits its high-level operation from DetNet and is subject to the observations in Section 5 of [RFC8655]. The installation and the maintenance of the 6TiSCH Tracks depend on the availability of a controller with a PCE to compute and push them in the network. When that connectivity is lost, existing Tracks may continue to operate until the end of their lifetime, but cannot be removed or updated, and new Tracks cannot be installed.¶ In an LLN, the communication with a remote PCE may be slow and unreactive to rapid changes in the condition of the wireless communication. An attacker may introduce extra delay by selectively jamming some packets or some flows. The expectation is that the 6TiSCH Tracks enable enough redundancy to maintain the critical traffic in operation while new routes are calculated and programmed into the network.¶ As with DetNet in general, the communication with the PCE must be secured and should be protected against DoS attacks, including delay injection and blackholing attacks, and secured as discussed in the security considerations defined for Abstraction and Control of Traffic Engineered Networks (ACTN) in Section 9 of [RFC8453], which applies equally to DetNet and 6TiSCH. In a similar manner, the communication with the JRC must be secured and should be protected against DoS attacks when possible.¶ 6.2. Selective Jamming The hopping sequence of a TSCH network is well known, meaning that if a rogue manages to identify a cell of a particular flow, then it may selectively jam that cell without impacting any other traffic. This attack can be performed at the PHY layer without any knowledge of the Layer 2 keys, and it is very hard to detect and diagnose because only one flow is impacted.¶ [ROBUST-SCHEDULING] proposes a method to obfuscate the hopping sequence and make it harder to perpetrate that particular attack.¶ 6.3. MAC-Layer Security This architecture operates on IEEE Std 802.15.4 and expects the link-layer security to be enabled at all times between connected devices, except for the very first step of the device join process, where a joining device may need some initial, unsecured exchanges so as to obtain its initial key material. In a typical deployment, all joined nodes use the same keys, and rekeying needs to be global.¶ The 6TISCH architecture relies on the join process to deny authorization of invalid nodes and to preserve the integrity of the network keys. A rogue that managed to access the network can perform a large variety of attacks from DoS to injecting forged packets and routing information. \"Zero-trust\" properties would be highly desirable but are mostly not available at the time of this writing. [RFC8928] is a notable exception that protects the ownership of IPv6 addresses and prevents a rogue node with L2 access from stealing and injecting traffic on behalf of a legitimate node.¶ 6.4. Time Synchronization Time synchronization in TSCH induces another event horizon whereby a node will only communicate with another node if they are synchronized within a guard time. The pledge discovers the synchronization of the network based on the time of reception of the beacon. If an attacker synchronizes a pledge outside of the guard time of the legitimate nodes, then the pledge will never see a legitimate beacon and may not discover the attack.¶ As discussed in [RFC8655], measures must be taken to protect the time synchronization, and for 6TiSCH this includes ensuring that the Absolute Slot Number (ASN), which is the node's sense of time, is not compromised. Once installed and as long as the node is synchronized to the network, ASN is implicit in the transmissions.¶ IEEE Std 802.15.4 [IEEE802154] specifies that in a TSCH network, the nonce that is used for the computation of the Message Integrity Code (MIC) to secure link-layer frames is composed of the address of the source of the frame and of the ASN. The standard assumes that the ASN is distributed securely by other means. The ASN is not passed explicitly in the data frames and does not constitute a complete anti-replay protection. As a result, upper-layer protocols must provide a way to detect duplicates and cope with them.¶ If the receiver and the sender have a different sense of ASN, the MIC will not validate and the frame will be dropped. In that sense, TSCH induces an event horizon whereby only nodes that have a common sense of ASN can talk to one another in an authenticated manner. With 6TiSCH, the pledge discovers a tentative ASN in beacons from nodes that have already joined the network. But even if the beacon can be authenticated, the ASN cannot be trusted as it could be a replay by an attacker, announcing an ASN that represents a time in the past. If the pledge uses an ASN that is learned from a replayed beacon for an encrypted transmission, a nonce-reuse attack becomes possible, and the network keys may be compromised.¶ 6.5. Validating ASN After obtaining the tentative ASN, a pledge that wishes to join the 6TiSCH network must use a join protocol to obtain its security keys. The join protocol used in 6TiSCH is the Constrained Join Protocol (CoJP). In the minimal setting defined in [RFC9031], the authentication requires a pre-shared key, based on which a secure session is derived. The CoJP exchange may also be preceded by a zero-touch handshake [ZEROTOUCH-JOIN] in order to enable pledge joining based on certificates and/or inter-domain communication.¶ As detailed in Section 4.2.1, a Join Proxy (JP) helps the pledge with the join procedure by relaying the link-scope Join Request over the IP network to a Join Registrar/Coordinator (JRC) that can authenticate the pledge and validate that it is attached to the appropriate network. As a result of the CoJP exchange, the pledge is in possession of link-layer material including keys and a short address, and if the ASN is known to be correct, all traffic can now be secured using CCM* [CCMstar] at the link layer.¶ The authentication steps must be such that they cannot be replayed by an attacker, and they must not depend on the tentative ASN being valid. During the authentication, the keying material that the pledge obtains from the JRC does not provide protection against spoofed ASN. Once the pledge has obtained the keys to use in the network, it may still need to verify the ASN. If the nonce used in the Layer 2 security derives from the extended (MAC-64) address, then replaying the ASN alone cannot enable a nonce-reuse attack unless the same node has lost its state with a previous ASN. But if the nonce derives from the short address (e.g., assigned by the JRC), then the JRC must ensure that it never assigns short addresses that were already given to this or other nodes with the same keys. In other words, the network must be rekeyed before the JRC runs out of short addresses.¶ 6.6. Network Keying and Rekeying Section 4.2.1 provides an overview of the CoJP process described in [RFC9031] by which an LLN can be assembled in the field, having been provisioned in a lab. [ZEROTOUCH-JOIN] is future work that precedes and then leverages CoJP using the [CONSTRAINED-VOUCHER] constrained profile of [RFC8995]. This later work requires a yet-to-be standardized Lightweight Authenticated Key Exchange protocol.¶ CoJP results in distribution of a network-wide key that is to be used with [IEEE802154] security. The details of use are described in [RFC9031], Sections 9.2 and 9.3.2.¶ The BRSKI mechanism may lead to the use of CoJP, in which case it also results in distribution of a network-wide key. Alternatively the BRSKI mechanism may be followed by use of [EST-COAPS] to enroll certificates for each device. In that case, the certificates may be used with an [IEEE802154] key agreement protocol. The description of this mechanism, while conceptually straightforward, still has significant standardization hurdles to pass.¶ Section 8.2 of [RFC9031] describes a mechanism to change (rekey) the network. There are a number of reasons to initiate a network rekey: to remove unwanted (corrupt/malicious) nodes, to recover unused 2-byte short addresses, or due to limits in encryption algorithms. For all of the mechanisms that distribute a network-wide key, rekeying is also needed on a periodic basis. In more detail:¶ The mechanism described in Section 8.2 of [RFC9031] requires advance communication between the JRC and every one of the nodes before the key change. Given that many nodes may be sleepy, this operation may take a significant amount of time and may consume a significant portion of the available bandwidth. As such, network-wide rekeys to exclude nodes that have become malicious will not be particularly quick. If a rekey is already in progress, but the unwanted node has not yet been updated, then it is possible to just continue the operation. If the unwanted node has already received the update, then the rekey operation will need to be restarted.¶ The cryptographic mechanisms used by IEEE Std 802.15.4 include the 2-byte short address in the calculation of the context. A nonce-reuse attack may become feasible if a short address is reassigned to another node while the same network-wide keys are in operation. A network that gains and loses nodes on a regular basis is likely to reach the 65536 limit of the 2-byte (16-bit) short addresses, even if the network has only a few thousand nodes. Network planners should consider the need to rekey the network on a periodic basis in order to recover 2-byte addresses. The rekey can update the short addresses for active nodes if desired, but there is actually no need to do this as long as the key has been changed.¶ With TSCH as it stands at the time of this writing, the ASN will wrap after 2^40 timeslot durations, meaning around 350 years with the default values. Wrapping ASN is not expected to happen within the lifetime of most LLNs. Yet, should the ASN wrap, the network must be rekeyed to avoid a nonce-reuse attack.¶ Many cipher algorithms have some suggested limits on how many bytes should be encrypted with that algorithm before a new key is used. These numbers are typically in the many to hundreds of gigabytes of data. On very fast backbone networks, this becomes an important concern. On LLNs with typical data rates in the kilobits/second, this concern is significantly less. With IEEE Std 802.15.4 as it stands at the time of this writing, the ASN will wrap before the limits of the current L2 crypto (AES-CCM-128) are reached, so the problem should never occur.¶ In any fashion, if the LLN is expected to operate continuously for decades, then the operators are advised to plan for the need to rekey.¶ Except for urgent rekeys caused by malicious nodes, the rekey operation described in [RFC9031] can be done as a background task and can be done incrementally. It is a make-before-break mechanism. The switch over to the new key is not signaled by time, but rather by observation that the new key is in use. As such, the update can take as long as needed, or occur in as short a time as practical.¶ 7. References 7.1. Normative References [RFC0768] Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, DOI 10.17487/RFC0768, August 1980, <https://www.rfc-editor.org/info/rfc768>. [RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman, \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861, DOI 10.17487/RFC4861, September 2007, <https://www.rfc-editor.org/info/rfc4861>. [RFC4862] Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless Address Autoconfiguration\", RFC 4862, DOI 10.17487/RFC4862, September 2007, <https://www.rfc-editor.org/info/rfc4862>. [RFC4944] Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler, \"Transmission of IPv6 Packets over IEEE 802.15.4 Networks\", RFC 4944, DOI 10.17487/RFC4944, September 2007, <https://www.rfc-editor.org/info/rfc4944>. [RFC5889] Baccelli, E., Ed. and M. Townsley, Ed., \"IP Addressing Model in Ad Hoc Networks\", RFC 5889, DOI 10.17487/RFC5889, September 2010, <https://www.rfc-editor.org/info/rfc5889>. [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC6551] Vasseur, JP., Ed., Kim, M., Ed., Pister, K., Dejean, N., and D. Barthel, \"Routing Metrics Used for Path Calculation in Low-Power and Lossy Networks\", RFC 6551, DOI 10.17487/RFC6551, March 2012, <https://www.rfc-editor.org/info/rfc6551>. [RFC6552] Thubert, P., Ed., \"Objective Function Zero for the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6552, DOI 10.17487/RFC6552, March 2012, <https://www.rfc-editor.org/info/rfc6552>. [RFC6553] Hui, J. and JP. Vasseur, \"The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams\", RFC 6553, DOI 10.17487/RFC6553, March 2012, <https://www.rfc-editor.org/info/rfc6553>. [RFC6554] Hui, J., Vasseur, JP., Culler, D., and V. Manral, \"An IPv6 Routing Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks (RPL)\", RFC 6554, DOI 10.17487/RFC6554, March 2012, <https://www.rfc-editor.org/info/rfc6554>. [RFC6775] Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C. Bormann, \"Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)\", RFC 6775, DOI 10.17487/RFC6775, November 2012, <https://www.rfc-editor.org/info/rfc6775>. [RFC7102] Vasseur, JP., \"Terms Used in Routing for Low-Power and Lossy Networks\", RFC 7102, DOI 10.17487/RFC7102, January 2014, <https://www.rfc-editor.org/info/rfc7102>. [RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>. [RFC7252] Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained Application Protocol (CoAP)\", RFC 7252, DOI 10.17487/RFC7252, June 2014, <https://www.rfc-editor.org/info/rfc7252>. [RFC7554] Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the Internet of Things (IoT): Problem Statement\", RFC 7554, DOI 10.17487/RFC7554, May 2015, <https://www.rfc-editor.org/info/rfc7554>. [RFC8025] Thubert, P., Ed. and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Paging Dispatch\", RFC 8025, DOI 10.17487/RFC8025, November 2016, <https://www.rfc-editor.org/info/rfc8025>. [RFC8137] Kivinen, T. and P. Kinney, \"IEEE 802.15.4 Information Element for the IETF\", RFC 8137, DOI 10.17487/RFC8137, May 2017, <https://www.rfc-editor.org/info/rfc8137>. [RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing Header\", RFC 8138, DOI 10.17487/RFC8138, April 2017, <https://www.rfc-editor.org/info/rfc8138>. [RFC8180] Vilajosana, X., Ed., Pister, K., and T. Watteyne, \"Minimal IPv6 over the TSCH Mode of IEEE 802.15.4e (6TiSCH) Configuration\", BCP 210, RFC 8180, DOI 10.17487/RFC8180, May 2017, <https://www.rfc-editor.org/info/rfc8180>. [RFC8200] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July 2017, <https://www.rfc-editor.org/info/rfc8200>. [RFC8453] Ceccarelli, D., Ed. and Y. Lee, Ed., \"Framework for Abstraction and Control of TE Networks (ACTN)\", RFC 8453, DOI 10.17487/RFC8453, August 2018, <https://www.rfc-editor.org/info/rfc8453>. [RFC8480] Wang, Q., Ed., Vilajosana, X., and T. Watteyne, \"6TiSCH Operation Sublayer (6top) Protocol (6P)\", RFC 8480, DOI 10.17487/RFC8480, November 2018, <https://www.rfc-editor.org/info/rfc8480>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8928] Thubert, P., Ed., Sarikaya, B., Sethi, M., and R. Struik, \"Address-Protected Neighbor Discovery for Low-Power and Lossy Networks\", RFC 8928, DOI 10.17487/RFC8928, November 2020, <https://www.rfc-editor.org/info/rfc8928>. [RFC8929] Thubert, P., Ed., Perkins, C.E., and E. Levy-Abegnoli, \"IPv6 Backbone Router\", RFC 8929, DOI 10.17487/RFC8929, November 2020, <https://www.rfc-editor.org/info/rfc8929>. [RFC8930] Watteyne, T., Ed., Thubert, P., Ed., and C. Bormann, \"On Forwarding 6LoWPAN Fragments over a Multi-Hop IPv6 Network\", RFC 8930, DOI 10.17487/RFC8930, November 2020, <https://www.rfc-editor.org/info/rfc8930>. [RFC8931] Thubert, P., Ed., \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Selective Fragment Recovery\", RFC 8931, DOI 10.17487/RFC8931, November 2020, <https://www.rfc-editor.org/info/rfc8931>. [RFC9008] Robles, M.I., Richardson, M., and P. Thubert, \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\", RFC 9008, DOI 10.17487/RFC9008, April 2021, <https://www.rfc-editor.org/info/rfc9008>. [RFC9010] Thubert, P., Ed. and M. Richardson, \"Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves\", RFC 9010, DOI 10.17487/RFC9010, April 2021, <https://www.rfc-editor.org/info/rfc9010>. [RFC9031] Vučinić, M., Ed., Simon, J., Pister, K., and M. Richardson, \"Constrained Join Protocol (CoJP) for 6TiSCH\", RFC 9031, DOI 10.17487/RFC9031, May 2021, <https://www.rfc-editor.org/info/rfc9031>. [RFC9032] Dujovne, D., Ed. and M. Richardson, \"Encapsulation of 6TiSCH Join and Enrollment Information Elements\", RFC 9032, DOI 10.17487/RFC9032, May 2021, <https://www.rfc-editor.org/info/rfc9032>. [RFC9033] Chang, T., Ed., Vučinić, M., Vilajosana, X., Duquennoy, S., and D. Dujovne, \"6TiSCH Minimal Scheduling Function (MSF)\", RFC 9033, DOI 10.17487/RFC9033, May 2021, <https://www.rfc-editor.org/info/rfc9033>. 7.2. Informative References [AMI] U.S. Department of Energy, \"Advanced Metering Infrastructure and Customer Systems\", 2006, <https://www.energy.gov/sites/prod/files/2016/12/f34/AMI%20Summary%20Report_09-26-16.pdf>. [ANIMA] IETF, \"Autonomic Networking Integrated Model and Approach (anima)\", <https://datatracker.ietf.org/doc/charter-ietf-anima/>. [AODV-RPL] Anamalamudi, S., Zhang, M., Perkins, C. E., Anand, S., and B. Liu, \"Supporting Asymmetric Links in Low Power Networks: AODV-RPL\", Work in Progress, Internet-Draft, draft-ietf-roll-aodv-rpl-10, 4 April 2021, <https://tools.ietf.org/html/draft-ietf-roll-aodv-rpl-10>. [AODVv2] Perkins, C. E., Ratliff, S., Dowdell, J., Steenbrink, L., and V. Mercieca, \"Ad Hoc On-demand Distance Vector Version 2 (AODVv2) Routing\", Work in Progress, Internet-Draft, draft-ietf-manet-aodvv2-16, 4 May 2016, <https://tools.ietf.org/html/draft-ietf-manet-aodvv2-16>. [BITSTRINGS-6LORH] Thubert, P., Ed., Brodard, Z., Jiang, H., and G. Texier, \"A 6loRH for BitStrings\", Work in Progress, Internet-Draft, draft-thubert-6lo-bier-dispatch-06, 28 January 2019, <https://tools.ietf.org/html/draft-thubert-6lo-bier-dispatch-06>. [CCAMP] IETF, \"Common Control and Measurement Plane (ccamp)\", <https://datatracker.ietf.org/doc/charter-ietf-ccamp/>. [CCMstar] Struik, R., \"Formal Specification of the CCM* Mode of Operation\", September 2004, <http://www.ieee802.org/15/pub/2004/15-04-0537-00-004b-formal-specification-ccm-star-mode-operation.doc>. [CONSTRAINED-VOUCHER] Richardson, M., van der Stok, P., and P. Kampanakis, \"Constrained Voucher Artifacts for Bootstrapping Protocols\", Work in Progress, Internet-Draft, draft-ietf-anima-constrained-voucher-10, 21 February 2021, <https://tools.ietf.org/html/draft-ietf-anima-constrained-voucher-10>. [DAO-PROJECTION] Thubert, P., Jadhav, R. A., and M. Gillmore, \"Root initiated routing state in RPL\", Work in Progress, Internet-Draft, draft-ietf-roll-dao-projection-16, 15 January 2021, <https://tools.ietf.org/html/draft-ietf-roll-dao-projection-16>. [EDHOC] Selander, G., Mattsson, J., and F. Palombini, \"Ephemeral Diffie-Hellman Over COSE (EDHOC)\", Work in Progress, Internet-Draft, draft-selander-ace-cose-ecdhe-14, 11 September 2019, <https://tools.ietf.org/html/draft-selander-ace-cose-ecdhe-14>. [EST-COAPS] van der Stok, P., Kampanakis, P., Richardson, M., and S. Raza, \"EST over secure CoAP (EST-coaps)\", Work in Progress, Internet-Draft, draft-ietf-ace-coap-est-18, 6 January 2020, <https://tools.ietf.org/html/draft-ietf-ace-coap-est-18>. [HART] FieldComm Group, \"HART\", <https://fieldcommgroup.org/technologies/hart>. [IEC62439] IEC, \"Industrial communication networks - High availability automation networks - Part 3: Parallel Redundancy Protocol (PRP) and High-availability Seamless Redundancy (HSR)\", IEC 62439-3:2016, 2016, <https://webstore.iec.ch/publication/24438>. [IEEE802154] IEEE, \"IEEE Standard for Low-Rate Wireless Networks\", IEEE Standard 802.15.4-2015, DOI 10.1109/IEEESTD.2016.7460875, April 2016, <https://ieeexplore.ieee.org/document/7460875>. [IEEE802154e] IEEE, \"IEEE Standard for Local and metropolitan area networks -- Part. 15.4: Low-Rate Wireless Personal Area Networks (LR-WPANs) Amendment 1: MAC sublayer\", IEEE Standard 802.15.4e-2012, DOI 10.1109/IEEESTD.2012.6185525, April 2012, <https://ieeexplore.ieee.org/document/6185525>. [ISA100] ISA/ANSI, \"ISA100, Wireless Systems for Automation\", <https://www.isa.org/isa100/>. [ISA100.11a] ISA/ANSI, \"Wireless Systems for Industrial Automation: Process Control and Related Applications - ISA100.11a-2011\", IEC 62734:2014, 2011, <https://webstore.iec.ch/publication/65581>. [ND-UNICAST-LOOKUP] Thubert, P., Ed. and E. Levy-Abegnoli, \"IPv6 Neighbor Discovery Unicast Lookup\", Work in Progress, Internet-Draft, draft-thubert-6man-unicast-lookup-00, 29 July 2019, <https://tools.ietf.org/html/draft-thubert-6man-unicast-lookup-00>. [PCE] IETF, \"Path Computation Element (pce)\", <https://datatracker.ietf.org/doc/charter-ietf-pce/>. [RAW-ARCHITECTURE] Thubert, P., Ed. and G. Z. Papadopoulos, \"Reliable and Available Wireless Problem Statement\", Work in Progress, Internet-Draft, draft-pthubert-raw-architecture-05, 15 November 2020, <https://tools.ietf.org/html/draft-pthubert-raw-architecture-05>. [RAW-USE-CASES] Papadopoulos, G. Z., Thubert, P., Theoleyre, F., and C. J. Bernardos, \"RAW use cases\", Work in Progress, Internet-Draft, draft-ietf-raw-use-cases-01, 21 February 2021, <https://tools.ietf.org/html/draft-ietf-raw-use-cases-01>. [RFC2474] Nichols, K., Blake, S., Baker, F., and D. Black, \"Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers\", RFC 2474, DOI 10.17487/RFC2474, December 1998, <https://www.rfc-editor.org/info/rfc2474>. [RFC2545] Marques, P. and F. Dupont, \"Use of BGP-4 Multiprotocol Extensions for IPv6 Inter-Domain Routing\", RFC 2545, DOI 10.17487/RFC2545, March 1999, <https://www.rfc-editor.org/info/rfc2545>. [RFC3209] Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V., and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP Tunnels\", RFC 3209, DOI 10.17487/RFC3209, December 2001, <https://www.rfc-editor.org/info/rfc3209>. [RFC3444] Pras, A. and J. Schoenwaelder, \"On the Difference between Information Models and Data Models\", RFC 3444, DOI 10.17487/RFC3444, January 2003, <https://www.rfc-editor.org/info/rfc3444>. [RFC3963] Devarapalli, V., Wakikawa, R., Petrescu, A., and P. Thubert, \"Network Mobility (NEMO) Basic Support Protocol\", RFC 3963, DOI 10.17487/RFC3963, January 2005, <https://www.rfc-editor.org/info/rfc3963>. [RFC4080] Hancock, R., Karagiannis, G., Loughney, J., and S. Van den Bosch, \"Next Steps in Signaling (NSIS): Framework\", RFC 4080, DOI 10.17487/RFC4080, June 2005, <https://www.rfc-editor.org/info/rfc4080>. [RFC4291] Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\", RFC 4291, DOI 10.17487/RFC4291, February 2006, <https://www.rfc-editor.org/info/rfc4291>. [RFC4903] Thaler, D., \"Multi-Link Subnet Issues\", RFC 4903, DOI 10.17487/RFC4903, June 2007, <https://www.rfc-editor.org/info/rfc4903>. [RFC4919] Kushalnagar, N., Montenegro, G., and C. Schumacher, \"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals\", RFC 4919, DOI 10.17487/RFC4919, August 2007, <https://www.rfc-editor.org/info/rfc4919>. [RFC5340] Coltun, R., Ferguson, D., Moy, J., and A. Lindem, \"OSPF for IPv6\", RFC 5340, DOI 10.17487/RFC5340, July 2008, <https://www.rfc-editor.org/info/rfc5340>. [RFC5974] Manner, J., Karagiannis, G., and A. McDonald, \"NSIS Signaling Layer Protocol (NSLP) for Quality-of-Service Signaling\", RFC 5974, DOI 10.17487/RFC5974, October 2010, <https://www.rfc-editor.org/info/rfc5974>. [RFC6275] Perkins, C., Ed., Johnson, D., and J. Arkko, \"Mobility Support in IPv6\", RFC 6275, DOI 10.17487/RFC6275, July 2011, <https://www.rfc-editor.org/info/rfc6275>. [RFC6347] Rescorla, E. and N. Modadugu, \"Datagram Transport Layer Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347, January 2012, <https://www.rfc-editor.org/info/rfc6347>. [RFC6606] Kim, E., Kaspar, D., Gomez, C., and C. Bormann, \"Problem Statement and Requirements for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing\", RFC 6606, DOI 10.17487/RFC6606, May 2012, <https://www.rfc-editor.org/info/rfc6606>. [RFC6830] Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The Locator/ID Separation Protocol (LISP)\", RFC 6830, DOI 10.17487/RFC6830, January 2013, <https://www.rfc-editor.org/info/rfc6830>. [RFC7426] Haleplidis, E., Ed., Pentikousis, K., Ed., Denazis, S., Hadi Salim, J., Meyer, D., and O. Koufopavlou, \"Software-Defined Networking (SDN): Layers and Architecture Terminology\", RFC 7426, DOI 10.17487/RFC7426, January 2015, <https://www.rfc-editor.org/info/rfc7426>. [RFC8578] Grossman, E., Ed., \"Deterministic Networking Use Cases\", RFC 8578, DOI 10.17487/RFC8578, May 2019, <https://www.rfc-editor.org/info/rfc8578>. [RFC8613] Selander, G., Mattsson, J., Palombini, F., and L. Seitz, \"Object Security for Constrained RESTful Environments (OSCORE)\", RFC 8613, DOI 10.17487/RFC8613, July 2019, <https://www.rfc-editor.org/info/rfc8613>. [RFC8939] Varga, B., Ed., Farkas, J., Berger, L., Fedyk, D., and S. Bryant, \"Deterministic Networking (DetNet) Data Plane: IP\", RFC 8939, DOI 10.17487/RFC8939, November 2020, <https://www.rfc-editor.org/info/rfc8939>. [RFC8995] Pritikin, M., Richardson, M., Eckert, T., Behringer, M., and K. Watsen, \"Bootstrapping Remote Secure Key Infrastructure (BRSKI)\", RFC 8995, DOI 10.17487/RFC8995, May 2021, <https://www.rfc-editor.org/info/rfc8995>. [RFC9035] Thubert, P., Ed. and L. Zhao, \"A Routing Protocol for Low-Power and Lossy Networks (RPL) Destination-Oriented Directed Acyclic Graph (DODAG) Configuration Option for the 6LoWPAN Routing Header\", RFC 9035, DOI 10.17487/RFC9035, April 2021, <https://www.rfc-editor.org/info/rfc9035>. [ROBUST-SCHEDULING] Tiloca, M., Duquennoy, S., and G. Dini, \"Robust Scheduling against Selective Jamming in 6TiSCH Networks\", Work in Progress, Internet-Draft, draft-tiloca-6tisch-robust-scheduling-02, 10 June 2019, <https://tools.ietf.org/html/draft-tiloca-6tisch-robust-scheduling-02>. [RPL-APPLICABILITY] Phinney, T., Ed., Thubert, P., and R. Assimiti, \"RPL applicability in industrial networks\", Work in Progress, Internet-Draft, draft-ietf-roll-rpl-industrial-applicability-02, 21 October 2013, <https://tools.ietf.org/html/draft-ietf-roll-rpl-industrial-applicability-02>. [RPL-BIER] Thubert, P., Ed., \"RPL-BIER\", Work in Progress, Internet-Draft, draft-thubert-roll-bier-02, 24 July 2018, <https://tools.ietf.org/html/draft-thubert-roll-bier-02>. [RPL-MOP] Jadhav, R., Ed., Thubert, P., Richardson, M., and R. Sahoo, \"RPL Capabilities\", Work in Progress, Internet-Draft, draft-ietf-roll-capabilities-08, 17 March 2021, <https://tools.ietf.org/html/draft-ietf-roll-capabilities-08>. [S-ALOHA] Roberts, L. G., \"ALOHA packet system with and without slots and capture\", ACM SIGCOMM Computer Communication Review, DOI 10.1145/1024916.1024920, April 1975, <https://dl.acm.org/citation.cfm?id=1024920>. [TE-PREF] Thubert, P., Ed., Eckert, T., Brodard, Z., and H. Jiang, \"BIER-TE extensions for Packet Replication and Elimination Function (PREF) and OAM\", Work in Progress, Internet-Draft, draft-thubert-bier-replication-elimination-03, 3 March 2018, <https://tools.ietf.org/html/draft-thubert-bier-replication-elimination-03>. [TEAS] IETF, \"Traffic Engineering Architecture and Signaling (teas)\", <https://datatracker.ietf.org/doc/charter-ietf-teas/>. [VIRTUAL-REASSEMBLY] Bormann, C. and T. Watteyne, \"Virtual reassembly buffers in 6LoWPAN\", Work in Progress, Internet-Draft, draft-ietf-lwig-6lowpan-virtual-reassembly-02, 9 March 2020, <https://tools.ietf.org/html/draft-ietf-lwig-6lowpan-virtual-reassembly-02>. [WirelessHART] International Electrotechnical Commission, \"Industrial networks - Wireless communication network and communication profiles - WirelessHART(TM)\", IEC 62591:2016, March 2016, <https://webstore.iec.ch/publication/24433>. [ZEROTOUCH-JOIN] Richardson, M., \"6tisch Zero-Touch Secure Join protocol\", Work in Progress, Internet-Draft, draft-ietf-6tisch-dtsecurity-zerotouch-join-04, 8 July 2019, <https://tools.ietf.org/html/draft-ietf-6tisch-dtsecurity-zerotouch-join-04>. Appendix A. Related Work in Progress This document has been incremented as the work progressed following the evolution of the WG charter and the availability of dependent work. The intent was to publish when the WG concluded on the covered items. At the time of publishing, the following specifications are still in progress and may affect the evolution of the stack in a 6TiSCH-aware node.¶ A.1. Unchartered IETF Work Items A.1.1. 6TiSCH Zero-Touch Security The security model and in particular the zero-touch join process [ZEROTOUCH-JOIN] depend on the ANIMA (Autonomic Networking Integrated Model and Approach) [ANIMA] \"Bootstrapping Remote Secure Key Infrastructure (BRSKI)\" [RFC8995] to enable zero-touch security provisioning; for highly constrained nodes, a minimal model based on pre-shared keys (PSK) is also available. As currently written, it also depends on a number of documents in progress in the CORE (Constrained RESTful Environments) WG and on \"Ephemeral Diffie-Hellman Over COSE (EDHOC)\" [EDHOC], which is being considered for adoption by the LAKE (Lightweight Authenticated Key Exchange) WG.¶ A.1.2. 6TiSCH Track Setup ROLL (Routing Over Low power and Lossy networks) is now standardizing a reactive routing protocol based on RPL [AODV-RPL]. The need of a reactive routing protocol to establish on-demand, constraint-optimized routes and a reservation protocol to establish Layer 3 Tracks is being discussed in 6TiSCH but not yet chartered.¶ At the time of this writing, there is new work planned in the IETF to provide limited deterministic networking capabilities for wireless networks with a focus on forwarding behaviors to react quickly and locally to the changes as described in [RAW-ARCHITECTURE].¶ ROLL is also standardizing an extension to RPL to set up centrally computed routes [DAO-PROJECTION].¶ The 6TiSCH architecture should thus inherit from the DetNet architecture [RFC8655] and thus depends on it. The PCE should be a core component of that architecture. An extension to RPL or to TEAS (Traffic Engineering Architecture and Signaling) [TEAS] will be required to expose the 6TiSCH node capabilities and the network peers to the PCE, possibly in combination with [RPL-MOP]. A protocol such as a lightweight Path Computation Element Communication Protocol (PCEP) or an adaptation of Common Control and Measurement Plane (CCAMP) [CCAMP] GMPLS formats and procedures could be used in combination to [DAO-PROJECTION] to install the Tracks, as computed by the PCE, to the 6TiSCH nodes.¶ A.1.3. Using BIER in a 6TiSCH Network ROLL is actively working on Bit Index Explicit Replication (BIER) as a method to compress both the data-plane packets and the routing tables in storing mode [RPL-BIER].¶ BIER could also be used in the context of the DetNet service layer. \"BIER-TE extensions for Packet Replication and Elimination Function (PREF) and OAM\" [TE-PREF] leverages BIER Traffic Engineering (TE) to control the DetNet Replication and Elimination activities in the data plane, and to provide traceability on links where replication and loss happen, in a manner that is abstract to the forwarding information.¶ \"A 6loRH for BitStrings\" [BITSTRINGS-6LORH] proposes a 6LoWPAN compression for the BIER BitString based on 6LoWPAN Routing Header [RFC8138].¶ A.2. External (Non-IETF) Work Items The current charter positions 6TiSCH on IEEE Std 802.15.4 only. Though most of the design should be portable to other link types, 6TiSCH has a strong dependency on IEEE Std 802.15.4 and its evolution. The impact of changes to TSCH on this architecture should be minimal to nonexistent, but deeper work such as 6top and security may be impacted. A 6TiSCH Interest Group at the IEEE maintains the synchronization and helps foster work at the IEEE should 6TiSCH demand it.¶ Work is being proposed at IEEE (802.15.12 PAR) for an LLC that would logically include the 6top sublayer. The interaction with the 6top sublayer and the Scheduling Functions described in this document are yet to be defined.¶ ISA100 [ISA100] Common Network Management (CNM) is another external work of interest for 6TiSCH. The group, referred to as ISA100.20, defines a Common Network Management framework that should enable the management of resources that are controlled by heterogeneous protocols such as ISA100.11a [ISA100.11a], WirelessHART [WirelessHART], and 6TiSCH. Interestingly, the establishment of 6TiSCH deterministic paths, called Tracks, are also in scope, and ISA100.20 is working on requirements for DetNet.¶ Acknowledgments Special Thanks Special thanks to Jonathan Simon, Giuseppe Piro, Subir Das, and Yoshihiro Ohba for their deep contributions to the initial security work, to Yasuyuki Tanaka for his work on implementation and simulation that tremendously helped build a robust system, to Diego Dujovne for starting and leading the SF0 effort, and to Tengfei Chang for evolving it in the MSF.¶ Special thanks also to Pat Kinney, Charlie Perkins, and Bob Heile for their support in maintaining the connection active and the design in line with work happening at IEEE 802.15.¶ Special thanks to Ted Lemon, who was the INT Area Director while this document was initiated, for his great support and help throughout, and to Suresh Krishnan, who took over with that kind efficiency of his till publication.¶ Also special thanks to Ralph Droms, who performed the first INT Area Directorate review, which was very deep and thorough and radically changed the orientations of this document, and then to Eliot Lear and Carlos Pignataro, who helped finalize this document in preparation for the IESG reviews, and to Gorry Fairhurst, David Mandelberg, Qin Wu, Francis Dupont, Éric Vyncke, Mirja Kühlewind, Roman Danyliw, Benjamin Kaduk, and Andrew Malis, who contributed to the final shaping of this document through the IESG review procedure.¶ And Do Not Forget This document is the result of multiple interactions, in particular during the 6TiSCH (bi)Weekly Interim call, relayed through the 6TiSCH mailing list at the IETF, over the course of more than 5 years.¶ The authors wish to thank in arbitrary order: Alaeddine Weslati, Chonggang Wang, Georgios Exarchakos, Zhuo Chen, Georgios Papadopoulos, Eric Levy-Abegnoli, Alfredo Grieco, Bert Greevenbosch, Cedric Adjih, Deji Chen, Martin Turon, Dominique Barthel, Elvis Vogli, Geraldine Texier, Guillaume Gaillard, Herman Storey, Kazushi Muraoka, Ken Bannister, Kuor Hsin Chang, Laurent Toutain, Maik Seewald, Michael Behringer, Nancy Cam Winget, Nicola Accettura, Nicolas Montavont, Oleg Hahm, Patrick Wetterwald, Paul Duffy, Peter van der Stok, Rahul Sen, Pieter de Mil, Pouria Zand, Rouhollah Nabati, Rafa Marin-Lopez, Raghuram Sudhaakar, Sedat Gormus, Shitanshu Shah, Steve Simlo, Tina Tsou, Tom Phinney, Xavier Lagrange, Ines Robles, and Samita Chakrabarti for their participation and various contributions.¶ Contributors The co-authors of this document are listed below:¶ Thomas Watteyne for his contributions to the whole design, in particular on TSCH and security, and to the open source community that he created with openWSN;¶ Xavier Vilajosana, who led the design of the minimal support with RPL and contributed deeply to the 6top design and the GMPLS operation of Track switching;¶ Kris Pister for creating TSCH and his continuing guidance through the elaboration of this design;¶ Mališa Vučinić for the work on the one-touch join process and his contribution to the Security Design Team;¶ Michael Richardson for his leadership role in the Security Design Team and his contribution throughout this document;¶ Tero Kivinen for his contribution to the security work in general and the security section in particular;¶ Maria Rita Palattella for managing the Terminology document that was merged into this document through the work of 6TiSCH;¶ Simon Duquennoy for his contribution to the open source community with the 6TiSCH implementation of contiki, and for his contribution to MSF and autonomous unicast cells;¶ Qin Wang, who led the design of the 6top sublayer and contributed related text that was moved and/or adapted into this document;¶ Rene Struik for the security section and his contribution to the Security Design Team;¶ Robert Assimiti for his breakthrough work on RPL over TSCH and initial text and guidance.¶ Author's Address Pascal Thubert (editor) Cisco Systems, Inc Building D 45 Allee des Ormes - BP1200 06254 Mougins - Sophia Antipolis France Phone: +33 497 23 26 34 Email: pthubert@cisco.com"
    },
    {
        "Number": "9039",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Uniform Resource Names for Device Identifiers",
        "Authors": [
            "J. Arkko",
            "C. Jennings",
            "Z. Shelby"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.",
        "Keywords": [
            "URN",
            "device identifier",
            "IMEI",
            "1-Wire",
            "MAC address",
            "EUI-48",
            "EUI-64"
        ],
        "Content": "RFC 9039: Uniform Resource Names for Device Identifiers RFC 9039 DEV URN June 2021 Arkko, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9039 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: J. Arkko Ericsson C. Jennings Cisco Z. Shelby Edge Impulse RFC 9039 Uniform Resource Names for Device Identifiers Abstract This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9039.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Requirements Language 3.  DEV URN Definition 3.1.  Purpose 3.2.  Syntax 3.2.1.  Character Case and URN-Equivalence 3.3.  Assignment 3.4.  Security and Privacy 3.5.  Interoperability 3.6.  Resolution 3.7.  Documentation 3.8.  Additional Information 3.9.  Revision Information 4.  DEV URN Subtypes 4.1.  MAC Addresses 4.2.  1-Wire Device Identifiers 4.3.  Organization-Defined Identifiers 4.4.  Organization Serial Numbers 4.5.  Organization Product and Serial Numbers 4.6.  Future Subtypes 5.  Examples 6.  Security Considerations 6.1.  Privacy 6.2.  Validity 7.  IANA Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction This document describes a new Uniform Resource Name (URN) [RFC8141] namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories [RFC7252] [RFC8428] [CoRE-RD].¶ A URN-based representation can be passed along in applications that need the information. It fits particularly well for protocols mechanisms that are designed to carry URNs [RFC7230] [RFC7540] [RFC3261] [RFC7252]. Finally, URNs can also be easily carried and stored in formats such as XML [W3C.REC-xml-19980210], JSON [RFC8259], or SenML [RFC8428]. Using URNs in these formats is often preferable as they are universally recognized and self-describing and therefore avoid the need to agree to interpret an octet string as a specific form of a Media Access Control (MAC) address, for instance. Passing URNs may consume additional bytes compared to, for instance, passing 4-byte binary IPv4 addresses, but the former offers some flexibility in return.¶ This document defines identifier URN types for situations where no such convenient type already exists. For instance, [RFC6920] defines cryptographic identifiers, [RFC7254] defines International Mobile station Equipment Identity (IMEI) identifiers for use with 3GPP cellular systems, and [RFC8464] defines Mobile Equipment Identity (MEID) identifiers for use with 3GPP2 cellular systems. Those URN types should be employed when such identifiers are transported; this document does not redefine these identifiers in any way.¶ Universally Unique Identifier (UUID) URNs [RFC4122] are another alternative way to represent device identifiers and already support MAC addresses as one type of identifier. However, UUIDs can be inconvenient in environments where it is important that the identifiers be as simple as possible and where additional requirements on stable storage, real-time clocks, and identifier length can be prohibitive. Often, UUID-based identifiers are preferred for general purpose uses instead of the MAC-based device URNs defined in this document. The device URNs are recommended for constrained environments.¶ Future device identifier types can extend the device URN type defined in this document (see Section 7), or they can define their own URNs.¶ Note that long-term stable unique identifiers are problematic for privacy reasons and should be used with care as described in [RFC7721].¶ The rest of this document is organized as follows. Section 3 defines the \"DEV\" URN type, and Section 4 defines subtypes for IEEE MAC-48, EUI-48 and EUI-64 addresses, and 1-Wire device identifiers. Section 5 gives examples. Section 6 discusses the security and privacy considerations of the new URN type. Finally, Section 7 specifies the IANA registration for the new URN type and sets requirements for subtype allocations within this type.¶ 2. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. DEV URN Definition Namespace Identifier: \"dev\"¶ Version: 1¶ Date: 2020-06-24¶ Registrant: IETF and the CORE Working Group. Should the working group cease to exist, discussion should be directed to the Applications and Real-Time Area or general IETF discussion forums, or the IESG.¶ 3.1. Purpose The DEV URNs identify devices with device-specific identifiers such as network card hardware addresses. DEV URNs are scoped to be globally applicable (see [RFC8141], Section 6.4.1) and, in general, enable systems to use these identifiers from multiple sources in an interoperable manner. Note that in some deployments, ensuring uniqueness requires care if manual or local assignment mechanisms are used, as discussed in Section 3.3.¶ Some typical DEV URN applications include equipment inventories and smart object systems.¶ DEV URNs can be used in various ways in applications, software systems, and network components, in tasks ranging from discovery (for instance, when discovering 1-Wire network devices or detecting MAC-addressable devices on a LAN) to intrusion detection systems and simple catalogues of system information.¶ While it is possible to implement resolution systems for specific applications or network locations, DEV URNs are typically not used in a way that requires resolution beyond direct observation of the relevant identifier fields in local link communication. However, it is often useful to be able to pass device identifier information in generic URN fields in databases or protocol fields, which makes the use of URNs for this purpose convenient.¶ The DEV URN namespace complements existing namespaces such as those involving IMEI or UUID identifiers. DEV URNs are expected to be a part of the IETF-provided basic URN types, covering identifiers that have previously not been possible to use in URNs.¶ 3.2. Syntax The identifier is expressed in ASCII characters and has a hierarchical structure as follows:¶ devurn = \"urn:dev:\" body componentpart body = macbody / owbody / orgbody / osbody / opsbody / otherbody macbody = %s\"mac:\" hexstring owbody = %s\"ow:\" hexstring orgbody = %s\"org:\" posnumber \"-\" identifier *( \":\" identifier ) osbody = %s\"os:\" posnumber \"-\" serial *( \":\" identifier ) opsbody = %s\"ops:\" posnumber \"-\" product \"-\" serial *( \":\" identifier ) otherbody = subtype \":\" identifier *( \":\" identifier ) subtype = LALPHA *(DIGIT / LALPHA) identifier = 1*devunreserved identifiernodash = 1*devunreservednodash product = identifiernodash serial = identifier componentpart = *( \"_\" identifier ) devunreservednodash = ALPHA / DIGIT / \".\" devunreserved = devunreservednodash / \"-\" hexstring = 1*(hexdigit hexdigit) hexdigit = DIGIT / \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" posnumber = NZDIGIT *DIGIT ALPHA = %x41-5A / %x61-7A LALPHA = %x41-5A NZDIGIT = %x31-39 DIGIT = %x30-39 ¶ The above syntax is represented in Augmented Backus-Naur Form (ABNF) as defined in [RFC5234] and [RFC7405]. The syntax also copies the DIGIT and ALPHA rules originally defined in [RFC5234], exactly as defined there.¶ The device identifier namespace includes five subtypes (see Section 4), and more may be defined in the future as specified in Section 7.¶ The optional underscore-separated components at the end of the DEV URN depict individual aspects of a device. The specific strings and their semantics are up to the designers of the device but could be used to refer to specific interfaces or functions within the device.¶ With the exception of the MAC address and 1-Wire DEV URNs, each DEV URN may also contain optional colon-separated identifiers. These are provided for extensibility.¶ There are no special character encoding rules or considerations for conforming with the URN syntax beyond those applicable for URNs in general [RFC8141] or the context where these URNs are carried (e.g., inside JSON [RFC8259] or SenML [RFC8428]). Due to the SenML rules in [RFC8428], Section 4.5.1, it is not desirable to use percent-encoding in DEV URNs, and the subtypes defined in this specification do not really benefit from percent-encoding. However, this specification does not deviate from the general syntax of URNs or their processing and normalization rules as specified in [RFC3986] and [RFC8141].¶ DEV URNs do not use r-, q-, or f-components as defined in [RFC8141].¶ Specific subtypes of DEV URNs may be validated through mechanisms discussed in Section 4.¶ The string representation of the device identifier URN is fully compatible with the URN syntax.¶ 3.2.1. Character Case and URN-Equivalence The DEV URN syntax allows both uppercase and lowercase characters. The URN-equivalence of the DEV URNs is defined per [RFC8141], Section 3.1, i.e., two URNs are URN-equivalent if their assigned-name portions are octet-by-octet equal after applying case normalization to the URI scheme (\"urn\") and namespace identifier (\"dev\"). The rest of the DEV URN is compared in a case-sensitive manner. It should be noted that URN-equivalence matching merely quickly shows that two URNs are definitely the same for the purposes of caching and other similar uses. Two DEV URNs may still refer to the same entity and may not be found to be URN-equivalent according to the [RFC8141] definition. For instance, in ABNF, strings are case insensitive (see [RFC5234], Section 2.3), and a MAC address could be represented either with uppercase or lowercase hexadecimal digits.¶ Character case is not otherwise significant for the DEV URN subtypes defined in this document. However, future subtypes might include identifiers that use encodings such as base64, which encodes strings in a larger variety of characters and might even encode binary data.¶ To facilitate equivalence checks, it is RECOMMENDED that implementations always use lowercase letters where they have a choice in case, unless there is a reason otherwise. (Such a reason might be, for instance, the use of a subtype that requires the use of both uppercase and lowercase letters.)¶ 3.3. Assignment The process for identifier assignment is dependent on the used subtype and is documented in the specific subsection under Section 4.¶ Device identifiers are generally expected to identify a unique device, barring the accidental issue of multiple devices with the same identifiers. In many cases, device identifiers can also be changed by users or are sometimes assigned in an algorithmic or local fashion. Any potential conflicts arising from such assignments are not something that the DEV URNs as such manage; they simply are there to refer to a particular identifier. And, of course, a single device may (and often does) have multiple identifiers, e.g., identifiers associated with different link technologies it supports.¶ The DEV URN type SHOULD only be used for hardware-based identifiers that are expected to be persistent (with some limits, as discussed above).¶ 3.4. Security and Privacy As discussed in Section 6, care must be taken in the use of device-identifier-based identifiers due to their nature as long-term identifiers that are not normally changeable. Leakage of these identifiers outside systems where their use is justified should be controlled.¶ 3.5. Interoperability There are no specific interoperability concerns.¶ 3.6. Resolution The device identifiers are not expected to be globally resolvable. No identifier resolution system is expected. Systems may perform local matching of identifiers to previously seen identifiers or configured information, however.¶ 3.7. Documentation See RFC 9039.¶ 3.8. Additional Information See Section 1 for a discussion of related namespaces.¶ 3.9. Revision Information This is the first version of this registration.¶ 4. DEV URN Subtypes 4.1. MAC Addresses DEV URNs of the \"mac\" subtype are based on the EUI-64 identifier [IEEE.EUI64] derived from a device with a built-in 64-bit EUI-64. The EUI-64 is formed from 24 or 36 bits of organization identifier followed by 40 or 28 bits of device-specific extension identifier assigned by that organization.¶ In the DEV URN \"mac\" subtype, the hexstring is simply the full EUI-64 identifier represented as a hexadecimal string. It is always exactly 16 characters long.¶ MAC-48 and EUI-48 identifiers are also supported by the same DEV URN subtype. To convert a MAC-48 address to an EUI-64 identifier, the Organizationally Unique Identifier (OUI) of the MAC-48 address (the first three octets) becomes the organization identifier of the EUI-64 (the first three octets). The fourth and fifth octets of the EUI are set to the fixed value 0xffff (hexadecimal). The last three octets of the MAC-48 address become the last three octets of the EUI-64. The same process is used to convert an EUI-48 identifier, but the fixed value 0xfffe is used instead.¶ Identifier assignment for all of these identifiers rests within the IEEE Registration Authority.¶ Note that where randomized MAC addresses are used, the resulting DEV URNs cannot be expected to have uniqueness, as discussed in Section 3.3.¶ 4.2. 1-Wire Device Identifiers The 1-Wire system is a device communications bus system designed by Dallas Semiconductor Corporation. (1-Wire is a registered trademark.) 1-Wire devices are identified by a 64-bit identifier that consists of an 8-bit family code, a 48-bit identifier unique within a family, and an 8-bit Cyclic Redundancy Check (CRC) code [OW].¶ In DEV URNs with the \"ow\" subtype, the hexstring is a representation of the full 64-bit identifier as a hexadecimal string. It is always exactly 16 characters long. Note that the last two characters represent the 8-bit CRC code. Implementations MAY check the validity of this code.¶ Family code and identifier assignment for all 1-Wire devices rests with the manufacturers.¶ 4.3. Organization-Defined Identifiers Device identifiers that have only a meaning within an organization can also be used to represent vendor-specific or experimental identifiers or identifiers designed for use within the context of an organization.¶ Organizations are identified by their Private Enterprise Number (PEN) [RFC2578]. These numbers can be obtained from IANA. Current PEN assignments can be viewed at <https://www.iana.org/assignments/enterprise-numbers/>, and new assignments are requested at <https://pen.iana.org/pen/PenApplication.page>.¶ Note that when included in an \"org\" DEV URN, the number cannot be zero or have leading zeroes, as the ABNF requires the number to start with a non-zero digit.¶ 4.4. Organization Serial Numbers The \"os\" subtype specifies an organization and serial number. Organizations are identified by their PEN. As with the organization-defined identifiers (Section 4.3), PEN number assignments are maintained by IANA, and assignments for new organizations can be made easily.¶ Historical note: The \"os\" subtype was originally defined in the Open Mobile Alliance \"Lightweight Machine to Machine\" standard [LwM2M] but has been incorporated here to collect all syntaxes associated with DEV URNs in one place. At the same time, the syntax of this subtype was changed to avoid the possibility of characters that are not allowed in the SenML Name field (see [RFC8428], Section 4.5.1).¶ Organization serial number DEV URNs consist of the PEN number and the serial number. As with other DEV URNs, for carrying additional information and extensibility, optional colon-separated identifiers and underscore-separated components may also be included. The serial numbers themselves are defined by the organization, and this specification does not specify how they are allocated.¶ Organizations are also encouraged to select serial number formats that avoid the possibility of ambiguity in the form of leading zeroes or otherwise.¶ 4.5. Organization Product and Serial Numbers The DEV URN \"ops\" subtype was originally defined in the LwM2M standard but has been incorporated here to collect all syntaxes associated with DEV URNs in one place. The \"ops\" subtype specifies an organization, product class, and a serial number. Organizations are identified by their PEN. Again, as with the organization-defined identifiers (Section 4.3), PEN number assignments are maintained by IANA.¶ Historical note: As with the \"os\" subtype, the \"ops\" subtype was originally defined in the Open Mobile Alliance \"Lightweight Machine to Machine\" standard [LwM2M].¶ Organization product and serial number DEV URNs consist of the PEN number, product class, and the serial number. As with other DEV URNs, for carrying additional information and extensibility, optional colon-separated identifiers and underscore-separated components may also be included. Both the product class and serial numbers themselves are defined by the organization, and this specification does not specify how they are allocated.¶ Organizations are also encouraged to select product and serial number formats that avoid possibility for ambiguity.¶ 4.6. Future Subtypes Additional subtypes may be defined in future specifications. See Section 7.¶ The DEV URN \"example\" subtype is reserved for use in examples. It has no specific requirements beyond those expressed by the ABNF in Section 3.2.¶ 5. Examples The following provides some examples of DEV URNs:¶ Table 1 URN Description urn:dev:mac:0024beffff804ff1 The MAC-48 address of 0024be804ff1, converted to EUI-64 format urn:dev:mac:0024befffe804ff1 The EUI-48 address of 0024be804ff1, converted to EUI-64 format urn:dev:mac:acde48234567019f The EUI-64 address of acde48234567019f urn:dev:ow:10e2073a01080063 A 1-Wire temperature sensor urn:dev:ow:264437f5000000ed_humidity The humidity part of a multi-sensor device urn:dev:ow:264437f5000000ed_temperature The temperature part of a multi-sensor device urn:dev:org:32473-foo An organization-specific URN in the example organization 32473 in [RFC5612] urn:dev:os:32473-123456 Device 123456 in the example organization in [RFC5612] urn:dev:os:32473-12-34-56 A serial number with dashes in it urn:dev:ops:32473-Refrigerator-5002 Refrigerator serial number 5002 in the example organization in [RFC5612] urn:dev:example:new-1-2-3_comp An example of something that is not defined today, and is not one of the mac, ow, os, or ops subtypes The DEV URNs themselves can then appear in various contexts. A simple example of this is the use of DEV URNs in SenML data. This example from [RFC8428] shows a measurement from a 1-Wire temperature gauge encoded in the JSON syntax:¶ [ {\"n\":\"urn:dev:ow:10e2073a01080063\",\"u\":\"Cel\",\"v\":23.1} ] ¶ 6. Security Considerations On most devices, the user can display device identifiers. Depending on circumstances, device identifiers may or may not be modified or tampered with by the user. An implementation of the DEV URN MUST preserve such limitations and behaviors associated with the device identifiers. In particular, a device identifier that is intended to be immutable should not become mutable as a part of implementing the DEV URN type. More generally, nothing in this document should be construed to override what the relevant device specifications have already said about the identifiers.¶ 6.1. Privacy Other devices in the same network may or may not be able to identify the device. For instance, on an Ethernet network, the MAC address of a device is visible to all other devices.¶ DEV URNs often represent long-term stable unique identifiers for devices. Such identifiers may have privacy and security implications because they may enable correlating information about a specific device over a long period of time, location tracking, and device-specific vulnerability exploitation [RFC7721]. Also, in some systems, there is no easy way to change the identifier. Therefore, these identifiers need to be used with care, and special care should be taken to avoid leaking identifiers outside of the system that is intended to use them.¶ 6.2. Validity Information about identifiers may have significant effects in some applications. For instance, in many sensor systems, the identifier information is used for deciding how to use the data carried in a measurement report. In some other systems, identifiers may be used in policy decisions.¶ It is important that systems be designed to take into account the possibility of devices reporting incorrect identifiers (either accidentally or maliciously) and the manipulation of identifiers in communications by illegitimate entities. Integrity protection of communications or data objects, the use of trusted devices, and various management practices can help address these issues.¶ Similar to the advice in [RFC4122], Section 6: Do not assume that DEV URNs are hard to guess.¶ 7. IANA Considerations Per this document, IANA has registered a new URN namespace for \"dev\", as described in Section 3.¶ IANA has created a \"DEV URN Subtypes\" registry under \"Device Identification\". The initial values in this registry are as follows:¶ Table 2 Subtype Description Reference mac MAC Addresses RFC 9039, Section 4.1 ow 1-Wire Device Identifiers RFC 9039, Section 4.2 org Organization-Defined Identifiers RFC 9039, Section 4.3 os Organization Serial Numbers RFC 9039, Section 4.4 ops Organization Product and Serial Numbers RFC 9039, Section 4.5 example Reserved for examples RFC 9039, Section 4.6 Additional subtypes for DEV URNs can be defined through Specification Required or IESG Approval [RFC8126]. These allocations are appropriate when there is a new namespace of some type of device identifier that is defined in a stable fashion and has a publicly available specification.¶ Note that the organization (Section 4.3) device identifiers can also be used in some cases, at least as a temporary measure. It is preferable, however, that long-term usage of a broadly employed device identifier be registered with IETF rather than used through the organization device identifier type.¶ 8. References 8.1. Normative References [IEEE.EUI64] IEEE, \"Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)\", August 2017, <https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf>. [OW] Maxim, \"Guide to 1-Wire Communication\", June 2008, <https://www.maximintegrated.com/en/design/technical-documents/tutorials/1/1796.html>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2578] McCloghrie, K., Ed., Perkins, D., Ed., and J. Schoenwaelder, Ed., \"Structure of Management Information Version 2 (SMIv2)\", STD 58, RFC 2578, DOI 10.17487/RFC2578, April 1999, <https://www.rfc-editor.org/info/rfc2578>. [RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, DOI 10.17487/RFC3986, January 2005, <https://www.rfc-editor.org/info/rfc3986>. [RFC5234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, DOI 10.17487/RFC5234, January 2008, <https://www.rfc-editor.org/info/rfc5234>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8141] Saint-Andre, P. and J. Klensin, \"Uniform Resource Names (URNs)\", RFC 8141, DOI 10.17487/RFC8141, April 2017, <https://www.rfc-editor.org/info/rfc8141>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 8.2. Informative References [CoRE-RD] Amsüss, C., Ed., Shelby, Z., Koster, M., Bormann, C., and P. van der Stok, \"CoRE Resource Directory\", Work in Progress, Internet-Draft, draft-ietf-core-resource-directory-28, 7 March 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-core-resource-directory-28>. [LwM2M] Alliance, O. M., \"OMA Lightweight Machine to Machine Requirements\", OMA Standard Candidate Version 1.2, January 2019, <https://www.openmobilealliance.org/release/LightweightM2M/V1_2-20190124-C/OMA-RD-LightweightM2M-V1_2-20190124-C.pdf>. [RFC3261] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP: Session Initiation Protocol\", RFC 3261, DOI 10.17487/RFC3261, June 2002, <https://www.rfc-editor.org/info/rfc3261>. [RFC4122] Leach, P., Mealling, M., and R. Salz, \"A Universally Unique IDentifier (UUID) URN Namespace\", RFC 4122, DOI 10.17487/RFC4122, July 2005, <https://www.rfc-editor.org/info/rfc4122>. [RFC5612] Eronen, P. and D. Harrington, \"Enterprise Number for Documentation Use\", RFC 5612, DOI 10.17487/RFC5612, August 2009, <https://www.rfc-editor.org/info/rfc5612>. [RFC6920] Farrell, S., Kutscher, D., Dannewitz, C., Ohlman, B., Keranen, A., and P. Hallam-Baker, \"Naming Things with Hashes\", RFC 6920, DOI 10.17487/RFC6920, April 2013, <https://www.rfc-editor.org/info/rfc6920>. [RFC7230] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\", RFC 7230, DOI 10.17487/RFC7230, June 2014, <https://www.rfc-editor.org/info/rfc7230>. [RFC7252] Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained Application Protocol (CoAP)\", RFC 7252, DOI 10.17487/RFC7252, June 2014, <https://www.rfc-editor.org/info/rfc7252>. [RFC7254] Montemurro, M., Ed., Allen, A., McDonald, D., and P. Gosden, \"A Uniform Resource Name Namespace for the Global System for Mobile Communications Association (GSMA) and the International Mobile station Equipment Identity (IMEI)\", RFC 7254, DOI 10.17487/RFC7254, May 2014, <https://www.rfc-editor.org/info/rfc7254>. [RFC7405] Kyzivat, P., \"Case-Sensitive String Support in ABNF\", RFC 7405, DOI 10.17487/RFC7405, December 2014, <https://www.rfc-editor.org/info/rfc7405>. [RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>. [RFC7721] Cooper, A., Gont, F., and D. Thaler, \"Security and Privacy Considerations for IPv6 Address Generation Mechanisms\", RFC 7721, DOI 10.17487/RFC7721, March 2016, <https://www.rfc-editor.org/info/rfc7721>. [RFC8259] Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", STD 90, RFC 8259, DOI 10.17487/RFC8259, December 2017, <https://www.rfc-editor.org/info/rfc8259>. [RFC8428] Jennings, C., Shelby, Z., Arkko, J., Keranen, A., and C. Bormann, \"Sensor Measurement Lists (SenML)\", RFC 8428, DOI 10.17487/RFC8428, August 2018, <https://www.rfc-editor.org/info/rfc8428>. [RFC8464] Atarius, R., \"A URN Namespace for Device Identity and Mobile Equipment Identity (MEID)\", RFC 8464, DOI 10.17487/RFC8464, September 2018, <https://www.rfc-editor.org/info/rfc8464>. [W3C.REC-xml-19980210] Sperberg-McQueen, C., Bray, T., and J. Paoli, \"Extensible Markup Language (XML) 1.0\", W3C Recommendation, February 1998, <http://www.w3.org/TR/1998/REC-xml-19980210>. Acknowledgments The authors would like to thank Ari Keränen, Stephen Farrell, Christer Holmberg, Peter Saint-Andre, Wouter Cloetens, Jaime Jimenez, Joseph Knapp, Padmakumar Subramani, Mert Ocak, Hannes Tschofenig, Jim Schaad, Thomas Fossati, Carsten Bormann, Marco Tiloca, Barry Leiba, Amanda Baber, Juha Hakala, Dale Worley, Warren Kumari, Benjamin Kaduk, Brian Weis, John Klensin, Dave Thaler, Russ Housley, Dan Romascanu, Éric Vyncke, Roman Danyliw, and Ahmad Muhanna for their feedback and interesting discussions in this problem space. We would also like to note prior documents that focused on specific device identifiers, such as [RFC7254] and [RFC8464].¶ Authors' Addresses Jari Arkko Ericsson FI-02420 Jorvas Finland Email: jari.arkko@piuha.net Cullen Jennings Cisco 170 West Tasman Drive San Jose, CA 95134 United States of America Phone: +1 408 421-9990 Email: fluffy@iii.ca Zach Shelby Edge Impulse 3031 Tisch Way San Jose, CA 95128 United States of America Email: zach@edgeimpulse.com"
    },
    {
        "Number": "9042",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Sieve Email Filtering: Delivery by MAILBOXID",
        "Authors": [
            "B. Gondwana",
            "Ed."
        ],
        "Date": "2021-06",
        "More Info": "Updates RFC 5228",
        "Status": "Proposed Standard",
        "Abstract": "The OBJECTID capability of IMAP (RFC 8474) allows clients to identify mailboxes by a unique identifier that survives renaming.  This document extends the Sieve email filtering language (RFC 5228) to allow using that same unique identifier as a target for fileinto rules and for testing the existence of mailboxes.",
        "Keywords": [
            "sieve",
            "email"
        ],
        "Content": "RFC 9042: Sieve Email Filtering: Delivery by MAILBOXID RFC 9042 Sieve MAILBOXID June 2021 Gondwana Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9042 Updates: 5228 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Author: B. Gondwana, Ed. Fastmail RFC 9042 Sieve Email Filtering: Delivery by MAILBOXID Abstract The OBJECTID capability of IMAP (RFC 8474) allows clients to identify mailboxes by a unique identifier that survives renaming.¶ This document extends the Sieve email filtering language (RFC 5228) to allow using that same unique identifier as a target for fileinto rules and for testing the existence of mailboxes.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9042.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions Used in This Document 3.  Sieve Capability String 4.  Argument :mailboxid to Command fileinto 4.1.  Interaction with Mailbox Extension 4.2.  Interaction with Special-Use Extension 5.  Interaction with FCC Extension 6.  Test mailboxidexists 7.  Interaction with Variables Extension 8.  Security Considerations 9.  IANA Considerations 10. References 10.1.  Normative References 10.2.  Informative References Acknowledgements Author's Address 1. Introduction Sieve rules [RFC5228] are sometimes created using graphical interfaces, which allow users to select the mailbox to be used as a target for a rule.¶ If that mailbox is renamed, the client may also update its internal representation of the rule and update the Sieve script to match; however, this is a multistep process and subject to partial failures. Also, if the folder is renamed by a different mechanism (e.g., another IMAP client), the rules will get out of sync.¶ By telling fileinto to reference the immutable MAILBOXID specified by [RFC8474], using the extension specified herein, Sieve rules can continue to target the same mailbox, even if it gets renamed.¶ 2. Conventions Used in This Document The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Sieve Capability String Scripts that use the extensions defined in this document MUST explicitly require the capability \"mailboxid\".¶ Example:¶ require \"mailboxid\"; ¶ 4. Argument :mailboxid to Command fileinto Normally, the fileinto command delivers the message in the mailbox specified using its positional mailbox argument. However, if the optional :mailboxid argument is also specified, the fileinto command first checks whether a mailbox exists in the user's personal namespace [RFC2342] with the specified MAILBOXID [RFC8474].¶ If a matching mailbox is found, that mailbox is used for delivery.¶ If there is no such mailbox, the fileinto action proceeds as it would without the :mailboxid argument.¶ The tagged argument :mailboxid to fileinto consumes one additional token, a string containing the OBJECTID of the target mailbox.¶ Example:¶ require \"fileinto\"; require \"mailboxid\"; if header :contains [\"from\"] \"coyote\" { fileinto :mailboxid \"F6352ae03-b7f5-463c-896f-d8b48ee3\" \"INBOX.harassment\"; } ¶ 4.1. Interaction with Mailbox Extension For servers that also support the mailbox extension defined in [RFC5490], if both the :create and :mailboxid arguments are provided to a fileinto command and no matching mailbox is found, then a new mailbox will be created.¶ This new mailbox will have the name specified by the positional mailbox argument ([RFC5228], Section 4.1); however, it will get a different MAILBOXID (chosen by the server) rather than the one specified by the :mailboxid argument to fileinto.¶ Example:¶ require \"fileinto\"; require \"mailboxid\"; require \"mailbox\"; fileinto :mailboxid \"Fnosuch\" :create \"INBOX.no-such-folder\"; # creates INBOX.no-such-folder, but it doesn't # get the \"Fnosuch\" mailboxid. ¶ 4.2. Interaction with Special-Use Extension For servers that also support delivery to special-use mailboxes [RFC8579], it is an error to specify both :mailboxid and :specialuse in the same fileinto command.¶ Advanced filtering based on both special-use and MAILBOXID can be built with explicit specialuse_exists and mailboxidexists tests.¶ Note to developers of Sieve generation tools:¶ It is advisable to use special-use rather than MAILBOXID when creating rules that are based on a special-use purpose (e.g., delivery directly to the Junk folder based on a header that was added by a scanning agent earlier in the mail flow).¶ 5. Interaction with FCC Extension This document extends the definition of the :fcc argument defined in [RFC8580] so that it can optionally be used with the :mailboxid argument. The syntax for FCC is extended here using ABNF [RFC5234]:¶ MAILBOXID-OPT = \":mailboxid\" objectid FCC-OPTS =/ MAILBOXID-OPT ¶ If the optional :mailboxid argument is specified with :fcc, it instructs the Sieve interpreter to check whether a mailbox exists with the specific MAILBOXID. If such a mailbox exists, the generated message is filed into that mailbox. Otherwise, the generated message is filed into the :fcc target mailbox.¶ As with fileinto, it is an error to specify both :mailboxid and :specialuse for the same fcc rule.¶ Example:¶ require [\"enotify\", \"fcc\", \"mailboxid\"]; notify :fcc \"INBOX.Sent\" :mailboxid \"F6352ae03-b7f5-463c-896f-d8b48ee3\" :message \"You got mail!\" \"mailto:ken@example.com\"; ¶ 6. Test mailboxidexists Usage: mailboxidexists <mailbox-objectids: string-list>¶ The mailboxidexists test is true if every string argument provided is the MAILBOXID of a mailbox that exists in the mailstore and that allows the user in whose context the Sieve script runs to deliver messages into it.¶ When the mailstore is an IMAP server that also supports IMAP Access Control List (ACL) [RFC4314], delivery is allowed if the user has the 'p' or 'i' rights for the mailbox (see Section 5.2 of [RFC4314]).¶ When the mailstore is an IMAP server that does not support IMAP ACL, delivery is allowed if the READ-WRITE response code is present for the mailbox when selected by the user (see Section 7.1 of [RFC3501]).¶ Note that a successful mailboxidexists test for a mailbox doesn't necessarily mean that a \"fileinto :mailboxid\" action on this mailbox would succeed. For example, the fileinto action might put the user over quota. The mailboxidexists test only verifies existence of the mailbox and whether the user in whose context the Sieve script runs has permissions to execute fileinto on it.¶ Example:¶ require \"fileinto\"; require \"mailboxid\"; if header :contains [\"from\"] \"coyote\" { if mailboxidexists \"F6352ae03-b7f5-463c-896f-d8b48ee3\" { fileinto :mailboxid \"F6352ae03-b7f5-463c-896f-d8b48ee3\" \"INBOX.name.will.not.be.used\"; } else { fileinto \"INBOX.harassment\"; } } ¶ Note to implementers:¶ This test behaves identically to the mailboxexists test defined in [RFC5490] but operates on MAILBOXIDs rather than mailbox names.¶ 7. Interaction with Variables Extension There is no special interaction defined; however, as an OBJECTID is a string in this document, OBJECTID values can contain variable expansions if [RFC5229] is enabled.¶ 8. Security Considerations Because MAILBOXID is always generated by the server, implementations MUST NOT allow Sieve to make an end run around this protection by creating mailboxes with the specified ID by using :create and :mailboxid in a fileinto rule for a nonexistent mailbox.¶ Implementers are referred to the Security Considerations sections of [RFC5228] and [RFC8474].¶ 9. IANA Considerations IANA has added the following capability to the \"Sieve Extensions\" registry at <https://www.iana.org/assignments/sieve-extensions>:¶ Capability name: mailboxid¶ Description: adds a test for checking mailbox existence by OBJECTID and new optional arguments to fileinto and :fcc that allow selecting the destination mailbox by OBJECTID.¶ RFC number: RFC 9042¶ Contact address: EXTRA discussion list <extra@ietf.org>¶ 10. References 10.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC2342] Gahrns, M. and C. Newman, \"IMAP4 Namespace\", RFC 2342, DOI 10.17487/RFC2342, May 1998, <https://www.rfc-editor.org/info/rfc2342>. [RFC5228] Guenther, P., Ed. and T. Showalter, Ed., \"Sieve: An Email Filtering Language\", RFC 5228, DOI 10.17487/RFC5228, January 2008, <https://www.rfc-editor.org/info/rfc5228>. [RFC5234] Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax Specifications: ABNF\", STD 68, RFC 5234, DOI 10.17487/RFC5234, January 2008, <https://www.rfc-editor.org/info/rfc5234>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8474] Gondwana, B., Ed., \"IMAP Extension for Object Identifiers\", RFC 8474, DOI 10.17487/RFC8474, September 2018, <https://www.rfc-editor.org/info/rfc8474>. [RFC8580] Murchison, K. and B. Gondwana, \"Sieve Extension: File Carbon Copy (FCC)\", RFC 8580, DOI 10.17487/RFC8580, May 2019, <https://www.rfc-editor.org/info/rfc8580>. 10.2. Informative References [RFC3501] Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1\", RFC 3501, DOI 10.17487/RFC3501, March 2003, <https://www.rfc-editor.org/info/rfc3501>. [RFC4314] Melnikov, A., \"IMAP4 Access Control List (ACL) Extension\", RFC 4314, DOI 10.17487/RFC4314, December 2005, <https://www.rfc-editor.org/info/rfc4314>. [RFC5229] Homme, K., \"Sieve Email Filtering: Variables Extension\", RFC 5229, DOI 10.17487/RFC5229, January 2008, <https://www.rfc-editor.org/info/rfc5229>. [RFC5490] Melnikov, A., \"The Sieve Mail-Filtering Language -- Extensions for Checking Mailbox Status and Accessing Mailbox Metadata\", RFC 5490, DOI 10.17487/RFC5490, March 2009, <https://www.rfc-editor.org/info/rfc5490>. [RFC8579] Bosch, S., \"Sieve Email Filtering: Delivering to Special-Use Mailboxes\", RFC 8579, DOI 10.17487/RFC8579, May 2019, <https://www.rfc-editor.org/info/rfc8579>. Acknowledgements This document borrows heavily from [RFC5490] for the matching mailboxexists test and from [RFC8579] for an example of modifying the fileinto command.¶ Thanks to Ned Freed, Ken Murchison, and Alexey Melnikov for feedback on the EXTRA mailing list.¶ Author's Address Bron Gondwana (editor) Fastmail Level 2 114 William St Melbourne VIC 3000 Australia Email: brong@fastmailteam.com URI: https://www.fastmail.com"
    },
    {
        "Number": "9044",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Using the AES-GMAC Algorithm with the Cryptographic Message Syntax (CMS)",
        "Authors": [
            "R. Housley"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document specifies the conventions for using the AES-GMAC Message Authentication Code algorithm with the Cryptographic Message Syntax (CMS) as specified in RFC 5652.",
        "Keywords": [
            "Authentication",
            "Message Authentication Code"
        ],
        "Content": "RFC 9044: Using the AES-GMAC Algorithm with the Cryptographic Message Syntax (CMS) RFC 9044 Using AES-GMAC with the CMS June 2021 Housley Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9044 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Author: R. Housley Vigil Security RFC 9044 Using the AES-GMAC Algorithm with the Cryptographic Message Syntax (CMS) Abstract This document specifies the conventions for using the AES-GMAC Message Authentication Code algorithm with the Cryptographic Message Syntax (CMS) as specified in RFC 5652.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9044.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  Message Authentication Code Algorithms 3.1.  AES-GMAC 4.  Implementation Considerations 5.  ASN.1 Module 6.  IANA Considerations 7.  Security Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgements Author's Address 1. Introduction This document specifies the conventions for using the AES-GMAC [AES] [GCM] Message Authentication Code (MAC) algorithm with the Cryptographic Message Syntax (CMS) [RFC5652].¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Message Authentication Code Algorithms This section specifies the conventions employed by CMS [RFC5652] implementations that support the AES-GMAC [AES] [GCM] Message Authentication Code (MAC) algorithm.¶ MAC algorithm identifiers are located in the AuthenticatedData macAlgorithm field.¶ MAC values are located in the AuthenticatedData mac field.¶ 3.1. AES-GMAC The AES-GMAC [AES] [GCM] Message Authentication Code (MAC) algorithm uses one of the following algorithm identifiers in the AuthenticatedData macAlgorithm field; the choice depends on the size of the AES key, which is either 128 bits, 192 bits, or 256 bits:¶ aes OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 1 } id-aes128-GMAC OBJECT IDENTIFIER ::= { aes 9 } id-aes192-GMAC OBJECT IDENTIFIER ::= { aes 29 } id-aes256-GMAC OBJECT IDENTIFIER ::= { aes 49 } ¶ For all three of these algorithm identifier values, the AlgorithmIdentifier parameters field MUST be present, and the parameters MUST contain GMACParameters:¶ GMACParameters ::= SEQUENCE { nonce OCTET STRING, -- recommended size is 12 octets length MACLength DEFAULT 12 } MACLength ::= INTEGER (12 | 13 | 14 | 15 | 16) ¶ The GMACParameters nonce field is the GMAC initialization vector. The nonce may have any number of bits between 8 and (2^64)-1, but it MUST be a multiple of 8 bits. Within the scope of any content-authentication key, the nonce value MUST be unique. A nonce value of 12 octets can be processed more efficiently, so that length for the nonce value is RECOMMENDED.¶ The GMACParameters length field tells the size of the message authentication code. It MUST match the size in octets of the value in the AuthenticatedData mac field. A length of 12 octets is RECOMMENDED.¶ 4. Implementation Considerations An implementation of the Advanced Encryption Standard (AES) Galois/Counter Mode (GCM) authenticated encryption algorithm is specified in [GCM]. An implementation of AES-GCM can be used to compute the GMAC message authentication code by providing the content-authentication key as the AES key, the nonce as the initialization vector, a zero-length plaintext content, and the content to be authenticated as the additional authenticated data (AAD). The result of the AES-GCM invocation is the AES-GMAC authentication code, which is called the \"authentication tag\" in some implementations. In AES-GCM, the encryption step is skipped when no input plaintext is provided; therefore, no ciphertext is produced.¶ The DEFAULT and RECOMMENDED values in GMACParameters were selected to align with the parameters defined for AES-GCM in Section 3.2 of [RFC5084].¶ 5. ASN.1 Module The following ASN.1 module uses the definition for MAC-ALGORITHM from [RFC5912].¶ CryptographicMessageSyntaxGMACAlgorithms { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-aes-gmac-alg-2020(72) } DEFINITIONS IMPLICIT TAGS ::= BEGIN -- EXPORTS All IMPORTS AlgorithmIdentifier{}, MAC-ALGORITHM FROM AlgorithmInformation-2009 -- from [RFC5912] { iso(1) identified-organization(3) dod(6) internet(1) security(5) mechanisms(5) pkix(7) id-mod(0) id-mod-algorithmInformation-02(58)} ; -- Object Identifiers aes OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) 1 } id-aes128-GMAC OBJECT IDENTIFIER ::= { aes 9 } id-aes192-GMAC OBJECT IDENTIFIER ::= { aes 29 } id-aes256-GMAC OBJECT IDENTIFIER ::= { aes 49 } -- GMAC Parameters GMACParameters ::= SEQUENCE { nonce OCTET STRING, -- recommended size is 12 octets length MACLength DEFAULT 12 } MACLength ::= INTEGER (12 | 13 | 14 | 15 | 16) -- Algorithm Identifiers maca-aes128-GMAC MAC-ALGORITHM ::= { IDENTIFIER id-aes128-GMAC PARAMS TYPE GMACParameters ARE required IS-KEYED-MAC TRUE } maca-aes192-GMAC MAC-ALGORITHM ::= { IDENTIFIER id-aes192-GMAC PARAMS TYPE GMACParameters ARE required IS-KEYED-MAC TRUE } maca-aes256-GMAC MAC-ALGORITHM ::= { IDENTIFIER id-aes256-GMAC PARAMS TYPE GMACParameters ARE required IS-KEYED-MAC TRUE } END -- of CryptographicMessageSyntaxGMACAlgorithms ¶ 6. IANA Considerations IANA has registered the object identifier shown in Table 1 in the \"SMI Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)\" registry.¶ Table 1 Decimal Description References 72 id-mod-aes-gmac-alg-2020 RFC 9044 7. Security Considerations The CMS provides a method for authenticating data. This document identifies the conventions for using the AES-GMAC algorithm with the CMS.¶ The key management technique employed to distribute message-authentication keys must itself provide authentication; otherwise, the content is delivered with integrity from an unknown source.¶ When more than two parties share the same message-authentication key, data origin authentication is not provided. Any party that knows the message-authentication key can compute a valid MAC; therefore, the content could originate from any one of the parties.¶ Within the scope of any content-authentication key, the AES-GMAC nonce value MUST be unique. Use of a nonce value more than once allows an attacker to generate valid AES-GMAC authentication codes for arbitrary messages, resulting in the loss of authentication as described in Appendix A of [GCM].¶ Within the scope of any content-authentication key, the authentication tag length (MACLength) MUST be fixed.¶ If AES-GMAC is used as a building block in another algorithm (e.g., as a pseudorandom function), AES-GMAC MUST be used only one time by that algorithm. For instance, AES-GMAC MUST NOT be used as the pseudorandom function for PBKDF2.¶ When initialization vector (IV) lengths other than 96 bits are used, the GHASH function is used to process the provided IV, which introduces a potential for IV collisions. However, IV collisions are not a concern with CMS AuthenticatedData because a fresh content-authentication key is usually generated for each message.¶ The probability of a successful forgery is close to 2^(-t), where t is the number of bits in the authentication tag length (MACLength*8). This nearly ideal authentication protection is achieved for CMS AuthenticatedData when a fresh content-authentication key is generated for each message. However, the strength of GMAC degrades slightly as a function of the length of the message being authenticated [F2005] [MV2005]. Implementations SHOULD use 16-octet authentication tags for messages over 2^64 octets.¶ Implementations must randomly generate message-authentication keys. The use of inadequate pseudorandom number generators (PRNGs) to generate keys can result in little or no security. An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute-force searching the whole key space. The generation of quality random numbers is difficult. [RFC4086] offers important guidance in this area.¶ Implementers should be aware that cryptographic algorithms become weaker with time. As new cryptanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will reduce. Therefore, cryptographic algorithm implementations should be modular, allowing new algorithms to be readily inserted. That is, implementers should be prepared to regularly update the set of algorithms in their implementations. More information is available in BCP 201 [RFC7696].¶ 8. References 8.1. Normative References [AES] National Institute of Standards and Technology, \"Advanced Encryption Standard (AES)\", FIPS PUB 197, DOI 10.6028/NIST.FIPS.197, November 2001, <https://doi.org/10.6028/NIST.FIPS.197>. [GCM] Dworkin, M., \"Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC\", NIST Special Publication 800-38D, DOI 10.6028/NIST.SP.800-38D, November 2007, <https://doi.org/10.6028/NIST.SP.800-38D>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC5652] Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70, RFC 5652, DOI 10.17487/RFC5652, September 2009, <https://www.rfc-editor.org/info/rfc5652>. [RFC5912] Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)\", RFC 5912, DOI 10.17487/RFC5912, June 2010, <https://www.rfc-editor.org/info/rfc5912>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 8.2. Informative References [F2005] Ferguson, N., \"Authentication weaknesses in GCM\", May 2005, <https://csrc.nist.gov/csrc/media/projects/block-cipher-techniques/documents/bcm/comments/cwc-gcm/ferguson2.pdf>. [MV2005] McGrew, D. and J. Viega, \"GCM Update\", May 2005, <https://csrc.nist.gov/CSRC/media/Projects/Block-Cipher-Techniques/documents/BCM/Comments/CWC-GCM/gcm-update.pdf>. [RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <https://www.rfc-editor.org/info/rfc4086>. [RFC5084] Housley, R., \"Using AES-CCM and AES-GCM Authenticated Encryption in the Cryptographic Message Syntax (CMS)\", RFC 5084, DOI 10.17487/RFC5084, November 2007, <https://www.rfc-editor.org/info/rfc5084>. [RFC7696] Housley, R., \"Guidelines for Cryptographic Algorithm Agility and Selecting Mandatory-to-Implement Algorithms\", BCP 201, RFC 7696, DOI 10.17487/RFC7696, November 2015, <https://www.rfc-editor.org/info/rfc7696>. Acknowledgements Many thanks to Hans Aschauer, Hendrik Brockhaus, Quynh Dang, Roman Danyliw, Tim Hollebeek, Ben Kaduk, Mike Ounsworth, and Magnus Westerlund for their careful review and thoughtful improvements.¶ Author's Address Russ Housley Vigil Security, LLC 516 Dranesville Road Herndon, VA 20170 United States of America Email: housley@vigilsec.com"
    },
    {
        "Number": "9047",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Propagation of ARP/ND Flags in an Ethernet Virtual Private Network (EVPN)",
        "Authors": [
            "J. Rabadan",
            "Ed.",
            "S. Sathappan",
            "K. Nagaraj",
            "W. Lin"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "This document defines an Extended Community that is advertised along with an Ethernet Virtual Private Network (EVPN) Media Access Control (MAC) / IP Advertisement route and carries information relevant to the Address Resolution Protocol (ARP) / Neighbor Discovery (ND) resolution so that an EVPN Provider Edge (PE) implementing a proxy-ARP/ND function in broadcast domains (BDs) or an ARP/ND function on Integrated Routing and Bridging (IRB) interfaces can reply to ARP Requests or Neighbor Solicitation (NS) messages with the correct information.",
        "Keywords": [
            "proxy-ARP",
            "proxy-ND",
            "proxy-ARP/ND",
            "ARP/ND extended community"
        ],
        "Content": "RFC 9047: Propagation of ARP/ND Flags in an Ethernet Virtual Private Network (EVPN) RFC 9047 EVPN ARP/ND Flags June 2021 Rabadan, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9047 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Authors: J. Rabadan, Ed. Nokia S. Sathappan Nokia K. Nagaraj Nokia W. Lin Juniper RFC 9047 Propagation of ARP/ND Flags in an Ethernet Virtual Private Network (EVPN) Abstract This document defines an Extended Community that is advertised along with an Ethernet Virtual Private Network (EVPN) Media Access Control (MAC) / IP Advertisement route and carries information relevant to the Address Resolution Protocol (ARP) / Neighbor Discovery (ND) resolution so that an EVPN Provider Edge (PE) implementing a proxy-ARP/ND function in broadcast domains (BDs) or an ARP/ND function on Integrated Routing and Bridging (IRB) interfaces can reply to ARP Requests or Neighbor Solicitation (NS) messages with the correct information.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9047.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Terminology and Conventions 2.  The EVPN ARP/ND Extended Community 3.  Use of the EVPN ARP/ND Extended Community 3.1.  Transmission of the EVPN ARP/ND Extended Community 3.2.  Reception of the EVPN ARP/ND Extended Community 4.  Security Considerations 5.  IANA Considerations 6.  References 6.1.  Normative References 6.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction An EVPN MAC/IP Advertisement route can optionally carry IPv4 or IPv6 addresses associated with a MAC address. Remote PE routers can use this information to populate their ARP or ND tables on IRB interfaces or their proxy-ARP/ND tables in BDs. PEs can then reply locally (act as an ARP/ND proxy, as per [RFC7432]) to IPv4 ARP Requests and IPv6 Neighbor Solicitation messages and reduce or suppress the flooding produced by the address resolution procedure. However, the information conveyed in the EVPN MAC/IP Advertisement route may not be enough for the remote PE to reply to local ARP or ND requests. For example, if a PE learns an IPv6 address and MAC address combination ND entry via EVPN (denoted by IPv6->MAC), the PE would not know if that particular IPv6->MAC pair belongs to a router or a host or if that address is an anycast address, as this information is not carried in the EVPN MAC/IP Advertisement routes.¶ This document defines an Extended Community that is advertised along with an EVPN MAC/IP Advertisement route and carries information relevant to the ARP/ND resolution so that an EVPN PE implementing a proxy-ARP/ND function can reply to ARP Requests or Neighbor Solicitations with the correct information. In particular, the flags defined in [RFC4861] can now be conveyed along with a MAC/IP Advertisement route so that an egress EVPN PE can issue Neighbor Advertisement (NA) messages with the correct flag information.¶ The flags are carried in the EVPN Address Resolution Protocol and Neighbor Discovery (ARP/ND) Extended Community, as described in the following sections.¶ 1.1. Terminology and Conventions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ EVPN: Ethernet Virtual Private Networks, as in [RFC7432]¶ BD: Broadcast Domain, also described in [RFC7432]¶ ARP: Address Resolution Protocol¶ ND: Neighbor Discovery protocol, specified in [RFC4861]¶ PE: Provider Edge router¶ CE: Customer Edge router¶ IRB: Integrated Routing and Bridging interface¶ Proxy-ARP/ND: A function on the EVPN PEs by which received ARP Requests or NS messages are replied to locally by the PE, without the need to flood the requests to remote PEs in the BD. In order to reply to ARP Requests or NS messages, the PE does a lookup on an ARP/ND table, which is a collection of IP->MAC entries learned by the PE.¶ IP->MAC: An IP address and MAC address combination that represents a given host and is added to an ARP table or ND table. This document uses IP->MAC generically for IPv4 and IPv6 addresses. When something is specific to IPv4, the document will use IPv4->MAC; likewise, IPv6->MAC will be used when something is specific to IPv6 entries only.¶ Familiarity with the terminology in [RFC4861] and [RFC7432] is expected.¶ 2. The EVPN ARP/ND Extended Community This document defines a transitive EVPN Extended Community (Type field value of 0x06) with a Sub-Type of 0x08, as allocated by IANA. It is advertised along with EVPN MAC/IP Advertisement routes that carry an IPv4 or IPv6 address.¶ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type=0x06 | Sub-Type=0x08 |Flags (1 octet)| Reserved=0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved=0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Flags field: 0 1 2 3 4 5 6 7 +-+-+-+-+-+-+-+-+ | |I| |O|R| +-+-+-+-+-+-+-+-+ ¶ The following flags are defined in the Flags field, the third octet of the Extended Community:¶ R: Router flag (corresponds to Bit 23 of the Extended Community)¶ Bit 7 of the Flags field is defined as the \"Router flag\". When set, the R flag indicates that the IPv6->MAC pair advertised in the MAC/IP Advertisement route, along with the Extended Community, belongs to an IPv6 router. If the R flag is zero, the IPv6->MAC pair belongs to a host. The receiving PE implementing the ND function will use this information in Neighbor Advertisement messages for the associated IPv6 address. This flag has no meaning for ARP IPv4->MAC entries and MUST be ignored when the Extended Community is received with an EVPN MAC/IP Advertisement route for an IPv4->MAC pair.¶ O: Override flag (corresponds to Bit 22 of the Extended Community)¶ Bit 6 of the Flags field is defined as the \"Override flag\". An egress PE will normally advertise IPv6->MAC pairs with the O flag set, and only when IPv6 \"anycast\" is enabled in the BD or interface will the PE send an IPv6->MAC pair with the O flag = 0. The ingress PE will install the ND entry with the received O flag and will always use this O flag value when replying to a Neighbor Solicitation for the IPv6 address. Similarly to the Router Flag, the Override flag has no meaning for ARP IPv4->MAC entries and MUST be ignored when the Extended Community is received with an EVPN MAC/IP Advertisement route for an IPv4->MAC pair.¶ I: Immutable ARP/ND Binding flag (corresponds to Bit 20 of the Extended Community)¶ Bit 4 of the Flags field is defined as the \"Immutable ARP/ND Binding flag\". When set, the egress PE indicates that the IP->MAC pair that was sent in an EVPN MAC/IP Advertisement route (along with the Extended Community) is a configured ARP/ND entry. In this case, the IP address in the EVPN MAC/IP Advertisement route can only be bound together with the MAC address specified in the same route, and not with any other MAC addresses received in a different route without the I flag set.¶ Bits 0-3 and 5 are not assigned by this document. They MUST be set to zero and ignored on receipt.¶ The reserved fields are set to 0 and ignored by the receiver.¶ 3. Use of the EVPN ARP/ND Extended Community This section describes the relevant procedures when advertising and processing the EVPN ARP/ND Extended Community. In all the procedures below, a \"PE\" must be interpreted as a \"PE that supports the proxy-ARP/ND (introduced by [RFC7432]) and implements the propagation of the ARP/ND flags that this document specifies\".¶ 3.1. Transmission of the EVPN ARP/ND Extended Community When an IP->MAC entry is not learned via EVPN, a PE may learn IP->MAC pairs in the management plane (this will create static entries in the ARP/ND or proxy-ARP/ND table) or by snooping ARP or NA messages coming from the CE (this will create dynamic entries). Those static and dynamic IP->MAC entries will be advertised in EVPN MAC/IP Advertisement routes that use the EVPN ARP/ND Extended Community as follows:¶ Advertised MAC/IP Advertisement routes for IPv6->MAC entries MUST include one (and only one) ARP/ND Extended Community with the R and O flag values associated with the entry. Those flag values are either dynamically learned (from NA messages) or configured in case of static entries.¶ MAC/IP Advertisement routes for IPv4->MAC entries MAY include one ARP/ND Extended Community. If the EVPN ARP/ND Extended Community is advertised along with an EVPN IPv4/MAC Advertisement route, the R and O flags SHOULD be set to zero.¶ If an IP->MAC pair is static (it has been configured), the corresponding MAC/IP Advertisement route MUST be sent along with an ARP/ND Extended Community with the I flag set.¶ This Extended Community does not change the procedures described in [RFC7432]. Specifically, the procedures for advertising the MAC Mobility Extended Community along with the MAC/IP Advertisement route are not changed.¶ 3.2. Reception of the EVPN ARP/ND Extended Community In addition to the procedures specified in [RFC7432], a PE receiving a MAC/IP Advertisement route will process the EVPN ARP/ND Extended Community as follows:¶ Only one EVPN ARP/ND Extended Community is expected to be received along with an EVPN MAC/IP Advertisement route. If more than one ARP/ND Extended Community is received, the PE MUST consider only the first one on the list for processing purposes and MUST NOT propagate the rest of the ARP/ND Extended Communities.¶ The R, O, and I flags MUST be ignored if they are advertised along with an EVPN MAC/IP Advertisement route that does not contain an IP (IPv4 or IPv6) address. Otherwise, they are processed as follows.¶ R and O flag processing:¶ If the EVPN MAC/IP Advertisement route contains an IPv6 address and the EVPN ARP/ND Extended Community, the PE MUST add the R and O flag values to the ND entry in the ND or proxy-ND table and propagate the value of the R and O flags from the ARP/ND Extended Community to the Neighbor Advertisements when replying to a solicitation for the IPv6 address.¶ If no EVPN ARP/ND Extended Community is received along with the route, the PE will add the default R and O flags to the entry. The default R flag SHOULD be an administrative choice. The default O flag SHOULD be 1.¶ A PE MUST ignore the received R and O flags for an EVPN MAC/IP Advertisement route that contains an IPv4->MAC pair.¶ I flag processing:¶ A PE receiving an EVPN MAC/IP Advertisement route containing an IP->MAC and the I flag set SHOULD install the IP->MAC entry in the ARP/ND or proxy-ARP/ND table as an \"immutable binding\". This immutable binding entry will override an existing non-immutable binding for the same IP->MAC. The absence of the EVPN ARP/ND Extended Community in a MAC/IP Advertisement route indicates that the IP->MAC entry is not an \"immutable binding\".¶ Receiving multiple EVPN MAC/IP Advertisement routes with the I flag set to 1 for the same IP but a different MAC address is considered a misconfiguration or a transient error condition. If this happens in the network, a PE receiving multiple routes (with the I flag set to 1 for the same IP and a different MAC address) SHOULD update the IP->MAC entry with the latest received information. Note that if a configured IP1->MAC1 changes to point to a new MAC address, i.e., IP1->MAC2, the EVPN MAC/IP Advertisement route for IP1->MAC1 will be withdrawn before the EVPN MAC/IP Advertisement route for IP1->MAC2 is advertised.¶ A PE originating an EVPN MAC/IP Advertisement route for IP1->MAC1 with the I flag set to 1 MAY also originate the route with the \"Sticky/static flag\" set (in the MAC Mobility Extended Community). In such a case, the IP1->MAC1 binding is not only immutable but it cannot move as well. Even so, if an update for the same immutable and static IP1->MAC1 is received from a different PE, one of the two routes will be selected. This is analogous to the case described in Section 15.2 of [RFC7432] when two MAC/IP routes with the static flag set are received, and the PE likewise MUST alert the operator of such a situation.¶ In a situation where a host (with an IP->MAC that is configured as immutable binding in the attached PE) is allowed to move between PEs (that is, the associated MAC is non-static), PEs can receive multiple MAC/IP Advertisement routes for the same IP->MAC. In such situations, MAC mobility procedures as in [RFC7432] dictate the reachability of the MAC.¶ As an example of the use of the I flag, consider PE1, PE2, and PE3 attached to the same BD. PE1 originates an EVPN MAC/IP Advertisement route for IP1->MAC1 with the I flag set to 1 later on, PE2 also originates an EVPN MAC/IP Advertisement route IP1->MAC1 with a higher sequence number and the I flag set to 1. Then all the EVPN PEs attached to the same BD SHOULD retain their IP1->MAC1 ARP/ND binding but update MAC1's forwarding destination to PE2. For some reason, if PE3 originates an EVPN MAC/IP Advertisement route for IP1->MAC2 with the I flag set to 0 (even with a higher sequence number), then the EVPN PEs in the BD will not update their IP1->MAC1 ARP/ND bindings since IP1 is bound to MAC1 (MAC2 SHOULD still be programmed in the Layer 2 BDs). This is considered a misconfiguration in PE3.¶ When the I flag is set to 1, a given IP is assumed to be always bound to the same MAC address; therefore, the mobility procedures described in [EXTENDED-MOBILITY] for \"Host IP move to a new MAC\" will not apply.¶ 4. Security Considerations The same security considerations described in [RFC7432] apply to this document. In general, it is worth noting that the use of proxy-ARP/ND in EVPN BDs may add some security risks. Attackers can make use of ARP/ND messages to create state in all the PEs attached to the same BD as the attacker and exhaust resources in those PEs. Therefore, additional security mechanisms may be needed. Some examples of such additional security mechanisms are limiting the number of proxy-ARP/ND entries per BD and/or per port or closely monitoring the rate at which hosts create dynamic proxy-ARP/ND entries.¶ In addition, this document adds pieces of information that impact the way ARP/ND entries are installed in ARP/ND and/or proxy-ARP/ND tables and, therefore, impacts the resolution protocols for IPv4 and IPv6 addresses. For instance, if a given IPv6->MAC binding is configured with the wrong R or O flags (intentionally or not) on a given PE, the rest of the PEs attached to the same BD will install the wrong information for the IPv6->MAC. This will cause all the PEs in the BD to reply to Neighbor Solicitations for the IPv6 with NA messages containing the wrong R and O flags. For example, as specified in [RFC4861], the receiver of an NA message with O not set will not update its existing cache entry for the IP->MAC; hence, the communication between the owner of the IP address and the receiver of the NA message with the wrong O flag will fail. Similarly, the receiver of an NA message with the wrong R flag may update its Default Router List by incorrectly adding or removing an entry, which could, for example, lead to sending traffic to a node that is not a router, causing the traffic to be dropped.¶ The I flag, or Immutable ARP/ND Binding flag, is a useful security tool, allowing an operator to ensure a given IP address is always bound to the same MAC and that information is distributed to all the PEs attached to the same BD. ARP/ND spoofing attacks, in which a malicious host injects Gratuitous ARPs or unsolicited NAs for that IP address with a different MAC address, will not succeed in programming the ARP/ND and proxy-ARP/ND tables and therefore the spoofer will not receive the traffic.¶ 5. IANA Considerations IANA has changed the name for Sub-Type Value 0x08 in the \"EVPN Extended Community Sub-Types\" registry [IANA-BGP-EXT-COMM] to the following:¶ Table 1: Updated Value in the \"EVPN Extended Community Sub-Types\" Registry Sub-Type Value Name Reference 0x08 ARP/ND Extended Community RFC 9047 IANA has created the \"ARP/ND Extended Community Flags\" registry, where the following initial allocations have been made:¶ Table 2: Initial Values of the \"ARP/ND Extended Community Flags\" Registry Flag Position Name Reference 0-3 Unassigned 4 Immutable ARP/ND Binding Flag (I) RFC 9047 5 Unassigned 6 Override Flag (O) RFC 9047 7 Router Flag (R) RFC 9047 The registration policy for this registry is Standards Action [RFC8126]. This registry is located in the \"Border Gateway Protocol (BGP) Extended Communities\" registry [IANA-BGP-EXT-COMM].¶ Note that the flag position 5 is left unassigned and not used in this specification since it was previously requested by [EVPN-IP-MAC-PROXY].¶ 6. References 6.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman, \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861, DOI 10.17487/RFC4861, September 2007, <https://www.rfc-editor.org/info/rfc4861>. [RFC7432] Sajassi, A., Ed., Aggarwal, R., Bitar, N., Isaac, A., Uttaro, J., Drake, J., and W. Henderickx, \"BGP MPLS-Based Ethernet VPN\", RFC 7432, DOI 10.17487/RFC7432, February 2015, <https://www.rfc-editor.org/info/rfc7432>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 6.2. Informative References [EVPN-IP-MAC-PROXY] Bickhart, R., Lin, W., Drake, J., Rabadan, J., and A. Lo, \"Proxy IP->MAC Advertisement in EVPNs\", Work in Progress, Internet-Draft, draft-rbickhart-evpn-ip-mac-proxy-adv-01, 24 January 2020, <https://tools.ietf.org/html/draft-rbickhart-evpn-ip-mac-proxy-adv-01>. [EXTENDED-MOBILITY] Malhotra, N., Ed., Sajassi, A., Pattekar, A., Lingala, A., Rabadan, J., and J. Drake, \"Extended Mobility Procedures for EVPN-IRB\", Work in Progress, Internet-Draft, draft-ietf-bess-evpn-irb-extended-mobility-05, 15 March 2021, <https://tools.ietf.org/html/draft-ietf-bess-evpn-irb-extended-mobility-05>. [IANA-BGP-EXT-COMM] IANA, \"Border Gateway Protocol (BGP) Extended Communities\", <https://www.iana.org/assignments/bgp-extended-communities>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. Acknowledgments The authors would like to thank Ali Sajassi for his feedback.¶ Authors' Addresses Jorge Rabadan (editor) Nokia 777 Middlefield Road Mountain View, CA 94043 United States of America Email: jorge.rabadan@nokia.com Senthil Sathappan Nokia 701 E. Middlefield Road Mountain View, CA 94043 United States of America Email: senthil.sathappan@nokia.com Kiran Nagaraj Nokia 701 E. Middlefield Road Mountain View, CA 94043 United States of America Email: kiran.nagaraj@nokia.com Wen Lin Juniper Networks Email: wlin@juniper.net"
    },
    {
        "Number": "9041",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Updating the MPLS Label Switched Paths (LSPs) Ping Parameters IANA Registry",
        "Authors": [
            "L. Andersson",
            "M. Chen",
            "C. Pignataro",
            "T. Saad"
        ],
        "Date": "2021-07",
        "More Info": "Updates RFC 8029, RFC 8611",
        "Status": "Proposed Standard",
        "Abstract": "This document updates RFCs 8029 and 8611, both of which define IANA registries for MPLS Label Switched Path (LSP) Ping. In particular, the registration procedure \"Private Use\" (previously known as \"Vendor Private Use\") has been changed to \"First Come First Served\" for the TLV and sub-TLV registries.   It also updates the description of the procedures for the responses sent when an unknown or erroneous code point is found. The updates are to clarify and align this namespace with recent developments, e.g., aligning terminology with RFC 8126 instead of the now obsoleted RFC 5226 (both titled \"Guidelines for Writing an IANA Considerations Section in RFCs\").",
        "Keywords": [],
        "Content": "RFC 9041: Updating the MPLS Label Switched Paths (LSPs) Ping Parameters IANA Registry RFC 9041 LSP Ping Registries July 2021 Andersson, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9041 Updates: 8029, 8611 Category: Standards Track Published: July 2021 ISSN: 2070-1721 Authors: L. Andersson Bronze Dragon Consulting M. Chen Huawei Technologies C. Pignataro Cisco Systems T. Saad Juniper Networks RFC 9041 Updating the MPLS Label Switched Paths (LSPs) Ping Parameters IANA Registry Abstract This document updates RFCs 8029 and 8611, both of which define IANA registries for MPLS Label Switched Path (LSP) Ping. In particular, the registration procedure \"Private Use\" (previously known as \"Vendor Private Use\") has been changed to \"First Come First Served\" for the TLV and sub-TLV registries.¶ It also updates the description of the procedures for the responses sent when an unknown or erroneous code point is found. The updates are to clarify and align this namespace with recent developments, e.g., aligning terminology with RFC 8126 instead of the now obsoleted RFC 5226 (both titled \"Guidelines for Writing an IANA Considerations Section in RFCs\").¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9041.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 1.2.  Terminology 1.2.1.  Terminology Used in This Document 1.2.2.  Abbreviations 2.  Updating the Message Types, Reply Modes, and Return Codes Registries 3.  Updating the TLV and Sub-TLV Registries 3.1.  General Principles for the LSP Ping TLV and Sub-TLV Registries 3.1.1.  Unrecognized Experimental Use TLVs and Sub-TLVs 3.2.  Common Registration Procedures for TLVs and Sub-TLVs 3.3.  Changes to the LSP Ping Registries 3.3.1.  Changes Common to the TLV and Sub-TLV Registries 4.  Updates to Related RFCs 4.1.  Updates to RFC 8029 4.2.  Updates to RFC 8611 5.  Security Considerations 6.  IANA Considerations 6.1.  Updates by IANA to the Message Types, Reply Modes, and Return Codes Registries 6.1.1.  Updates to the Message Types Registry 6.1.2.  Updates to the Reply Modes Registry 6.1.3.  Updates to the Return Codes Registry 6.2.  Updates to the TLV and Sub-TLV Registries 6.2.1.  Updates to the TLVs Registry 6.2.2.  Updates to the Registry for Sub-TLVs for TLV Types 1, 16, and 21 6.2.3.  Updates to the Registry for Sub-TLVs for TLV Type 6 6.2.4.  Updates to the Registry for Sub-TLVs for TLV Type 11 6.2.5.  Updates to the Registry for Sub-TLVs for TLV Type 20 6.2.6.  Updates to the Registry for Sub-TLVs for TLV Type 23 6.2.7.  Updates to the Registry for Sub-TLVs for TLV Type 27 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction There were a number of reasons to start the work that has led to this document, e.g.,¶ When the LSP Ping registry was created, it was incorrectly assumed that code points allocated by Experimental RFCs would be \"experimental\" code points; a code point made available in a public IANA registry is not limited by the type of RFC that made the allocation: it is available for use in any type of document.¶ The number of \"experimental\" code points was also too large as compared to what is normally allocated for \"Experimental Use\".¶ The words \"mandatory\" and \"optional\" are used differently in [RFC8029] than in other RFCs. For example, [RFC8029] talks about mandatory TLVs to indicate that it is mandatory to take a certain action if the TLV is found in a message but is not recognized. Other RFCs use \"mandatory TLV\" to indicate a TLV that must be present in a message.¶ Over time, there have been attempts to administratively update some of the registries, but it was soon decided that an RFC was needed. Other, often minor, potential updates were found, e.g., reserving the value 0 (zero) in registries where that is possible.¶ [RFC8029] contains updates to the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" IANA namespace [IANA-LSP-PING].¶ [RFC8611] created LSP Ping IANA registries that match [RFC8126]. This document further clarifies the entries in those registries and makes the definitions more precise.¶ This document updates [RFC8029] and [RFC8611] by updating two groups of registries as follows:¶ First, the \"Message Types\" [IANA-MT], \"Reply Modes\" [IANA-RM], and \"Return Codes\" [IANA-RC] registries are updated. The changes to these registries are minor.¶ Second, this document updates the TLV and sub-TLV registries listed below:¶ \"TLVs\", [IANA-TLV-reg]¶ \"Sub-TLVs for TLV Types 1, 16, and 21\", [IANA-Sub-1-16-21]¶ \"Sub-TLVs for TLV Type 6\", [IANA-Sub-6]¶ \"Sub-TLVs for TLV Type 11\", [IANA-Sub-11]¶ \"Sub-TLVs for TLV Type 20\", [IANA-Sub-20]¶ \"Sub-TLVs for TLV Type 23\", [IANA-Sub-23]¶ \"Sub-TLVs for TLV Type 27\", [IANA-Sub-27]¶ It should be noted that [RFC8029] was published before [RFC8126] and uses outdated terminology for some registration procedures, e.g., \"Vendor Private Use\". [RFC8611] was published after [RFC8126] and uses its recommended terminology, e.g., \"Private Use\". However, now both \"Vendor Private Use\" and \"Private Use\" have been removed and replaced with \"First Come First Served\" (FCFS) code points.¶ One reason to change from code points allocated by Vendor Private Use or Private Use is that such code points are allowed in production networks. Theoretically, it is possible that two vendors might use the same code point value with different meanings. If such a code is ever deployed in the same network, this could cause protocol issues that would be hard to debug.¶ With FCFS code points, this will not happen. Vendors that have existing code using Vendor Private Use or Private Use code points should register those code points as FCFS code points as soon as this document is published as an RFC.¶ The \"Sub-TLVs for TLV Type 9\" subregistry is not updated.¶ Third, according to [RFC8029], some code points (TLVs and sub-TLVs) are called \"mandatory\" or \"optional\". Contrary to how other RFCs use these words, indicating that it is mandatory or optional to include the code points in a message, [RFC8029] uses these words to indicate that an action might or might not be mandatory. This document updates [RFC8029] to drop the words \"mandatory\" and \"optional\", and the text is changed to focus on what should be done.¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 1.2. Terminology This section lists terms that are used when discussing the hierarchy of IANA registries (Section 1.2.1), and abbreviations used in IANA registries are updated in this document (Section 1.2.2).¶ 1.2.1. Terminology Used in This Document Terms related to IANA registries are used as follows in this document:¶ Namespace A namespace is a top-level registry. An example could be \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" [IANA-LSP-PING]. A namespace is most often a container for registries that hold code points that share some affinity.¶ Registry An IANA registry holds code points and lists the registration procedures and allocation for these code points. One example would be the \"TLVs\" registry [IANA-TLV-reg].¶ Subregistry A subregistry is used when a code point, or a set of code points allocated in a single registry, needs \"sub-code-points\" scoped by the code point or the set of code points. An example of a subregistry that holds code points for more than one TLV is \"Sub-TLVs for TLV Types 1, 16, and 21\" [IANA-Sub-1-16-21].¶ 1.2.2. Abbreviations This section lists abbreviations used in the unchanged part of the registries updated by this document. These abbreviations were originally expanded in the document defining the registries. They are listed here following the requirement to expand any abbreviation that is not well known. All these abbreviations are from the \"Return Codes\" registry [IANA-RC].¶ BFD: Bidirectional Forwarding Detection¶ DDMAP: Downstream Detailed Mapping¶ FEC: Forwarding Equivalence Class¶ OAM: Operation, Administration, and Maintenance¶ PM: Performance Monitoring¶ RSC: Return Subcode¶ 2. Updating the Message Types, Reply Modes, and Return Codes Registries The following changes have been made to the \"Message Types\" [IANA-MT], \"Reply Modes\" [IANA-RM], and \"Return Codes\" [IANA-RC] registries.¶ In the listing of assigned code points, the term \"Vendor Private Use\" is changed to \"Private Use\" for the 252-255 range. The registration procedures have been updated to reflect this.¶ The registration procedure \"Specification Required\" is changed to \"RFC Required\" and the note \"Experimental RFC needed\" is removed for the 192-247 range.¶ A small set of four code points (248-251) for Experimental Use is added by reducing the \"RFC Required\" range. The registration procedures have been updated to reflect this.¶ A note \"Reserved, not to be assigned\" has been added for the registration procedures of the \"Private Use\" and \"Experimental Use\" ranges.¶ In the lists that capture the assignment status, the fields that are reserved, i.e., 0 (zero), Private Use, and Experimental Use, are clearly marked as such.¶ Note that in the \"Return Codes\" registry [IANA-RC], the code point \"0\" has already been assigned. This assignment is not changed, and in this registry, the code point \"0\" continues to be assigned as \"No Return Code\".¶ The new registration procedures, the registry layouts, and the new assignments for these registries are found in Section 6.1.¶ 3. Updating the TLV and Sub-TLV Registries 3.1. General Principles for the LSP Ping TLV and Sub-TLV Registries The following principles apply to the processing of any TLV from any of the LSP Ping TLV and sub-TLV IANA registries.¶ All TLVs and sub-TLVs with a type in the range 0-32767 require a response if they are not recognized.¶ All TLVs and sub-TLVs in the range 32768-65535 can be silently dropped if they are not recognized. Alternatively, the receiver may step over the unrecognized TLV or send an error message.¶ Each of the blocks has code point spaces with the following registration procedures:¶ Standards Action¶ RFC Required¶ Experimental Use¶ First Come First Served (FCFS)¶ The exact definitions of these procedures are found in [RFC8126].¶ 3.1.1. Unrecognized Experimental Use TLVs and Sub-TLVs Unrecognized TLVs and sub-TLVs in the Experimental Use and FCFS ranges are handled as any other unrecognized TLV or sub-TLV.¶ If the unrecognized TLV or sub-TLV is from the Experimental Use range (31740-31743) or from the FCFS range (31744-32767), a Return Code of 2 (\"One or more of the TLVs was not understood\") must be sent in the echo response.¶ If a TLV or sub-TLV from the Experimental Use range (64508-64511) or from the FCFS range (64512-65535) is unrecognized, then the receiver can silently drop the TLV. Alternatively, the receiver may step over the unrecognized TLV or send an error message.¶ The IETF does not prescribe how recognized or unrecognized Experimental Use and Private Use TLVs and sub-TLVs are handled in experimental or private networks; that is up to the agency running the experimental or the private network. The statement above describes how standards-compliant implementations must treat the unrecognized TLVs and sub-TLVs from these ranges.¶ 3.2. Common Registration Procedures for TLVs and Sub-TLVs This section describes the new registration procedures for the TLV and sub-TLV registries.¶ Table 1: TLV and Sub-TLV Registration Procedures Range Registration Procedures Note 0-16383 Standards Action This range is for TLVs and sub-TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for TLVs and sub-TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for TLVs and sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for TLVs and sub-TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for TLVs and sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for TLVs and sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for TLVs and sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for TLVs and sub-TLVs that can be silently dropped if not recognized. 3.3. Changes to the LSP Ping Registries This section lists the changes to each MPLS LSP Ping TLV and sub-TLV registry. Sections 6.2.1 to 6.2.7 describe how the new versions of the IANA registries should look, together with the registration procedures for each registry.¶ The new registration procedure descriptions and the new assignments for these registries are used to model the changed MPLS LSP Ping registries; see Section 6.¶ 3.3.1. Changes Common to the TLV and Sub-TLV Registries The following changes are made to the TLV and sub-TLV registries.¶ The registration procedures \"First Come First Served\" (FCFS) and \"Experimental Use\" have been added to the table of registration procedures.¶ Two small sets of code points (four code points each) for Experimental Use have been created. The first set is for the range that requires a response if the TLV or sub-TLV is not recognized; the second set is for the range where the TLV or sub-TLV may be silently dropped if not recognized. The code points for Experimental Use have been taken from the ranges previously called \"Specification Required\" and \"RFC Required\" [RFC8029].¶ The registration procedure \"Specification Required\" has been changed to \"RFC Required\", and the note \"Experimental RFC needed\" has been removed.¶ In the listing of assignments, the term \"Vendor Private Use\" has been changed to \"First Come First Served\" (FCFS).¶ In the listing of assignments, the range for \"Experimental Use\" has been added.¶ A note saying \"Not to be assigned\" has been added for the registration procedure \"Experimental Use\".¶ In the list that captures assignment status, the fields that are reserved, i.e., 0 (zero) and Experimental Use, have been clearly marked.¶ 4. Updates to Related RFCs Some referenced RFCs use the concept \"mandatory TLVs\" and \"mandatory sub-TLVs\" to indicate that, if a TLV or sub-TLV of the range 0-32767 in a message is not understood, an error message needs to be sent in response.¶ The same RFCs use \"optional TLVs\" and \"optional sub-TLVs\" to mean TLVs or sub-TLVs that can be silently ignored if not recognized.¶ Since other RFCs use \"mandatory TLVs\" and \"mandatory sub-TLVs\" to indicate TLVs and sub-TLVs that must be present in a message, we want to discontinue the use of \"mandatory\" to indicate TLVs and sub-TLVs that require an error message in response if not understood. The changes to the RFCs below align with this practice.¶ 4.1. Updates to RFC 8029 \"Mandatory\" and \"optional\" are used to indicate whether a response is needed if a TLV or sub-TLV is not understood in Section 3 of \"Detecting Multiprotocol Label Switched (MPLS) Data-Plane Failures\" [RFC8611].¶ The text in those two paragraphs is now updated to the following:¶ TLV and sub-TLV types less than 32768 (i.e., with the high-order bit equal to 0) are TLVs and sub-TLVs that MUST either be supported by an implementation or result in a Return Code of 2 (\"One or more of the TLVs was not understood\") being sent in the echo response.¶ An implementation that does not understand or support a received TLV or sub-TLV with a type greater than or equal to 32768 (i.e., with the high-order bit equal to 1) SHOULD ignore and step over the TLV or sub-TLV; however, an implementation MAY send an echo response with a Return Code of 2 (\"One or more of the TLVs was not understood\") as it would have done if the high-order bit had been clear.¶ In Section 3.8 of [RFC8029], \"mandatory\" is used in the same way. The first two paragraphs of this section are now updated to read as follows:¶ The following TLV is a TLV that MAY be included in an echo reply to inform the sender of an echo request that includes TLV or sub-TLV Types less than 32768 (i.e., with the high-order bit equal to 0) that are either not supported by the implementation or parsed and found to be in error.¶ The Value field uses sub-TLVs to encode the received TLVs and sub-TLVs that were not understood.¶ 4.2. Updates to RFC 8611 Section 13.4.1 of \"Label Switched Path (LSP) Ping and Traceroute Multipath Support for Link Aggregation Group (LAG) Interfaces\" [RFC8611] defines \"Sub-TLVs for TLV Type 6\" [IANA-Sub-6].¶ The \"Sub-TLVs for TLV Type 6\" registry has been updated to align with changes defined in this document.¶ Section 13.4.1 of [RFC8611] is now updated as follows:¶ Section 13.4.1 Sub-TLVs for TLV Type 6¶ IANA has created a new subregistry, \"Sub-TLVs for TLV Type 6\", [IANA-Sub-6] under the \"TLVs\" registry [IANA-TLV-reg] of the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace [lsp-ping-Namespace].¶ The \"Sub-TLVs for TLV Type 6\" subregistry is now updated to align with changes defined in this document.¶ Table 2: Sub-TLVs for TLV Type 6 Registration Procedures Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. 5. Security Considerations This document updates IANA registries. It also updates terminology used to define, and clarifies the terminology related to, the code points in the registries. The document does not change how the code points in the registries are used. This should not create any new threats.¶ However, the updated terminology and the clarifications improve security because it makes it more likely that implementations will be consistent and harder to attack.¶ 6. IANA Considerations IANA has updated the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace [IANA-LSP-PING] as described in this document.¶ See Section 1.2.1 of \"Terminology Used in This Document\" to see how \"namespace\", \"registry\", and \"subregistry\" are used in this document.¶ In other parts of this document, the commonality of the changes to the LSP Ping registries has been the focus. For the IANA Considerations, each changed registry has been described in its own right.¶ The following registries and subregistries have been changed:¶ \"Message Types\", [IANA-MT]¶ \"Reply Modes\", [IANA-RM]¶ \"Return Codes\", [IANA-RC]¶ \"TLVs\", [IANA-TLV-reg]¶ \"Sub-TLVs for TLV Types 1, 16, and 21\", [IANA-Sub-1-16-21]¶ \"Sub-TLVs for TLV Type 6\", [IANA-Sub-6]¶ \"Sub-TLVs for TLV Type 11\", [IANA-Sub-11]¶ \"Sub-TLVs for TLV Type 20\", [IANA-Sub-20]¶ \"Sub-TLVs for TLV Type 23\", [IANA-Sub-23]¶ \"Sub-TLVs for TLV Type 27\", [IANA-Sub-27]¶ This document has been listed as an additional reference for each of the registries described in Sections 6.1 and 6.2.¶ 6.1. Updates by IANA to the Message Types, Reply Modes, and Return Codes Registries This section details the updated registration procedures and allocations for the \"Message Types\", \"Reply Modes\", and \"Return Codes\" registries.¶ 6.1.1. Updates to the Message Types Registry These are the changes to the \"Message Types\" registry specified in this document:¶ Code Point 0 (zero) has been marked Reserved.¶ The registration procedure \"Specification Required\" has been changed to \"RFC Required\", and the comment \"Experimental RFC needed\" has been removed.¶ Four code points have been taken from what was previously \"Specification Required\" to form a set of code points for \"Experimental Use\".¶ The registration procedures after the changes listed above for the \"Message Types\" registry are shown in the table below:¶ Table 3: Message Types Registration Procedures Range Registration Procedures Note 0-191 Standards Action 192-247 RFC Required 248-251 Experimental Use Reserved, not to be assigned 252-255 Private Use Reserved, not to be assigned The updated assignments for the \"Message Types\" registry appear as follows:¶ Table 4: Assignments for the Message Types Registry Value Meaning Reference 0 Reserved This document 1 MPLS Echo Request [RFC8029] 2 MPLS Echo Reply [RFC8029] 3 MPLS Proxy Ping Request [RFC7555] 4 MPLS Proxy Ping Reply [RFC7555] 5 MPLS Relayed Echo Reply [RFC7743] 6-247 Unassigned 248-251 Reserved for Experimental Use This document 252-255 Reserved for Private Use [RFC8029] 6.1.2. Updates to the Reply Modes Registry These are the changes to the \"Reply Modes\" registry specified in this document:¶ Code Point 0 (zero) has been marked Reserved.¶ The registration procedure \"Specification Required\" has been changed to \"RFC Required\", and the comment \"Experimental RFC needed\" has been removed.¶ Four code points have been taken from what was previously \"Specification Required\" to form a set of code points for \"Experimental Use\".¶ The registration procedures after the changes for the \"Reply Modes\" registry are shown in the table below:¶ Table 5: Reply Modes Registration Procedures Range Registration Procedures Note 0-191 Standards Action 192-247 RFC Required 248-251 Experimental Use Reserved, not to be assigned 252-255 Private Use Reserved, not to be assigned The updated assignments for the \"Reply Modes\" registry are as follows:¶ Table 6: Assignments for the Reply Modes Registry Value Meaning Reference 0 Reserved This document 1 Do not reply [RFC8029] 2 Reply via an IPv4/IPv6 UDP packet [RFC8029] 3 Reply via an IPv4/IPv6 UDP packet with Router Alert [RFC8029] 4 Reply via application-level control channel [RFC8029] 5 Reply via Specified Path [RFC7110] 6-247 Unassigned 248-251 Reserved for Experimental Use This document 252-255 Reserved for Private Use [RFC8029] 6.1.3. Updates to the Return Codes Registry These are the changes to the \"Return Codes\" registry specified in this document:¶ The registration procedure \"Specification Required\" has been changed to \"RFC Required\", and the comment \"Experimental RFC needed\" has been removed.¶ Four code points have been taken from what was previously \"Specification Required\" to form a set of code points for \"Experimental Use\".¶ The registration procedures after the changes for the \"Return Codes\" registry are shown in the table below:¶ Table 7: Return Codes Registration Procedures Range Registration Procedures Note 0-191 Standards Action 192-247 RFC Required 248-251 Experimental Use Reserved, not to be assigned 252-255 Private Use Reserved, not to be assigned The updated assignments for the \"Return Codes\" registry are as follows:¶ Table 8: Assignments for the Return Codes Registry Value Meaning Reference 0 No Return Code [RFC8029] 1 Malformed echo request received [RFC8029] 2 One or more of the TLVs was not understood [RFC8029] 3 Replying router is an egress for the FEC at stack-depth <RSC> [RFC8029] 4 Replying router has no mapping for the FEC at stack-depth <RSC> [RFC8029] 5 Downstream Mapping Mismatch (See [1]) [RFC8029] 6 Upstream Interface Index Unknown (See [1]) [RFC8029] 7 Reserved [RFC8029] 8 Label switched at stack-depth <RSC> [RFC8029] 9 Label switched but no MPLS forwarding at stack-depth <RSC> [RFC8029] 10 Mapping for this FEC is not the given label at stack-depth <RSC> [RFC8029] 11 No label entry at stack-depth <RSC> [RFC8029] 12 Protocol not associated with interface at FEC stack-depth <RSC> [RFC8029] 13 Premature termination of ping due to label stack shrinking to a single label [RFC8029] 14 See DDMAP TLV for meaning of Return Code and Return Subcode (See [2]) [RFC8029] 15 Label switched with FEC change [RFC8029] 16 Proxy Ping not authorized [RFC7555] 17 Proxy Ping parameters need to be modified [RFC7555] 18 MPLS Echo Request could not be sent [RFC7555] 19 Replying router has FEC mapping for topmost FEC [RFC7555] 20 One or more TLVs not returned due to MTU size [RFC7743] 21 OAM Problem/Unsupported BFD Version [RFC7759] 22 OAM Problem/Unsupported BFD Encapsulation format [RFC7759] 23 OAM Problem/Unsupported BFD Authentication Type [RFC7759] 24 OAM Problem/Mismatch of BFD Authentication Key ID [RFC7759] 25 OAM Problem/Unsupported Timestamp Format [RFC7759] 26 OAM Problem/Unsupported Delay Mode [RFC7759] 27 OAM Problem/Unsupported Loss Mode [RFC7759] 28 OAM Problem/Delay variation unsupported [RFC7759] 29 OAM Problem/Dyadic mode unsupported [RFC7759] 30 OAM Problem/Loopback mode unsupported [RFC7759] 31 OAM Problem/Combined mode unsupported [RFC7759] 32 OAM Problem/Fault management signaling unsupported [RFC7759] 33 OAM Problem/Unable to create fault management association [RFC7759] 34 OAM Problem/PM Configuration Error [RFC7759] 35 Mapping for this FEC is not associated with the incoming interface [RFC8287], Section 7.4 36-247 Unassigned 248-251 Reserved for Experimental Use This document 252-255 Reserved for Private Use [RFC8029] Note 1: Notes [1] and [2] for code points 5, 6, and 14 point to footnotes in the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace. The footnotes are not changed by this document.¶ Note 2: <RSC> stands for \"Return Subcode\" and is explained in Section 3.1 of [RFC8029].¶ 6.2. Updates to the TLV and Sub-TLV Registries The updates to the TLV and the sub-TLV registries are mostly the same; however, the \"Sub-TLVs for TLV Type 9\" [IANA-Sub-9] registry has not been updated.¶ Note that when a field in an assignment table says \"EQ\", it means that there is no change from the existing field in the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace [IANA-LSP-PING].¶ 6.2.1. Updates to the TLVs Registry This section describes the new registration procedures and the assignments for the \"TLVs\" registry [IANA-TLV-reg] that are based on them.¶ The registration procedures have been changed, as follows, for the \"TLVs\" registry.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\". The comment \"Experimental RFC Required\" has been removed. Note that when a field in an assignment table says \"EQ\", it means that there is no change from the existing field in the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace [IANA-LSP-PING].¶ [RFC8611] was published after [RFC8126] and uses the new terminology, e.g., \"Private Use\". The code points registration procedure \"Private Use\" has been replaced by the \"First Come First Served\" code point registration procedure.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a TLV is not recognized.¶ The registration procedures for the \"TLVs\" registry [IANA-TLV-reg] after the changes listed above are shown in the table below:¶ Table 9: TLVs Registration Procedures Range Registration Procedures Note 0-16383 Standards Action This range is for TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for TLVs that can be silently dropped if not recognized. The updated assignments for this registry appear as follows:¶ Note that when a field in an assignment table says \"EQ\", it means that there was no change from the existing field in the \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\" namespace [IANA-LSP-PING].¶ Table 10: TLV Assignments Type TLV Name Reference Sub-TLV Registry 0 Reserved This document 1-7 EQ EQ EQ 8 Unassigned 9-16 EQ EQ EQ 17-19 Unassigned 20-27 EQ EQ EQ 28-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 Unassigned 32768-32770 EQ EQ EQ 32771-64507 EQ EQ EQ 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.2. Updates to the Registry for Sub-TLVs for TLV Types 1, 16, and 21 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Types 1, 16, and 21\" [IANA-Sub-1-16-21] subregistry that are based on them.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\", and the comment \"Experimental RFC Required\" has been removed.¶ The code points registration procedure \"Vendor Private Use\" has been removed and replaced with \"First Come First Served\" procedure.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Types 1, 16, and 21\" [IANA-Sub-1-16-21] subregistry appear as follows after the changes listed above:¶ Table 11: Registration Procedures for Sub-TLVs for TLV Types 1, 16, and 21 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 12: Sub-TLV for TLVs 1, 16, and 21 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved This document 1-4 EQ EQ EQ 5 Unassigned 6-8 EQ EQ EQ 9 EQ EQ DEPRECATED 10-20 EQ EQ EQ 21 Unassigned 22-37 EQ EQ EQ 38 PeerAdj SID Sub-TLV [draft-ietf-mpls-sr-epe-oam-03] TEMPORARY - registered 2021-05-11, expires 2022-05-11 39 PeerNode SID Sub-TLV [draft-ietf-mpls-sr-epe-oam-03] TEMPORARY - registered 2021-05-11, expires 2022-05-11 40 PeerSet SID Sub-TLV [draft-ietf-mpls-sr-epe-oam-03] TEMPORARY - registered 2021-05-11, expires 2022-05-11 41-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.3. Updates to the Registry for Sub-TLVs for TLV Type 6 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Type 6\" [IANA-Sub-6] subregistry that are based on them.¶ [RFC8611] was published after [RFC8126] and uses the new terminology, e.g., \"Private Use\". The code points registration procedure \"Private Use\" has been replaced by the \"First Come First Served\" code point registration procedure.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Type 6\" [IANA-Sub-6] subregistry after the changes listed above are shown in the table below:¶ Table 13: Registration Procedures for Sub-TLVs for TLV Type 6 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 14: Sub-TLVs for TLV Type 6 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved This document, [RFC8611] 1-2 EQ EQ EQ 3-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.4. Updates to the Registry for Sub-TLVs for TLV Type 11 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Type 11\" [IANA-Sub-11] subregistry that are based on them.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\", and the comment \"Experimental RFC Required\" has been removed.¶ The code points registration procedure \"Vendor Private Use\" has been removed and replaced with \"First Come First Served\" code points.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Type 11\" [IANA-Sub-11] subregistry after the changes listed above are shown in the table below:¶ Table 15: Registration Procedures for Sub-TLVs for TLV Type 11 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 16: Sub-TLVs for TLV Type 11 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved This document 1-4 EQ EQ EQ 5-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.5. Updates to the Registry for Sub-TLVs for TLV Type 20 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Type 20\" [IANA-Sub-20] subregistry that are based on them.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\", and the comment \"Experimental RFC Required\" has been removed.¶ The code points registration procedure \"Vendor Private Use\" has been removed and replaced with \"First Come First Served\" code points.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Type 20\" [IANA-Sub-20] subregistry after the changes listed above are shown in the table below:¶ Table 17: Registration Procedures for Sub-TLVs for TLV Type 20 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 18: Sub-TLVs for TLV Type 20 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved This document 1-5 EQ EQ EQ 6-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.6. Updates to the Registry for Sub-TLVs for TLV Type 23 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Type 23\" [IANA-Sub-23] subregistry that are based on them.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\", and the comment \"Experimental RFC Required\" has been removed.¶ The code points registration procedure \"Vendor Private Use\" has been removed and replaced with \"First Come First Served\" code points.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Type 23\" [IANA-Sub-23] subregistry after the changes listed above are shown in the table below:¶ Table 19: Registration Procedures for Sub-TLVs for TLV Type 23 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 20: Sub-TLVs for TLV Type 23 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved [RFC7555] 1 EQ EQ EQ 2-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 6.2.7. Updates to the Registry for Sub-TLVs for TLV Type 27 This section describes the new registration procedures and the assignments for the \"Sub-TLVs for TLV Type 27\" [IANA-Sub-27] subregistry that are based on them.¶ The \"Specification Required\" registration procedure has been changed to \"RFC Required\", and the comment \"Experimental RFC Required\" has been removed.¶ The code points registration procedure \"Vendor Private Use\" has been removed and replaced with \"First Come First Served\" code points.¶ Two small sets, four code points each, have been created for Experimental Use.¶ Code points that are reserved are clearly marked as such.¶ The assignments have been updated to match the new registration procedures.¶ The notes related to the registration procedures have been changed to reflect whether or not a response is required if a sub-TLV is not recognized.¶ The registration procedures for the \"Sub-TLVs for TLV Type 27\" [IANA-Sub-27] subregistry after the changes listed above are shown in the table below:¶ Table 21: Registration Procedures for Sub-TLVs for TLV Type 27 Range Registration Procedures Note 0-16383 Standards Action This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 16384-31739 RFC Required This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31740-31743 Reserved for Experimental Use Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-32767 FCFS This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 32768-49161 Standards Action This range is for sub-TLVs that can be silently dropped if not recognized. 49162-64507 RFC Required This range is for sub-TLVs that can be silently dropped if not recognized. 64508-64511 Experimental Use Reserved, not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 FCFS This range is for sub-TLVs that can be silently dropped if not recognized. Table 22: Sub-TLVs for TLV Type 27 Assignments Sub-Type Sub-TLV Name Reference Comment 0 Reserved [RFC7759] 1-99 Unassigned 100-104 EQ EQ EQ 105-199 Unassigned 200-202 EQ EQ EQ 203-299 Unassigned 300 EQ EQ EQ 301-399 Unassigned 400 EQ EQ EQ 401-31739 Unassigned 31740-31743 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that require an error message if not recognized. This document, Section 3.1] 31744-64507 Unassigned 64508-64511 Reserved for Experimental Use This document Not to be assigned. This range is for sub-TLVs that can be silently dropped if not recognized. 64512-65535 Unassigned 7. References 7.1. Normative References [IANA-LSP-PING] IANA, \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters>. [IANA-MT] IANA, \"Message Types\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-RC] IANA, \"Return Codes\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-RM] IANA, \"Reply Modes\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-1-16-21] IANA, \"Sub-TLVs for TLV Types 1, 16, and 21\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-11] IANA, \"Sub-TLVs for TLV Type 11\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-20] IANA, \"Sub-TLVs for TLV Type 20\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-23] IANA, \"Sub-TLVs for TLV Type 23\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-27] IANA, \"Sub-TLVs for TLV Type 27\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-Sub-6] IANA, \"Sub-TLVs for TLV Type 6\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [IANA-TLV-reg] IANA, \"TLVs\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC8029] Kompella, K., Swallow, G., Pignataro, C., Ed., Kumar, N., Aldrin, S., and M. Chen, \"Detecting Multiprotocol Label Switched (MPLS) Data-Plane Failures\", RFC 8029, DOI 10.17487/RFC8029, March 2017, <https://www.rfc-editor.org/info/rfc8029>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8611] Akiya, N., Swallow, G., Litkowski, S., Decraene, B., Drake, J., and M. Chen, \"Label Switched Path (LSP) Ping and Traceroute Multipath Support for Link Aggregation Group (LAG) Interfaces\", RFC 8611, DOI 10.17487/RFC8611, June 2019, <https://www.rfc-editor.org/info/rfc8611>. 7.2. Informative References [IANA-Sub-9] IANA, \"Sub-TLVs for TLV Type 9\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [lsp-ping-Namespace] IANA, \"Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs) Ping Parameters\", <https://www.iana.org/assignments/mpls-lsp-ping-parameters/>. [RFC7110] Chen, M., Cao, W., Ning, S., Jounay, F., and S. Delord, \"Return Path Specified Label Switched Path (LSP) Ping\", RFC 7110, DOI 10.17487/RFC7110, January 2014, <https://www.rfc-editor.org/info/rfc7110>. [RFC7555] Swallow, G., Lim, V., and S. Aldrin, \"Proxy MPLS Echo Request\", RFC 7555, DOI 10.17487/RFC7555, June 2015, <https://www.rfc-editor.org/info/rfc7555>. [RFC7743] Luo, J., Ed., Jin, L., Ed., Nadeau, T., Ed., and G. Swallow, Ed., \"Relayed Echo Reply Mechanism for Label Switched Path (LSP) Ping\", RFC 7743, DOI 10.17487/RFC7743, January 2016, <https://www.rfc-editor.org/info/rfc7743>. [RFC7759] Bellagamba, E., Mirsky, G., Andersson, L., Skoldstrom, P., Ward, D., and J. Drake, \"Configuration of Proactive Operations, Administration, and Maintenance (OAM) Functions for MPLS-Based Transport Networks Using Label Switched Path (LSP) Ping\", RFC 7759, DOI 10.17487/RFC7759, February 2016, <https://www.rfc-editor.org/info/rfc7759>. [RFC8287] Kumar, N., Ed., Pignataro, C., Ed., Swallow, G., Akiya, N., Kini, S., and M. Chen, \"Label Switched Path (LSP) Ping/Traceroute for Segment Routing (SR) IGP-Prefix and IGP-Adjacency Segment Identifiers (SIDs) with MPLS Data Planes\", RFC 8287, DOI 10.17487/RFC8287, December 2017, <https://www.rfc-editor.org/info/rfc8287>. Acknowledgements The authors wish to thank Adrian Farrel, who both made very useful comments and agreed to serve as the Document Shepherd.¶ The authors also wish to thank Michelle Cotton and Amanda Baber, who very patiently worked with us to determine how our registries could and should be updated.¶ The authors thank Donald Eastlake 3rd and Tom Petch for their careful and detailed review.¶ Authors' Addresses Loa Andersson Bronze Dragon Consulting Email: loa@pi.nu Mach(Guoyi) Chen Huawei Technologies Email: mach.chen@huawei.com Carlos Pignataro Cisco Systems Email: cpignata@cisco.com Tarek Saad Juniper Networks Email: tsaad@juniper.net"
    },
    {
        "Number": "9045",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Algorithm Requirements Update to the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)",
        "Authors": [
            "R. Housley"
        ],
        "Date": "2021-06",
        "More Info": "Updates RFC 4211",
        "Status": "Proposed Standard",
        "Abstract": "This document updates the cryptographic algorithm requirements for the Password-Based Message Authentication Code in the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF) specified in RFC 4211.",
        "Keywords": [
            "Authentication",
            "Message Authentication Code",
            "Password-Based Message Authentication Code"
        ],
        "Content": "RFC 9045: Algorithm Requirements Update to the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF) RFC 9045 CRMF Algorithm Requirements Update June 2021 Housley Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9045 Updates: 4211 Category: Standards Track Published: June 2021 ISSN: 2070-1721 Author: R. Housley Vigil Security RFC 9045 Algorithm Requirements Update to the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF) Abstract This document updates the cryptographic algorithm requirements for the Password-Based Message Authentication Code in the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF) specified in RFC 4211.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9045.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ This document may contain material from IETF Documents or IETF Contributions published or made publicly available before November 10, 2008. The person(s) controlling the copyright in some of this material may not have granted the IETF Trust the right to allow modifications of such material outside the IETF Standards Process. Without obtaining an adequate license from the person(s) controlling the copyright in such materials, this document may not be modified outside the IETF Standards Process, and derivative works of it may not be created outside the IETF Standards Process, except to format it for publication as an RFC or to translate it into languages other than English.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 3.  Signature Key POP 4.  Password-Based Message Authentication Code 4.1.  Introduction Paragraph 4.2.  One-Way Function 4.3.  Iteration Count 4.4.  MAC Algorithm 5.  IANA Considerations 6.  Security Considerations 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgements Author's Address 1. Introduction This document updates the cryptographic algorithm requirements for the Password-Based Message Authentication Code (MAC) in the Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF) [RFC4211]. The algorithms specified in [RFC4211] were appropriate in 2005; however, these algorithms are no longer considered the best choices:¶ HMAC-SHA1 [HMAC] [SHS] is not broken yet, but there are much stronger alternatives [RFC6194].¶ DES-MAC [PKCS11] provides 56 bits of security, which is no longer considered secure [WITHDRAW].¶ Triple-DES-MAC [PKCS11] provides 112 bits of security, which is now deprecated [TRANSIT].¶ This update specifies algorithms that are more appropriate today.¶ CRMF is defined using Abstract Syntax Notation One (ASN.1) [X680].¶ 2. Terminology The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Signature Key POP Section 4.1 of [RFC4211] specifies the proof-of-possession (POP) processing. This section is updated to explicitly allow the use of the PBMAC1 algorithm presented in Section 7.1 of [RFC8018].¶ OLD:¶ algId identifies the algorithm used to compute the MAC value. All implementations MUST support id-PasswordBasedMAC. The details on this algorithm are presented in section 4.4.¶ NEW:¶ algId identifies the algorithm used to compute the MAC value. All implementations MUST support id-PasswordBasedMAC as presented in Section 4.4 of [RFC4211]. Implementations MAY also support PBMAC1 as presented in Section 7.1 of [RFC8018].¶ 4. Password-Based Message Authentication Code Section 4.4 of [RFC4211] specifies a Password-Based MAC that relies on a one-way function to compute a symmetric key from the password and a MAC algorithm. This section specifies algorithm requirements for the one-way function and the MAC algorithm.¶ 4.1. Introduction Paragraph Add guidance about limiting the use of the password as follows:¶ OLD:¶ This MAC algorithm was designed to take a shared secret (a password) and use it to compute a check value over a piece of information. The assumption is that, without the password, the correct check value cannot be computed. The algorithm computes the one-way function multiple times in order to slow down any dictionary attacks against the password value.¶ NEW:¶ This MAC algorithm was designed to take a shared secret (a password) and use it to compute a check value over a piece of information. The assumption is that, without the password, the correct check value cannot be computed. The algorithm computes the one-way function multiple times in order to slow down any dictionary attacks against the password value. The password used to compute this MAC SHOULD NOT be used for any other purpose.¶ 4.2. One-Way Function Change the paragraph describing the \"owf\" as follows:¶ OLD:¶ owf identifies the algorithm and associated parameters used to compute the key used in the MAC process. All implementations MUST support SHA-1.¶ NEW:¶ owf identifies the algorithm and associated parameters used to compute the key used in the MAC process. All implementations MUST support SHA-256 [SHS].¶ 4.3. Iteration Count Update the guidance on appropriate iteration count values as follows:¶ OLD:¶ iterationCount identifies the number of times the hash is applied during the key computation process. The iterationCount MUST be a minimum of 100. Many people suggest using values as high as 1000 iterations as the minimum value. The trade off here is between protection of the password from attacks and the time spent by the server processing all of the different iterations in deriving passwords. Hashing is generally considered a cheap operation but this may not be true with all hash functions in the future.¶ NEW:¶ iterationCount identifies the number of times the hash is applied during the key computation process. The iterationCount MUST be a minimum of 100; however, the iterationCount SHOULD be as large as server performance will allow, typically at least 10,000 [DIGALM]. There is a trade-off between protection of the password from attacks and the time spent by the server processing the iterations. As part of that trade-off, an iteration count smaller than 10,000 can be used when automated generation produces shared secrets with high entropy.¶ 4.4. MAC Algorithm Change the paragraph describing the \"mac\" as follows:¶ OLD:¶ mac identifies the algorithm and associated parameters of the MAC function to be used. All implementations MUST support HMAC-SHA1 [HMAC]. All implementations SHOULD support DES-MAC and Triple-DES-MAC [PKCS11].¶ NEW:¶ mac identifies the algorithm and associated parameters of the MAC function to be used. All implementations MUST support HMAC-SHA256 [HMAC]. All implementations SHOULD support AES-GMAC [AES] [GMAC] with a 128-bit key.¶ For convenience, the identifiers for these two algorithms are repeated here.¶ The ASN.1 algorithm identifier for HMAC-SHA256 is defined in [RFC4231]:¶ id-hmacWithSHA256 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) rsadsi(113549) digestAlgorithm(2) 9 } ¶ When this object identifier is used in the ASN.1 algorithm identifier, the parameters SHOULD be present. When present, the parameters MUST contain a type of NULL as specified in [RFC4231].¶ The ASN.1 algorithm identifier for AES-GMAC [AES] [GMAC] with a 128-bit key is defined in [RFC9044]:¶ id-aes128-GMAC OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101) csor(3) nistAlgorithm(4) aes(1) 9 } ¶ When this object identifier is used in the ASN.1 algorithm identifier, the parameters MUST be present, and the parameters MUST contain the GMACParameters structure as follows:¶ GMACParameters ::= SEQUENCE { nonce OCTET STRING, length MACLength DEFAULT 12 } MACLength ::= INTEGER (12 | 13 | 14 | 15 | 16) ¶ The GMACParameters nonce parameter is the GMAC initialization vector. The nonce may have any number of bits between 8 and (2^64)-1, but it MUST be a multiple of 8 bits. Within the scope of any GMAC key, the nonce value MUST be unique. A nonce value of 12 octets can be processed more efficiently, so that length for the nonce value is RECOMMENDED.¶ The GMACParameters length parameter field tells the size of the message authentication code in octets. GMAC supports lengths between 12 and 16 octets, inclusive. However, for use with CRMF, the maximum length of 16 octets MUST be used.¶ 5. IANA Considerations This document has no IANA actions.¶ 6. Security Considerations The security of the Password-Based MAC relies on the number of times the hash function is applied as well as the entropy of the shared secret (the password). Hardware support for hash calculation is available at very low cost [PHS], which reduces the protection provided by a high iterationCount value. Therefore, the entropy of the password is crucial for the security of the Password-Based MAC function. In 2010, researchers showed that about half of the real-world passwords in a leaked corpus can be broken with less than 150 million trials, indicating a median entropy of only 27 bits [DMR]. Higher entropy can be achieved by using randomly generated strings. For example, assuming an alphabet of 60 characters, a randomly chosen password with 10 characters offers 59 bits of entropy, and 20 characters offers 118 bits of entropy. Using a one-time password also increases the security of the MAC, assuming that the integrity-protected transaction will complete before the attacker is able to learn the password with an offline attack.¶ Please see [RFC8018] for security considerations related to PBMAC1.¶ Please see [HMAC] and [SHS] for security considerations related to HMAC-SHA256.¶ Please see [AES] and [GMAC] for security considerations related to AES-GMAC.¶ Cryptographic algorithms age; they become weaker with time. As new cryptanalysis techniques are developed and computing capabilities improve, the work required to break a particular cryptographic algorithm will reduce, making an attack on the algorithm more feasible for more attackers. While it is unknown how cryptanalytic attacks will evolve, it is certain that they will get better. It is unknown how much better they will become or when the advances will happen. For this reason, the algorithm requirements for CRMF are updated by this specification.¶ When a Password-Based MAC is used, implementations must protect the password and the MAC key. Compromise of either the password or the MAC key may result in the ability of an attacker to undermine authentication.¶ 7. References 7.1. Normative References [AES] National Institute of Standards and Technology, \"Advanced Encryption Standard (AES)\", FIPS PUB 197, DOI 10.6028/NIST.FIPS.197, November 2001, <https://doi.org/10.6028/NIST.FIPS.197>. [GMAC] Dworkin, M., \"Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC\", NIST Special Publication 800-38D, DOI 10.6028/NIST.SP.800-38D, November 2007, <https://doi.org/10.6028/NIST.SP.800-38D>. [HMAC] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, DOI 10.17487/RFC2104, February 1997, <https://www.rfc-editor.org/info/rfc2104>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4211] Schaad, J., \"Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)\", RFC 4211, DOI 10.17487/RFC4211, September 2005, <https://www.rfc-editor.org/info/rfc4211>. [RFC8018] Moriarty, K., Ed., Kaliski, B., and A. Rusch, \"PKCS #5: Password-Based Cryptography Specification Version 2.1\", RFC 8018, DOI 10.17487/RFC8018, January 2017, <https://www.rfc-editor.org/info/rfc8018>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC9044] Housley, R., \"Using the AES-GMAC Algorithm with the Cryptographic Message Syntax (CMS)\", RFC 9044, DOI 10.17487/RFC9044, May 2021, <https://www.rfc-editor.org/info/rfc9044>. [SHS] National Institute of Standards and Technology, \"Secure Hash Standard (SHS)\", FIPS PUB 180-4, DOI 10.6028/NIST.FIPS.180-4, August 2015, <https://doi.org/10.6028/NIST.FIPS.180-4>. [X680] ITU-T, \"Information technology -- Abstract Syntax Notation One (ASN.1): Specification of basic notation\", ITU-T Recommendation X.680, August 2015. 7.2. Informative References [DIGALM] National Institute of Standards and Technology, \"Digital Identity Guidelines: Authentication and Lifecycle Management\", NIST Special Publication 800-63B, DOI 10.6028/NIST.SP.800-63B, June 2017, <https://doi.org/10.6028/NIST.SP.800-63B>. [DMR] Dell'Amico, M., Michiardi, P., and Y. Roudier, \"Password Strength: An Empirical Analysis\", DOI 10.1109/INFCOM.2010.5461951, March 2010, <https://doi.org/10.1109/INFCOM.2010.5461951>. [PHS] Pathirana, A., Halgamuge, M., and A. Syed, \"Energy Efficient Bitcoin Mining to Maximize the Mining Profit: Using Data from 119 Bitcoin Mining Hardware Setups\", International Conference on Advances in Business Management and Information Technology, pp. 1-14, November 2019. [PKCS11] RSA Laboratories, \"PKCS #11 v2.11: Cryptographic Token Interface Standard\", November 2001. [RFC4231] Nystrom, M., \"Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512\", RFC 4231, DOI 10.17487/RFC4231, December 2005, <https://www.rfc-editor.org/info/rfc4231>. [RFC6194] Polk, T., Chen, L., Turner, S., and P. Hoffman, \"Security Considerations for the SHA-0 and SHA-1 Message-Digest Algorithms\", RFC 6194, DOI 10.17487/RFC6194, March 2011, <https://www.rfc-editor.org/info/rfc6194>. [TRANSIT] National Institute of Standards and Technology, \"Transitioning the Use of Cryptographic Algorithms and Key Lengths\", NIST Special Publication 800-131Ar2, DOI 10.6028/NIST.SP.800-131Ar2, March 2019, <https://doi.org/10.6028/NIST.SP.800-131Ar2>. [WITHDRAW] National Institute of Standards and Technology, \"NIST Withdraws Outdated Data Encryption Standard\", June 2005, <https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard>. Acknowledgements Many thanks to Hans Aschauer, Hendrik Brockhaus, Quynh Dang, Roman Danyliw, Lars Eggert, Tomas Gustavsson, Jonathan Hammell, Tim Hollebeek, Ben Kaduk, Erik Kline, Lijun Liao, Mike Ounsworth, Francesca Palombini, Tim Polk, Ines Robles, Mike StJohns, and Sean Turner for their careful review and improvements.¶ Author's Address Russ Housley Vigil Security, LLC 516 Dranesville Road Herndon, VA 20170 United States of America Email: housley@vigilsec.com"
    },
    {
        "Number": "9046",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Babel Information Model",
        "Authors": [
            "B. Stark",
            "M. Jethanandani"
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "The Babel information model provides structured data elements for a Babel implementation reporting its current state and may allow limited configuration of some such data elements. This information model can be used as a basis for creating data models under various data modeling regimes. This information model only includes parameters and parameter values useful for managing Babel over IPv6.",
        "Keywords": [
            "Babel"
        ],
        "Content": "RFC 9046: Babel Information Model RFC 9046 Babel Information Model June 2021 Stark & Jethanandani Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9046 Category: Informational Published: June 2021 ISSN: 2070-1721 Authors: B. Stark AT&T M. Jethanandani Kloud Services RFC 9046 Babel Information Model Abstract The Babel information model provides structured data elements for a Babel implementation reporting its current state and may allow limited configuration of some such data elements. This information model can be used as a basis for creating data models under various data modeling regimes. This information model only includes parameters and parameter values useful for managing Babel over IPv6.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9046.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 1.1.  Requirements Language 1.2.  Notation 2.  Overview 3.  The Information Model 3.1.  Definition of babel-information-obj 3.2.  Definition of babel-constants-obj 3.3.  Definition of babel-interface-obj 3.4.  Definition of babel-if-stats-obj 3.5.  Definition of babel-neighbor-obj 3.6.  Definition of babel-route-obj 3.7.  Definition of babel-mac-key-set-obj 3.8.  Definition of babel-mac-key-obj 3.9.  Definition of babel-dtls-cert-set-obj 3.10. Definition of babel-dtls-cert-obj 4.  Extending the Information Model 5.  Security Considerations 6.  IANA Considerations 7.  References 7.1.  Normative References 7.2.  Informative References Acknowledgements Authors' Addresses 1. Introduction Babel is a loop-avoiding, distance-vector routing protocol defined in [RFC8966]. [RFC8967] defines a security mechanism that allows Babel packets to be cryptographically authenticated, and [RFC8968] defines a security mechanism that allows Babel packets to be both authenticated and encrypted. This document describes an information model for Babel (including implementations using one or both of these security mechanisms) that can be used to create management protocol data models (such as a NETCONF [RFC6241] YANG [RFC7950] data model).¶ Due to the simplicity of the Babel protocol, most of the information model is focused on reporting the Babel protocol operational state, and very little of that is considered mandatory to implement for an implementation claiming compliance with this information model. Some parameters may be configurable. However, it is up to the Babel implementation whether to allow any of these to be configured within its implementation. Where the implementation does not allow configuration of these parameters, it MAY still choose to expose them as read-only.¶ The information model is presented using a hierarchical structure. This does not preclude a data model based on this information model from using a referential or other structure.¶ This information model only includes parameters and parameter values useful for managing Babel over IPv6. This model has no parameters or values specific to operating Babel over IPv4, even though [RFC8966] does define a multicast group for sending and listening to multicast announcements on IPv4. There is less likelihood of breakage due to inconsistent configuration and increased implementation simplicity if Babel is operated always and only over IPv6. Running Babel over IPv6 requires IPv6 at the link layer and does not need advertised prefixes, router advertisements, or DHCPv6 to be present in the network. Link-local IPv6 is widely supported among devices where Babel is expected to be used. Note that Babel over IPv6 can be used for configuration of both IPv4 and IPv6 routes.¶ 1.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 1.2. Notation This document uses a programming-language-like notation to define the properties of the objects of the information model. An optional property is enclosed by square brackets, [ ], and a list property is indicated by two numbers in angle brackets, <m..n>, where m indicates the minimal number of list elements, and n indicates the maximum number of list elements. The symbol \"*\" for n means there are no defined limits on the number of list elements. Each parameter and object includes an indication of \"ro\" or \"rw\". \"ro\" means the parameter or object is read-only. \"rw\" means it is read-write. For an object, read-write means instances of the object can be created or deleted. If an implementation is allowed to choose to implement a \"rw\" parameter as read-only, this is noted in the parameter description.¶ The object definitions use base types that are defined as follows:¶ binary: A binary string (sequence of octets).¶ boolean: A type representing a Boolean (true or false) value.¶ datetime: A type representing a date and time using the Gregorian calendar. The datetime format MUST conform to [RFC3339], Section 5.6.¶ ip-address: A type representing an IP address. This type supports both IPv4 and IPv6 addresses.¶ operation: A type representing a remote procedure call or other action that can be used to manipulate data elements or system behaviors.¶ reference: A type representing a reference to another information or data model element or to some other device resource.¶ string: A type representing a human-readable string consisting of a (possibly restricted) subset of Unicode and ISO/IEC 10646 [ISO.10646] characters.¶ uint: A type representing an unsigned integer number. This information model does not define a precision.¶ 2. Overview The information model is hierarchically structured as follows:¶ +-- babel-information +-- babel-implementation-version +-- babel-enable +-- router-id +-- self-seqno +-- babel-metric-comp-algorithms +-- babel-security-supported +-- babel-mac-algorithms +-- babel-dtls-cert-types +-- babel-stats-enable +-- babel-stats-reset +-- babel-constants | +-- babel-udp-port | +-- babel-mcast-group +-- babel-interfaces | +-- babel-interface-reference | +-- babel-interface-enable | +-- babel-interface-metric-algorithm | +-- babel-interface-split-horizon | +-- babel-mcast-hello-seqno | +-- babel-mcast-hello-interval | +-- babel-update-interval | +-- babel-mac-enable | +-- babel-if-mac-key-sets | +-- babel-mac-verify | +-- babel-dtls-enable | +-- babel-if-dtls-cert-sets | +-- babel-dtls-cached-info | +-- babel-dtls-cert-prefer | +-- babel-packet-log-enable | +-- babel-packet-log | +-- babel-if-stats | | +-- babel-sent-mcast-hello | | +-- babel-sent-mcast-update | | +-- babel-sent-ucast-hello | | +-- babel-sent-ucast-update | | +-- babel-sent-IHU | | +-- babel-received-packets | +-- babel-neighbors | +-- babel-neighbor-address | +-- babel-hello-mcast-history | +-- babel-hello-ucast-history | +-- babel-txcost | +-- babel-exp-mcast-hello-seqno | +-- babel-exp-ucast-hello-seqno | +-- babel-ucast-hello-seqno | +-- babel-ucast-hello-interval | +-- babel-rxcost | +-- babel-cost +-- babel-routes | +-- babel-route-prefix | +-- babel-route-prefix-length | +-- babel-route-router-id | +-- babel-route-neighbor | +-- babel-route-received-metric | +-- babel-route-calculated-metric | +-- babel-route-seqno | +-- babel-route-next-hop | +-- babel-route-feasible | +-- babel-route-selected +-- babel-mac-key-sets | +-- babel-mac-default-apply | +-- babel-mac-keys | +-- babel-mac-key-name | +-- babel-mac-key-use-send | +-- babel-mac-key-use-verify | +-- babel-mac-key-value | +-- babel-mac-key-algorithm | +-- babel-mac-key-test +-- babel-dtls-cert-sets +-- babel-dtls-default-apply +-- babel-dtls-certs +-- babel-cert-name +-- babel-cert-value +-- babel-cert-type +-- babel-cert-private-key ¶ Most parameters are read-only. The following is a descriptive list of the parameters that are not required to be read-only:¶ enable/disable Babel¶ create/delete Babel Message Authentication Code (MAC) Key sets¶ create/delete Babel Certificate sets¶ enable/disable statistics collection¶ Constant: UDP port¶ Constant: IPv6 multicast group¶ Interface: enable/disable Babel on this interface¶ Interface: metric algorithm¶ Interface: split horizon¶ Interface: sets of MAC keys¶ Interface: verify received MAC packets¶ Interface: set of certificates for use with DTLS¶ Interface: use cached info extensions¶ Interface: preferred order of certificate types¶ Interface: enable/disable packet log¶ MAC-keys: create/delete entries¶ MAC-keys: key used for sent packets¶ MAC-keys: key used to verify packets¶ DTLS-certs: create/delete entries¶ The following parameters are required to return no value when read:¶ MAC key values¶ DTLS private keys¶ Note that this overview is intended simply to be informative and is not normative. If there is any discrepancy between this overview and the detailed information model definitions in subsequent sections, the error is in this overview.¶ 3. The Information Model 3.1. Definition of babel-information-obj object { string ro babel-implementation-version; boolean rw babel-enable; binary ro babel-self-router-id; [uint ro babel-self-seqno;] string ro babel-metric-comp-algorithms<1..*>; string ro babel-security-supported<0..*>; [string ro babel-mac-algorithms<1..*>;] [string ro babel-dtls-cert-types<1..*>;] [boolean rw babel-stats-enable;] [operation babel-stats-reset;] babel-constants-obj ro babel-constants; babel-interface-obj ro babel-interfaces<0..*>; babel-route-obj ro babel-routes<0..*>; [babel-mac-key-set-obj rw babel-mac-key-sets<0..*>;] [babel-dtls-cert-set-obj rw babel-dtls-cert-sets<0..*>;] } babel-information-obj; ¶ babel-implementation-version: The name and version of this implementation of the Babel protocol.¶ babel-enable: When written, it configures whether the protocol should be enabled (true) or disabled (false). A read from the running or intended datastore indicates the configured administrative value of whether the protocol is enabled (true) or not (false). A read from the operational datastore indicates whether the protocol is actually running (true) or not (i.e., it indicates the operational state of the protocol). A data model that does not replicate parameters for running and operational datastores can implement this as two separate parameters. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-self-router-id: The router-id used by this instance of the Babel protocol to identify itself. [RFC8966] describes this as an arbitrary string of 8 octets.¶ babel-self-seqno: The current sequence number included in route updates for routes originated by this node. This is a 16-bit unsigned integer.¶ babel-metric-comp-algorithms: List of supported cost computation algorithms. Possible values include \"2-out-of-3\", as described in [RFC8966], Appendix A.2.1, and \"ETX\", as described in [RFC8966], Appendix A.2.2.¶ babel-security-supported: List of supported security mechanisms. Possible values include \"MAC\" to indicate support of [RFC8967] and \"DTLS\" to indicate support of [RFC8968].¶ babel-mac-algorithms: List of supported MAC computation algorithms. Possible values include \"HMAC-SHA256\" and \"BLAKE2s-128\" to indicate support for algorithms indicated in [RFC8967].¶ babel-dtls-cert-types: List of supported certificate types. Possible values include \"X.509\" and \"RawPublicKey\" to indicate support for types indicated in [RFC8968].¶ babel-stats-enable: Indicates whether statistics collection is enabled (true) or disabled (false) on all interfaces. When enabled, existing statistics values are not cleared and will be incremented as new packets are counted.¶ babel-stats-reset: An operation that resets all babel-if-stats parameters to zero. This operation has no input or output parameters.¶ babel-constants: A babel-constants-obj object.¶ babel-interfaces: A set of babel-interface-obj objects.¶ babel-routes: A set of babel-route-obj objects. Contains the routes known to this node.¶ babel-mac-key-sets: A set of babel-mac-key-set-obj objects. If this object is implemented, it provides access to parameters related to the MAC security mechanism. An implementation MAY choose to expose this object as read-only (\"ro\").¶ babel-dtls-cert-sets: A set of babel-dtls-cert-set-obj objects. If this object is implemented, it provides access to parameters related to the DTLS security mechanism. An implementation MAY choose to expose this object as read-only (\"ro\").¶ 3.2. Definition of babel-constants-obj object { uint rw babel-udp-port; [ip-address rw babel-mcast-group;] } babel-constants-obj; ¶ babel-udp-port: UDP port for sending and listening for Babel packets. Default is 6696. An implementation MAY choose to expose this parameter as read-only (\"ro\"). This is a 16-bit unsigned integer.¶ babel-mcast-group: Multicast group for sending and listening to multicast announcements on IPv6. Default is ff02::1:6. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ 3.3. Definition of babel-interface-obj object { reference ro babel-interface-reference; [boolean rw babel-interface-enable;] string rw babel-interface-metric-algorithm; [boolean rw babel-interface-split-horizon;] [uint ro babel-mcast-hello-seqno;] [uint ro babel-mcast-hello-interval;] [uint ro babel-update-interval;] [boolean rw babel-mac-enable;] [reference rw babel-if-mac-key-sets<0..*>;] [boolean rw babel-mac-verify;] [boolean rw babel-dtls-enable;] [reference rw babel-if-dtls-cert-sets<0..*>;] [boolean rw babel-dtls-cached-info;] [string rw babel-dtls-cert-prefer<0..*>;] [boolean rw babel-packet-log-enable;] [reference ro babel-packet-log;] [babel-if-stats-obj ro babel-if-stats;] babel-neighbor-obj ro babel-neighbors<0..*>; } babel-interface-obj; ¶ babel-interface-reference: Reference to an interface object that can be used to send and receive IPv6 packets, as defined by the data model (e.g., YANG [RFC7950] and Broadband Forum (BBF) [TR-181]). Referencing syntax will be specific to the data model. If there is no set of interface objects available, this should be a string that indicates the interface name used by the underlying operating system.¶ babel-interface-enable: When written, it configures whether the protocol should be enabled (true) or disabled (false) on this interface. A read from the running or intended datastore indicates the configured administrative value of whether the protocol is enabled (true) or not (false). A read from the operational datastore indicates whether the protocol is actually running (true) or not (i.e., it indicates the operational state of the protocol). A data model that does not replicate parameters for running and operational datastores can implement this as two separate parameters. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-interface-metric-algorithm: Indicates the metric computation algorithm used on this interface. The value MUST be one of those listed in the babel-metric-comp-algorithms parameter. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-interface-split-horizon: Indicates whether or not the split-horizon optimization is used when calculating metrics on this interface. A value of \"true\" indicates split-horizon optimization is used. Split-horizon optimization is described in [RFC8966], Section 3.7.4. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mcast-hello-seqno: The current sequence number in use for multicast Hellos sent on this interface. This is a 16-bit unsigned integer.¶ babel-mcast-hello-interval: The current interval in use for multicast Hellos sent on this interface. Units are centiseconds. This is a 16-bit unsigned integer.¶ babel-update-interval: The current interval in use for all updates (multicast and unicast) sent on this interface. Units are centiseconds. This is a 16-bit unsigned integer.¶ babel-mac-enable: Indicates whether the MAC security mechanism is enabled (true) or disabled (false). An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-if-mac-key-sets: List of references to the babel-mac-key-sets entries that apply to this interface. When an interface instance is created, all babel-mac-key-sets instances with babel-mac-default-apply \"true\" will be included in this list. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mac-verify: A Boolean flag indicating whether MACs in incoming Babel packets are required to be present and are verified. If this parameter is \"true\", incoming packets are required to have a valid MAC. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-dtls-enable: Indicates whether the DTLS security mechanism is enabled (true) or disabled (false). An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-if-dtls-cert-sets: List of references to the babel-dtls-cert-sets entries that apply to this interface. When an interface instance is created, all babel-dtls-cert-sets instances with babel-dtls-default-apply \"true\" will be included in this list. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-dtls-cached-info: Indicates whether the cached_info extension (see [RFC8968], Appendix A) is included in ClientHello and ServerHello packets. The extension is included if the value is \"true\". An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-dtls-cert-prefer: List of supported certificate types, in order of preference. The values MUST be among those listed in the babel-dtls-cert-types parameter. This list is used to populate the server_certificate_type extension (see [RFC8968], Appendix A) in a ClientHello. Values that are present in at least one instance in the babel-dtls-certs object of a referenced babel-dtls instance and that have a non-empty babel-cert-private-key will be used to populate the client_certificate_type extension in a ClientHello.¶ babel-packet-log-enable: Indicates whether packet logging is enabled (true) or disabled (false) on this interface.¶ babel-packet-log: A reference or URL link to a file that contains a timestamped log of packets received and sent on babel-udp-port on this interface. The [libpcap] file format with a .pcap file extension SHOULD be supported for packet log files. Logging is enabled/disabled by babel-packet-log-enable. Implementations will need to carefully manage and limit memory used by packet logs.¶ babel-if-stats: Statistics collection object for this interface.¶ babel-neighbors: A set of babel-neighbor-obj objects.¶ 3.4. Definition of babel-if-stats-obj object { uint ro babel-sent-mcast-hello; uint ro babel-sent-mcast-update; uint ro babel-sent-ucast-hello; uint ro babel-sent-ucast-update; uint ro babel-sent-IHU; uint ro babel-received-packets; } babel-if-stats-obj; ¶ babel-sent-mcast-hello: A count of the number of multicast Hello packets sent on this interface.¶ babel-sent-mcast-update: A count of the number of multicast update packets sent on this interface.¶ babel-sent-ucast-hello: A count of the number of unicast Hello packets sent on this interface.¶ babel-sent-ucast-update: A count of the number of unicast update packets sent on this interface.¶ babel-sent-IHU: A count of the number of \"I Heard You\" (IHU) packets sent on this interface.¶ babel-received-packets: A count of the number of Babel packets received on this interface.¶ 3.5. Definition of babel-neighbor-obj object { ip-address ro babel-neighbor-address; [binary ro babel-hello-mcast-history;] [binary ro babel-hello-ucast-history;] uint ro babel-txcost; uint ro babel-exp-mcast-hello-seqno; uint ro babel-exp-ucast-hello-seqno; [uint ro babel-ucast-hello-seqno;] [uint ro babel-ucast-hello-interval;] [uint ro babel-rxcost;] [uint ro babel-cost;] } babel-neighbor-obj; ¶ babel-neighbor-address: IPv4 or IPv6 address the neighbor sends packets from.¶ babel-hello-mcast-history: The multicast Hello history of whether or not the multicast Hello packets prior to babel-exp-mcast-hello-seqno were received. A binary sequence where the most recently received Hello is expressed as a \"1\" placed in the leftmost bit, with prior bits shifted right (and \"0\" bits placed between prior Hello bits and most recent Hello for any not-received Hellos). This value should be displayed using hex digits ([0-9a-fA-F]). See [RFC8966], Appendix A.1.¶ babel-hello-ucast-history: The unicast Hello history of whether or not the unicast Hello packets prior to babel-exp-ucast-hello-seqno were received. A binary sequence where the most recently received Hello is expressed as a \"1\" placed in the leftmost bit, with prior bits shifted right (and \"0\" bits placed between prior Hello bits and the most recent Hello for any not-received Hellos). This value should be displayed using hex digits ([0-9a-fA-F]). See [RFC8966], Appendix A.1.¶ babel-txcost: Transmission cost value from the last IHU packet received from this neighbor, or the maximum value to indicate the IHU hold timer for this neighbor has expired. See [RFC8966], Section 3.4.2. This is a 16-bit unsigned integer.¶ babel-exp-mcast-hello-seqno: Expected multicast Hello sequence number of next Hello to be received from this neighbor. If multicast Hello packets are not expected or processing of multicast packets is not enabled, this MUST be NULL. This is a 16-bit unsigned integer; if the data model uses zero (0) to represent NULL values for unsigned integers, the data model MAY use a different data type that allows differentiation between zero (0) and NULL.¶ babel-exp-ucast-hello-seqno: Expected unicast Hello sequence number of next Hello to be received from this neighbor. If unicast Hello packets are not expected or processing of unicast packets is not enabled, this MUST be NULL. This is a 16-bit unsigned integer; if the data model uses zero (0) to represent NULL values for unsigned integers, the data model MAY use a different data type that allows differentiation between zero (0) and NULL.¶ babel-ucast-hello-seqno: The current sequence number in use for unicast Hellos sent to this neighbor. If unicast Hellos are not being sent, this MUST be NULL. This is a 16-bit unsigned integer; if the data model uses zero (0) to represent NULL values for unsigned integers, the data model MAY use a different data type that allows differentiation between zero (0) and NULL.¶ babel-ucast-hello-interval: The current interval in use for unicast Hellos sent to this neighbor. Units are centiseconds. This is a 16-bit unsigned integer.¶ babel-rxcost: Reception cost calculated for this neighbor. This value is usually derived from the Hello history, which may be combined with other data, such as statistics maintained by the link layer. The rxcost is sent to a neighbor in each IHU. See [RFC8966], Section 3.4.3. This is a 16-bit unsigned integer.¶ babel-cost: The link cost, as computed from the values maintained in the neighbor table: the statistics kept in the neighbor table about the reception of Hellos and the txcost computed from received IHU packets. This is a 16-bit unsigned integer.¶ 3.6. Definition of babel-route-obj object { ip-address ro babel-route-prefix; uint ro babel-route-prefix-length; binary ro babel-route-router-id; reference ro babel-route-neighbor; uint ro babel-route-received-metric; uint ro babel-route-calculated-metric; uint ro babel-route-seqno; ip-address ro babel-route-next-hop; boolean ro babel-route-feasible; boolean ro babel-route-selected; } babel-route-obj; ¶ babel-route-prefix: Prefix (expressed in IP address format) for which this route is advertised.¶ babel-route-prefix-length: Length of the prefix for which this route is advertised.¶ babel-route-router-id: The router-id of the router that originated this route.¶ babel-route-neighbor: Reference to the babel-neighbors entry for the neighbor that advertised this route.¶ babel-route-received-metric: The metric with which this route was advertised by the neighbor, or the maximum value to indicate the route was recently retracted and is temporarily unreachable (see Section 3.5.4 of [RFC8966]). This metric will be NULL if the route was not received from a neighbor but was generated through other means. At least one of the following MUST be non-NULL: babel-route-calculated-metric or babel-route-received-metric. Having both be non-NULL is expected for a route that is received and subsequently advertised. This is a 16-bit unsigned integer; if the data model uses zero (0) to represent NULL values for unsigned integers, the data model MAY use a different data type that allows differentiation between zero (0) and NULL.¶ babel-route-calculated-metric: A calculated metric for this route. How the metric is calculated is implementation specific. The maximum value indicates the route was recently retracted and is temporarily unreachable (see Section 3.5.4 of [RFC8966]). At least one of the following MUST be non-NULL: babel-route-calculated-metric or babel-route-received-metric. Having both be non-NULL is expected for a route that is received and subsequently advertised. This is a 16-bit unsigned integer; if the data model uses zero (0) to represent NULL values for unsigned integers, the data model MAY use a different data type that allows differentiation between zero (0) and NULL.¶ babel-route-seqno: The sequence number with which this route was advertised. This is a 16-bit unsigned integer.¶ babel-route-next-hop: The next-hop address of this route. This will be empty if this route has no next-hop address.¶ babel-route-feasible: A Boolean flag indicating whether this route is feasible, as defined in Section 3.5.1 of [RFC8966]).¶ babel-route-selected: A Boolean flag indicating whether this route is selected (i.e., whether it is currently being used for forwarding and is being advertised).¶ 3.7. Definition of babel-mac-key-set-obj object { boolean rw babel-mac-default-apply; babel-mac-key-obj rw babel-mac-keys<0..*>; } babel-mac-key-set-obj; ¶ babel-mac-default-apply: A Boolean flag indicating whether this object instance is applied to all new babel-interfaces instances by default. If \"true\", this instance is applied to new babel-interfaces instances at the time they are created by including it in the babel-if-mac-key-sets list. If \"false\", this instance is not applied to new babel-interfaces instances when they are created. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mac-keys: A set of babel-mac-key-obj objects.¶ 3.8. Definition of babel-mac-key-obj object { string rw babel-mac-key-name; boolean rw babel-mac-key-use-send; boolean rw babel-mac-key-use-verify; binary -- babel-mac-key-value; string rw babel-mac-key-algorithm; [operation babel-mac-key-test;] } babel-mac-key-obj; ¶ babel-mac-key-name: A unique name for this MAC key that can be used to identify the key in this object instance since the key value is not allowed to be read. This value MUST NOT be empty and can only be provided when this instance is created (i.e., it is not subsequently writable). The value MAY be auto-generated if not explicitly supplied when the instance is created.¶ babel-mac-key-use-send: Indicates whether this key value is used to compute a MAC and include that MAC in the sent Babel packet. A MAC for sent packets is computed using this key if the value is \"true\". If the value is \"false\", this key is not used to compute a MAC to include in sent Babel packets. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mac-key-use-verify: Indicates whether this key value is used to verify incoming Babel packets. This key is used to verify incoming packets if the value is \"true\". If the value is \"false\", no MAC is computed from this key for comparison with the MAC in an incoming packet. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mac-key-value: The value of the MAC key. An implementation MUST NOT allow this parameter to be read. This can be done by always providing an empty string when read, through permissions, or by other means. This value MUST be provided when this instance is created and is not subsequently writable. This value is of a length suitable for the associated babel-mac-key-algorithm. If the algorithm is based on the Hashed Message Authentication Code (HMAC) construction [RFC2104], the length MUST be between 0 and an upper limit that is at least the size of the output length (where the \"HMAC-SHA256\" output length is 32 octets as described in [RFC4868]). Longer lengths MAY be supported but are not necessary if the management system has the ability to generate a suitably random value (e.g., by randomly generating a value or by using a key derivation technique as recommended in the security considerations in Section 7 of [RFC8967]). If the algorithm is \"BLAKE2s-128\", the length MUST be between 0 and 32 bytes inclusive as specified by [RFC7693].¶ babel-mac-key-algorithm The name of the MAC algorithm used with this key. The value MUST be the same as one of the enumerations listed in the babel-mac-algorithms parameter. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-mac-key-test: An operation that allows the MAC key and MAC algorithm to be tested to see if they produce an expected outcome. Input to this operation is a binary string and a calculated MAC (also in the format of a binary string) for the binary string. The implementation is expected to create a MAC over the binary string using the babel-mac-key-value and the babel-mac-key-algorithm. The output of this operation is a Boolean indication that the calculated MAC matched the input MAC (true) or the MACs did not match (false).¶ 3.9. Definition of babel-dtls-cert-set-obj object { boolean rw babel-dtls-default-apply; babel-dtls-cert-obj rw babel-dtls-certs<0..*>; } babel-dtls-cert-set-obj; ¶ babel-dtls-default-apply: A Boolean flag indicating whether this object instance is applied to all new babel-interfaces instances by default. If \"true\", this instance is applied to new babel-interfaces instances at the time they are created by including it in the babel-interface-dtls-certs list. If \"false\", this instance is not applied to new babel-interfaces instances when they are created. An implementation MAY choose to expose this parameter as read-only (\"ro\").¶ babel-dtls-certs: A set of babel-dtls-cert-obj objects. This contains both certificates for this implementation to present for authentication and those to accept from others. Certificates with a non-empty babel-cert-private-key can be presented by this implementation for authentication.¶ 3.10. Definition of babel-dtls-cert-obj object { string rw babel-cert-name; string rw babel-cert-value; string rw babel-cert-type; binary -- babel-cert-private-key; } babel-dtls-cert-obj; ¶ babel-cert-name: A unique name for this certificate that can be used to identify the certificate in this object instance since the value is too long to be useful for identification. This value MUST NOT be empty and can only be provided when this instance is created (i.e., it is not subsequently writable). The value MAY be auto-generated if not explicitly supplied when the instance is created.¶ babel-cert-value: The certificate in Privacy-Enhanced Mail (PEM) format [RFC7468]. This value MUST be provided when this instance is created and is not subsequently writable.¶ babel-cert-type: The name of the certificate type of this object instance. The value MUST be the same as one of the enumerations listed in the babel-dtls-cert-types parameter. This value can only be provided when this instance is created and is not subsequently writable.¶ babel-cert-private-key: The value of the private key. If this is non-empty, this certificate can be used by this implementation to provide a certificate during DTLS handshaking. An implementation MUST NOT allow this parameter to be read. This can be done by always providing an empty string when read, through permissions, or by other means. This value can only be provided when this instance is created and is not subsequently writable.¶ 4. Extending the Information Model Implementations MAY extend this information model with other parameters or objects. For example, an implementation MAY choose to expose Babel route filtering rules by adding a route filtering object with parameters appropriate to how route filtering is done in that implementation. The precise means used to extend the information model would be specific to the data model the implementation uses to expose this information.¶ 5. Security Considerations This document defines a set of information model objects and parameters that may be exposed and visible from other devices. Some of these information model objects and parameters may be configured. Securing access to and ensuring the integrity of this data is in scope of and the responsibility of any data model derived from this information model. Specifically, any YANG [RFC7950] data model is expected to define security exposure of the various parameters, and a [TR-181] data model will be secured by the mechanisms defined for the management protocol used to transport it.¶ Misconfiguration (whether unintentional or malicious) can prevent reachability or cause poor network performance (increased latency, jitter, etc.). Misconfiguration of security credentials can cause a denial-of-service condition for the Babel routing protocol. The information in this model discloses network topology, which can be used to mount subsequent attacks on traffic traversing the network.¶ This information model defines objects that can allow credentials (for this device, for trusted devices, and for trusted certificate authorities) to be added and deleted. Public keys may be exposed through this model. This model requires that private keys and MAC keys never be exposed. Certificates used by [RFC8968] implementations use separate parameters to model the public parts (including the public key) and the private key.¶ MAC keys are allowed to be as short as zero length. This is useful for testing. It is RECOMMENDED that network operators follow current best practices for key length and generation of keys related to the MAC algorithm associated with the key. Short (and zero-length) keys are highly susceptible to brute-force attacks and therefore SHOULD NOT be used. See the security considerations as described in Section 7 of [RFC8967] for additional considerations related to MAC keys; note that there are some specific key value recommendations in the fifth paragraph. It says that if it is necessary to derive keys from a human-readable passphrase, \"only the derived keys should be communicated to the routers\" and \"the original passphrase itself should be kept on the host used to perform the key generation\" (which would be the management system in the case of a remote management protocol). It also recommends that keys \"should have a length of 32 octets (both for HMAC-SHA256 and BLAKE2s), and be chosen randomly\".¶ This information model uses key sets and certification sets to provide a means of grouping keys and certificates. This makes it easy to use a different set per interface, use the same set for one or more interfaces, have a default set in case a new interface is instantiated, and change keys and certificates as needed.¶ 6. IANA Considerations This document has no IANA actions.¶ 7. References 7.1. Normative References [ISO.10646] International Organization for Standardization, \"Information technology - Universal Coded Character Set (UCS)\", ISO Standard 10646:2014, 2014. [libpcap] GitLab, \"Libpcap File Format\", Wireshark Foundation, November 2020, <https://gitlab.com/wireshark/wireshark/-/wikis/Development/LibpcapFileFormat>. [RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, DOI 10.17487/RFC2104, February 1997, <https://www.rfc-editor.org/info/rfc2104>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3339] Klyne, G. and C. Newman, \"Date and Time on the Internet: Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002, <https://www.rfc-editor.org/info/rfc3339>. [RFC4868] Kelly, S. and S. Frankel, \"Using HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512 with IPsec\", RFC 4868, DOI 10.17487/RFC4868, May 2007, <https://www.rfc-editor.org/info/rfc4868>. [RFC7468] Josefsson, S. and S. Leonard, \"Textual Encodings of PKIX, PKCS, and CMS Structures\", RFC 7468, DOI 10.17487/RFC7468, April 2015, <https://www.rfc-editor.org/info/rfc7468>. [RFC7693] Saarinen, M-J., Ed. and J-P. Aumasson, \"The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)\", RFC 7693, DOI 10.17487/RFC7693, November 2015, <https://www.rfc-editor.org/info/rfc7693>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8966] Chroboczek, J. and D. Schinazi, \"The Babel Routing Protocol\", RFC 8966, DOI 10.17487/RFC8966, January 2021, <https://www.rfc-editor.org/info/rfc8966>. [RFC8967] Dô, C., Kolodziejak, W., and J. Chroboczek, \"MAC Authentication for the Babel Routing Protocol\", RFC 8967, DOI 10.17487/RFC8967, January 2021, <https://www.rfc-editor.org/info/rfc8967>. [RFC8968] Décimo, A., Schinazi, D., and J. Chroboczek, \"Babel Routing Protocol over Datagram Transport Layer Security\", RFC 8968, DOI 10.17487/RFC8968, January 2021, <https://www.rfc-editor.org/info/rfc8968>. 7.2. Informative References [RFC6241] Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed., and A. Bierman, Ed., \"Network Configuration Protocol (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011, <https://www.rfc-editor.org/info/rfc6241>. [RFC7950] Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\", RFC 7950, DOI 10.17487/RFC7950, August 2016, <https://www.rfc-editor.org/info/rfc7950>. [RFC8193] Burbridge, T., Eardley, P., Bagnulo, M., and J. Schoenwaelder, \"Information Model for Large-Scale Measurement Platforms (LMAPs)\", RFC 8193, DOI 10.17487/RFC8193, August 2017, <https://www.rfc-editor.org/info/rfc8193>. [TR-181] Broadband Forum, \"Device Data Model\", Issue: 2 Amendment 14, November 2020, <http://cwmp-data-models.broadband-forum.org/>. Acknowledgements Juliusz Chroboczek, Toke Høiland-Jørgensen, David Schinazi, Antonin Décimo, Roman Danyliw, Benjamin Kaduk, Valery Smyslov, Alvaro Retana, Donald Eastlake, Martin Vigoureux, Acee Lindem, and Carsten Bormann have been very helpful in refining this information model.¶ The language in the \"Notation\" section was mostly taken from [RFC8193].¶ Authors' Addresses Barbara Stark AT&T TX United States of America Email: barbara.stark@att.com Mahesh Jethanandani Kloud Services CA United States of America Email: mjethanandani@gmail.com"
    },
    {
        "Number": "9049",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Path Aware Networking: Obstacles to Deployment (A Bestiary of Roads Not Taken)",
        "Authors": [
            "S. Dawkins",
            "Ed."
        ],
        "Date": "2021-06",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document is a product of the Path Aware Networking Research Group (PANRG).  At the first meeting of the PANRG, the Research Group agreed to catalog and analyze past efforts to develop and deploy Path Aware techniques, most of which were unsuccessful or at most partially successful, in order to extract insights and lessons for Path Aware networking researchers.  This document contains that catalog and analysis.",
        "Keywords": [
            "PAN"
        ],
        "Content": "RFC 9049: Path Aware Networking: Obstacles to Deployment (A Bestiary of Roads Not Taken) RFC 9049 What Not to Do June 2021 Dawkins Informational [Page] Stream: Internet Research Task Force (IRTF) RFC: 9049 Category: Informational Published: June 2021 ISSN: 2070-1721 Author: S. Dawkins, Ed. Tencent America RFC 9049 Path Aware Networking: Obstacles to Deployment (A Bestiary of Roads Not Taken) Abstract This document is a product of the Path Aware Networking Research Group (PANRG). At the first meeting of the PANRG, the Research Group agreed to catalog and analyze past efforts to develop and deploy Path Aware techniques, most of which were unsuccessful or at most partially successful, in order to extract insights and lessons for Path Aware networking researchers.¶ This document contains that catalog and analysis.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Path Aware Networking Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9049.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.¶ ▲ Table of Contents 1.  Introduction 1.1.  What Do \"Path\" and \"Path Awareness\" Mean in This Document? 2.  A Perspective on This Document 2.1.  Notes for the Reader 2.2.  A Note about Path Aware Techniques Included in This Document 2.3.  Architectural Guidance 2.4.  Terminology Used in This Document 2.5.  Methodology for Contributions 3.  Applying the Lessons We've Learned 4.  Summary of Lessons Learned 4.1.  Justifying Deployment 4.2.  Providing Benefits for Early Adopters 4.3.  Providing Benefits during Partial Deployment 4.4.  Outperforming End-to-End Protocol Mechanisms 4.5.  Paying for Path Aware Techniques 4.6.  Impact on Operational Practices 4.7.  Per-Connection State 4.8.  Keeping Traffic on Fast Paths 4.9.  Endpoints Trusting Intermediate Nodes 4.10. Intermediate Nodes Trusting Endpoints 4.11. Reacting to Distant Signals 4.12. Support in Endpoint Protocol Stacks 4.13. Planning for Failure 5.  Future Work 6.  Contributions 6.1.  Stream Transport (ST, ST2, ST2+) 6.1.1.  Reasons for Non-deployment 6.1.2.  Lessons Learned 6.2.  Integrated Services (IntServ) 6.2.1.  Reasons for Non-deployment 6.2.2.  Lessons Learned 6.3.  Quick-Start TCP 6.3.1.  Reasons for Non-deployment 6.3.2.  Lessons Learned 6.4.  ICMP Source Quench 6.4.1.  Reasons for Non-deployment 6.4.2.  Lessons Learned 6.5.  Triggers for Transport (TRIGTRAN) 6.5.1.  Reasons for Non-deployment 6.5.2.  Lessons Learned 6.6.  Shim6 6.6.1.  Reasons for Non-deployment 6.6.2.  Lessons Learned 6.6.3.  Addendum on Multipath TCP 6.7.  Next Steps in Signaling (NSIS) 6.7.1.  Reasons for Non-deployment 6.7.2.  Lessons Learned 6.8.  IPv6 Flow Labels 6.8.1.  Reasons for Non-deployment 6.8.2.  Lessons Learned 6.9.  Explicit Congestion Notification (ECN) 6.9.1.  Reasons for Non-deployment 6.9.2.  Lessons Learned 7.  Security Considerations 8.  IANA Considerations 9.  Informative References Acknowledgments Author's Address 1. Introduction This document describes the lessons that IETF participants have learned (and learned the hard way) about Path Aware networking over a period of several decades. It also provides an analysis of reasons why various Path Aware techniques have seen limited or no deployment.¶ This document represents the consensus of the Path Aware Networking Research Group (PANRG).¶ 1.1. What Do \"Path\" and \"Path Awareness\" Mean in This Document? One of the first questions reviewers of this document have asked is \"What's the definition of a Path, and what's the definition of Path Awareness?\" That is not an easy question to answer for this document.¶ These terms have definitions in other PANRG documents [PANRG] and are still the subject of some discussion in the Research Group, as of the date of this document. But because this document reflects work performed over several decades, the technologies described in Section 6 significantly predate the current definitions of \"Path\" and \"Path Aware\" in use in the Path Aware Networking Research Group, and it is unlikely that all the contributors to Section 6 would have had the same understanding of these terms. Those technologies were considered \"Path Aware\" in early PANRG discussions and so are included in this retrospective document.¶ It is worth noting that the definitions of \"Path\" and \"Path Aware\" in [PANRG-PATH-PROPERTIES] would apply to Path Aware techniques at a number of levels of the Internet protocol architecture ([RFC1122], plus several decades of refinements), but the contributions received for this document tended to target the transport layer and to treat a \"Path\" constructed by routers as opaque. It would be useful to consider how applicable the Lessons Learned cataloged in this document are, at other layers, and that would be a fine topic for follow-on research.¶ The current definition of \"Path\" in the Path Aware Networking Research Group appears in Section 2 (\"Terminology\") in [PANRG-PATH-PROPERTIES]. That definition is included here as a convenience to the reader.¶ Path: A sequence of adjacent path elements over which a packet can be transmitted, starting and ending with a node. A path is unidirectional. Paths are time-dependent, i.e., the sequence of path elements over which packets are sent from one node to another may change. A path is defined between two nodes. For multicast or broadcast, a packet may be sent by one node and received by multiple nodes. In this case, the packet is sent over multiple paths at once, one path for each combination of sending and receiving node; these paths do not have to be disjoint. Note that an entity may have only partial visibility of the path elements that comprise a path and visibility may change over time. Different entities may have different visibility of a path and/or treat path elements at different levels of abstraction.¶ The current definition of Path Awareness, used by the Path Aware Networking Research Group, appears in Section 1.1 (\"Definition\") in [PANRG-QUESTIONS]. That definition is included here as a convenience to the reader.¶ For purposes of this document, \"path aware networking\" describes endpoint discovery of the properties of paths they use for communication across an internetwork, and endpoint reaction to these properties that affects routing and/or data transfer. Note that this can and already does happen to some extent in the current Internet architecture; this definition expands current techniques of path discovery and manipulation to cross administrative domain boundaries and up to the transport and application layers at the endpoints.¶ Expanding on this definition, a \"path aware internetwork\" is one in which endpoint discovery of path properties and endpoint selection of paths used by traffic exchanged by the endpoint are explicitly supported, regardless of the specific design of the protocol features which enable this discovery and selection.¶ 2. A Perspective on This Document At the first meeting of the Path Aware Networking Research Group [PANRG], at IETF 99 [PANRG-99], Olivier Bonaventure led a discussion of \"A Decade of Path Awareness\" [PATH-Decade], on attempts, which were mostly unsuccessful for a variety of reasons, to exploit Path Aware techniques and achieve a variety of goals over the past decade. At the end of that discussion, two things were abundantly clear.¶ The Internet community has accumulated considerable experience with many Path Aware techniques over a long period of time, and¶ Although some Path Aware techniques have been deployed (for example, Differentiated Services, or Diffserv [RFC2475]), most of these techniques haven't seen widespread adoption and deployment. Even \"successful\" techniques like Diffserv can face obstacles that prevent wider usage. The reasons for non-adoption and limited adoption and deployment are many and are worthy of study.¶ The meta-lessons from that experience were as follows:¶ Path Aware networking has been more Research than Engineering, so establishing an IRTF Research Group for Path Aware networking was the right thing to do [RFC7418].¶ Analyzing a catalog of past experience to learn the reasons for non-adoption would be a great first step for the Research Group.¶ Allison Mankin, as IRTF Chair, officially chartered the Path Aware Networking Research Group in July 2018.¶ This document contains the analysis performed by that Research Group (Section 4), based on that catalog (Section 6).¶ 2.1. Notes for the Reader This Informational document discusses Path Aware protocol mechanisms considered, and in some cases standardized, by the Internet Engineering Task Force (IETF), and it considers Lessons Learned from those mechanisms. The intention is to inform the work of protocol designers, whether in the IRTF, the IETF, or elsewhere in the Internet ecosystem.¶ As an Informational document published in the IRTF Stream, this document has no authority beyond the quality of the analysis it contains.¶ 2.2. A Note about Path Aware Techniques Included in This Document This document does not catalog every proposed Path Aware technique that was not adopted and deployed. Instead, we limited our focus to technologies that passed through the IETF community and still identified enough techniques to provide background for the lessons included in Section 4 to inform researchers and protocol engineers in their work.¶ No shame is intended for the techniques included in this document. As shown in Section 4, the quality of specific techniques had little to do with whether they were deployed or not. Based on the techniques cataloged in this document, it is likely that when these techniques were put forward, the proponents were trying to engineer something that could not be engineered without first carrying out research. Actual shame would be failing to learn from experience and failing to share that experience with other networking researchers and engineers.¶ 2.3. Architectural Guidance As background for understanding the Lessons Learned contained in this document, the reader is encouraged to become familiar with the Internet Architecture Board's documents on \"What Makes for a Successful Protocol?\" [RFC5218] and \"Planning for Protocol Adoption and Subsequent Transitions\" [RFC8170].¶ Although these two documents do not specifically target Path Aware networking protocols, they are helpful resources for readers seeking to improve their understanding of considerations for successful adoption and deployment of any protocol. For example, the basic success factors described in Section 2.1 of [RFC5218] are helpful for readers of this document.¶ Because there is an economic aspect to decisions about deployment, the IAB Workshop on Internet Technology Adoption and Transition [ITAT] report [RFC7305] also provides food for thought.¶ Several of the Lessons Learned in Section 4 reflect considerations described in [RFC5218], [RFC7305], and [RFC8170].¶ 2.4. Terminology Used in This Document The terms \"node\" and \"element\" in this document have the meaning defined in [PANRG-PATH-PROPERTIES].¶ 2.5. Methodology for Contributions This document grew out of contributions by various IETF participants with experience with one or more Path Aware techniques.¶ There are many things that could be said about the Path Aware techniques that have been developed. For the purposes of this document, contributors were requested to provide¶ the name of a technique, including an abbreviation if one was used.¶ if available, a long-term pointer to the best reference describing the technique.¶ a short description of the problem the technique was intended to solve.¶ a short description of the reasons why the technique wasn't adopted.¶ a short statement of the lessons that researchers can learn from our experience with this technique.¶ 3. Applying the Lessons We've Learned The initial scope for this document was roughly \"What mistakes have we made in the decade prior to [PANRG-99], that we shouldn't make again?\" Some of the contributions in Section 6 predate the initial scope. The earliest Path Aware technique referred to in Section 6 is [IEN-119], which was published in the late 1970s; see Section 6.1. Given that the networking ecosystem has evolved continuously, it seems reasonable to consider how to apply these lessons.¶ The PANRG reviewed the Lessons Learned (Section 4) contained in the May 23, 2019 draft version of this document at IETF 105 [PANRG-105-Min] and carried out additional discussion at IETF 106 [PANRG-106-Min]. Table 1 provides the \"sense of the room\" about each lesson after those discussions. The intention was to capture whether a specific lesson seems to be¶ \"Invariant\" - well-understood and is likely to be applicable for any proposed Path Aware networking solution.¶ \"Variable\" - has impeded deployment in the past but might not be applicable in a specific technique. Engineering analysis to understand whether the lesson is applicable is prudent.¶ \"Not Now\" - a characteristic that tends to turn up a minefield full of dragons. Prudent network engineers will wish to avoid gambling on a technique that relies on this, until something significant changes.¶ Section 6.9 on Explicit Congestion Notification (ECN) was added during the review and approval process, based on a question from Martin Duke. Section 6.9, as contained in the March 8, 2021 draft version of this document, was discussed at [PANRG-110] and is summarized in Section 4.13, describing a new Lesson Learned.¶ Table 1 Lesson Category Justifying Deployment (Section 4.1) Invariant Providing Benefits for Early Adopters (Section 4.2) Invariant Providing Benefits during Partial Deployment (Section 4.3) Invariant Outperforming End-to-End Protocol Mechanisms (Section 4.4) Variable Paying for Path Aware Techniques (Section 4.5) Invariant Impact on Operational Practices (Section 4.6) Invariant Per-Connection State (Section 4.7) Variable Keeping Traffic on Fast Paths (Section 4.8) Variable Endpoints Trusting Intermediate Nodes (Section 4.9) Not Now Intermediate Nodes Trusting Endpoints (Section 4.10) Not Now Reacting to Distant Signals (Section 4.11) Variable Support in Endpoint Protocol Stacks (Section 4.12) Variable Planning for Failure (Section 4.13) Invariant \"Justifying Deployment\", \"Providing Benefits for Early Adopters\", \"Paying for Path Aware Techniques\", \"Impact on Operational Practices\", and \"Planning for Failure\" were considered to be Invariant -- the sense of the room was that these would always be considerations for any proposed Path Aware technique.¶ \"Providing Benefits during Partial Deployment\" was added after IETF 105, during Research Group Last Call, and is also considered to be Invariant.¶ For \"Outperforming End-to-End Protocol Mechanisms\", there is a trade-off between improved performance from Path Aware techniques and additional complexity required by some Path Aware techniques.¶ For example, if you can obtain the same understanding of path characteristics from measurements obtained over a few more round trips, endpoint implementers are unlikely to be eager to add complexity, and many attributes can be measured from an endpoint, without assistance from intermediate nodes.¶ For \"Per-Connection State\", the key questions discussed in the Research Group were \"how much state\" and \"where state is maintained\".¶ Integrated Services (IntServ) (Section 6.2) required state at every participating intermediate node for every connection between two endpoints. As the Internet ecosystem has evolved, carrying many connections in a tunnel that appears to intermediate nodes as a single connection has become more common, so that additional end-to-end connections don't add additional state to intermediate nodes between tunnel endpoints. If these tunnels are encrypted, intermediate nodes between tunnel endpoints can't distinguish between connections, even if that were desirable.¶ For \"Keeping Traffic on Fast Paths\", we noted that this was true for many platforms, but not for all.¶ For backbone routers, this is likely an Invariant, but for platforms that rely more on general-purpose computers to make forwarding decisions, this may not be a fatal flaw for Path Aware techniques.¶ For \"Endpoints Trusting Intermediate Nodes\" and \"Intermediate Nodes Trusting Endpoints\", these lessons point to the broader need to revisit the Internet Threat Model.¶ We noted with relief that discussions about this were already underway in the IETF community at IETF 105 (see the Security Area Open Meeting minutes [SAAG-105-Min] for discussion of [INTERNET-THREAT-MODEL] and [FARRELL-ETM]), and the Internet Architecture Board has created a mailing list for continued discussions [model-t], but we recognize that there are Path Aware networking aspects of this effort, requiring research.¶ For \"Reacting to Distant Signals\", we noted that not all attributes are equal.¶ If an attribute is stable over an extended period of time, is difficult to observe via end-to-end mechanisms, and is valuable, Path Aware techniques that rely on that attribute to provide a significant benefit become more attractive.¶ Analysis to help identify attributes that are useful enough to justify deployment of Path Aware techniques that make use of those attributes would be helpful.¶ For \"Support in Endpoint Protocol Stacks\", we noted that Path Aware applications must be able to identify and communicate requirements about path characteristics.¶ The de facto sockets API has no way of signaling application expectations for the network path to the protocol stack.¶ 4. Summary of Lessons Learned This section summarizes the Lessons Learned from the contributed subsections in Section 6.¶ Each Lesson Learned is tagged with one or more contributions that encountered this obstacle as a significant impediment to deployment. Other contributed techniques may have also encountered this obstacle, but this obstacle may not have been the biggest impediment to deployment for those techniques.¶ It is useful to notice that sometimes an obstacle might impede deployment, while at other times, the same obstacle might prevent adoption and deployment entirely. The Research Group discussed distinguishing between obstacles that impede and obstacles that prevent, but it appears that the boundary between \"impede\" and \"prevent\" can shift over time -- some of the Lessons Learned are based on both a) Path Aware techniques that were not deployed and b) Path Aware techniques that were deployed but were not deployed widely or quickly. See Sections 6.6 and 6.6.3 for examples of this shifting boundary.¶ 4.1. Justifying Deployment The benefit of Path Awareness must be great enough to justify making changes in an operational network. The colloquial U.S. American English expression, \"If it ain't broke, don't fix it\" is a \"best current practice\" on today's Internet. (See Sections 6.3, 6.4, 6.5, and 6.9, in addition to [RFC5218].)¶ 4.2. Providing Benefits for Early Adopters Providing benefits for early adopters can be key -- if everyone must deploy a technique in order for the technique to provide benefits, or even to work at all, the technique is unlikely to be adopted widely or quickly. (See Sections 6.2 and 6.3, in addition to [RFC5218].)¶ 4.3. Providing Benefits during Partial Deployment Some proposals require that all path elements along the full length of the path must be upgraded to support a new technique, before any benefits can be seen. This is likely to require coordination between operators who control a subset of path elements, and between operators and end users if endpoint upgrades are required. If a technique provides benefits when only a part of the path has been upgraded, this is likely to encourage adoption and deployment. (See Sections 6.2, 6.3, and 6.9, in addition to [RFC5218].)¶ 4.4. Outperforming End-to-End Protocol Mechanisms Adaptive end-to-end protocol mechanisms may respond to feedback quickly enough that the additional realizable benefit from a new Path Aware mechanism that tries to manipulate nodes along a path, or observe the attributes of nodes along a path, may be much smaller than anticipated. (See Sections 6.3 and 6.5.)¶ 4.5. Paying for Path Aware Techniques \"Follow the money.\" If operators can't charge for a Path Aware technique to recover the costs of deploying it, the benefits to the operator must be really significant. Corollary: if operators charge for a Path Aware technique, the benefits to users of that Path Aware technique must be significant enough to justify the cost. (See Sections 6.1, 6.2, 6.5, and 6.9.)¶ 4.6. Impact on Operational Practices The impact of a Path Aware technique requiring changes to operational practices can affect how quickly or widely a promising technique is deployed. The impacts of these changes may make deployment more likely, but they often discourage deployment. (See Section 6.6, including Section 6.6.3.)¶ 4.7. Per-Connection State Per-connection state in intermediate nodes has been an impediment to adoption and deployment in the past, because of added cost and complexity. Often, similar benefits can be achieved with much less finely grained state. This is especially true as we move from the edge of the network, further into the routing core. (See Sections 6.1 and 6.2.)¶ 4.8. Keeping Traffic on Fast Paths Many modern platforms, especially high-end routers, have been designed with hardware that can make simple per-packet forwarding decisions (\"fast paths\") but have not been designed to make heavy use of in-band mechanisms such as IPv4 and IPv6 Router Alert Options (RAOs) that require more processing to make forwarding decisions. Packets carrying in-band mechanisms are diverted to other processors in the router with much lower packet-processing rates. Operators can be reluctant to deploy techniques that rely heavily on in-band mechanisms because they may significantly reduce packet throughput. (See Section 6.7.)¶ 4.9. Endpoints Trusting Intermediate Nodes If intermediate nodes along the path can't be trusted, it's unlikely that endpoints will rely on signals from intermediate nodes to drive changes to endpoint behaviors. We note that \"trust\" is not binary -- one low level of trust applies when a node receiving a message can confirm that the sender of the message has visibility of the packets on the path it is seeking to control [RFC8085] (e.g., an ICMP Destination Unreachable message [RFC0792] that includes the Internet Header + 64 bits of Original Data Datagram payload from the source). A higher level of trust can arise when an endpoint has established a short-term, or even long-term, trust relationship with network nodes. (See Sections 6.4 and 6.5.)¶ 4.10. Intermediate Nodes Trusting Endpoints If the endpoints do not have any trust relationship with the intermediate nodes along a path, operators have been reluctant to deploy techniques that rely on endpoints sending unauthenticated control signals to routers. (See Sections 6.2 and 6.7.) (We also note that this still remains a factor hindering deployment of Diffserv.)¶ 4.11. Reacting to Distant Signals Because the Internet is a distributed system, if the distance that information from distant path elements travels to a Path Aware host is sufficiently large, the information may no longer accurately represent the state and situation at the distant host or elements along the path when it is received locally. In this case, the benefit that a Path Aware technique provides will be inconsistent and may not always be beneficial. (See Section 6.3.)¶ 4.12. Support in Endpoint Protocol Stacks Just because a protocol stack provides a new feature/signal does not mean that applications will use the feature/signal. Protocol stacks may not know how to effectively utilize Path Aware techniques, because the protocol stack may require information from applications to permit the technique to work effectively, but applications may not a priori know that information. Even if the application does know that information, the de facto sockets API has no way of signaling application expectations for the network path to the protocol stack. In order for applications to provide these expectations to protocol stacks, we need an API that signals more than the packets to be sent. (See Sections 6.1 and 6.2.)¶ 4.13. Planning for Failure If early implementers discover severe problems with a new feature, that feature is likely to be disabled, and convincing implementers to re-enable that feature can be very difficult and can require years or decades. In addition to testing, partial deployment for a subset of users, implementing instrumentation that will detect degraded user experience, and even \"failback\" to a previous version or \"failover\" to an entirely different implementation are likely to be helpful. (See Section 6.9.)¶ 5. Future Work By its nature, this document has been retrospective. In addition to considering how the Lessons Learned to date apply to current and future Path Aware networking proposals, it's also worth considering whether there is deeper investigation left to do.¶ We note that this work was based on contributions from experts on various Path Aware techniques, and all of the contributed techniques involved unicast protocols. We didn't consider how these lessons might apply to multicast, and, given anecdotal reports at the IETF 109 Media Operations (MOPS) Working Group meeting of IP multicast offerings within data centers at one or more cloud providers [MOPS-109-Min], it might be useful to think about Path Awareness in multicast, before we have a history of unsuccessful deployments to document.¶ The question of whether a mechanism supports admission control, based on either endpoints or applications, is associated with Path Awareness. One of the motivations of IntServ and a number of other architectures (e.g., Deterministic Networking [RFC8655]) is the ability to \"say no\" to an application based on resource availability on a path, before the application tries to inject traffic onto that path and discovers the path does not have the capacity to sustain enough utility to meet the application's minimum needs. The question of whether admission control is needed comes up repeatedly, but we have learned a few useful lessons that, while covered implicitly in some of the Lessons Learned provided in this document, might be explained explicitly:¶ We have gained a lot of experience with application-based adaptation since the days where applications just injected traffic inelastically into the network. Such adaptations seem to work well enough that admission control is of less value to these applications.¶ There are end-to-end measurement techniques that can steer traffic at the application layer (Content Delivery Networks (CDNs), multi-CDNs like Conviva [Conviva], etc.).¶ We noted in Section 4.12 that applications often don't know how to utilize Path Aware techniques. This includes not knowing enough about their admission control threshold to be able to ask accurately for the resources they need, whether this is because the application itself doesn't know or because the application has no way to signal its expectations to the underlying protocol stack. To date, attempts to help them haven't gotten anywhere (e.g., the multiple-TSPEC (Traffic Specification) additions to RSVP to attempt to mirror codec selection by applications [INTSERV-MULTIPLE-TSPEC] expired in 2013).¶ We note that this work took the then-current IP network architecture as given, at least at the time each technique was proposed. It might be useful to consider aspects of the now-current IP network architecture that ease, or impede, Path Aware techniques. For example, there is limited ability in IP to constrain bidirectional paths to be symmetric, and information-centric networking protocols such as Named Data Networking (NDN) and Content-Centric Networking (CCNx) [RFC8793] must force bidirectional path symmetry using protocol-specific mechanisms.¶ 6. Contributions Contributions on these Path Aware techniques were analyzed to arrive at the Lessons Learned captured in Section 4.¶ Our expectation is that most readers will not need to read through this section carefully, but we wanted to record these hard-fought lessons as a service to others who may revisit this document, so they'll have the details close at hand.¶ 6.1. Stream Transport (ST, ST2, ST2+) The suggested references for Stream Transport are:¶ \"ST - A Proposed Internet Stream Protocol\" [IEN-119]¶ \"Experimental Internet Stream Protocol: Version 2 (ST-II)\" [RFC1190]¶ \"Internet Stream Protocol Version 2 (ST2) Protocol Specification - Version ST2+\" [RFC1819]¶ The first version of Stream Transport, ST [IEN-119], was published in the late 1970s and was implemented and deployed on the ARPANET at small scale. It was used throughout the 1980s for experimental transmission of voice, video, and distributed simulation.¶ The second version of the ST specification (ST2) [RFC1190] [RFC1819] was an experimental connection-oriented internetworking protocol that operated at the same layer as connectionless IP. ST2 packets could be distinguished by their IP header version numbers (IP, at that time, used version number 4, while ST2 used version number 5).¶ ST2 used a control plane layered over IP to select routes and reserve capacity for real-time streams across a network path, based on a flow specification communicated by a separate protocol. The flow specification could be associated with QoS state in routers, producing an experimental resource reservation protocol. This allowed ST2 routers along a path to offer end-to-end guarantees, primarily to satisfy the QoS requirements for real-time services over the Internet.¶ 6.1.1. Reasons for Non-deployment Although implemented in a range of equipment, ST2 was not widely used after completion of the experiments. It did not offer the scalability and fate-sharing properties that have come to be desired by the Internet community.¶ The ST2 protocol is no longer in use.¶ 6.1.2. Lessons Learned As time passed, the trade-off between router processing and link capacity changed. Links became faster, and the cost of router processing became comparatively more expensive.¶ The ST2 control protocol used \"hard state\" -- once a route was established, and resources were reserved, routes and resources existed until they were explicitly released via signaling. A soft-state approach was thought superior to this hard-state approach and led to development of the IntServ model described in Section 6.2.¶ 6.2. Integrated Services (IntServ) The suggested references for IntServ are:¶ \"Integrated Services in the Internet Architecture: an Overview\" [RFC1633]¶ \"Specification of the Controlled-Load Network Element Service\" [RFC2211]¶ \"Specification of Guaranteed Quality of Service\" [RFC2212]¶ \"General Characterization Parameters for Integrated Service Network Elements\" [RFC2215]¶ \"Resource ReSerVation Protocol (RSVP) -- Version 1 Functional Specification\" [RFC2205]¶ In 1994, when the IntServ architecture document [RFC1633] was published, real-time traffic was first appearing on the Internet. At that time, bandwidth was still a scarce commodity. Internet Service Providers built networks over DS3 (45 Mbps) infrastructure, and sub-rate (< 1 Mbps) access was common. Therefore, the IETF anticipated a need for a fine-grained QoS mechanism.¶ In the IntServ architecture, some applications can require service guarantees. Therefore, those applications use RSVP [RFC2205] to signal QoS reservations across network paths. Every router in the network that participates in IntServ maintains per-flow soft state to a) perform call admission control and b) deliver guaranteed service.¶ Applications use Flow Specifications (Flow Specs, or FLOWSPECs) [RFC2210] to describe the traffic that they emit. RSVP reserves capacity for traffic on a per-Flow-Spec basis.¶ 6.2.1. Reasons for Non-deployment Although IntServ has been used in enterprise and government networks, IntServ was never widely deployed on the Internet because of its cost. The following factors contributed to operational cost:¶ IntServ must be deployed on every router that is on a path where IntServ is to be used. Although it is possible to include a router that does not participate in IntServ along the path being controlled, if that router is likely to become a bottleneck, IntServ cannot be used to avoid that bottleneck along the path.¶ IntServ maintained per-flow state.¶ As IntServ was being discussed, the following occurred:¶ For many expected uses, it became more cost effective to solve the QoS problem by adding bandwidth. Between 1994 and 2000, Internet Service Providers upgraded their infrastructures from DS3 (45 Mbps) to OC-48 (2.4 Gbps). This meant that even if an endpoint was using IntServ in an IntServ-enabled network, its requests would rarely, if ever, be denied, so endpoints and Internet Service Providers had little reason to enable IntServ.¶ Diffserv [RFC2475] offered a more cost-effective, albeit less fine-grained, solution to the QoS problem.¶ 6.2.2. Lessons Learned The following lessons were learned:¶ Any mechanism that requires every participating on-path router to maintain per-flow state is not likely to succeed, unless the additional cost for offering the feature can be recovered from the user.¶ Any mechanism that requires an operator to upgrade all of its routers is not likely to succeed, unless the additional cost for offering the feature can be recovered from the user.¶ In environments where IntServ has been deployed, trust relationships with endpoints are very different from trust relationships on the Internet itself. There are often clearly defined hierarchies in Service Level Agreements (SLAs) governing well-defined transport flows operating with predetermined capacity and latency requirements over paths where capacity or other attributes are constrained.¶ IntServ was never widely deployed to manage capacity across the Internet. However, the technique that it produced was deployed for reasons other than bandwidth management. RSVP is widely deployed as an MPLS signaling mechanism. BGP reuses the RSVP concept of Filter Specs to distribute firewall filters, although they are called \"Flow Spec Component Types\" in BGP [RFC5575].¶ 6.3. Quick-Start TCP The suggested references for Quick-Start TCP are:¶ \"Quick-Start for TCP and IP\" [RFC4782]¶ \"Determining an appropriate sending rate over an underutilized network path\" [SAF07]¶ \"Fast Startup Internet Congestion Control for Broadband Interactive Applications\" [Sch11]¶ \"Using Quick-Start to enhance TCP-friendly rate control performance in bidirectional satellite networks\" [QS-SAT]¶ Quick-Start is defined in an Experimental RFC [RFC4782] and is a TCP extension that leverages support from the routers on the path to determine an allowed initial sending rate for a path through the Internet, either at the start of data transfers or after idle periods. Without information about the path, a sender cannot easily determine an appropriate initial sending rate. The default TCP congestion control therefore uses the safe but time-consuming slow-start algorithm [RFC5681]. With Quick-Start, connections are allowed to use higher initial sending rates if there is significant unused bandwidth along the path and if the sender and all of the routers along the path approve the request.¶ By examining the Time To Live (TTL) field in Quick-Start packets, a sender can determine if routers on the path have approved the Quick-Start request. However, this method is unable to take into account the routers hidden by tunnels or other network nodes invisible at the IP layer.¶ The protocol also includes a nonce that provides protection against cheating routers and receivers. If the Quick-Start request is explicitly approved by all routers along the path, the TCP host can send at up to the approved rate; otherwise, TCP would use the default congestion control. Quick-Start requires modifications in the involved end systems as well as in routers. Due to the resulting deployment challenges, Quick-Start was only proposed in [RFC4782] for controlled environments.¶ The Quick-Start mechanism is a lightweight, coarse-grained, in-band, network-assisted fast startup mechanism. The benefits are studied by simulation in a research paper [SAF07] that complements the protocol specification. The study confirms that Quick-Start can significantly speed up mid-sized data transfers. That paper also presents router algorithms that do not require keeping per-flow state. Later studies [Sch11] comprehensively analyze Quick-Start with a full Linux implementation and with a router fast-path prototype using a network processor. In both cases, Quick-Start could be implemented with limited additional complexity.¶ 6.3.1. Reasons for Non-deployment However, experiments with Quick-Start in [Sch11] revealed several challenges:¶ Having information from the routers along the path can reduce the risk of congestion but cannot avoid it entirely. Determining whether there is unused capacity is not trivial in actual router and host implementations. Data about available capacity visible at the IP layer may be imprecise, and due to the propagation delay, information can already be outdated when it reaches a sender. There is a trade-off between the speedup of data transfers and the risk of congestion even with Quick-Start. This could be mitigated by only allowing Quick-Start to access a proportion of the unused capacity along a path.¶ For scalable router fast-path implementations, it is important to enable parallel processing of packets, as this is a widely used method, e.g., in network processors. One challenge is synchronization of information between packets that are processed in parallel, which should be avoided as much as possible.¶ Only some types of application traffic can benefit from Quick-Start. Capacity needs to be requested and discovered. The discovered capacity needs to be utilized by the flow, or it implicitly becomes available for other flows. Failing to use the requested capacity may have already reduced the pool of Quick-Start capacity that was made available to other competing Quick-Start requests. The benefit is greatest when senders use this only for bulk flows and avoid sending unnecessary Quick-Start requests, e.g., for flows that only send a small amount of data. Choosing an appropriate request size requires application-internal knowledge that is not commonly expressed by the transport API. How a sender can determine the rate for an initial Quick-Start request is still a largely unsolved problem.¶ There is no known deployment of Quick-Start for TCP or other IETF transports.¶ 6.3.2. Lessons Learned Some lessons can be learned from Quick-Start. Despite being a very lightweight protocol, Quick-Start suffers from poor incremental deployment properties regarding both a) the required modifications in network infrastructure and b) its interactions with applications. Except for corner cases, congestion control can be quite efficiently performed end to end in the Internet, and in modern stacks there is not much room for significant improvement by additional network support.¶ After publication of the Quick-Start specification, there have been large-scale experiments with an initial window of up to 10 segments [RFC6928]. This alternative \"IW10\" approach can also ramp up data transfers faster than the standard congestion control, but it only requires sender-side modifications. As a result, this approach can be easier and incrementally deployed in the Internet. While theoretically Quick-Start can outperform \"IW10\", the improvement in completion time for data transfer times can, in many cases, be small. After publication of [RFC6928], most modern TCP stacks have increased their default initial window.¶ 6.4. ICMP Source Quench The suggested reference for ICMP Source Quench is:¶ \"Internet Control Message Protocol\" [RFC0792]¶ The ICMP Source Quench message [RFC0792] allowed an on-path router to request the source of a flow to reduce its sending rate. This method allowed a router to provide an early indication of impending congestion on a path to the sources that contribute to that congestion.¶ 6.4.1. Reasons for Non-deployment This method was deployed in Internet routers over a period of time; the reaction of endpoints to receiving this signal has varied. For low-speed links, with low multiplexing of flows the method could be used to regulate (momentarily reduce) the transmission rate. However, the simple signal does not scale with link speed or with the number of flows sharing a link.¶ The approach was overtaken by the evolution of congestion control methods in TCP [RFC2001], and later also by other IETF transports. Because these methods were based upon measurement of the end-to-end path and an algorithm in the endpoint, they were able to evolve and mature more rapidly than methods relying on interactions between operational routers and endpoint stacks.¶ After ICMP Source Quench was specified, the IETF began to recommend that transports provide end-to-end congestion control [RFC2001]. The Source Quench method has been obsoleted by the IETF [RFC6633], and both hosts and routers must now silently discard this message.¶ 6.4.2. Lessons Learned This method had several problems.¶ First, [RFC0792] did not sufficiently specify how the sender would react to the ICMP Source Quench signal from the path (e.g., [RFC1016]). There was ambiguity in how the sender should utilize this additional information. This could lead to unfairness in the way that receivers (or routers) responded to this message.¶ Second, while the message did provide additional information, the Explicit Congestion Notification (ECN) mechanism [RFC3168] provided a more robust and informative signal for network nodes to provide early indication that a path has become congested.¶ The mechanism originated at a time when the Internet trust model was very different. Most endpoint implementations did not attempt to verify that the message originated from an on-path node before they utilized the message. This made it vulnerable to Denial-of-Service (DoS) attacks. In theory, routers might have chosen to use the quoted packet contained in the ICMP payload to validate that the message originated from an on-path node, but this would have increased per-packet processing overhead for each router along the path and would have required transport functionality in the router to verify whether the quoted packet header corresponded to a packet the router had sent. In addition, Section 5.2 of [RFC4443] noted ICMPv6-based attacks on hosts that would also have threatened routers processing ICMPv6 Source Quench payloads. As time passed, it became increasingly obvious that the lack of validation of the messages exposed receivers to a security vulnerability where the messages could be forged to create a tangible DoS opportunity.¶ 6.5. Triggers for Transport (TRIGTRAN) The suggested references for TRIGTRAN are:¶ TRIGTRAN BOF at IETF 55 [TRIGTRAN-55]¶ TRIGTRAN BOF at IETF 56 [TRIGTRAN-56]¶ TCP [RFC0793] has a well-known weakness -- the end-to-end flow control mechanism has only a single signal, the loss of a segment, detected when no acknowledgment for the lost segment is received at the sender. There are multiple reasons why the sender might not have received an acknowledgment for the segment. To name several, the segment could have been trapped in a routing loop, damaged in transmission and failed checksum verification at the receiver, or lost because some intermediate device discarded the packet, or any of a variety of other things could have happened to the acknowledgment on the way back from the receiver to the sender. TCP implementations since the late 1980s have made the \"safe\" decision and have interpreted the loss of a segment as evidence that the path between two endpoints may have become congested enough to exhaust buffers on intermediate hops, so that the TCP sender should \"back off\" -- reduce its sending rate until it knows that its segments are now being delivered without loss [RFC5681].¶ The thinking behind TRIGTRAN was that if a path completely stopped working because a link along the path was \"down\", somehow something along the path could signal TCP when that link returned to service, and the sending TCP could retry immediately, without waiting for a full retransmission timeout (RTO) period.¶ 6.5.1. Reasons for Non-deployment The early dreams for TRIGTRAN were dashed because of an assumption that TRIGTRAN triggers would be unauthenticated. This meant that any \"safe\" TRIGTRAN mechanism would have relied on a mechanism such as setting the IPv4 TTL or IPv6 Hop Count to 255 at a sender and testing that it was 254 upon receipt, so that a receiver could verify that a signal was generated by an adjacent sender known to be on the path being used and not some unknown sender that might not even be on the path (e.g., \"The Generalized TTL Security Mechanism (GTSM)\" [RFC5082]). This situation is very similar to the case for ICMP Source Quench messages as described in Section 6.4, which were also unauthenticated and could be sent by an off-path attacker, resulting in deprecation of ICMP Source Quench message processing [RFC6633].¶ TRIGTRAN's scope shrunk from \"the path is down\" to \"the first-hop link is down.\"¶ But things got worse.¶ Because TRIGTRAN triggers would only be provided when the first-hop link was \"down\", TRIGTRAN triggers couldn't replace normal TCP retransmission behavior if the path failed because some link further along the network path was \"down\". So TRIGTRAN triggers added complexity to an already-complex TCP state machine and did not allow any existing complexity to be removed.¶ There was also an issue that the TRIGTRAN signal was not sent in response to a specific host that had been sending packets and was instead a signal that stimulated a response by any sender on the link. This needs to scale when there are multiple flows trying to use the same resource, yet the sender of a trigger has no understanding of how many of the potential traffic sources will respond by sending packets -- if recipients of the signal \"back off\" their responses to a trigger to improve scaling, then that immediately mitigates the benefit of the signal.¶ Finally, intermediate forwarding nodes required modification to provide TRIGTRAN triggers, but operators couldn't charge for TRIGTRAN triggers, so there was no way to recover the cost of modifying, testing, and deploying updated intermediate nodes.¶ Two TRIGTRAN BOFs were held, at IETF 55 [TRIGTRAN-55] and IETF 56 [TRIGTRAN-56], but this work was not chartered, and there was no interest in deploying TRIGTRAN unless it was chartered and standardized in the IETF.¶ 6.5.2. Lessons Learned The reasons why this work was not chartered, much less deployed, provide several useful lessons for researchers.¶ TRIGTRAN started with a plausible value proposition, but networking realities in the early 2000s forced reductions in scope that led directly to reductions in potential benefits but no corresponding reductions in costs and complexity.¶ These reductions in scope were the direct result of an inability for hosts to trust or authenticate TRIGTRAN signals they received from the network.¶ Operators did not believe they could charge for TRIGTRAN signaling, because first-hop links didn't fail frequently and TRIGTRAN provided no reduction in operating expenses, so there was little incentive to purchase and deploy TRIGTRAN-capable network equipment.¶ It is also worth noting that the targeted environment for TRIGTRAN in the late 1990s contained links with a relatively small number of directly connected hosts -- for instance, cellular or satellite links. The transport community was well aware of the dangers of sender synchronization based on multiple senders receiving the same stimulus at the same time, but the working assumption for TRIGTRAN was that there wouldn't be enough senders for this to be a meaningful problem. In the 2010s, it was common for a single \"link\" to support many senders and receivers, likely requiring TRIGTRAN senders to wait some random amount of time before sending after receiving a TRIGTRAN signal, which would have reduced the benefits of TRIGTRAN even more.¶ 6.6. Shim6 The suggested reference for Shim6 is:¶ \"Shim6: Level 3 Multihoming Shim Protocol for IPv6\" [RFC5533]¶ The IPv6 routing architecture [RFC1887] assumed that most sites on the Internet would be identified by Provider Assigned IPv6 prefixes, so that Default-Free Zone routers only contained routes to other providers, resulting in a very small IPv6 global routing table.¶ For a single-homed site, this could work well. A multihomed site with only one upstream provider could also work well, although BGP multihoming from a single upstream provider was often a premium service (costing more than twice as much as two single-homed sites), and if the single upstream provider went out of service, all of the multihomed paths could fail simultaneously.¶ IPv4 sites often multihomed by obtaining Provider Independent prefixes and advertising these prefixes through multiple upstream providers. With the assumption that any multihomed IPv4 site would also multihome in IPv6, it seemed likely that IPv6 routing would be subject to the same pressures to announce Provider Independent prefixes, resulting in an IPv6 global routing table that exhibited the same explosive growth as the IPv4 global routing table. During the early 2000s, work began on a protocol that would provide multihoming for IPv6 sites without requiring sites to advertise Provider Independent prefixes into the IPv6 global routing table.¶ This protocol, called \"Shim6\", allowed two endpoints to exchange multiple addresses (\"Locators\") that all mapped to the same endpoint (\"Identity\"). After an endpoint learned multiple Locators for the other endpoint, it could send to any of those Locators with the expectation that those packets would all be delivered to the endpoint with the same Identity. Shim6 was an example of an \"Identity/Locator Split\" protocol.¶ Shim6, as defined in [RFC5533] and related RFCs, provided a workable solution for IPv6 multihoming using Provider Assigned prefixes, including capability discovery and negotiation, and allowing end-to-end application communication to continue even in the face of path failure, because applications don't see Locator failures and continue to communicate with the same Identity using a different Locator.¶ 6.6.1. Reasons for Non-deployment Note that the problem being addressed was \"site multihoming\", but Shim6 was providing \"host multihoming\". That meant that the decision about what path would be used was under host control, not under edge router control.¶ Although more work could have been done to provide a better technical solution, the biggest impediments to Shim6 deployment were operational and business considerations. These impediments were discussed at multiple network operator group meetings, including [Shim6-35] at [NANOG-35].¶ The technical issues centered around concerns that Shim6 relied on the host to track all the connections, while also tracking Identity/Locator mappings in the kernel and tracking failures to recognize that an available path has failed.¶ The operational issues centered around concerns that operators were performing traffic engineering on traffic aggregates. With Shim6, these operator traffic engineering policies must be pushed down to individual hosts.¶ In addition, operators would have no visibility or control over the decision of hosts choosing to switch to another path. They expressed concerns that relying on hosts to steer traffic exposed operator networks to oscillation based on feedback loops, if hosts moved from path to path frequently. Given that Shim6 was intended to support multihoming across operators, operators providing only one of the paths would have even less visibility as traffic suddenly appeared and disappeared on their networks.¶ In addition, firewalls that expected to find a TCP or UDP transport-level protocol header in the IP payload would see a Shim6 Identity header instead, and they would not perform transport-protocol-based firewalling functions because the firewall's normal processing logic would not look past the Identity header. The firewall would perform its default action, which would most likely be to drop packets that don't match any processing rule.¶ The business issues centered on reducing or removing the ability to sell BGP multihoming service to their own customers, which is often more expensive than two single-homed connectivity services.¶ 6.6.2. Lessons Learned It is extremely important to take operational concerns into account when a Path Aware protocol is making decisions about path selection that may conflict with existing operational practices and business considerations.¶ 6.6.3. Addendum on Multipath TCP During discussions in the PANRG session at IETF 103 [PANRG-103-Min], Lars Eggert, past Transport Area Director, pointed out that during charter discussions for the Multipath TCP Working Group [MP-TCP], operators expressed concerns that customers could use Multipath TCP to load-share TCP connections across operators simultaneously and compare passive performance measurements across network paths in real time, changing the balance of power in those business relationships. Although the Multipath TCP Working Group was chartered, this concern could have acted as an obstacle to deployment.¶ Operator objections to Shim6 were focused on technical concerns, but this concern could have also been an obstacle to Shim6 deployment if the technical concerns had been overcome.¶ 6.7. Next Steps in Signaling (NSIS) The suggested references for Next Steps in Signaling (NSIS) are:¶ the concluded working group charter [NSIS-CHARTER-2001]¶ \"GIST: General Internet Signalling Transport\" [RFC5971]¶ \"NAT/Firewall NSIS Signaling Layer Protocol (NSLP)\" [RFC5973]¶ \"NSIS Signaling Layer Protocol (NSLP) for Quality-of-Service Signaling\" [RFC5974]¶ \"Authorization for NSIS Signaling Layer Protocols\" [RFC5981]¶ The NSIS Working Group worked on signaling techniques for network-layer resources (e.g., QoS resource reservations, Firewall and NAT traversal).¶ When RSVP [RFC2205] was used in deployments, a number of questions came up about its perceived limitations and potential missing features. The issues noted in the NSIS Working Group charter [NSIS-CHARTER-2001] include interworking between domains with different QoS architectures, mobility and roaming for IP interfaces, and complexity. Later, the lack of security in RSVP was also recognized [RFC4094].¶ The NSIS Working Group was chartered to tackle those issues and initially focused on QoS signaling as its primary use case. However, over time a new approach evolved that introduced a modular architecture using two application-specific signaling protocols: a) the NSIS Signaling Layer Protocol (NSLP) on top of b) a generic signaling transport protocol (the NSIS Transport Layer Protocol (NTLP)).¶ NTLP is defined in [RFC5971]. Two types of NSLPs are defined: an NSLP for QoS signaling [RFC5974] and an NSLP for NATs/firewalls [RFC5973].¶ 6.7.1. Reasons for Non-deployment The obstacles for deployment can be grouped into implementation-related aspects and operational aspects.¶ Implementation-related aspects:¶ Although NSIS provides benefits with respect to flexibility, mobility, and security compared to other network signaling techniques, hardware vendors were reluctant to deploy this solution, because it would require additional implementation effort and would result in additional complexity for router implementations.¶ NTLP mainly operates as a path-coupled signaling protocol, i.e., its messages are processed at the control plane of each intermediate node that is also forwarding the data flows. This requires a mechanism to intercept signaling packets while they are forwarded in the same manner (especially along the same path) as data packets. NSIS uses the IPv4 and IPv6 Router Alert Option (RAO) to allow for interception of those path-coupled signaling messages, and this technique requires router implementations to correctly understand and implement the handling of RAOs, e.g., to only process packets with RAOs of interest and to leave packets with irrelevant RAOs in the fast forwarding processing path (a comprehensive discussion of these issues can be found in [RFC6398]). The latter was an issue with some router implementations at the time of standardization.¶ Another reason is that path-coupled signaling protocols that interact with routers and request manipulation of state at these routers (or any other network element in general) are under scrutiny: a packet (or sequence of packets) out of the mainly untrusted data path is requesting creation and manipulation of network state. This is seen as potentially dangerous (e.g., opens up a DoS threat to a router's control plane) and difficult for an operator to control. Path-coupled signaling approaches were considered problematic (see also Section 3 of [RFC6398]). There are recommendations on how to secure NSIS nodes and deployments (e.g., [RFC5981]).¶ Operational Aspects:¶ NSIS not only required trust between customers and their provider, but also among different providers. In particular, QoS signaling techniques would require some kind of dynamic SLA support that would imply (potentially quite complex) bilateral negotiations between different Internet Service Providers. This complexity was not considered to be justified, and increasing the bandwidth (and thus avoiding bottlenecks) was cheaper than actively managing network resource bottlenecks by using path-coupled QoS signaling techniques. Furthermore, an end-to-end path typically involves several provider domains, and these providers need to closely cooperate in cases of failures.¶ 6.7.2. Lessons Learned One goal of NSIS was to decrease the complexity of the signaling protocol, but a path-coupled signaling protocol comes with the intrinsic complexity of IP-based networks, beyond the complexity of the signaling protocol itself. Sources of intrinsic complexity include:¶ the presence of asymmetric routes between endpoints and routers.¶ the lack of security and trust at large in the Internet infrastructure.¶ the presence of different trust boundaries.¶ the effects of best-effort networks (e.g., robustness to packet loss).¶ divergence from the fate-sharing principle (e.g., state within the network).¶ Any path-coupled signaling protocol has to deal with these realities.¶ Operators view the use of IPv4 and IPv6 Router Alert Options (RAOs) to signal routers along the path from end systems with suspicion, because these end systems are usually not authenticated and heavy use of RAOs can easily increase the CPU load on routers that are designed to process most packets using a hardware \"fast path\" and diverting packets containing RAOs to a slower, more capable processor.¶ 6.8. IPv6 Flow Labels The suggested reference for IPv6 Flow Labels is:¶ \"IPv6 Flow Label Specification\" [RFC6437]¶ IPv6 specifies a 20-bit Flow Label field [RFC6437], included in the fixed part of the IPv6 header and hence present in every IPv6 packet. An endpoint sets the value in this field to one of a set of pseudorandomly assigned values. If a packet is not part of any flow, the flow label value is set to zero [RFC3697]. A number of Standards Track and Best Current Practice RFCs (e.g., [RFC8085], [RFC6437], [RFC6438]) encourage IPv6 endpoints to set a non-zero value in this field. A multiplexing transport could choose to use multiple flow labels to allow the network to either independently forward its subflows or use one common value for the traffic aggregate. The flow label is present in all fragments. IPsec was originally put forward as one important use case for this mechanism and does encrypt the field [RFC6438].¶ Once set, the flow label can provide information that can help inform network nodes about subflows present at the transport layer, without needing to interpret the setting of upper-layer protocol fields [RFC6294]. This information can also be used to coordinate how aggregates of transport subflows are grouped when queued in the network and to select appropriate per-flow forwarding when choosing between alternate paths [RFC6438] (e.g., for Equal-Cost Multipath (ECMP) routing and Link Aggregation Groups (LAGs)).¶ 6.8.1. Reasons for Non-deployment Despite the field being present in every IPv6 packet, the mechanism did not receive as much use as originally envisioned. One reason is that to be useful it requires engagement by two different stakeholders:¶ Endpoint Implementation:¶ For network nodes along a path to utilize the flow label, there needs to be a non-zero value inserted in the field [RFC6437] at the sending endpoint. There needs to be an incentive for an endpoint to set an appropriate non-zero value. The value should appropriately reflect the level of aggregation the traffic expects to be provided by the network. However, this requires the stack to know granularity at which flows should be identified (or, conversely, which flows should receive aggregated treatment), i.e., which packets carry the same flow label. Therefore, setting a non-zero value may result in additional choices that need to be made by an application developer.¶ Although the original flow label standard [RFC3697] forbids any encoding of meaning into the flow label value, the opportunity to use the flow label as a covert channel or to signal other meta-information may have raised concerns about setting a non-zero value [RFC6437].¶ Before methods are widely deployed to use this method, there could be no incentive for an endpoint to set the field.¶ Operational support in network nodes:¶ A benefit can only be realized when a network node along the path also uses this information to inform its decisions. Network equipment (routers and/or middleboxes) need to include appropriate support in order to utilize the field when making decisions about how to classify flows or forward packets. The use of any optional feature in a network node also requires corresponding updates to operational procedures and therefore is normally only introduced when the cost can be justified.¶ A benefit from utilizing the flow label is expected to be increased quality of experience for applications -- but this comes at some operational cost to an operator and requires endpoints to set the field.¶ 6.8.2. Lessons Learned The flow label is a general-purpose header field for use by the path. Multiple uses have been proposed. One candidate use was to reduce the complexity of forwarding decisions. However, modern routers can use a \"fast path\", often taking advantage of hardware to accelerate processing. The method can assist in more complex forwarding, such as ECMP routing and load balancing.¶ Although [RFC6437] recommended that endpoints should by default choose uniformly distributed labels for their traffic, the specification permitted an endpoint to choose to set a zero value. This ability of endpoints to choose to set a flow label of zero has had consequences on deployability:¶ Before wide-scale support by endpoints, it would be impossible to rely on a non-zero flow label being set. Network nodes therefore would need to also employ other techniques to realize equivalent functions. An example of a method is one assuming semantics of the source port field to provide entropy input to a network-layer hash. This use of a 5-tuple to classify a packet represents a layering violation [RFC6294]. When other methods have been deployed, they increase the cost of deploying standards-based methods, even though they may offer less control to endpoints and result in potential interaction with other uses/interpretation of the field.¶ Even though the flow label is specified as an end-to-end field, some network paths have been observed to not transparently forward the flow label. This could result from non-conformant equipment or could indicate that some operational networks have chosen to reuse the protocol field for other (e.g., internal) purposes. This results in lack of transparency, and a deployment hurdle to endpoints expecting that they can set a flow label that is utilized by the network. The more recent practice of \"greasing\" [GREASE] would suggest that a different outcome could have been achieved if endpoints were always required to set a non-zero value.¶ [RFC1809] noted that setting the choice of the flow label value can depend on the expectations of the traffic generated by an application, which suggests that an API should be presented to control the setting or policy that is used. However, many currently available APIs do not have this support.¶ A growth in the use of encrypted transports (e.g., QUIC [RFC9000]) seems likely to raise issues similar to those discussed above and could motivate renewed interest in utilizing the flow label.¶ 6.9. Explicit Congestion Notification (ECN) The suggested references for Explicit Congestion Notification (ECN) are:¶ \"Recommendations on Queue Management and Congestion Avoidance in the Internet\" [RFC2309]¶ \"A Proposal to add Explicit Congestion Notification (ECN) to IP\" [RFC2481]¶ \"The Addition of Explicit Congestion Notification (ECN) to IP\" [RFC3168]¶ \"Implementation Report on Experiences with Various TCP RFCs\" [vista-impl], slides 6 and 7¶ \"Implementation and Deployment of ECN\" (at [SallyFloyd])¶ In the early 1990s, the large majority of Internet traffic used TCP as its transport protocol, but TCP had no way to detect path congestion before the path was so congested that packets were being dropped. These congestion events could affect all senders using a path, either by \"lockout\", where long-lived flows monopolized the queues along a path, or by \"full queues\", where queues remain full, or almost full, for a long period of time.¶ In response to this situation, \"Active Queue Management\" (AQM) was deployed in the network. A number of AQM disciplines have been deployed, but one common approach was that routers dropped packets when a threshold buffer length was reached, so that transport protocols like TCP that were responsive to loss would detect this loss and reduce their sending rates. Random Early Detection (RED) was one such proposal in the IETF. As the name suggests, a router using RED as its AQM discipline that detected time-averaged queue lengths passing a threshold would choose incoming packets probabilistically to be dropped [RFC2309].¶ Researchers suggested providing \"explicit congestion notifications\" to senders when routers along the path detected that their queues were building, giving senders an opportunity to \"slow down\" as if a loss had occurred, giving path queues time to drain, while the path still had sufficient buffer capacity to accommodate bursty arrivals of packets from other senders. This was proposed as an experiment in [RFC2481] and standardized in [RFC3168].¶ A key aspect of ECN was the use of IP header fields rather than IP options to carry explicit congestion notifications, since the proponents recognized that¶ Many routers process the \"regular\" headers in IP packets more efficiently than they process the header information in IP options.¶ Unlike most of the Path Aware technologies included in this document, the story of ECN continues to the present day and encountered a large number of Lessons Learned during that time. The early history of ECN (non-)deployment provides Lessons Learned that were not captured by other contributions in Section 6, so that is the emphasis in this section of the document.¶ 6.9.1. Reasons for Non-deployment ECN deployment relied on three factors -- support in client implementations, support in router implementations, and deployment decisions in operational networks.¶ The proponents of ECN did so much right, anticipating many of the Lessons Learned now recognized in Section 4. They recognized the need to support incremental deployment (Section 4.2). They considered the impact on router throughput (Section 4.8). They even considered trust issues between end nodes and the network, for both non-compliant end nodes (Section 4.10) and non-compliant routers (Section 4.9).¶ They were rewarded with ECN being implemented in major operating systems, for both end nodes and routers. A number of implementations are listed under \"Implementation and Deployment of ECN\" at [SallyFloyd].¶ What they did not anticipate was routers that would crash when they saw bits 6 and 7 in the IPv4 Type of Service (TOS) octet [RFC0791] / IPv6 Traffic Class field [RFC2460], which [RFC2481] redefined to be \"Currently Unused\", being set to a non-zero value.¶ As described in [vista-impl] (\"IGD\" stands for \"Intermediate Gateway Device\"),¶ IGD problem #1: one of the most popular versions from one of the most popular vendors. When a data packet arrives with either ECT(0) or ECT(1) (indicating successful ECN capability negotiation) indicated, router crashed. Cannot be recovered at TCP layer [sic]¶ This implementation, which would be run on a significant percentage of Internet end nodes, was shipped with ECN disabled, as was true for several of the other implementations listed under \"Implementation and Deployment of ECN\" at [SallyFloyd]. Even if subsequent router vendors fixed these implementations, ECN was still disabled on end nodes, and given the trade-off between the benefits of enabling ECN (somewhat better behavior during congestion) and the risks of enabling ECN (possibly crashing a router somewhere along the path), ECN tended to stay disabled on implementations that supported ECN for decades afterwards.¶ 6.9.2. Lessons Learned Of the contributions included in Section 6, ECN may be unique in providing these lessons:¶ Even if you do everything right, you may trip over implementation bugs in devices you know nothing about, that will cause severe problems that prevent successful deployment of your Path Aware technology.¶ After implementations disable your Path Aware technology, it may take years, or even decades, to convince implementers to re-enable it by default.¶ These two lessons, taken together, could be summarized as \"you get one chance to get it right.\"¶ During discussion of ECN at [PANRG-110], we noted that \"you get one chance to get it right\" isn't quite correct today, because operating systems on so many host systems are frequently updated, and transport protocols like QUIC [RFC9000] are being implemented in user space and can be updated without touching installed operating systems. Neither of these factors were true in the early 2000s.¶ We think that these restatements of the ECN Lessons Learned are more useful for current implementers:¶ Even if you do everything right, you may trip over implementation bugs in devices you know nothing about, that will cause severe problems that prevent successful deployment of your Path Aware technology. Testing before deployment isn't enough to ensure successful deployment. It is also necessary to \"deploy gently\", which often means deploying for a small subset of users to gain experience and implementing feedback mechanisms to detect that user experience is being degraded.¶ After implementations disable your Path Aware technology, it may take years, or even decades, to convince implementers to re-enable it by default. This might be based on the difficulty of distributing implementations that enable it by default, but it is just as likely to be based on the \"bad taste in the mouth\" that implementers have after an unsuccessful deployment attempt that degraded user experience.¶ With these expansions, the two lessons, taken together, could be more helpfully summarized as \"plan for failure\" -- anticipate what your next step will be, if initial deployment is unsuccessful.¶ ECN deployment was also hindered by non-deployment of AQM in many devices, because of operator interest in QoS features provided in the network, rather than using the network to assist end systems in providing for themselves. But that's another story, and the AQM Lessons Learned are already covered in other contributions in Section 6.¶ 7. Security Considerations This document describes Path Aware techniques that were not adopted and widely deployed on the Internet, so it doesn't affect the security of the Internet.¶ If this document meets its goals, we may develop new techniques for Path Aware networking that would affect the security of the Internet, but security considerations for those techniques will be described in the corresponding RFCs that specify them.¶ 8. IANA Considerations This document has no IANA actions.¶ 9. Informative References [Colossal-Cave] Wikipedia, \"Colossal Cave Adventure\", June 2021, <https://en.wikipedia.org/w/index.php?title=Colossal_Cave_Adventure&oldid=1027119625>. [Conviva] \"Conviva Precision : Data Sheet\", January 2021, <https://www.conviva.com/datasheets/precision-delivery-intelligence/>. [FARRELL-ETM] Farrell, S., \"We're gonna need a bigger threat model\", Work in Progress, Internet-Draft, draft-farrell-etm-03, 6 July 2019, <https://datatracker.ietf.org/doc/html/draft-farrell-etm-03>. [GREASE] Thomson, M., \"Long-term Viability of Protocol Extension Mechanisms\", Work in Progress, Internet-Draft, draft-iab-use-it-or-lose-it-00, 7 August 2019, <https://datatracker.ietf.org/doc/html/draft-iab-use-it-or-lose-it-00>. [IEN-119] Forgie, J., \"ST - A Proposed Internet Stream Protocol\", September 1979, <https://www.rfc-editor.org/ien/ien119.txt>. [INTERNET-THREAT-MODEL] Arkko, J., \"Changes in the Internet Threat Model\", Work in Progress, Internet-Draft, draft-arkko-arch-internet-threat-model-01, 8 July 2019, <https://datatracker.ietf.org/doc/html/draft-arkko-arch-internet-threat-model-01>. [INTSERV-MULTIPLE-TSPEC] Polk, J. and S. Dhesikan, \"Integrated Services (IntServ) Extension to Allow Signaling of Multiple Traffic Specifications and Multiple Flow Specifications in RSVPv1\", Work in Progress, Internet-Draft, draft-ietf-tsvwg-intserv-multiple-tspec-02, 25 February 2013, <https://datatracker.ietf.org/doc/html/draft-ietf-tsvwg-intserv-multiple-tspec-02>. [ITAT] \"IAB Workshop on Internet Technology Adoption and Transition (ITAT) 2013\", December 2013, <https://www.iab.org/activities/workshops/itat/>. [model-t] \"Model-t -- Discussions of changes in Internet deployment patterns and their impact on the Internet threat model\", model-t mailing list, <https://www.iab.org/mailman/listinfo/model-t>. [MOPS-109-Min] \"Media Operations Working Group - IETF 109 Minutes\", November 2020, <https://datatracker.ietf.org/meeting/109/materials/minutes-109-mops-00>. [MP-TCP] \"Multipath TCP Working Group Home Page\", <https://datatracker.ietf.org/wg/mptcp/>. [NANOG-35] \"NANOG 35 Agenda\", North American Network Operators' Group (NANOG), October 2005, <https://archive.nanog.org/meetings/nanog35/agenda>. [NSIS-CHARTER-2001] \"Next Steps In Signaling Working Group Charter\", March 2011, <https://datatracker.ietf.org/doc/charter-ietf-nsis/>. [PANRG] \"Path Aware Networking Research Group Home Page\", <https://irtf.org/panrg>. [PANRG-103-Min] \"Path Aware Networking Research Group - IETF 103 Minutes\", November 2018, <https://datatracker.ietf.org/doc/minutes-103-panrg/>. [PANRG-105-Min] \"Path Aware Networking Research Group - IETF 105 Minutes\", July 2019, <https://datatracker.ietf.org/doc/minutes-105-panrg/>. [PANRG-106-Min] \"Path Aware Networking Research Group - IETF 106 Minutes\", November 2019, <https://datatracker.ietf.org/doc/minutes-106-panrg/>. [PANRG-110] \"Path Aware Networking Research Group - IETF 110\", March 2021, <https://datatracker.ietf.org/meeting/110/session/panrg>. [PANRG-99] \"Path Aware Networking Research Group - IETF 99\", July 2017, <https://datatracker.ietf.org/meeting/99/session/panrg>. [PANRG-PATH-PROPERTIES] Enghardt, T. and C. Krähenbühl, \"A Vocabulary of Path Properties\", Work in Progress, Internet-Draft, draft-irtf-panrg-path-properties-02, 22 February 2021, <https://datatracker.ietf.org/doc/html/draft-irtf-panrg-path-properties-02>. [PANRG-QUESTIONS] Trammell, B., \"Current Open Questions in Path Aware Networking\", Work in Progress, Internet-Draft, draft-irtf-panrg-questions-09, 16 April 2021, <https://datatracker.ietf.org/doc/html/draft-irtf-panrg-questions-09>. [PATH-Decade] Bonaventure, O., \"A Decade of Path Awareness\", July 2017, <https://datatracker.ietf.org/doc/slides-99-panrg-a-decade-of-path-awareness/>. [QS-SAT] Secchi, R., Sathiaseelan, A., Potortì, F., Gotta, A., and G. Fairhurst, \"Using Quick-Start to enhance TCP-friendly rate control performance in bidirectional satellite networks\", DOI 10.1002/sat.929, May 2009, <https://dl.acm.org/citation.cfm?id=3160304.3160305>. [RFC0791] Postel, J., \"Internet Protocol\", STD 5, RFC 791, DOI 10.17487/RFC0791, September 1981, <https://www.rfc-editor.org/info/rfc791>. [RFC0792] Postel, J., \"Internet Control Message Protocol\", STD 5, RFC 792, DOI 10.17487/RFC0792, September 1981, <https://www.rfc-editor.org/info/rfc792>. [RFC0793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, DOI 10.17487/RFC0793, September 1981, <https://www.rfc-editor.org/info/rfc793>. [RFC1016] Prue, W. and J. Postel, \"Something a Host Could Do with Source Quench: The Source Quench Introduced Delay (SQuID)\", RFC 1016, DOI 10.17487/RFC1016, July 1987, <https://www.rfc-editor.org/info/rfc1016>. [RFC1122] Braden, R., Ed., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, DOI 10.17487/RFC1122, October 1989, <https://www.rfc-editor.org/info/rfc1122>. [RFC1190] Topolcic, C., \"Experimental Internet Stream Protocol: Version 2 (ST-II)\", RFC 1190, DOI 10.17487/RFC1190, October 1990, <https://www.rfc-editor.org/info/rfc1190>. [RFC1633] Braden, R., Clark, D., and S. Shenker, \"Integrated Services in the Internet Architecture: an Overview\", RFC 1633, DOI 10.17487/RFC1633, June 1994, <https://www.rfc-editor.org/info/rfc1633>. [RFC1809] Partridge, C., \"Using the Flow Label Field in IPv6\", RFC 1809, DOI 10.17487/RFC1809, June 1995, <https://www.rfc-editor.org/info/rfc1809>. [RFC1819] Delgrossi, L., Ed. and L. Berger, Ed., \"Internet Stream Protocol Version 2 (ST2) Protocol Specification - Version ST2+\", RFC 1819, DOI 10.17487/RFC1819, August 1995, <https://www.rfc-editor.org/info/rfc1819>. [RFC1887] Rekhter, Y., Ed. and T. Li, Ed., \"An Architecture for IPv6 Unicast Address Allocation\", RFC 1887, DOI 10.17487/RFC1887, December 1995, <https://www.rfc-editor.org/info/rfc1887>. [RFC2001] Stevens, W., \"TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms\", RFC 2001, DOI 10.17487/RFC2001, January 1997, <https://www.rfc-editor.org/info/rfc2001>. [RFC2205] Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S. Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version 1 Functional Specification\", RFC 2205, DOI 10.17487/RFC2205, September 1997, <https://www.rfc-editor.org/info/rfc2205>. [RFC2210] Wroclawski, J., \"The Use of RSVP with IETF Integrated Services\", RFC 2210, DOI 10.17487/RFC2210, September 1997, <https://www.rfc-editor.org/info/rfc2210>. [RFC2211] Wroclawski, J., \"Specification of the Controlled-Load Network Element Service\", RFC 2211, DOI 10.17487/RFC2211, September 1997, <https://www.rfc-editor.org/info/rfc2211>. [RFC2212] Shenker, S., Partridge, C., and R. Guerin, \"Specification of Guaranteed Quality of Service\", RFC 2212, DOI 10.17487/RFC2212, September 1997, <https://www.rfc-editor.org/info/rfc2212>. [RFC2215] Shenker, S. and J. Wroclawski, \"General Characterization Parameters for Integrated Service Network Elements\", RFC 2215, DOI 10.17487/RFC2215, September 1997, <https://www.rfc-editor.org/info/rfc2215>. [RFC2309] Braden, B., Clark, D., Crowcroft, J., Davie, B., Deering, S., Estrin, D., Floyd, S., Jacobson, V., Minshall, G., Partridge, C., Peterson, L., Ramakrishnan, K., Shenker, S., Wroclawski, J., and L. Zhang, \"Recommendations on Queue Management and Congestion Avoidance in the Internet\", RFC 2309, DOI 10.17487/RFC2309, April 1998, <https://www.rfc-editor.org/info/rfc2309>. [RFC2460] Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460, December 1998, <https://www.rfc-editor.org/info/rfc2460>. [RFC2475] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z., and W. Weiss, \"An Architecture for Differentiated Services\", RFC 2475, DOI 10.17487/RFC2475, December 1998, <https://www.rfc-editor.org/info/rfc2475>. [RFC2481] Ramakrishnan, K. and S. Floyd, \"A Proposal to add Explicit Congestion Notification (ECN) to IP\", RFC 2481, DOI 10.17487/RFC2481, January 1999, <https://www.rfc-editor.org/info/rfc2481>. [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of Explicit Congestion Notification (ECN) to IP\", RFC 3168, DOI 10.17487/RFC3168, September 2001, <https://www.rfc-editor.org/info/rfc3168>. [RFC3697] Rajahalme, J., Conta, A., Carpenter, B., and S. Deering, \"IPv6 Flow Label Specification\", RFC 3697, DOI 10.17487/RFC3697, March 2004, <https://www.rfc-editor.org/info/rfc3697>. [RFC4094] Manner, J. and X. Fu, \"Analysis of Existing Quality-of-Service Signaling Protocols\", RFC 4094, DOI 10.17487/RFC4094, May 2005, <https://www.rfc-editor.org/info/rfc4094>. [RFC4443] Conta, A., Deering, S., and M. Gupta, Ed., \"Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification\", STD 89, RFC 4443, DOI 10.17487/RFC4443, March 2006, <https://www.rfc-editor.org/info/rfc4443>. [RFC4782] Floyd, S., Allman, M., Jain, A., and P. Sarolahti, \"Quick-Start for TCP and IP\", RFC 4782, DOI 10.17487/RFC4782, January 2007, <https://www.rfc-editor.org/info/rfc4782>. [RFC5082] Gill, V., Heasley, J., Meyer, D., Savola, P., Ed., and C. Pignataro, \"The Generalized TTL Security Mechanism (GTSM)\", RFC 5082, DOI 10.17487/RFC5082, October 2007, <https://www.rfc-editor.org/info/rfc5082>. [RFC5218] Thaler, D. and B. Aboba, \"What Makes for a Successful Protocol?\", RFC 5218, DOI 10.17487/RFC5218, July 2008, <https://www.rfc-editor.org/info/rfc5218>. [RFC5533] Nordmark, E. and M. Bagnulo, \"Shim6: Level 3 Multihoming Shim Protocol for IPv6\", RFC 5533, DOI 10.17487/RFC5533, June 2009, <https://www.rfc-editor.org/info/rfc5533>. [RFC5575] Marques, P., Sheth, N., Raszuk, R., Greene, B., Mauch, J., and D. McPherson, \"Dissemination of Flow Specification Rules\", RFC 5575, DOI 10.17487/RFC5575, August 2009, <https://www.rfc-editor.org/info/rfc5575>. [RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>. [RFC5971] Schulzrinne, H. and R. Hancock, \"GIST: General Internet Signalling Transport\", RFC 5971, DOI 10.17487/RFC5971, October 2010, <https://www.rfc-editor.org/info/rfc5971>. [RFC5973] Stiemerling, M., Tschofenig, H., Aoun, C., and E. Davies, \"NAT/Firewall NSIS Signaling Layer Protocol (NSLP)\", RFC 5973, DOI 10.17487/RFC5973, October 2010, <https://www.rfc-editor.org/info/rfc5973>. [RFC5974] Manner, J., Karagiannis, G., and A. McDonald, \"NSIS Signaling Layer Protocol (NSLP) for Quality-of-Service Signaling\", RFC 5974, DOI 10.17487/RFC5974, October 2010, <https://www.rfc-editor.org/info/rfc5974>. [RFC5981] Manner, J., Stiemerling, M., Tschofenig, H., and R. Bless, Ed., \"Authorization for NSIS Signaling Layer Protocols\", RFC 5981, DOI 10.17487/RFC5981, February 2011, <https://www.rfc-editor.org/info/rfc5981>. [RFC6294] Hu, Q. and B. Carpenter, \"Survey of Proposed Use Cases for the IPv6 Flow Label\", RFC 6294, DOI 10.17487/RFC6294, June 2011, <https://www.rfc-editor.org/info/rfc6294>. [RFC6398] Le Faucheur, F., Ed., \"IP Router Alert Considerations and Usage\", BCP 168, RFC 6398, DOI 10.17487/RFC6398, October 2011, <https://www.rfc-editor.org/info/rfc6398>. [RFC6437] Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme, \"IPv6 Flow Label Specification\", RFC 6437, DOI 10.17487/RFC6437, November 2011, <https://www.rfc-editor.org/info/rfc6437>. [RFC6438] Carpenter, B. and S. Amante, \"Using the IPv6 Flow Label for Equal Cost Multipath Routing and Link Aggregation in Tunnels\", RFC 6438, DOI 10.17487/RFC6438, November 2011, <https://www.rfc-editor.org/info/rfc6438>. [RFC6633] Gont, F., \"Deprecation of ICMP Source Quench Messages\", RFC 6633, DOI 10.17487/RFC6633, May 2012, <https://www.rfc-editor.org/info/rfc6633>. [RFC6928] Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis, \"Increasing TCP's Initial Window\", RFC 6928, DOI 10.17487/RFC6928, April 2013, <https://www.rfc-editor.org/info/rfc6928>. [RFC7305] Lear, E., Ed., \"Report from the IAB Workshop on Internet Technology Adoption and Transition (ITAT)\", RFC 7305, DOI 10.17487/RFC7305, July 2014, <https://www.rfc-editor.org/info/rfc7305>. [RFC7418] Dawkins, S., Ed., \"An IRTF Primer for IETF Participants\", RFC 7418, DOI 10.17487/RFC7418, December 2014, <https://www.rfc-editor.org/info/rfc7418>. [RFC8085] Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085, March 2017, <https://www.rfc-editor.org/info/rfc8085>. [RFC8170] Thaler, D., Ed., \"Planning for Protocol Adoption and Subsequent Transitions\", RFC 8170, DOI 10.17487/RFC8170, May 2017, <https://www.rfc-editor.org/info/rfc8170>. [RFC8655] Finn, N., Thubert, P., Varga, B., and J. Farkas, \"Deterministic Networking Architecture\", RFC 8655, DOI 10.17487/RFC8655, October 2019, <https://www.rfc-editor.org/info/rfc8655>. [RFC8793] Wissingh, B., Wood, C., Afanasyev, A., Zhang, L., Oran, D., and C. Tschudin, \"Information-Centric Networking (ICN): Content-Centric Networking (CCNx) and Named Data Networking (NDN) Terminology\", RFC 8793, DOI 10.17487/RFC8793, June 2020, <https://www.rfc-editor.org/info/rfc8793>. [RFC9000] Iyengar, J., Ed. and M. Thomson, Ed., \"QUIC: A UDP-Based Multiplexed and Secure Transport\", RFC 9000, DOI 10.17487/RFC9000, May 2021, <https://www.rfc-editor.org/info/rfc9000>. [SAAG-105-Min] \"Security Area Open Meeting - IETF 105 Minutes\", July 2019, <https://datatracker.ietf.org/meeting/105/materials/minutes-105-saag-00>. [SAF07] Sarolahti, P., Allman, M., and S. Floyd, \"Determining an appropriate sending rate over an underutilized network path\", Computer Networks: The International Journal of Computer and Telecommunications Networking, Volume 51, Number 7, DOI 10.1016/j.comnet.2006.11.006, May 2007, <https://dl.acm.org/doi/10.1016/j.comnet.2006.11.006>. [SallyFloyd] Floyd, S., \"ECN (Explicit Congestion Notification) in TCP/IP\", June 2009, <https://www.icir.org/floyd/ecn.html>. [Sch11] Scharf, M., \"Fast Startup Internet Congestion Control for Broadband Interactive Applications\", Ph.D. Thesis, University of Stuttgart, April 2011. [Shim6-35] Meyer, D., Huston, G., Schiller, J., and V. Gill, \"IAB IPv6 Multihoming Panel at NANOG 35\", North American Network Operators' Group (NANOG), October 2005, <https://www.youtube.com/watch?v=ji6Y_rYHAQs>. [TRIGTRAN-55] \"Triggers for Transport BOF at IETF 55\", November 2002, <https://www.ietf.org/proceedings/55/239.htm>. [TRIGTRAN-56] \"Triggers for Transport BOF at IETF 56\", March 2003, <https://www.ietf.org/proceedings/56/251.htm>. [vista-impl] Sridharan, M., Bansal, D., and D. Thaler, \"Implementation Report on Experiences with Various TCP RFCs\", March 2007, <https://www.ietf.org/proceedings/68/slides/tsvarea-3/sld1.htm>. Acknowledgments Initial material for Section 6.1 on ST2 was provided by Gorry Fairhurst.¶ Initial material for Section 6.2 on IntServ was provided by Ron Bonica.¶ Initial material for Section 6.3 on Quick-Start TCP was provided by Michael Scharf, who also provided suggestions to improve this section after it was edited.¶ Initial material for Section 6.4 on ICMP Source Quench was provided by Gorry Fairhurst.¶ Initial material for Section 6.5 on Triggers for Transport (TRIGTRAN) was provided by Spencer Dawkins.¶ Section 6.6 on Shim6 builds on initial material describing obstacles, which was provided by Erik Nordmark, with background added by Spencer Dawkins.¶ Initial material for Section 6.7 on Next Steps in Signaling (NSIS) was provided by Roland Bless and Martin Stiemerling.¶ Initial material for Section 6.8 on IPv6 Flow Labels was provided by Gorry Fairhurst.¶ Initial material for Section 6.9 on Explicit Congestion Notification was provided by Spencer Dawkins.¶ Our thanks to Adrian Farrel, Bob Briscoe, C.M. Heard, David Black, Eric Kinnear, Erik Auerswald, Gorry Fairhurst, Jake Holland, Joe Touch, Joeri de Ruiter, Kireeti Kompella, Mohamed Boucadair, Randy Presuhn, Roland Bless, Ruediger Geib, Theresa Enghardt, and Wes Eddy, who provided review comments on this document as a \"work in process\".¶ Mallory Knodel reviewed this document for the Internet Research Steering Group and provided many helpful suggestions.¶ David Oran also provided helpful comments and text suggestions on this document during Internet Research Steering Group balloting. In particular, Section 5 reflects his review.¶ Benjamin Kaduk, Martin Duke, and Rob Wilton provided helpful comments during Internet Engineering Steering Group conflict review.¶ Special thanks to Adrian Farrel for helping Spencer navigate the twisty little passages of Flow Specs and Filter Specs in IntServ, RSVP, MPLS, and BGP. They are all alike, except when they are different [Colossal-Cave].¶ Author's Address Spencer Dawkins (editor) Tencent America United States of America Email: spencerdawkins.ietf@gmail.com"
    },
    {
        "Number": "9035",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "A Routing Protocol for Low-Power and Lossy Networks (RPL) Destination-Oriented Directed Acyclic Graph (DODAG) Configuration Option for the 6LoWPAN Routing Header",
        "Authors": [
            "P. Thubert",
            "Ed.",
            "L. Zhao"
        ],
        "Date": "2021-04",
        "More Info": "Updates RFC 8138",
        "Status": "Proposed Standard",
        "Abstract": "This document updates RFC 8138 by defining a bit in the Routing Protocol for Low-Power and Lossy Networks (RPL) Destination-Oriented Directed Acyclic Graph (DODAG) Configuration option to indicate whether compression is used within the RPL Instance and to specify the behavior of nodes compliant with RFC 8138 when the bit is set and unset.",
        "Keywords": [
            "IoT",
            "Header Compression",
            "Source Routing Header",
            "Hop-by-Hop Header",
            "RPL artifacts"
        ],
        "Content": "RFC 9035: A Routing Protocol for Low-Power and Lossy Networks (RPL) Destination‑Oriented Directed Acyclic Graph (DODAG) Configuration Option for the 6LoWPAN Routing Header RFC 9035 Turn On 6LoRH Compression April 2021 Thubert & Zhao Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9035 Updates: 8138 Category: Standards Track Published: April 2021 ISSN: 2070-1721 Authors: P. Thubert, Ed. Cisco Systems L. Zhao Cisco Systems RFC 9035 A Routing Protocol for Low-Power and Lossy Networks (RPL) Destination‑Oriented Directed Acyclic Graph (DODAG) Configuration Option for the 6LoWPAN Routing Header Abstract This document updates RFC 8138 by defining a bit in the Routing Protocol for Low-Power and Lossy Networks (RPL) Destination-Oriented Directed Acyclic Graph (DODAG) Configuration option to indicate whether compression is used within the RPL Instance and to specify the behavior of nodes compliant with RFC 8138 when the bit is set and unset.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9035.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Related Documents 2.2.  Glossary 2.3.  Requirements Language 3.  Extending RFC 6550 4.  Updating RFC 8138 5.  Transition Scenarios 5.1.  Coexistence 5.2.  Inconsistent State While Migrating 5.3.  Rolling Back 6.  IANA Considerations 7.  Security Considerations 8.  References 8.1.  Normative References 8.2.  Informative References Acknowledgments Authors' Addresses 1. Introduction The design of Low-Power and Lossy Networks (LLNs) is generally focused on saving energy, which is the most constrained resource of all. The routing optimizations in \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550], such as routing along a Destination-Oriented Directed Acyclic Graph (DODAG) to a Root Node and the associated routing header compression and forwarding technique specified in [RFC8138], derive from that primary concern.¶ Enabling [RFC8138] on a running network requires a \"flag day\", where the network is upgraded and rebooted. Otherwise, if acting as a leaf, a node that does not support compression per [RFC8138] would fail to communicate; if acting as a router, it would drop the compressed packets and black-hole a portion of the network. This specification enables a hot upgrade where a live network is migrated. During the migration, compression remains inactive until all nodes are upgraded.¶ This document complements [RFC8138] and signals whether it should be used within a RPL DODAG with a new flag in the RPL DODAG Configuration option. The setting of this new flag is controlled by the Root and propagates as is in the whole network as part of the normal RPL signaling.¶ The flag is cleared to ensure that compression remains inactive during the migration phase. When the migration is complete (e.g., as known by network management and/or inventory), the flag is set and compression is globally activated in the whole DODAG.¶ 2. Terminology 2.1. Related Documents The terminology used in this document is consistent with, and incorporates the terms provided in, \"Terms Used in Routing for Low-Power and Lossy Networks\" [RFC7102]. Other terms in use as related to LLNs are found in \"Terminology for Constrained-Node Networks\" [RFC7228].¶ \"RPL\", \"RPL Packet Information\" (RPI), and \"RPL Instance\" (indexed by a RPLInstanceID) are defined in \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\" [RFC6550]. The RPI is the abstract information that RPL defines to be placed in data packets, e.g., as the RPL Option [RFC6553] within the IPv6 Hop-By-Hop Header. By extension, the term \"RPI\" is often used to refer to the RPL Option itself. The DODAG Information Solicitation (DIS), Destination Advertisement Object (DAO), and DODAG Information Object (DIO) messages are also specified in [RFC6550].¶ This document uses the terms \"RPL-Unaware Leaf\" (RUL) and \"RPL-Aware Leaf\" (RAL) consistently with \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\" [RFC9008]. The term \"RPL-Aware Node\" (RAN) refers to a node that is either a RAL or a RPL router. A RAN manages the reachability of its addresses and prefixes by injecting them in RPL by itself. In contrast, a RUL leverages \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\" [RFC8505] to obtain reachability services from its parent router(s) as specified in \"Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves\" [RFC9010].¶ 2.2. Glossary This document often uses the following abbreviations:¶ 6LoRH: 6LoWPAN Routing Header¶ 6LoWPAN: IPv6 over Low-Power Wireless Personal Area Network¶ DIO: DODAG Information Object (a RPL message)¶ DODAG: Destination-Oriented Directed Acyclic Graph¶ LLN: Low-Power and Lossy Network¶ MOP: RPL Mode of Operation¶ RAL: RPL-Aware Leaf¶ RAN: RPL-Aware Node¶ RPI: RPL Packet Information¶ RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks¶ RUL: RPL-Unaware Leaf¶ SRH: Source Routing Header¶ Sub-DODAG: The sub-DODAG of a node is a DODAG rooted at that node that is a subset of a main DODAG the node belongs to. It is formed by the other nodes in the main DODAG whose paths to the main DODAG root pass through that node.¶ 2.3. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Extending RFC 6550 The DODAG Configuration option is defined in Section 6.7.6 of [RFC6550]. Its purpose is extended to distribute configuration information affecting the construction and maintenance of the DODAG, as well as operational parameters for RPL on the DODAG, through the DODAG. The DODAG Configuration option was originally designed with four bit positions reserved for future use as flags.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type = 0x04 |Opt Length = 14| | |T| |A| ... | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ + <- flags -> Figure 1: DODAG Configuration Option (Partial View) This specification defines a new flag, \"Enable Compression per RFC 8138 (T)\". The 'T' flag is set to turn on the use of [RFC8138] within the DODAG. The 'T' flag is encoded in position 2 of the reserved flags in the DODAG Configuration option (counting from bit 0 as the most significant bit) and set to 0 in legacy implementations as specified in Sections 20.14 and 6.7.6 of [RFC6550], respectively.¶ Section 4.1.2 of [RFC9008] updates [RFC6550] to indicate that the definition of the flags applies to Mode of Operation (MOP) values zero (0) to six (6) only. For a MOP value of 7, [RFC8138] MUST be used on links where 6LoWPAN Header Compression [RFC6282] applies and MUST NOT be used otherwise.¶ The RPL DODAG Configuration option is typically placed in a DIO message. The DIO message propagates down the DODAG to form and then maintain its structure. The DODAG Configuration option is copied unmodified from parents to children. [RFC6550] states that \"Nodes other than the DODAG root MUST NOT modify this information when propagating the DODAG Configuration option.\" Therefore, a legacy parent propagates the 'T' flag as set by the Root, and when the 'T' flag is set, it is transparently flooded to all the nodes in the DODAG.¶ 4. Updating RFC 8138 A node SHOULD generate packets in compressed form using [RFC8138] if and only if the 'T' flag is set. This behavior can be overridden by configuration or network management. Overriding may be needed, e.g., to turn on compression in a network where all nodes support [RFC8138] but the Root does not support this specification and cannot set the 'T' flag, or to disable it locally in case of a problem.¶ The decision to use [RFC8138] is made by the originator of the packet, depending on its capabilities and its knowledge of the state of the 'T' flag. A router encapsulating a packet is the originator of the resulting packet and is responsible for compressing the outer headers per [RFC8138], but it MUST NOT perform compression on the encapsulated packet.¶ An external target [RFC9008] is not expected to support [RFC8138]. In most cases, packets to and from an external target are tunneled back and forth between the border router (referred to as a 6LoWPAN Router (6LR)) that serves the external target and the Root, regardless of the MOP used in the RPL DODAG. The inner packet is typically not compressed per [RFC8138], so for outgoing packets, the border router just needs to decapsulate the (compressed) outer header and forward the (uncompressed) inner packet towards the external target.¶ A border router that forwards a packet to an external target MUST uncompress the packet first. In all other cases, a router MUST forward a packet in the form that the source used, either compressed or uncompressed.¶ A RUL [RFC9010] is both a leaf and an external target. A RUL does not participate in RPL and depends on the parent router to obtain connectivity. In the case of a RUL, forwarding towards an external target actually means delivering the packet.¶ 5. Transition Scenarios A node that supports [RFC8138] but not this specification can only be used in a homogeneous network. Enabling compression per [RFC8138] without a turn-on signaling method requires a flag day, by which time all nodes must be upgraded and at which point the network can be rebooted with 6LoRH compression [RFC8138] turned on.¶ The intent of this specification is to perform a migration once and for all, without the need for a flag day. In particular, the intent is not to undo the setting of the 'T' flag. Though it is possible to roll back (see Section 5.3), the rollback operation SHOULD be complete before the network operator adds nodes that do not support [RFC8138].¶ 5.1. Coexistence A node that supports this specification can operate in a network with 6LoRH compression [RFC8138] turned on or off with the 'T' flag set accordingly and in a network in transition from off to on or on to off (see Section 5.2).¶ A node that does not support [RFC8138] can interoperate with nodes that do in a network with 6LoRH compression [RFC8138] turned off. If compression is turned on, all the RANs are expected to be able to handle packets in compressed form. A node that cannot do so may remain connected to the network as a RUL as described in [RFC9010].¶ 5.2. Inconsistent State While Migrating When the 'T' flag is turned on by the Root, the information slowly percolates through the DODAG as the DIO gets propagated. Some nodes will see the flag and start sourcing packets in compressed form, while other nodes in the same RPL DODAG will still not be aware of it. In Non-Storing mode, the Root will start using [RFC8138] with a Source Routing Header 6LoRH (SRH-6LoRH) that routes all the way to the parent router or to the leaf.¶ To ensure that a packet is forwarded across the RPL DODAG in the form in which it was generated, it is required that all the RPL nodes support [RFC8138] at the time of the switch.¶ Setting the 'T' flag is ultimately the responsibility of the network administrator. The expectation is that the network management or upgrading tools in place enable the network administrator to know when all the nodes that may join a DODAG were migrated. In the case of a RPL Instance with multiple Roots, all nodes that participate in the RPL Instance may potentially join any DODAG. The network MUST be operated with the 'T' flag unset until all nodes in the RPL Instance are upgraded to support this specification.¶ 5.3. Rolling Back When turning 6LoRH compression [RFC8138] off in the network, the network administrator MUST wait until each node has its 'T' flag unset before allowing nodes that do not support compression in the network. Information regarding whether compression is active in a node SHOULD be exposed in the node's management interface.¶ Nodes that do not support [RFC8138] SHOULD NOT be deployed in a network where compression is turned on. If that is done, the node can only operate as a RUL.¶ 6. IANA Considerations This specification updates the \"DODAG Configuration Option Flags for MOP 0..6\" registry [RFC9008] (formerly the \"DODAG Configuration Option Flags\" registry, which was created for [RFC6550]), by allocating one new flag as follows:¶ Table 1: New DODAG Configuration Option Flag Bit Number Capability Description Reference 2 Enable Compression per RFC 8138 (T) RFC 9035 IANA has added this document as a reference for MOP 7 in the RPL \"Mode of Operation\" registry.¶ 7. Security Considerations It is worth noting that in RPL [RFC6550], every node in the LLN that is RPL aware and has access to the RPL domain can inject any RPL-based attack in the network; see [RFC7416] for details. This document typically applies to an existing deployment and does not change its security requirements and operations. It is assumed that the security mechanisms as defined for RPL are followed.¶ Setting the 'T' flag before all routers are upgraded may cause a loss of packets. The new bit benefits from the same protection as the rest of the information in the DODAG Configuration option that transports it. Touching the new bit is just one of the many attacks that can happen if an attacker manages to inject a corrupted configuration option in the network.¶ Setting and unsetting the 'T' flag may create inconsistencies in the network, but as long as all nodes are upgraded to provide support for [RFC8138], they will be able to forward both forms. The source is responsible for selecting whether the packet is compressed or not, and all routers must use the format that the source selected. So, the result of an inconsistency is merely that both forms will be present in the network, at an additional cost of bandwidth for packets in uncompressed form.¶ An attacker may unset the 'T' flag to force additional energy consumption of child or descendant nodes in its sub-DODAG. Conversely, it may set the 'T' flag so that nodes located downstream would compress packets even when compression is not desired, potentially causing packet loss. In a tree structure, the attacker would be in a position to drop the packets from and to the attacked nodes. So, the attacks mentioned above would be more complex and more visible than simply dropping selected packets. The downstream node may have other parents and see the bit with both settings; such a situation may be detected, and an alert may be triggered.¶ 8. References 8.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC6550] Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J., Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur, JP., and R. Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks\", RFC 6550, DOI 10.17487/RFC6550, March 2012, <https://www.rfc-editor.org/info/rfc6550>. [RFC7102] Vasseur, JP., \"Terms Used in Routing for Low-Power and Lossy Networks\", RFC 7102, DOI 10.17487/RFC7102, January 2014, <https://www.rfc-editor.org/info/rfc7102>. [RFC8138] Thubert, P., Ed., Bormann, C., Toutain, L., and R. Cragie, \"IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Routing Header\", RFC 8138, DOI 10.17487/RFC8138, April 2017, <https://www.rfc-editor.org/info/rfc8138>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8505] Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C. Perkins, \"Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery\", RFC 8505, DOI 10.17487/RFC8505, November 2018, <https://www.rfc-editor.org/info/rfc8505>. [RFC9010] Thubert, P., Ed. and M. Richardson, \"Routing for RPL (Routing Protocol for Low-Power and Lossy Networks) Leaves\", RFC 9010, DOI 10.17487/RFC9010, April 2021, <https://www.rfc-editor.org/info/rfc9010>. 8.2. Informative References [RFC6282] Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6 Datagrams over IEEE 802.15.4-Based Networks\", RFC 6282, DOI 10.17487/RFC6282, September 2011, <https://www.rfc-editor.org/info/rfc6282>. [RFC6553] Hui, J. and JP. Vasseur, \"The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams\", RFC 6553, DOI 10.17487/RFC6553, March 2012, <https://www.rfc-editor.org/info/rfc6553>. [RFC7228] Bormann, C., Ersue, M., and A. Keranen, \"Terminology for Constrained-Node Networks\", RFC 7228, DOI 10.17487/RFC7228, May 2014, <https://www.rfc-editor.org/info/rfc7228>. [RFC7416] Tsao, T., Alexander, R., Dohler, M., Daza, V., Lozano, A., and M. Richardson, Ed., \"A Security Threat Analysis for the Routing Protocol for Low-Power and Lossy Networks (RPLs)\", RFC 7416, DOI 10.17487/RFC7416, January 2015, <https://www.rfc-editor.org/info/rfc7416>. [RFC9008] Robles, M.I., Richardson, M., and P. Thubert, \"Using RPI Option Type, Routing Header for Source Routes, and IPv6-in-IPv6 Encapsulation in the RPL Data Plane\", RFC 9008, DOI 10.17487/RFC9008, April 2021, <https://www.rfc-editor.org/info/rfc9008>. Acknowledgments The authors wish to thank Murray Kucherawy, Meral Shirazipour, Barry Leiba, Tirumaleswar Reddy, Nagendra Kumar Nainar, Stewart Bryant, Carles Gomez, Éric Vyncke, Roman Danyliw, and especially Benjamin Kaduk, Alvaro Retana, Dominique Barthel, and Rahul Jadhav for their in-depth reviews and constructive suggestions.¶ Also, many thanks to Michael Richardson for always being helpful and responsive when the need arises.¶ Authors' Addresses Pascal Thubert (editor) Cisco Systems, Inc. Building D 45 Allee des Ormes - BP1200 06254 MOUGINS - Sophia Antipolis France Phone: +33 497 23 26 34 Email: pthubert@cisco.com Li Zhao Cisco Systems, Inc. Xinsi Building No. 926 Yi Shan Rd Shanghai 200233 China Email: liz3@cisco.com"
    },
    {
        "Number": "9048",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Improved Extensible Authentication Protocol Method for 3GPP Mobile Network Authentication and Key Agreement (EAP-AKA')",
        "Authors": [
            "J. Arkko",
            "V. Lehtovirta",
            "V. Torvinen",
            "P. Eronen"
        ],
        "Date": "2021-10",
        "More Info": "Updates RFC 5448, RFC 4187",
        "Status": "Proposed Standard",
        "Abstract": "The 3GPP mobile network Authentication and Key Agreement (AKA) is an authentication mechanism for devices wishing to access mobile networks. RFC 4187 (EAP-AKA) made the use of this mechanism possible within the Extensible Authentication Protocol (EAP) framework. RFC 5448 (EAP-AKA') was an improved version of EAP-AKA.  This document is the most recent specification of EAP-AKA', including, for instance, details about and references related to operating EAP-AKA' in 5G networks.   EAP-AKA' differs from EAP-AKA by providing a key derivation function that binds the keys derived within the method to the name of the access network. The key derivation function has been defined in the 3rd Generation Partnership Project (3GPP). EAP-AKA' allows its use in EAP in an interoperable manner. EAP-AKA' also updates the algorithm used in hash functions, as it employs SHA-256 / HMAC-SHA-256 instead of SHA-1 / HMAC-SHA-1, which is used in EAP-AKA.  This version of the EAP-AKA' specification defines the protocol behavior for both 4G and 5G deployments, whereas the previous version defined protocol behavior for 4G deployments only. While EAP-AKA' as defined in RFC 5448 is not obsolete, this document defines the most recent and fully backwards-compatible specification of EAP-AKA'. This document updates both RFCs 4187 and 5448.",
        "Keywords": [
            "EAP",
            "AKA",
            "AKA'",
            "3GPP"
        ],
        "Content": "RFC 9048: Improved Extensible Authentication Protocol Method for 3GPP Mobile Network Authentication and Key Agreement (EAP-AKA') RFC 9048 EAP-AKA' October 2021 Arkko, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9048 Updates: 4187, 5448 Category: Informational Published: October 2021 ISSN: 2070-1721 Authors: J. Arkko Ericsson V. Lehtovirta Ericsson V. Torvinen Ericsson P. Eronen Independent RFC 9048 Improved Extensible Authentication Protocol Method for 3GPP Mobile Network Authentication and Key Agreement (EAP-AKA') Abstract The 3GPP mobile network Authentication and Key Agreement (AKA) is an authentication mechanism for devices wishing to access mobile networks. RFC 4187 (EAP-AKA) made the use of this mechanism possible within the Extensible Authentication Protocol (EAP) framework. RFC 5448 (EAP-AKA') was an improved version of EAP-AKA.¶ This document is the most recent specification of EAP-AKA', including, for instance, details about and references related to operating EAP-AKA' in 5G networks.¶ EAP-AKA' differs from EAP-AKA by providing a key derivation function that binds the keys derived within the method to the name of the access network. The key derivation function has been defined in the 3rd Generation Partnership Project (3GPP). EAP-AKA' allows its use in EAP in an interoperable manner. EAP-AKA' also updates the algorithm used in hash functions, as it employs SHA-256 / HMAC-SHA-256 instead of SHA-1 / HMAC-SHA-1, which is used in EAP-AKA.¶ This version of the EAP-AKA' specification defines the protocol behavior for both 4G and 5G deployments, whereas the previous version defined protocol behavior for 4G deployments only. While EAP-AKA' as defined in RFC 5448 is not obsolete, this document defines the most recent and fully backwards-compatible specification of EAP-AKA'. This document updates both RFCs 4187 and 5448.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9048.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Requirements Language 3.  EAP-AKA' 3.1.  AT_KDF_INPUT 3.2.  AT_KDF 3.3.  Key Derivation 3.4.  Hash Functions 3.4.1.  PRF' 3.4.2.  AT_MAC 3.4.3.  AT_CHECKCODE 3.5.  Summary of Attributes for EAP-AKA' 4.  Bidding Down Prevention for EAP-AKA 4.1.  Summary of Attributes for EAP-AKA 5.  Peer Identities 5.1.  Username Types in EAP-AKA' Identities 5.2.  Generating Pseudonyms and Fast Re-Authentication Identities 5.3.  Identifier Usage in 5G 5.3.1.  Key Derivation 5.3.2.  EAP Identity Response and EAP-AKA' AT_IDENTITY Attribute 6.  Exported Parameters 7.  Security Considerations 7.1.  Privacy 7.2.  Discovered Vulnerabilities 7.3.  Pervasive Monitoring 7.4.  Security Properties of Binding Network Names 8.  IANA Considerations 8.1.  Type Value 8.2.  Attribute Type Values 8.3.  Key Derivation Function Namespace 9.  References 9.1.  Normative References 9.2.  Informative References Appendix A.  Changes from RFC 5448 Appendix B.  Changes to RFC 4187 Appendix C.  Importance of Explicit Negotiation Appendix D.  Test Vectors Acknowledgments Contributors Authors' Addresses 1. Introduction The 3GPP mobile network Authentication and Key Agreement (AKA) is an authentication mechanism for devices wishing to access mobile networks. [RFC4187] (EAP-AKA) made the use of this mechanism possible within the Extensible Authentication Protocol (EAP) framework [RFC3748].¶ EAP-AKA' is an improved version of EAP-AKA. EAP-AKA' was defined in RFC 5448 [RFC5448], and it updated EAP-AKA [RFC4187].¶ This document is the most recent specification of EAP-AKA', including, for instance, details about and references related to operating EAP-AKA' in 5G networks. This document does not obsolete RFC 5448; however, this document is the most recent and fully backwards-compatible specification.¶ EAP-AKA' is commonly implemented in mobile phones and network equipment. It can be used for authentication to gain network access via Wireless LAN networks and, with 5G, also directly to mobile networks.¶ EAP-AKA' differs from EAP-AKA by providing a different key derivation function. This function binds the keys derived within the method to the name of the access network. This limits the effects of compromised access network nodes and keys. EAP-AKA' also updates the algorithm used for hash functions.¶ The EAP-AKA' method employs the derived keys CK' and IK' from the 3GPP specification [TS-3GPP.33.402] and updates the hash function that is used to SHA-256 [FIPS.180-4] and HMAC to HMAC-SHA-256. Otherwise, EAP-AKA' is equivalent to EAP-AKA. Given that a different EAP method Type value is used for EAP-AKA and EAP-AKA', a mutually supported method may be negotiated using the standard mechanisms in EAP [RFC3748].¶ Note that any change of the key derivation must be unambiguous to both sides in the protocol. That is, it must not be possible to accidentally connect old equipment to new equipment and get the key derivation wrong or to attempt to use incorrect keys without getting a proper error message. See Appendix C for further information.¶ Note also that choices in authentication protocols should be secure against bidding down attacks that attempt to force the participants to use the least secure function. See Section 4 for further information.¶ This specification makes the following changes from RFC 5448:¶ Updates the reference that specifies how the Network Name field is constructed in the protocol. This update ensures that EAP-AKA' is compatible with 5G deployments. RFC 5448 referred to the Release 8 version of [TS-3GPP.24.302]. This document points to the first 5G version, Release 16.¶ Specifies how EAP and EAP-AKA' use identifiers in 5G. Additional identifiers are introduced in 5G, and for interoperability, it is necessary that the right identifiers are used as inputs in the key derivation. In addition, for identity privacy it is important that when privacy-friendly identifiers in 5G are used, no trackable, permanent identifiers are passed in EAP-AKA', either.¶ Specifies session identifiers and other exported parameters, as those were not specified in [RFC5448] despite requirements set forward in [RFC5247] to do so. Also, while [RFC5247] specified session identifiers for EAP-AKA, it only did so for the full authentication case, not for the case of fast re-authentication.¶ Updates the requirements on generating pseudonym usernames and fast re-authentication identities to ensure identity privacy.¶ Describes what has been learned about any vulnerabilities in AKA or EAP-AKA'.¶ Describes the privacy and pervasive monitoring considerations related to EAP-AKA'.¶ Adds summaries of the attributes.¶ Some of the updates are small. For instance, the reference update to [TS-3GPP.24.302] does not change the 3GPP specification number, only the version. But this reference is crucial for the correct calculation of the keys that result from running the EAP-AKA' method, so an RFC update pointing to the newest version was warranted.¶ Note: Any further updates in 3GPP specifications that affect, for instance, key derivation is something that EAP-AKA' implementations need to take into account. Upon such updates, there will be a need to update both this specification and the implementations.¶ It is an explicit non-goal of this specification to include any other technical modifications, addition of new features, or other changes. The EAP-AKA' base protocol is stable and needs to stay that way. If there are any extensions or variants, those need to be proposed as standalone extensions or even as different authentication methods.¶ The rest of this specification is structured as follows. Section 3 defines the EAP-AKA' method. Section 4 adds support to EAP-AKA to prevent bidding down attacks from EAP-AKA'. Section 5 specifies requirements regarding the use of peer identities, including how 5G identifiers are used in the EAP-AKA' context. Section 6 specifies which parameters EAP-AKA' exports out of the method. Section 7 explains the security differences between EAP-AKA and EAP-AKA'. Section 8 describes the IANA considerations, and Appendix A and Appendix B explain the updates to RFC 5448 (EAP-AKA') and RFC 4187 (EAP-AKA) that have been made in this specification. Appendix C explains some of the design rationale for creating EAP-AKA'. Finally, Appendix D provides test vectors.¶ 2. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. EAP-AKA' EAP-AKA' is an EAP method that follows the EAP-AKA specification [RFC4187] in all respects except the following:¶ It uses the Type code 0x32, not 0x17 (which is used by EAP-AKA).¶ It carries the AT_KDF_INPUT attribute, as defined in Section 3.1, to ensure that both the peer and server know the name of the access network.¶ It supports key derivation function negotiation via the AT_KDF attribute (Section 3.2) to allow for future extensions.¶ It calculates keys as defined in Section 3.3, not as defined in EAP-AKA.¶ It employs SHA-256 / HMAC-SHA-256 [FIPS.180-4], not SHA-1 / HMAC-SHA-1 [RFC2104] (see Section 3.4).¶ Figure 1 shows an example of the authentication process. Each message AKA'-Challenge and so on represents the corresponding message from EAP-AKA, but with the EAP-AKA' Type code. The definition of these messages, along with the definition of attributes AT_RAND, AT_AUTN, AT_MAC, and AT_RES can be found in [RFC4187].¶ Peer Server | EAP-Request/Identity | |<-------------------------------------------------------| | | | EAP-Response/Identity | | (Includes user's Network Access Identifier, NAI) | |------------------------------------------------------->| | +--------------------------------------------------+ | | Server determines the network name and ensures | | | that the given access network is authorized to | | | use the claimed name. The server then runs the | | | AKA' algorithms generating RAND and AUTN, and | | | derives session keys from CK' and IK'. RAND and | | | AUTN are sent as AT_RAND and AT_AUTN attributes, | | | whereas the network name is transported in the | | | AT_KDF_INPUT attribute. AT_KDF signals the used | | | key derivation function. The session keys are | | | used in creating the AT_MAC attribute. | | +--------------------------------------------------+ | EAP-Request/AKA'-Challenge | | (AT_RAND, AT_AUTN, AT_KDF, AT_KDF_INPUT, AT_MAC)| |<-------------------------------------------------------| +------------------------------------------------------+ | | The peer determines what the network name should be, | | | based on, e.g., what access technology it is using. | | | The peer also retrieves the network name sent by | | | the network from the AT_KDF_INPUT attribute. The | | | two names are compared for discrepancies, and if | | | necessary, the authentication is aborted. Otherwise,| | | the network name from AT_KDF_INPUT attribute is | | | used in running the AKA' algorithms, verifying AUTN | | | from AT_AUTN and MAC from AT_MAC attributes. The | | | peer then generates RES. The peer also derives | | | session keys from CK'/IK'. The AT_RES and AT_MAC | | | attributes are constructed. | | +------------------------------------------------------+ | | EAP-Response/AKA'-Challenge | | (AT_RES, AT_MAC) | |------------------------------------------------------->| | +--------------------------------------------------+ | | Server checks the RES and MAC values received | | | in AT_RES and AT_MAC, respectively. Success | | | requires both to be found correct. | | +--------------------------------------------------+ | EAP-Success | |<-------------------------------------------------------| Figure 1: EAP-AKA' Authentication Process EAP-AKA' can operate on the same credentials as EAP-AKA and employ the same identities. However, EAP-AKA' employs different leading characters than EAP-AKA for the conventions given in Section 4.1.1 of [RFC4187] for usernames based on International Mobile Subscriber Identifier (IMSI). For 4G networks, EAP-AKA' MUST use the leading character \"6\" (ASCII 36 hexadecimal) instead of \"0\" for IMSI-based permanent usernames. For 5G networks, the leading character \"6\" is not used for IMSI-based permanent usernames. Identifier usage in 5G is specified in Section 5.3. All other usage and processing of the leading characters, usernames, and identities is as defined by EAP-AKA [RFC4187]. For instance, the pseudonym and fast re-authentication usernames need to be constructed so that the server can recognize them. As an example, a pseudonym could begin with a leading \"7\" character (ASCII 37 hexadecimal) and a fast re-authentication username could begin with \"8\" (ASCII 38 hexadecimal). Note that a server that implements only EAP-AKA may not recognize these leading characters. According to Section 4.1.4 of [RFC4187], such a server will re-request the identity via the EAP-Request/AKA-Identity message, making obvious to the peer that EAP-AKA and associated identity are expected.¶ 3.1. AT_KDF_INPUT The format of the AT_KDF_INPUT attribute is shown below.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | AT_KDF_INPUT | Length | Actual Network Name Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | . Network Name . . . | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ¶ The fields are as follows:¶ AT_KDF_INPUT This is set to 23.¶ Length The length of the attribute, calculated as defined in [RFC4187], Section 8.1.¶ Actual Network Name Length This is a 2-byte actual length field, needed due to the requirement that the previous field is expressed in multiples of 4 bytes per the usual EAP-AKA rules. The Actual Network Name Length field provides the length of the network name in bytes.¶ Network Name This field contains the network name of the access network for which the authentication is being performed. The name does not include any terminating null characters. Because the length of the entire attribute must be a multiple of 4 bytes, the sender pads the name with 1, 2, or 3 bytes of all zero bits when necessary.¶ Only the server sends the AT_KDF_INPUT attribute. The value is sent as specified in [TS-3GPP.24.302] for both non-3GPP access networks and for 5G access networks. Per [TS-3GPP.33.402], the server always verifies the authorization of a given access network to use a particular name before sending it to the peer over EAP-AKA'. The value of the AT_KDF_INPUT attribute from the server MUST be non-empty, with a greater than zero length in the Actual Network Name Length field. If the AT_KDF_INPUT attribute is empty, the peer behaves as if AUTN had been incorrect and authentication fails. See Section 3 and Figure 3 of [RFC4187] for an overview of how authentication failures are handled.¶ In addition, the peer MAY check the received value against its own understanding of the network name. Upon detecting a discrepancy, the peer either warns the user and continues, or fails the authentication process. More specifically, the peer SHOULD have a configurable policy that it can follow under these circumstances. If the policy indicates that it can continue, the peer SHOULD log a warning message or display it to the user. If the peer chooses to proceed, it MUST use the network name as received in the AT_KDF_INPUT attribute. If the policy indicates that the authentication should fail, the peer behaves as if AUTN had been incorrect and authentication fails.¶ The Network Name field contains a UTF-8 string. This string MUST be constructed as specified in [TS-3GPP.24.302] for \"Access Network Identity\". The string is structured as fields separated by colons (:). The algorithms and mechanisms to construct the identity string depend on the used access technology.¶ On the network side, the network name construction is a configuration issue in an access network and an authorization check in the authentication server. On the peer, the network name is constructed based on the local observations. For instance, the peer knows which access technology it is using on the link, it can see information in a link-layer beacon, and so on. The construction rules specify how this information maps to an access network name. Typically, the network name consists of the name of the access technology or the name of the access technology followed by some operator identifier that was advertised in a link-layer beacon. In all cases, [TS-3GPP.24.302] is the normative specification for the construction in both the network and peer side. If the peer policy allows running EAP-AKA' over an access technology for which that specification does not provide network name construction rules, the peer SHOULD rely only on the information from the AT_KDF_INPUT attribute and not perform a comparison.¶ If a comparison of the locally determined network name and the one received over EAP-AKA' is performed on the peer, it MUST be done as follows. First, each name is broken down to the fields separated by colons. If one of the names has more colons and fields than the other one, the additional fields are ignored. The remaining sequences of fields are compared, and they match only if they are equal character by character. This algorithm allows a prefix match where the peer would be able to match \"\", \"FOO\", and \"FOO:BAR\" against the value \"FOO:BAR\" received from the server. This capability is important in order to allow possible updates to the specifications that dictate how the network names are constructed. For instance, if a peer knows that it is running on access technology \"FOO\", it can use the string \"FOO\" even if the server uses an additional, more accurate description, e.g., \"FOO:BAR\", that contains more information.¶ The allocation procedures in [TS-3GPP.24.302] ensure that conflicts potentially arising from using the same name in different types of networks are avoided. The specification also has detailed rules about how a client can determine these based on information available to the client, such as the type of protocol used to attach to the network, beacons sent out by the network, and so on. Information that the client cannot directly observe (such as the type or version of the home network) is not used by this algorithm.¶ The AT_KDF_INPUT attribute MUST be sent and processed as explained above when AT_KDF attribute has the value 1. Future definitions of new AT_KDF values MUST define how this attribute is sent and processed.¶ 3.2. AT_KDF AT_KDF is an attribute that the server uses to reference a specific key derivation function. It offers a negotiation capability that can be useful for future evolution of the key derivation functions.¶ The format of the AT_KDF attribute is shown below.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | AT_KDF | Length | Key Derivation Function | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ¶ The fields are as follows:¶ AT_KDF This is set to 24.¶ Length The length of the attribute, calculated as defined in [RFC4187], Section 8.1. For AT_KDF, the Length field MUST be set to 1.¶ Key Derivation Function An enumerated value representing the key derivation function that the server (or peer) wishes to use. Value 1 represents the default key derivation function for EAP-AKA', i.e., employing CK' and IK' as defined in Section 3.3.¶ Servers MUST send one or more AT_KDF attributes in the EAP-Request/AKA'-Challenge message. These attributes represent the desired functions ordered by preference, the most preferred function being the first attribute.¶ Upon receiving a set of these attributes, if the peer supports and is willing to use the key derivation function indicated by the first attribute, the function is taken into use without any further negotiation. However, if the peer does not support this function or is unwilling to use it, it does not process the received EAP-Request/AKA'-Challenge in any way except by responding with the EAP-Response/AKA'-Challenge message that contains only one attribute, AT_KDF with the value set to the selected alternative. If there is no suitable alternative, the peer behaves as if AUTN had been incorrect and authentication fails (see Figure 3 of [RFC4187]). The peer fails the authentication also if there are any duplicate values within the list of AT_KDF attributes (except where the duplication is due to a request to change the key derivation function; see below for further information).¶ Upon receiving an EAP-Response/AKA'-Challenge with AT_KDF from the peer, the server checks that the suggested AT_KDF value was one of the alternatives in its offer. The first AT_KDF value in the message from the server is not a valid alternative since the peer should have accepted it without further negotiation. If the peer has replied with the first AT_KDF value, the server behaves as if AT_MAC of the response had been incorrect and fails the authentication. For an overview of the failed authentication process in the server side, see Section 3 and Figure 2 of [RFC4187]. Otherwise, the server re-sends the EAP-Response/AKA'-Challenge message, but adds the selected alternative to the beginning of the list of AT_KDF attributes and retains the entire list following it. Note that this means that the selected alternative appears twice in the set of AT_KDF values. Responding to the peer's request to change the key derivation function is the only legal situation where such duplication may occur.¶ When the peer receives the new EAP-Request/AKA'-Challenge message, it MUST check that the requested change, and only the requested change, occurred in the list of AT_KDF attributes. If so, it continues with processing the received EAP-Request/AKA'-Challenge as specified in [RFC4187] and Section 3.1 of this document. If not, it behaves as if AT_MAC had been incorrect and fails the authentication. If the peer receives multiple EAP-Request/AKA'-Challenge messages with differing AT_KDF attributes without having requested negotiation, the peer MUST behave as if AT_MAC had been incorrect and fail the authentication.¶ Note that the peer may also request sequence number resynchronization [RFC4187]. This happens after AT_KDF negotiation has already completed. That is, the EAP-Request/AKA'-Challenge and, possibly, the EAP-Response/AKA'-Challenge messages are exchanged first to determine a mutually acceptable key derivation function, and only then is the possible AKA'-Synchronization-Failure message sent. The AKA'-Synchronization-Failure message is sent as a response to the newly received EAP-Request/AKA'-Challenge, which is the last message of the AT_KDF negotiation. Note that if the first proposed KDF is acceptable, then the first EAP-Request/AKA'-Challenge message is also the last message. The AKA'-Synchronization-Failure message MUST contain the AUTS parameter as specified in [RFC4187] and a copy the AT_KDF attributes as they appeared in the last message of the AT_KDF negotiation. If the AT_KDF attributes are found to differ from their earlier values, the peer and server MUST behave as if AT_MAC had been incorrect and fail the authentication.¶ 3.3. Key Derivation Both the peer and server MUST derive the keys as follows.¶ AT_KDF parameter has the value 1 In this case, MK is derived and used as follows:¶ MK = PRF'(IK'|CK',\"EAP-AKA'\"|Identity) K_encr = MK[0..127] K_aut = MK[128..383] K_re = MK[384..639] MSK = MK[640..1151] EMSK = MK[1152..1663] ¶ Here [n..m] denotes the substring from bit n to m, including bits n and m. PRF' is a new pseudorandom function specified in Section 3.4. The first 1664 bits from its output are used for K_encr (encryption key, 128 bits), K_aut (authentication key, 256 bits), K_re (re-authentication key, 256 bits), MSK (Master Session Key, 512 bits), and EMSK (Extended Master Session Key, 512 bits). These keys are used by the subsequent EAP-AKA' process. K_encr is used by the AT_ENCR_DATA attribute, and K_aut by the AT_MAC attribute. K_re is used later in this section. MSK and EMSK are outputs from a successful EAP method run [RFC3748].¶ IK' and CK' are derived as specified in [TS-3GPP.33.402]. The functions that derive IK' and CK' take the following parameters: CK and IK produced by the AKA algorithm, and value of the Network Name field comes from the AT_KDF_INPUT attribute (without length or padding).¶ The value \"EAP-AKA'\" is an eight-characters-long ASCII string. It is used as is, without any trailing NUL characters.¶ Identity is the peer identity as specified in Section 7 of [RFC4187] and in Section 5.3.2 of in this document for the 5G cases.¶ When the server creates an AKA challenge and corresponding AUTN, CK, CK', IK, and IK' values, it MUST set the Authentication Management Field (AMF) separation bit to 1 in the AKA algorithm [TS-3GPP.33.102]. Similarly, the peer MUST check that the AMF separation bit is set to 1. If the bit is not set to 1, the peer behaves as if the AUTN had been incorrect and fails the authentication.¶ On fast re-authentication, the following keys are calculated:¶ MK = PRF'(K_re,\"EAP-AKA' re-auth\"|Identity|counter|NONCE_S) MSK = MK[0..511] EMSK = MK[512..1023] ¶ MSK and EMSK are the resulting 512-bit keys, taking the first 1024 bits from the result of PRF'. Note that K_encr and K_aut are not re-derived on fast re-authentication. K_re is the re-authentication key from the preceding full authentication and stays unchanged over any fast re-authentication(s) that may happen based on it. The value \"EAP-AKA' re-auth\" is a sixteen-characters-long ASCII string, again represented without any trailing NUL characters. Identity is the fast re-authentication identity, counter is the value from the AT_COUNTER attribute, NONCE_S is the nonce value from the AT_NONCE_S attribute, all as specified in Section 7 of [RFC4187]. To prevent the use of compromised keys in other places, it is forbidden to change the network name when going from the full to the fast re-authentication process. The peer SHOULD NOT attempt fast re-authentication when it knows that the network name in the current access network is different from the one in the initial, full authentication. Upon seeing a re-authentication request with a changed network name, the server SHOULD behave as if the re-authentication identifier had been unrecognized, and fall back to full authentication. The server observes the change in the name by comparing where the fast re-authentication and full authentication EAP transactions were received at the Authentication, Authorization, and Accounting (AAA) protocol level.¶ AT_KDF has any other value Future variations of key derivation functions may be defined, and they will be represented by new values of AT_KDF. If the peer does not recognize the value, it cannot calculate the keys and behaves as explained in Section 3.2.¶ AT_KDF is missing The peer behaves as if the AUTN had been incorrect and MUST fail the authentication.¶ If the peer supports a given key derivation function but is unwilling to perform it for policy reasons, it refuses to calculate the keys and behaves as explained in Section 3.2.¶ 3.4. Hash Functions EAP-AKA' uses SHA-256 / HMAC-SHA-256, not SHA-1 / HMAC-SHA-1 (see [FIPS.180-4] and [RFC2104]) as in EAP-AKA. This requires a change to the pseudorandom function (PRF) as well as the AT_MAC and AT_CHECKCODE attributes.¶ 3.4.1. PRF' The PRF' construction is the same one IKEv2 uses (see Section 2.13 of [RFC7296]; the definition of this function has not changed since [RFC4306], which was referenced by [RFC5448]). The function takes two arguments. K is a 256-bit value and S is a byte string of arbitrary length. PRF' is defined as follows:¶ PRF'(K,S) = T1 | T2 | T3 | T4 | ... where: T1 = HMAC-SHA-256 (K, S | 0x01) T2 = HMAC-SHA-256 (K, T1 | S | 0x02) T3 = HMAC-SHA-256 (K, T2 | S | 0x03) T4 = HMAC-SHA-256 (K, T3 | S | 0x04) ... ¶ PRF' produces as many bits of output as is needed. HMAC-SHA-256 is the application of HMAC [RFC2104] to SHA-256.¶ 3.4.2. AT_MAC When used within EAP-AKA', the AT_MAC attribute is changed as follows. The MAC algorithm is HMAC-SHA-256-128, a keyed hash value. The HMAC-SHA-256-128 value is obtained from the 32-byte HMAC-SHA-256 value by truncating the output to the first 16 bytes. Hence, the length of the MAC is 16 bytes.¶ Otherwise, the use of AT_MAC in EAP-AKA' follows Section 10.15 of [RFC4187].¶ 3.4.3. AT_CHECKCODE When used within EAP-AKA', the AT_CHECKCODE attribute is changed as follows. First, a 32-byte value is needed to accommodate a 256-bit hash output:¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | AT_CHECKCODE | Length | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Checkcode (0 or 32 bytes) | | | | | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ¶ Second, the checkcode is a hash value, calculated with SHA-256 [FIPS.180-4], over the data specified in Section 10.13 of [RFC4187].¶ 3.5. Summary of Attributes for EAP-AKA' Table 1 identifies which attributes may be found in which kinds of messages, and in what quantity.¶ Messages are denoted with numbers as follows:¶ 1 EAP-Request/AKA-Identity¶ 2 EAP-Response/AKA-Identity¶ 3 EAP-Request/AKA-Challenge¶ 4 EAP-Response/AKA-Challenge¶ 5 EAP-Request/AKA-Notification¶ 6 EAP-Response/AKA-Notification¶ 7 EAP-Response/AKA-Client-Error¶ 8 EAP-Request/AKA-Reauthentication¶ 9 EAP-Response/AKA-Reauthentication¶ 10 EAP-Response/AKA-Authentication-Reject¶ 11 EAP-Response/AKA-Synchronization-Failure¶ The column denoted with \"E\" indicates whether the attribute is a nested attribute that MUST be included within AT_ENCR_DATA.¶ In addition, the numbered columns indicate the quantity of the attribute within the message as follows:¶ \"0\" Indicates that the attribute MUST NOT be included in the message.¶ \"1\" Indicates that the attribute MUST be included in the message.¶ \"0-1\" Indicates that the attribute is sometimes included in the message¶ \"0+\" Indicates that zero or more copies of the attribute MAY be included in the message.¶ \"1+\" Indicates that there MUST be at least one attribute in the message but more than one MAY be included in the message.¶ \"0*\" Indicates that the attribute is not included in the message in cases specified in this document, but MAY be included in the future versions of the protocol.¶ The attribute table is shown below. The table is largely the same as in the EAP-AKA attribute table ([RFC4187], Section 10.1), but changes how many times AT_MAC may appear in an EAP-Response/AKA'-Challenge message as it does not appear there when AT_KDF has to be sent from the peer to the server. The table also adds the AT_KDF and AT_KDF_INPUT attributes.¶ Table 1: The Attribute Table Attribute 1 2 3 4 5 6 7 8 9 10 11 E AT_PERMANENT_ID_REQ 0-1 0 0 0 0 0 0 0 0 0 0 N AT_ANY_ID_REQ 0-1 0 0 0 0 0 0 0 0 0 0 N AT_FULLAUTH_ID_REQ 0-1 0 0 0 0 0 0 0 0 0 0 N AT_IDENTITY 0 0-1 0 0 0 0 0 0 0 0 0 N AT_RAND 0 0 1 0 0 0 0 0 0 0 0 N AT_AUTN 0 0 1 0 0 0 0 0 0 0 0 N AT_RES 0 0 0 1 0 0 0 0 0 0 0 N AT_AUTS 0 0 0 0 0 0 0 0 0 0 1 N AT_NEXT_PSEUDONYM 0 0 0-1 0 0 0 0 0 0 0 0 Y AT_NEXT_REAUTH_ID 0 0 0-1 0 0 0 0 0-1 0 0 0 Y AT_IV 0 0 0-1 0* 0-1 0-1 0 1 1 0 0 N AT_ENCR_DATA 0 0 0-1 0* 0-1 0-1 0 1 1 0 0 N AT_PADDING 0 0 0-1 0* 0-1 0-1 0 0-1 0-1 0 0 Y AT_CHECKCODE 0 0 0-1 0-1 0 0 0 0-1 0-1 0 0 N AT_RESULT_IND 0 0 0-1 0-1 0 0 0 0-1 0-1 0 0 N AT_MAC 0 0 1 0-1 0-1 0-1 0 1 1 0 0 N AT_COUNTER 0 0 0 0 0-1 0-1 0 1 1 0 0 Y AT_COUNTER_TOO_SMALL 0 0 0 0 0 0 0 0 0-1 0 0 Y AT_NONCE_S 0 0 0 0 0 0 0 1 0 0 0 Y AT_NOTIFICATION 0 0 0 0 1 0 0 0 0 0 0 N AT_CLIENT_ERROR_CODE 0 0 0 0 0 0 1 0 0 0 0 N AT_KDF 0 0 1+ 0+ 0 0 0 0 0 0 1+ N AT_KDF_INPUT 0 0 1 0 0 0 0 0 0 0 0 N 4. Bidding Down Prevention for EAP-AKA As discussed in [RFC3748], negotiation of methods within EAP is insecure. That is, a man-in-the-middle attacker may force the endpoints to use a method that is not the strongest that they both support. This is a problem, as we expect EAP-AKA and EAP-AKA' to be negotiated via EAP.¶ In order to prevent such attacks, this RFC specifies a mechanism for EAP-AKA that allows the endpoints to securely discover the capabilities of each other. This mechanism comes in the form of the AT_BIDDING attribute. This allows both endpoints to communicate their desire and support for EAP-AKA' when exchanging EAP-AKA messages. This attribute is not included in EAP-AKA' messages. It is only included in EAP-AKA messages, which are protected with the AT_MAC attribute. This approach is based on the assumption that EAP-AKA' is always preferable (see Section 7). If during the EAP-AKA authentication process it is discovered that both endpoints would have been able to use EAP-AKA', the authentication process SHOULD be aborted, as a bidding down attack may have happened.¶ The format of the AT_BIDDING attribute is shown below.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | AT_BIDDING | Length |D| Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ¶ The fields are as follows:¶ AT_BIDDING This is set to 136.¶ Length The length of the attribute, calculated as defined in [RFC4187], Section 8.1. For AT_BIDDING, the Length MUST be set to 1.¶ D This bit is set to 1 if the sender supports EAP-AKA', is willing to use it, and prefers it over EAP-AKA. Otherwise, it should be set to zero.¶ Reserved This field MUST be set to zero when sent and ignored on receipt.¶ The server sends this attribute in the EAP-Request/AKA-Challenge message. If the peer supports EAP-AKA', it compares the received value to its own capabilities. If it turns out that both the server and peer would have been able to use EAP-AKA' and preferred it over EAP-AKA, the peer behaves as if AUTN had been incorrect and fails the authentication (see Figure 3 of [RFC4187]). A peer not supporting EAP-AKA' will simply ignore this attribute. In all cases, the attribute is protected by the integrity mechanisms of EAP-AKA, so it cannot be removed by a man-in-the-middle attacker.¶ Note that we assume (Section 7) that EAP-AKA' is always stronger than EAP-AKA. As a result, this specification does not provide protection against bidding \"down\" attacks in the other direction, i.e., attackers forcing the endpoints to use EAP-AKA'.¶ 4.1. Summary of Attributes for EAP-AKA The appearance of the AT_BIDDING attribute in EAP-AKA exchanges is shown below, using the notation from Section 3.5:¶ Table 2: AT_BIDDING Attribute Appearance Attribute 1 2 3 4 5 6 7 8 9 10 11 E AT_BIDDING 0 0 1 0 0 0 0 0 0 0 0 N 5. Peer Identities EAP-AKA' peer identities are as specified in [RFC4187], Section 4.1, with the addition of some requirements specified in this section.¶ EAP-AKA' includes optional identity privacy support that can be used to hide the cleartext permanent identity and thereby make the subscriber's EAP exchanges untraceable to eavesdroppers. EAP-AKA' can also use the privacy-friendly identifiers specified for 5G networks.¶ The permanent identity is usually based on the IMSI. Exposing the IMSI is undesirable because, as a permanent identity, it is easily trackable. In addition, since IMSIs may be used in other contexts as well, there would be additional opportunities for such tracking.¶ In EAP-AKA', identity privacy is based on temporary usernames or pseudonym usernames. These are similar to, but separate from, the Temporary Mobile Subscriber Identities (TMSI) that are used on cellular networks.¶ 5.1. Username Types in EAP-AKA' Identities Section 4.1.1.3 of [RFC4187] specifies that there are three types of usernames: permanent, pseudonym, and fast re-authentication usernames. This specification extends this definition as follows. There are four types of usernames:¶ (1) Regular usernames. These are external names given to EAP-AKA' peers. The regular usernames are further subdivided into to categories:¶ (a) Permanent usernames, for instance, IMSI-based usernames.¶ (b) Privacy-friendly temporary usernames, for instance, 5G GUTI (5G Globally Unique Temporary Identifier) or 5G privacy identifiers (see Section 5.3.2) such as SUCI (Subscription Concealed Identifier).¶ (2) EAP-AKA' pseudonym usernames. For example, 2s7ah6n9q@example.com might be a valid pseudonym identity. In this example, 2s7ah6n9q is the pseudonym username.¶ (3) EAP-AKA' fast re-authentication usernames. For example, 43953754@example.com might be a valid fast re-authentication identity and 43953754 the fast re-authentication username.¶ The permanent, privacy-friendly temporary, and pseudonym usernames are only used with full authentication, and fast re-authentication usernames only with fast re-authentication. Unlike permanent usernames and pseudonym usernames, privacy-friendly temporary usernames and fast re-authentication usernames are one-time identifiers, which are not reused across EAP exchanges.¶ 5.2. Generating Pseudonyms and Fast Re-Authentication Identities This section provides some additional guidance to implementations for producing secure pseudonyms and fast re-authentication identities. It does not impact backwards compatibility because each server consumes only the identities that it generates itself. However, adherence to the guidance will provide better security.¶ As specified by [RFC4187], Section 4.1.1.7, pseudonym usernames and fast re-authentication identities are generated by the EAP server in an implementation-dependent manner. RFC 4187 provides some general requirements on how these identities are transported, how they map to the NAI syntax, how they are distinguished from each other, and so on.¶ However, to enhance privacy, some additional requirements need to be applied.¶ The pseudonym usernames and fast re-authentication identities MUST be generated in a cryptographically secure way so that it is computationally infeasible for an attacker to differentiate two identities belonging to the same user from two identities belonging to different users. This can be achieved, for instance, by using random or pseudorandom identifiers such as random byte strings or ciphertexts. See also [RFC4086] for guidance on random number generation.¶ Note that the pseudonym and fast re-authentication usernames also MUST NOT include substrings that can be used to relate the username to a particular entity or a particular permanent identity. For instance, the usernames cannot include any subscriber-identifying part of an IMSI or other permanent identifier. Similarly, no part of the username can be formed by a fixed mapping that stays the same across multiple different pseudonyms or fast re-authentication identities for the same subscriber.¶ When the identifier used to identify a subscriber in an EAP-AKA' authentication exchange is a privacy-friendly identifier that is used only once, the EAP-AKA' peer MUST NOT use a pseudonym provided in that authentication exchange in subsequent exchanges more than once. To ensure that this does not happen, the EAP-AKA' server MAY decline to provide a pseudonym in such authentication exchanges. An important case where such privacy-friendly identifiers are used is in 5G networks (see Section 5.3).¶ 5.3. Identifier Usage in 5G In EAP-AKA', the peer identity may be communicated to the server in one of three ways:¶ As a part of link-layer establishment procedures, externally to EAP.¶ With the EAP-Response/Identity message in the beginning of the EAP exchange, but before the selection of EAP-AKA'.¶ Transmitted from the peer to the server using EAP-AKA' messages instead of EAP-Response/Identity. In this case, the server includes an identity-requesting attribute (AT_ANY_ID_REQ, AT_FULLAUTH_ID_REQ, or AT_PERMANENT_ID_REQ) in the EAP-Request/AKA-Identity message, and the peer includes the AT_IDENTITY attribute, which contains the peer's identity, in the EAP-Response/AKA-Identity message.¶ The identity carried above may be a permanent identity, privacy-friendly identity, pseudonym identity, or fast re-authentication identity as defined in Section 5.1.¶ 5G supports the concept of privacy identifiers, and it is important for interoperability that the right type of identifier is used.¶ 5G defines the SUbscription Permanent Identifier (SUPI) and SUbscription Concealed Identifier (SUCI) [TS-3GPP.23.501] [TS-3GPP.33.501] [TS-3GPP.23.003]. SUPI is globally unique and allocated to each subscriber. However, it is only used internally in the 5G network and is privacy sensitive. The SUCI is a privacy-preserving identifier containing the concealed SUPI, using public key cryptography to encrypt the SUPI.¶ Given the choice between these two types of identifiers, EAP-AKA' ensures interoperability as follows:¶ Where identifiers are used within EAP-AKA' (such as key derivation) determine the exact values of the identity to be used, to avoid ambiguity (see Section 5.3.1).¶ Where identifiers are carried within EAP-AKA' packets (such as in the AT_IDENTITY attribute) determine which identifiers should be filled in (see Section 5.3.2).¶ In 5G, the normal mode of operation is that identifiers are only transmitted outside EAP. However, in a system involving terminals from many generations and several connectivity options via 5G and other mechanisms, implementations and the EAP-AKA' specification need to prepare for many different situations, including sometimes having to communicate identities within EAP.¶ The following sections clarify which identifiers are used and how.¶ 5.3.1. Key Derivation In EAP-AKA', the peer identity is used in the key derivation formula found in Section 3.3.¶ The identity needs to be represented in exactly the correct format for the key derivation formula to produce correct results.¶ If the AT_KDF_INPUT parameter contains the prefix \"5G:\", the AT_KDF parameter has the value 1, and this authentication is not a fast re-authentication, then the peer identity used in the key derivation MUST be as specified in Annex F.3 of [TS-3GPP.33.501] and Clause 2.2 of [TS-3GPP.23.003]. This is in contrast to [RFC5448], which uses the identity as communicated in EAP and represented as a NAI. Also, in contrast to [RFC5448], in 5G EAP-AKA' does not use the \"0\" nor the \"6\" prefix in front of the identifier.¶ For an example of the format of the identity, see Clause 2.2 of [TS-3GPP.23.003].¶ In all other cases, the following applies:¶ The identity used in the key derivation formula MUST be exactly the one sent in the EAP-AKA' AT_IDENTITY attribute, if one was sent, regardless of the kind of identity that it may have been. If no AT_IDENTITY was sent, the identity MUST be exactly the one sent in the generic EAP Identity exchange, if one was made.¶ If no identity was communicated inside EAP, then the identity is the one communicated outside EAP in link-layer messaging.¶ In this case, the used identity MUST be the identity most recently communicated by the peer to the network, again regardless of what type of identity it may have been.¶ 5.3.2. EAP Identity Response and EAP-AKA' AT_IDENTITY Attribute The EAP authentication option is only available in 5G when the new 5G core network is also in use. However, in other networks, an EAP-AKA' peer may be connecting to other types of networks and existing equipment.¶ When the EAP server is in a 5G network, the 5G procedures for EAP-AKA' apply. [TS-3GPP.33.501] specifies when the EAP server is in a 5G network.¶ Note: Currently, the following conditions are specified: when the EAP peer uses the 5G Non-Access Stratum (NAS) protocol [TS-3GPP.24.501] or when the EAP peer attaches to a network that advertises 5G connectivity without NAS [TS-3GPP.23.501]. Possible future conditions may also be specified by 3GPP.¶ When the 5G procedures for EAP-AKA' apply, EAP identity exchanges are generally not used as the identity is already made available on previous link-layer exchanges.¶ In this situation, the EAP Identity Response and EAP-AKA' AT_IDENTITY attribute are handled as specified in Annex F.2 of [TS-3GPP.33.501].¶ When used in EAP-AKA', the format of the SUCI MUST be as specified in [TS-3GPP.23.003], Section 28.7.3, with the semantics defined in [TS-3GPP.23.003], Section 2.2B. Also, in contrast to [RFC5448], in 5G EAP-AKA' does not use the \"0\" nor the \"6\" prefix in front of the identifier.¶ For an example of an IMSI in NAI format, see [TS-3GPP.23.003], Section 28.7.3.¶ Otherwise, the peer SHOULD employ an IMSI, SUPI, or NAI [RFC7542] as it is configured to use.¶ 6. Exported Parameters When not using fast re-authentication, the EAP-AKA' Session-Id is the concatenation of the EAP-AKA' Type value (0x32, one byte) with the contents of the RAND field from the AT_RAND attribute followed by the contents of the AUTN field in the AT_AUTN attribute:¶ Session-Id = 0x32 || RAND || AUTN ¶ When using fast re-authentication, the EAP-AKA' Session-Id is the concatenation of the EAP-AKA' Type value (0x32) with the contents of the NONCE_S field from the AT_NONCE_S attribute followed by the contents of the MAC field from the AT_MAC attribute from the EAP-Request/AKA-Reauthentication:¶ Session-Id = 0x32 || NONCE_S || MAC ¶ The Peer-Id is the contents of the Identity field from the AT_IDENTITY attribute, using only the Actual Identity Length bytes from the beginning. Note that the contents are used as they are transmitted, regardless of whether the transmitted identity was a permanent, pseudonym, or fast EAP re-authentication identity. If no AT_IDENTITY attribute was exchanged, the exported Peer-Id is the identity provided from the EAP Identity Response packet. If no EAP Identity Response was provided either, the exported Peer-Id is the null string (zero length).¶ The Server-Id is the null string (zero length).¶ 7. Security Considerations A summary of the security properties of EAP-AKA' follows. These properties are very similar to those in EAP-AKA. We assume that HMAC SHA-256 is at least as secure as HMAC SHA-1 (see also [RFC6194]). This is called the SHA-256 assumption in the remainder of this section. Under this assumption, EAP-AKA' is at least as secure as EAP-AKA.¶ If the AT_KDF attribute has value 1, then the security properties of EAP-AKA' are as follows:¶ Protected ciphersuite negotiation EAP-AKA' has no ciphersuite negotiation mechanisms. It does have a negotiation mechanism for selecting the key derivation functions. This mechanism is secure against bidding down attacks from EAP-AKA' to EAP-AKA. The negotiation mechanism allows changing the offered key derivation function, but the change is visible in the final EAP-Request/AKA'-Challenge message that the server sends to the peer. This message is authenticated via the AT_MAC attribute, and carries both the chosen alternative and the initially offered list. The peer refuses to accept a change it did not initiate. As a result, both parties are aware that a change is being made and what the original offer was.¶ Per assumptions in Section 4, there is no protection against bidding down attacks from EAP-AKA to EAP-AKA' should EAP-AKA' somehow be considered less secure some day than EAP-AKA. Such protection was not provided in RFC 5448 implementations and consequently neither does this specification provide it. If such support is needed, it would have to be added as a separate new feature.¶ In general, it is expected that the current negotiation capabilities in EAP-AKA' are sufficient for some types of extensions, including adding Perfect Forward Secrecy [EMU-AKA-PFS] and perhaps others. However, some larger changes may require a new EAP method type, which is how EAP-AKA' itself happened. One example of such change would be the introduction of new algorithms.¶ Mutual authentication Under the SHA-256 assumption, the properties of EAP-AKA' are at least as good as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Integrity protection Under the SHA-256 assumption, the properties of EAP-AKA' are at least as good (most likely better) as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details. The only difference is that a stronger hash algorithm and keyed MAC, SHA-256 / HMAC-SHA-256, is used instead of SHA-1 / HMAC-SHA-1.¶ Replay protection Under the SHA-256 assumption, the properties of EAP-AKA' are at least as good as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Confidentiality The properties of EAP-AKA' are exactly the same as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Key derivation EAP-AKA' supports key derivation with an effective key strength against brute-force attacks equal to the minimum of the length of the derived keys and the length of the AKA base key, i.e., 128 bits or more. The key hierarchy is specified in Section 3.3.¶ The Transient EAP Keys used to protect EAP-AKA packets (K_encr, K_aut, K_re), the MSK, and the EMSK are cryptographically separate. If we make the assumption that SHA-256 behaves as a pseudorandom function, an attacker is incapable of deriving any non-trivial information about any of these keys based on the other keys. An attacker also cannot calculate the pre-shared secret from IK, CK, IK', CK', K_encr, K_aut, K_re, MSK, or EMSK by any practically feasible means.¶ EAP-AKA' adds an additional layer of key derivation functions within itself to protect against the use of compromised keys. This is discussed further in Section 7.4.¶ EAP-AKA' uses a pseudorandom function modeled after the one used in IKEv2 [RFC7296] together with SHA-256.¶ Key strength See above.¶ Dictionary attack resistance Under the SHA-256 assumption, the properties of EAP-AKA' are at least as good as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Fast reconnect Under the SHA-256 assumption, the properties of EAP-AKA' are at least as good as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details. Note that implementations MUST prevent performing a fast reconnect across method types.¶ Cryptographic binding Note that this term refers to a very specific form of binding, something that is performed between two layers of authentication. It is not the same as the binding to a particular network name. The properties of EAP-AKA' are exactly the same as those of EAP-AKA in this respect, i.e., as it is not a tunnel method, this property is not applicable to it. Refer to [RFC4187], Section 12, for further details.¶ Session independence The properties of EAP-AKA' are exactly the same as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Fragmentation The properties of EAP-AKA' are exactly the same as those of EAP-AKA in this respect. Refer to [RFC4187], Section 12, for further details.¶ Channel binding EAP-AKA', like EAP-AKA, does not provide channel bindings as they're defined in [RFC3748] and [RFC5247]. New skippable attributes can be used to add channel binding support in the future, if required.¶ However, including the Network Name field in the AKA' algorithms (which are also used for other purposes than EAP-AKA') provides a form of cryptographic separation between different network names, which resembles channel bindings. However, the network name does not typically identify the EAP (pass-through) authenticator. See Section 7.4 for more discussion.¶ 7.1. Privacy [RFC6973] suggests that the privacy considerations of IETF protocols be documented.¶ The confidentiality properties of EAP-AKA' itself have been discussed above under \"Confidentiality\" (Section 7).¶ EAP-AKA' uses several different types of identifiers to identify the authenticating peer. It is strongly RECOMMENDED to use the privacy-friendly temporary or hidden identifiers, i.e., the 5G GUTI or SUCI, pseudonym usernames, and fast re-authentication usernames. The use of permanent identifiers such as the IMSI or SUPI may lead to an ability to track the peer and/or user associated with the peer. The use of permanent identifiers such as the IMSI or SUPI is strongly NOT RECOMMENDED.¶ As discussed in Section 5.3, when authenticating to a 5G network, only the SUCI identifier is normally used. The use of EAP-AKA' pseudonyms in this situation is at best limited because the SUCI already provides a stronger mechanism. In fact, reusing the same pseudonym multiple times will result in a tracking opportunity for observers that see the pseudonym pass by. To avoid this, the peer and server need to follow the guidelines given in Section 5.2.¶ When authenticating to a 5G network, per Section 5.3.1, both the EAP-AKA' peer and server need to employ the permanent identifier SUPI as an input to key derivation. However, this use of the SUPI is only internal. As such, the SUPI need not be communicated in EAP messages. Therefore, SUPI MUST NOT be communicated in EAP-AKA' when authenticating to a 5G network.¶ While the use of SUCI in 5G networks generally provides identity privacy, this is not true if the null-scheme encryption is used to construct the SUCI (see [TS-3GPP.33.501], Annex C). The use of this scheme makes the use of SUCI equivalent to the use of SUPI or IMSI. The use of the null scheme is NOT RECOMMENDED where identity privacy is important.¶ The use of fast re-authentication identities when authenticating to a 5G network does not have the same problems as the use of pseudonyms, as long as the 5G authentication server generates the fast re-authentication identifiers in a proper manner specified in Section 5.2.¶ Outside 5G, the peer can freely choose between the use of permanent, pseudonym, or fast re-authentication identifiers:¶ A peer that has not yet performed any EAP-AKA' exchanges does not typically have a pseudonym available. If the peer does not have a pseudonym available, then the privacy mechanism cannot be used, and the permanent identity will have to be sent in the clear.¶ The terminal SHOULD store the pseudonym in nonvolatile memory so that it can be maintained across reboots. An active attacker that impersonates the network may use the AT_PERMANENT_ID_REQ attribute ([RFC4187], Section 4.1.2) to learn the subscriber's IMSI. However, as discussed in [RFC4187], Section 4.1.2, the terminal can refuse to send the cleartext permanent identity if it believes that the network should be able to recognize the pseudonym.¶ When pseudonyms and fast re-authentication identities are used, the peer relies on the properly created identifiers by the server.¶ It is essential that an attacker cannot link a privacy-friendly identifier to the user in any way or determine that two identifiers belong to the same user as outlined in Section 5.2. The pseudonym usernames and fast re-authentication identities MUST NOT be used for other purposes (e.g., in other protocols).¶ If the peer and server cannot guarantee that SUCI can be used or that pseudonyms will be available, generated properly, and maintained reliably, and identity privacy is required, then additional protection from an external security mechanism such as tunneled EAP methods like Tunneled Transport Layer Security (TTLS) [RFC5281] or Tunnel Extensible Authentication Protocol (TEAP) [RFC7170] may be used. The benefits and the security considerations of using an external security mechanism with EAP-AKA are beyond the scope of this document.¶ Finally, as with other EAP methods, even when privacy-friendly identifiers or EAP tunneling is used, typically the domain part of an identifier (e.g., the home operator) is visible to external parties.¶ 7.2. Discovered Vulnerabilities There have been no published attacks that violate the primary secrecy or authentication properties defined for Authentication and Key Agreement (AKA) under the originally assumed trust model. The same is true of EAP-AKA'.¶ However, there have been attacks when a different trust model is in use, with characteristics not originally provided by the design, or when participants in the protocol leak information to outsiders on purpose, and there have been some privacy-related attacks.¶ For instance, the original AKA protocol does not prevent an insider supplying keys to a third party, e.g., as described by Mjølsnes and Tsay in [MT2012] where a serving network lets an authentication run succeed, but then it misuses the session keys to send traffic on the authenticated user's behalf. This particular attack is not different from any on-path entity (such as a router) pretending to send traffic, but the general issue of insider attacks can be a problem, particularly in a large group of collaborating operators.¶ Another class of attacks is the use of tunneling of traffic from one place to another, e.g., as done by Zhang and Fang in [ZF2005] to leverage security policy differences between different operator networks, for instance. To gain something in such an attack, the attacker needs to trick the user into believing it is in another location. If policies between locations differ, for instance, if payload traffic is not required to be encrypted in some location, the attacker may trick the user into opening a vulnerability. As an authentication mechanism, EAP-AKA' is not directly affected by most of these attacks. EAP-AKA' network name binding can also help alleviate some of the attacks. In any case, it is recommended that EAP-AKA' configuration not be dependent on the location of request origin, unless the location information can be cryptographically confirmed, e.g., with the network name binding.¶ Zhang and Fang also looked at denial-of-service attacks [ZF2005]. A serving network may request large numbers of authentication runs for a particular subscriber from a home network. While the resynchronization process can help recover from this, eventually it is possible to exhaust the sequence number space and render the subscriber's card unusable. This attack is possible for both original AKA and EAP-AKA'. However, it requires the collaboration of a serving network in an attack. It is recommended that EAP-AKA' implementations provide the means to track, detect, and limit excessive authentication attempts to combat this problem.¶ There have also been attacks related to the use of AKA without the generated session keys (e.g., [BT2013]). Some of those attacks relate to the use of HTTP Digest AKAv1 [RFC3310], which was originally vulnerable to man-in-the-middle attacks. This has since been corrected in [RFC4169]. The EAP-AKA' protocol uses session keys and provides channel binding, and as such, it is resistant to the above attacks except where the protocol participants leak information to outsiders.¶ Basin, et al. [Basin2018] have performed formal analysis and concluded that the AKA protocol would have benefited from additional security requirements such as key confirmation.¶ In the context of pervasive monitoring revelations, there were also reports of compromised long-term pre-shared keys used in SIM and AKA [Heist2015]. While no protocol can survive the theft of key material associated with its credentials, there are some things that alleviate the impacts in such situations. These are discussed further in Section 7.3.¶ Arapinis, et al. [Arapinis2012] describe an attack that uses the AKA resynchronization protocol to attempt to detect whether a particular subscriber is in a given area. This attack depends on the attacker setting up a false base station in the given area and on the subscriber performing at least one authentication between the time the attack is set up and run.¶ Borgaonkar, et al. discovered that the AKA resynchronization protocol may also be used to predict the authentication frequency of a subscriber if a non-time-based sequence number (SQN) generation scheme is used [Borgaonkar2018]. The attacker can force the reuse of the keystream that is used to protect the SQN in the AKA resynchronization protocol. The attacker then guesses the authentication frequency based on the lowest bits of two XORed SQNs. The researchers' concern was that the authentication frequency would reveal some information about the phone usage behavior, e.g., number of phone calls made or number of SMS messages sent. There are a number of possible triggers for authentication, so such an information leak is not direct, but it can be a concern. The impact of the attack differs depending on whether the SQN generation scheme that is used is time-based or not.¶ Similar attacks are possible outside AKA in the cellular paging protocols where the attacker can simply send application-layer data, send short messages, or make phone calls to the intended victim and observe the air interface (e.g., [Kune2012] and [Shaik2016]). Hussain, et al. demonstrated a slightly more sophisticated version of the attack that exploits the fact that the 4G paging protocol uses the IMSI to calculate the paging timeslot [Hussain2019]. As this attack is outside AKA, it does not impact EAP-AKA'.¶ Finally, bad implementations of EAP-AKA' may not produce pseudonym usernames or fast re-authentication identities in a manner that is sufficiently secure. While it is not a problem with the protocol itself, following the recommendations in Section 5.2 can mitigate this concern.¶ 7.3. Pervasive Monitoring As required by [RFC7258], work on IETF protocols needs to consider the effects of pervasive monitoring and mitigate them when possible.¶ As described in Section 7.2, after the publication of RFC 5448, new information has come to light regarding the use of pervasive monitoring techniques against many security technologies, including AKA-based authentication.¶ For AKA, these attacks relate to theft of the long-term, shared-secret key material stored on the cards. Such attacks are conceivable, for instance, during the manufacturing process of cards, through coercion of the card manufacturers, or during the transfer of cards and associated information to an operator. Since the publication of reports about such attacks, manufacturing and provisioning processes have gained much scrutiny and have improved.¶ In particular, it is crucial that manufacturers limit access to the secret information and the cards only to necessary systems and personnel. It is also crucial that secure mechanisms be used to store and communicate the secrets between the manufacturer and the operator that adopts those cards for their customers.¶ Beyond these operational considerations, there are also technical means to improve resistance to these attacks. One approach is to provide Perfect Forward Secrecy (PFS). This would prevent any passive attacks merely based on the long-term secrets and observation of traffic. Such a mechanism can be defined as a backwards-compatible extension of EAP-AKA' and is pursued separately from this specification [EMU-AKA-PFS]. Alternatively, EAP-AKA' authentication can be run inside a PFS-capable, tunneled authentication method. In any case, the use of some PFS-capable mechanism is recommended.¶ 7.4. Security Properties of Binding Network Names The ability of EAP-AKA' to bind the network name into the used keys provides some additional protection against key leakage to inappropriate parties. The keys used in the protocol are specific to a particular network name. If key leakage occurs due to an accident, access node compromise, or another attack, the leaked keys are only useful when providing access with that name. For instance, a malicious access point cannot claim to be network Y if it has stolen keys from network X. Obviously, if an access point is compromised, the malicious node can still represent the compromised node. As a result, neither EAP-AKA' nor any other extension can prevent such attacks; however, the binding to a particular name limits the attacker's choices, allows better tracking of attacks, makes it possible to identify compromised networks, and applies good cryptographic hygiene.¶ The server receives the EAP transaction from a given access network, and verifies that the claim from the access network corresponds to the name that this access network should be using. It becomes impossible for an access network to claim over AAA that it is another access network. In addition, if the peer checks that the information it has received locally over the network-access link-layer matches with the information the server has given it via EAP-AKA', it becomes impossible for the access network to tell one story to the AAA network and another one to the peer. These checks prevent some \"lying NAS\" (Network Access Server) attacks. For instance, a roaming partner, R, might claim that it is the home network H in an effort to lure peers to connect to itself. Such an attack would be beneficial for the roaming partner if it can attract more users, and damaging for the users if their access costs in R are higher than those in other alternative networks, such as H.¶ Any attacker who gets hold of the keys CK and IK, produced by the AKA algorithm, can compute the keys CK' and IK' and, hence, the Master Key (MK) according to the rules in Section 3.3. The attacker could then act as a lying NAS. In 3GPP systems in general, the keys CK and IK have been distributed to, for instance, nodes in a visited access network where they may be vulnerable. In order to reduce this risk, the AKA algorithm MUST be computed with the AMF separation bit set to 1, and the peer MUST check that this is indeed the case whenever it runs EAP-AKA'. Furthermore, [TS-3GPP.33.402] requires that no CK or IK keys computed in this way ever leave the home subscriber system.¶ The additional security benefits obtained from the binding depend obviously on the way names are assigned to different access networks. This is specified in [TS-3GPP.24.302]. See also [TS-3GPP.23.003]. Ideally, the names allow separating each different access technology, each different access network, and each different NAS within a domain. If this is not possible, the full benefits may not be achieved. For instance, if the names identify just an access technology, use of compromised keys in a different technology can be prevented, but it is not possible to prevent their use by other domains or devices using the same technology.¶ 8. IANA Considerations IANA has updated the \"Extensible Authentication Protocol (EAP) Registry\" and the \"EAP-AKA and EAP-SIM Parameters\" registry so that entries that pointed to RFC 5448 now point to this RFC instead.¶ 8.1. Type Value IANA has updated the reference for EAP-AKA' (0x32) in the \"Method Types\" subregistry under the \"Extensible Authentication Protocol (EAP) Registry\" to point to this document. Per Section 6.2 of [RFC3748], this allocation can be made with Specification Required [RFC8126].¶ 8.2. Attribute Type Values EAP-AKA' shares its attribute space and subtypes with EAP-SIM [RFC4186] and EAP-AKA [RFC4187]. No new registries are needed.¶ IANA has updated the reference for AT_KDF_INPUT (23) and AT_KDF (24) in the \"Attribute Types (Non-Skippable Attributes 0-127)\" subregistry under the \"EAP-AKA and EAP-SIM Parameters\" registry to point to this document. AT_KDF_INPUT and AT_KDF are defined in Sections 3.1 and 3.2, respectively, of this document.¶ IANA has also updated the reference for AT_BIDDING (136) in the \"Attribute Types (Skippable Attributes 128-255)\" subregistry of the \"EAP-AKA and EAP-SIM Parameters\" registry to point to this document. AT_BIDDING is defined in Section 4.¶ 8.3. Key Derivation Function Namespace IANA has updated the reference for the \"EAP-AKA' AT_KDF Key Derivation Function Values\" subregistry to point to this document. This subregistry appears under the \"EAP-AKA and EAP-SIM Parameters\" registry. The references for following entries have also been updated to point to this document. New values can be created through the Specification Required policy [RFC8126].¶ Table 3: EAP-AKA' AT_KDF Key Derivation Function Values Value Description Reference 0 Reserved RFC 9048 1 EAP-AKA' with CK'/IK' RFC 9048 9. References 9.1. Normative References [FIPS.180-4] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-4, DOI 10.6028/NIST.FIPS.180-4, August 2015, <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf>. [RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, DOI 10.17487/RFC2104, February 1997, <https://www.rfc-editor.org/info/rfc2104>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC3748] Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H. Levkowetz, Ed., \"Extensible Authentication Protocol (EAP)\", RFC 3748, DOI 10.17487/RFC3748, June 2004, <https://www.rfc-editor.org/info/rfc3748>. [RFC4187] Arkko, J. and H. Haverinen, \"Extensible Authentication Protocol Method for 3rd Generation Authentication and Key Agreement (EAP-AKA)\", RFC 4187, DOI 10.17487/RFC4187, January 2006, <https://www.rfc-editor.org/info/rfc4187>. [RFC7542] DeKok, A., \"The Network Access Identifier\", RFC 7542, DOI 10.17487/RFC7542, May 2015, <https://www.rfc-editor.org/info/rfc7542>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [TS-3GPP.23.003] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification (Release 16)\", Version 16.7.0, 3GPP Technical Specification 23.003, June 2021. [TS-3GPP.23.501] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Services and System Aspects; System architecture for the 5G System (5GS); (Release 16)\", Version 16.9.0, 3GPP Technical Specification 23.501, June 2021. [TS-3GPP.24.302] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Access to the 3GPP Evolved Packet Core (EPC) via non-3GPP access networks; Stage 3; (Release 16)\", Version 16.4.0, 3GPP Technical Specification 24.302, July 2020. [TS-3GPP.24.501] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Non-Access-Stratum (NAS) protocol for 5G System (5GS); Stage 3; (Release 16)\", Version 16.9.0, 3GPP Draft Technical Specification 24.501, June 2021. [TS-3GPP.33.102] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Services and System Aspects; 3G Security; Security architecture (Release 16)\", Version 16.0.0, 3GPP Technical Specification 33.102, July 2020. [TS-3GPP.33.402] 3GPP, \"3GPP System Architecture Evolution (SAE); Security aspects of non-3GPP accesses (Release 16)\", Version 16.0.0, 3GPP Technical Specification 33.402, July 2020. [TS-3GPP.33.501] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Services and System Aspects; 3G Security; Security architecture and procedures for 5G System (Release 16)\", Version 16.7.1, 3GPP Technical Specification 33.501, July 2021. 9.2. Informative References [Arapinis2012] Arapinis, M., Mancini, L., Ritter, E., Ryan, M., Golde, N., Redon, R., and R. Borgaonkar, \"New Privacy Issues in Mobile Telephony: Fix and Verification\", in CCS '12: Proceedings of the 2012 ACM Conference on Computer and Communications Security, Raleigh, North Carolina, USA, DOI 10.1145/2382196.2382221, October 2012, <https://doi.org/10.1145/2382196.2382221>. [Basin2018] Basin, D., Dreier, J., Hirschi, L., Radomirović, S., Sasse, R., and V. Stettler, \"A Formal Analysis of 5G Authentication\", arXiv:1806.10360, DOI 10.1145/3243734.3243846, August 2018, <https://doi.org/10.1145/3243734.3243846>. [Borgaonkar2018] Borgaonkar, R., Hirschi, L., Park, S., and A. Shaik, \"New Privacy Threat on 3G, 4G, and Upcoming 5G AKA Protocols\", in IACR Cryptology ePrint Archive, 2018. [BT2013] Beekman, J. G. and C. Thompson, \"Breaking Cell Phone Authentication: Vulnerabilities in AKA, IMS and Android\", in 7th USENIX Workshop on Offensive Technologies, WOOT '13, August 2013. [EMU-AKA-PFS] Arkko, J., Norrman, K., and V. Torvinen, \"Perfect-Forward Secrecy for the Extensible Authentication Protocol Method for Authentication and Key Agreement (EAP-AKA' PFS)\", Work in Progress, Internet-Draft, draft-ietf-emu-aka-pfs-05, 30 October 2020, <https://datatracker.ietf.org/doc/html/draft-ietf-emu-aka-pfs-05>. [FIPS.180-1] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-1, DOI 10.6028/NIST.FIPS.180-1, April 1995, <https://csrc.nist.gov/publications/detail/fips/180/1/archive/1995-04-17>. [FIPS.180-2] National Institute of Standards and Technology, \"Secure Hash Standard\", FIPS PUB 180-2, August 2002, <https://csrc.nist.gov/publications/detail/fips/180/2/archive/2002-08-01>. [Heist2015] Scahill, J. and J. Begley, \"How Spies Stole the Keys to the Encryption Castle\", February 2015, <https://firstlook.org/theintercept/2015/02/19/great-sim-heist/>. [Hussain2019] Hussain, S., Echeverria, M., Chowdhury, O., Li, N., and E. Bertino, \"Privacy Attacks to the 4G and 5G Cellular Paging Protocols Using Side Channel Information\", in the proceedings of NDSS '19, held 24-27 February, 2019, San Diego, California, 2019. [Kune2012] Kune, D., Koelndorfer, J., Hopper, N., and Y. Kim, \"Location Leaks on the GSM Air Interface\", in the proceedings of NDSS '12, held 5-8 February, 2012, San Diego, California, 2012. [MT2012] Mjølsnes, S. F. and J-K. Tsay, \"A Vulnerability in the UMTS and LTE Authentication and Key Agreement Protocols\", in Computer Network Security, Proceedings of the 6th International Conference on Mathematical Methods, Models and Architectures for Computer Network Security, Lecture Notes in Computer Science, Vol. 7531, pp. 65-76, DOI 10.1007/978-3-642-33704-8_6, October 2012, <https://doi.org/10.1007/978-3-642-33704-8_6>. [RFC3310] Niemi, A., Arkko, J., and V. Torvinen, \"Hypertext Transfer Protocol (HTTP) Digest Authentication Using Authentication and Key Agreement (AKA)\", RFC 3310, DOI 10.17487/RFC3310, September 2002, <https://www.rfc-editor.org/info/rfc3310>. [RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <https://www.rfc-editor.org/info/rfc4086>. [RFC4169] Torvinen, V., Arkko, J., and M. Naslund, \"Hypertext Transfer Protocol (HTTP) Digest Authentication Using Authentication and Key Agreement (AKA) Version-2\", RFC 4169, DOI 10.17487/RFC4169, November 2005, <https://www.rfc-editor.org/info/rfc4169>. [RFC4186] Haverinen, H., Ed. and J. Salowey, Ed., \"Extensible Authentication Protocol Method for Global System for Mobile Communications (GSM) Subscriber Identity Modules (EAP-SIM)\", RFC 4186, DOI 10.17487/RFC4186, January 2006, <https://www.rfc-editor.org/info/rfc4186>. [RFC4284] Adrangi, F., Lortz, V., Bari, F., and P. Eronen, \"Identity Selection Hints for the Extensible Authentication Protocol (EAP)\", RFC 4284, DOI 10.17487/RFC4284, January 2006, <https://www.rfc-editor.org/info/rfc4284>. [RFC4306] Kaufman, C., Ed., \"Internet Key Exchange (IKEv2) Protocol\", RFC 4306, DOI 10.17487/RFC4306, December 2005, <https://www.rfc-editor.org/info/rfc4306>. [RFC5113] Arkko, J., Aboba, B., Korhonen, J., Ed., and F. Bari, \"Network Discovery and Selection Problem\", RFC 5113, DOI 10.17487/RFC5113, January 2008, <https://www.rfc-editor.org/info/rfc5113>. [RFC5247] Aboba, B., Simon, D., and P. Eronen, \"Extensible Authentication Protocol (EAP) Key Management Framework\", RFC 5247, DOI 10.17487/RFC5247, August 2008, <https://www.rfc-editor.org/info/rfc5247>. [RFC5281] Funk, P. and S. Blake-Wilson, \"Extensible Authentication Protocol Tunneled Transport Layer Security Authenticated Protocol Version 0 (EAP-TTLSv0)\", RFC 5281, DOI 10.17487/RFC5281, August 2008, <https://www.rfc-editor.org/info/rfc5281>. [RFC5448] Arkko, J., Lehtovirta, V., and P. Eronen, \"Improved Extensible Authentication Protocol Method for 3rd Generation Authentication and Key Agreement (EAP-AKA')\", RFC 5448, DOI 10.17487/RFC5448, May 2009, <https://www.rfc-editor.org/info/rfc5448>. [RFC6194] Polk, T., Chen, L., Turner, S., and P. Hoffman, \"Security Considerations for the SHA-0 and SHA-1 Message-Digest Algorithms\", RFC 6194, DOI 10.17487/RFC6194, March 2011, <https://www.rfc-editor.org/info/rfc6194>. [RFC6973] Cooper, A., Tschofenig, H., Aboba, B., Peterson, J., Morris, J., Hansen, M., and R. Smith, \"Privacy Considerations for Internet Protocols\", RFC 6973, DOI 10.17487/RFC6973, July 2013, <https://www.rfc-editor.org/info/rfc6973>. [RFC7170] Zhou, H., Cam-Winget, N., Salowey, J., and S. Hanna, \"Tunnel Extensible Authentication Protocol (TEAP) Version 1\", RFC 7170, DOI 10.17487/RFC7170, May 2014, <https://www.rfc-editor.org/info/rfc7170>. [RFC7258] Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an Attack\", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May 2014, <https://www.rfc-editor.org/info/rfc7258>. [RFC7296] Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T. Kivinen, \"Internet Key Exchange Protocol Version 2 (IKEv2)\", STD 79, RFC 7296, DOI 10.17487/RFC7296, October 2014, <https://www.rfc-editor.org/info/rfc7296>. [Shaik2016] Shaik, A., Seifert, J., Borgaonkar, R., Asokan, N., and V. Niemi, \"Practical attacks against Privacy and Availability in 4G/LTE Mobile Communication Systems\", in the proceedings of NDSS '16 held 21-24 February, 2016, San Diego, California, 2012. [TS-3GPP.35.208] 3GPP, \"3rd Generation Partnership Project; Technical Specification Group Services and System Aspects; 3G Security; Specification of the MILENAGE Algorithm Set: An example algorithm set for the 3GPP authentication and key generation functions f1, f1*, f2, f3, f4, f5 and f5*; Document 4: Design Conformance Test Data (Release 14)\", Version 16.0.0, 3GPP Technical Specification 35.208, July 2020. [ZF2005] Zhang, M. and Y. Fang, \"Security analysis and enhancements of 3GPP authentication and key agreement protocol\", IEEE Transactions on Wireless Communications, Vol. 4, No. 2, DOI 10.1109/TWC.2004.842941, March 2005, <https://doi.org/10.1109/TWC.2004.842941>. Appendix A. Changes from RFC 5448 The change from RFC 5448 was to refer to a newer version of [TS-3GPP.24.302]. This RFC includes an updated definition of the Network Name field to include 5G.¶ Identifier usage for 5G has been specified in Section 5.3. Also, the requirements for generating pseudonym usernames and fast re-authentication identities have been updated from the original definition in RFC 5448, which referenced RFC 4187. See Section 5.¶ Exported parameters for EAP-AKA' have been defined in Section 6, as required by [RFC5247], including the definition of those parameters for both full authentication and fast re-authentication.¶ The security, privacy, and pervasive monitoring considerations have been updated or added. See Section 7.¶ The references to [RFC2119], [RFC4306], [RFC7296], [FIPS.180-1] and [FIPS.180-2] have been updated to their most recent versions, and language in this document has been changed accordingly. However, these are merely reference updates to newer specifications; the actual protocol functions are the same as defined in the earlier RFCs.¶ Similarly, references to all 3GPP technical specifications have been updated to their 5G versions (Release 16) or otherwise most recent version when there has not been a 5G-related update.¶ Finally, a number of clarifications have been made, including a summary of where attributes may appear.¶ Appendix B. Changes to RFC 4187 In addition to specifying EAP-AKA', this document also mandates a change to another EAP method -- EAP-AKA that was defined in RFC 4187. This change was already mandated in RFC 5448 but repeated here to ensure that the latest EAP-AKA' specification contains the instructions about the necessary bidding down prevention feature in EAP-AKA as well.¶ The changes to RFC 4187 relate only to the bidding down prevention support defined in Section 4. In particular, this document does not change how the Master Key (MK) is calculated or any other aspect of EAP-AKA. The provisions in this specification for EAP-AKA' do not apply to EAP-AKA, outside of Section 4.¶ Appendix C. Importance of Explicit Negotiation Choosing between the traditional and revised AKA key derivation functions is easy when their use is unambiguously tied to a particular radio access network, e.g., Long Term Evolution (LTE) as defined by 3GPP or evolved High Rate Packet Data (eHRPD) as defined by 3GPP2. There is no possibility for interoperability problems if this radio access network is always used in conjunction with new protocols that cannot be mixed with the old ones; clients will always know whether they are connecting to the old or new system.¶ However, using the new key derivation functions over EAP introduces several degrees of separation, making the choice of the correct key derivation functions much harder. Many different types of networks employ EAP. Most of these networks have no means to carry any information about what is expected from the authentication process. EAP itself is severely limited in carrying any additional information, as noted in [RFC4284] and [RFC5113]. Even if these networks or EAP were extended to carry additional information, it would not affect millions of deployed access networks and clients attaching to them.¶ Simply changing the key derivation functions that EAP-AKA [RFC4187] uses would cause interoperability problems with all of the existing implementations. Perhaps it would be possible to employ strict separation into domain names that should be used by the new clients and networks. Only these new devices would then employ the new key derivation function. While this can be made to work for specific cases, it would be an extremely brittle mechanism, ripe to result in problems whenever client configuration, routing of authentication requests, or server configuration does not match expectations. It also does not help to assume that the EAP client and server are running a particular release of 3GPP network specifications. Network vendors often provide features from future releases early or do not provide all features of the current release. And obviously, there are many EAP and even some EAP-AKA implementations that are not bundled with the 3GPP network offerings. In general, these approaches are expected to lead to hard-to-diagnose problems and increased support calls.¶ Appendix D. Test Vectors Test vectors are provided below for four different cases. The test vectors may be useful for testing implementations. In the first two cases, we employ the MILENAGE algorithm and the algorithm configuration parameters (the subscriber key K and operator algorithm variant configuration value OP) from test set 19 in [TS-3GPP.35.208].¶ The last two cases use artificial values as the output of AKA, which are useful only for testing the computation of values within EAP-AKA', not AKA itself.¶ Case 1¶ The parameters for the AKA run are as follows: Identity: \"0555444333222111\" Network name: \"WLAN\" RAND: 81e9 2b6c 0ee0 e12e bceb a8d9 2a99 dfa5 AUTN: bb52 e91c 747a c3ab 2a5c 23d1 5ee3 51d5 IK: 9744 871a d32b f9bb d1dd 5ce5 4e3e 2e5a CK: 5349 fbe0 9864 9f94 8f5d 2e97 3a81 c00f RES: 28d7 b0f2 a2ec 3de5 Then the derived keys are generated as follows: CK': 0093 962d 0dd8 4aa5 684b 045c 9edf fa04 IK': ccfc 230c a74f cc96 c0a5 d611 64f5 a76c K_encr: 766f a0a6 c317 174b 812d 52fb cd11 a179 K_aut: 0842 ea72 2ff6 835b fa20 3249 9fc3 ec23 c2f0 e388 b4f0 7543 ffc6 77f1 696d 71ea K_re: cf83 aa8b c7e0 aced 892a cc98 e76a 9b20 95b5 58c7 795c 7094 715c b339 3aa7 d17a MSK: 67c4 2d9a a56c 1b79 e295 e345 9fc3 d187 d42b e0bf 818d 3070 e362 c5e9 67a4 d544 e8ec fe19 358a b303 9aff 03b7 c930 588c 055b abee 58a0 2650 b067 ec4e 9347 c75a EMSK: f861 703c d775 590e 16c7 679e a387 4ada 8663 11de 2907 64d7 60cf 76df 647e a01c 313f 6992 4bdd 7650 ca9b ac14 1ea0 75c4 ef9e 8029 c0e2 90cd bad5 638b 63bc 23fb ¶ Case 2¶ The parameters for the AKA run are as follows: Identity: \"0555444333222111\" Network name: \"HRPD\" RAND: 81e9 2b6c 0ee0 e12e bceb a8d9 2a99 dfa5 AUTN: bb52 e91c 747a c3ab 2a5c 23d1 5ee3 51d5 IK: 9744 871a d32b f9bb d1dd 5ce5 4e3e 2e5a CK: 5349 fbe0 9864 9f94 8f5d 2e97 3a81 c00f RES: 28d7 b0f2 a2ec 3de5 Then the derived keys are generated as follows: CK': 3820 f027 7fa5 f777 32b1 fb1d 90c1 a0da IK': db94 a0ab 557e f6c9 ab48 619c a05b 9a9f K_encr: 05ad 73ac 915f ce89 ac77 e152 0d82 187b K_aut: 5b4a caef 62c6 ebb8 882b 2f3d 534c 4b35 2773 37a0 0184 f20f f25d 224c 04be 2afd K_re: 3f90 bf5c 6e5e f325 ff04 eb5e f653 9fa8 cca8 3981 94fb d00b e425 b3f4 0dba 10ac MSK: 87b3 2157 0117 cd6c 95ab 6c43 6fb5 073f f15c f855 05d2 bc5b b735 5fc2 1ea8 a757 57e8 f86a 2b13 8002 e057 5291 3bb4 3b82 f868 a961 17e9 1a2d 95f5 2667 7d57 2900 EMSK: c891 d5f2 0f14 8a10 0755 3e2d ea55 5c9c b672 e967 5f4a 66b4 bafa 0273 79f9 3aee 539a 5979 d0a0 042b 9d2a e28b ed3b 17a3 1dc8 ab75 072b 80bd 0c1d a612 466e 402c ¶ Case 3¶ The parameters for the AKA run are as follows: Identity: \"0555444333222111\" Network name: \"WLAN\" RAND: e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 AUTN: a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 IK: b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 CK: c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 RES: d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 Then the derived keys are generated as follows: CK': cd4c 8e5c 68f5 7dd1 d7d7 dfd0 c538 e577 IK': 3ece 6b70 5dbb f7df c459 a112 80c6 5524 K_encr: 897d 302f a284 7416 488c 28e2 0dcb 7be4 K_aut: c407 00e7 7224 83ae 3dc7 139e b0b8 8bb5 58cb 3081 eccd 057f 9207 d128 6ee7 dd53 K_re: 0a59 1a22 dd8b 5b1c f29e 3d50 8c91 dbbd b4ae e230 5189 2c42 b6a2 de66 ea50 4473 MSK: 9f7d ca9e 37bb 2202 9ed9 86e7 cd09 d4a7 0d1a c76d 9553 5c5c ac40 a750 4699 bb89 61a2 9ef6 f3e9 0f18 3de5 861a d1be dc81 ce99 1639 1b40 1aa0 06c9 8785 a575 6df7 EMSK: 724d e00b db9e 5681 87be 3fe7 4611 4557 d501 8779 537e e37f 4d3c 6c73 8cb9 7b9d c651 bc19 bfad c344 ffe2 b52c a78b d831 6b51 dacc 5f2b 1440 cb95 1552 1cc7 ba23 ¶ Case 4¶ The parameters for the AKA run are as follows: Identity: \"0555444333222111\" Network name: \"HRPD\" RAND: e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 AUTN: a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 a0a0 IK: b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 b0b0 CK: c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 RES: d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 d0d0 Then the derived keys are generated as follows: CK': 8310 a71c e6f7 5488 9613 da8f 64d5 fb46 IK': 5adf 1436 0ae8 3819 2db2 3f6f cb7f 8c76 K_encr: 745e 7439 ba23 8f50 fcac 4d15 d47c d1d9 K_aut: 3e1d 2aa4 e677 025c fd86 2a4b e183 61a1 3a64 5765 5714 63df 833a 9759 e809 9879 K_re: 99da 835e 2ae8 2462 576f e651 6fad 1f80 2f0f a119 1655 dd0a 273d a96d 04e0 fcd3 MSK: c6d3 a6e0 ceea 951e b20d 74f3 2c30 61d0 680a 04b0 b086 ee87 00ac e3e0 b95f a026 83c2 87be ee44 4322 94ff 98af 26d2 cc78 3bac e75c 4b0a f7fd feb5 511b a8e4 cbd0 EMSK: 7fb5 6813 838a dafa 99d1 40c2 f198 f6da cebf b6af ee44 4961 1054 02b5 08c7 f363 352c b291 9644 b504 63e6 a693 5415 0147 ae09 cbc5 4b8a 651d 8787 a689 3ed8 536d ¶ Acknowledgments The authors would like to thank Guenther Horn, Joe Salowey, Mats Naslund, Adrian Escott, Brian Rosenberg, Laksminath Dondeti, Ahmad Muhanna, Stefan Rommer, Miguel Garcia, Jan Kall, Ankur Agarwal, Jouni Malinen, John Mattsson, Jesus De Gregorio, Brian Weis, Russ Housley, Alfred Hoenes, Anand Palanigounder, Michael Richardson, Roman Danyliw, Dan Romascanu, Kyle Rose, Benjamin Kaduk, Alissa Cooper, Erik Kline, Murray Kucherawy, Robert Wilton, Warren Kumari, Andreas Kunz, Marcus Wong, Kalle Jarvinen, Daniel Migault, and Mohit Sethi for their in-depth reviews and interesting discussions in this problem space.¶ Contributors The test vectors in Appendix D were provided by Yogendra Pal and Jouni Malinen, based on two independent implementations of this specification.¶ Jouni Malinen provided suggested text for Section 6. John Mattsson provided much of the text for Section 7.1. Karl Norrman was the source of much of the information in Section 7.2.¶ Authors' Addresses Jari Arkko Ericsson FI-02420 Jorvas Finland Email: jari.arkko@piuha.net Vesa Lehtovirta Ericsson FI-02420 Jorvas Finland Email: vesa.lehtovirta@ericsson.com Vesa Torvinen Ericsson FI-02420 Jorvas Finland Email: vesa.torvinen@ericsson.com Pasi Eronen Independent Finland Email: pe@iki.fi"
    },
    {
        "Number": "9043",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "FFV1 Video Coding Format Versions 0, 1, and 3",
        "Authors": [
            "M. Niedermayer",
            "D. Rice",
            "J. Martinez"
        ],
        "Date": "2021-08",
        "More Info": "",
        "Status": "Informational",
        "Abstract": "This document defines FFV1, a lossless, intra-frame video encoding format. FFV1 is designed to efficiently compress video data in a variety of pixel formats. Compared to uncompressed video, FFV1 offers storage compression, frame fixity, and self-description, which makes FFV1 useful as a preservation or intermediate video format.",
        "Keywords": [
            "video preservation",
            "storage",
            "ffmpeg",
            "lossless compression"
        ],
        "Content": "RFC 9043: FFV1 Video Coding Format Versions 0, 1, and 3 RFC 9043 FFV1 August 2021 Niedermayer, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9043 Category: Informational Published: August 2021 ISSN: 2070-1721 Authors: M. Niedermayer D. Rice J. Martinez RFC 9043 FFV1 Video Coding Format Versions 0, 1, and 3 Abstract This document defines FFV1, a lossless, intra-frame video encoding format. FFV1 is designed to efficiently compress video data in a variety of pixel formats. Compared to uncompressed video, FFV1 offers storage compression, frame fixity, and self-description, which makes FFV1 useful as a preservation or intermediate video format.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9043.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Notation and Conventions 2.1.  Definitions 2.2.  Conventions 2.2.1.  Pseudocode 2.2.2.  Arithmetic Operators 2.2.3.  Assignment Operators 2.2.4.  Comparison Operators 2.2.5.  Mathematical Functions 2.2.6.  Order of Operation Precedence 2.2.7.  Range 2.2.8.  NumBytes 2.2.9.  Bitstream Functions 3.  Sample Coding 3.1.  Border 3.2.  Samples 3.3.  Median Predictor 3.3.1.  Exception 3.4.  Quantization Table Sets 3.5.  Context 3.6.  Quantization Table Set Indexes 3.7.  Color Spaces 3.7.1.  YCbCr 3.7.2.  RGB 3.8.  Coding of the Sample Difference 3.8.1.  Range Coding Mode 3.8.2.  Golomb Rice Mode 4.  Bitstream 4.1.  Quantization Table Set 4.1.1.  quant_tables 4.1.2.  context_count 4.2.  Parameters 4.2.1.  version 4.2.2.  micro_version 4.2.3.  coder_type 4.2.4.  state_transition_delta 4.2.5.  colorspace_type 4.2.6.  chroma_planes 4.2.7.  bits_per_raw_sample 4.2.8.  log2_h_chroma_subsample 4.2.9.  log2_v_chroma_subsample 4.2.10. extra_plane 4.2.11. num_h_slices 4.2.12. num_v_slices 4.2.13. quant_table_set_count 4.2.14. states_coded 4.2.15. initial_state_delta 4.2.16. ec 4.2.17. intra 4.3.  Configuration Record 4.3.1.  reserved_for_future_use 4.3.2.  configuration_record_crc_parity 4.3.3.  Mapping FFV1 into Containers 4.4.  Frame 4.5.  Slice 4.6.  Slice Header 4.6.1.  slice_x 4.6.2.  slice_y 4.6.3.  slice_width 4.6.4.  slice_height 4.6.5.  quant_table_set_index_count 4.6.6.  quant_table_set_index 4.6.7.  picture_structure 4.6.8.  sar_num 4.6.9.  sar_den 4.7.  Slice Content 4.7.1.  primary_color_count 4.7.2.  plane_pixel_height 4.7.3.  slice_pixel_height 4.7.4.  slice_pixel_y 4.8.  Line 4.8.1.  plane_pixel_width 4.8.2.  slice_pixel_width 4.8.3.  slice_pixel_x 4.8.4.  sample_difference 4.9.  Slice Footer 4.9.1.  slice_size 4.9.2.  error_status 4.9.3.  slice_crc_parity 5.  Restrictions 6.  Security Considerations 7.  IANA Considerations 7.1.  Media Type Definition 8.  References 8.1.  Normative References 8.2.  Informative References Appendix A.  Multithreaded Decoder Implementation Suggestions Appendix B.  Future Handling of Some Streams Created by Nonconforming Encoders Appendix C.  FFV1 Implementations C.1.  FFmpeg FFV1 Codec C.2.  FFV1 Decoder in Go C.3.  MediaConch Authors' Addresses 1. Introduction This document describes FFV1, a lossless video encoding format. The design of FFV1 considers the storage of image characteristics, data fixity, and the optimized use of encoding time and storage requirements. FFV1 is designed to support a wide range of lossless video applications such as long-term audiovisual preservation, scientific imaging, screen recording, and other video encoding scenarios that seek to avoid the generational loss of lossy video encodings.¶ This document defines versions 0, 1, and 3 of FFV1. The distinctions of the versions are provided throughout the document, but in summary:¶ Version 0 of FFV1 was the original implementation of FFV1 and was flagged as stable on April 14, 2006 [FFV1_V0].¶ Version 1 of FFV1 adds support of more video bit depths and was flagged as stable on April 24, 2009 [FFV1_V1].¶ Version 2 of FFV1 only existed in experimental form and is not described by this document, but it is available as a LyX file at <https://github.com/FFmpeg/FFV1/blob/8ad772b6d61c3dd8b0171979a2cd9f11924d5532/ffv1.lyx>.¶ Version 3 of FFV1 adds several features such as increased description of the characteristics of the encoding images and embedded Cyclic Redundancy Check (CRC) data to support fixity verification of the encoding. Version 3 was flagged as stable on August 17, 2013 [FFV1_V3].¶ This document assumes familiarity with mathematical and coding concepts such as Range encoding [Range-Encoding] and YCbCr color spaces [YCbCr].¶ This specification describes the valid bitstream and how to decode it. Nonconformant bitstreams and the nonconformant handling of bitstreams are outside this specification. A decoder can perform any action that it deems appropriate for an invalid bitstream: reject the bitstream, attempt to perform error concealment, or re-download or use a redundant copy of the invalid part.¶ 2. Notation and Conventions The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 2.1. Definitions FFV1: The chosen name of this video encoding format, which is the short version of \"FF Video 1\". The letters \"FF\" come from \"FFmpeg\", which is the name of the reference decoder whose first letters originally meant \"Fast Forward\".¶ Container: A format that encapsulates Frames (see Section 4.4) and (when required) a Configuration Record into a bitstream.¶ Sample: The smallest addressable representation of a color component or a luma component in a Frame. Examples of Sample are Luma (Y), Blue-difference Chroma (Cb), Red-difference Chroma (Cr), Transparency, Red, Green, and Blue.¶ Symbol: A value stored in the bitstream, which is defined and decoded through one of the methods described in Table 4.¶ Line: A discrete component of a static image composed of Samples that represent a specific quantification of Samples of that image.¶ Plane: A discrete component of a static image composed of Lines that represent a specific quantification of Lines of that image.¶ Pixel: The smallest addressable representation of a color in a Frame. It is composed of one or more Samples.¶ MSB: Most Significant Bit, the bit that can cause the largest change in magnitude of the symbol.¶ VLC: Variable Length Code, a code that maps source symbols to a variable number of bits.¶ RGB: A reference to the method of storing the value of a pixel by using three numeric values that represent Red, Green, and Blue.¶ YCbCr: A reference to the method of storing the value of a pixel by using three numeric values that represent the luma of the pixel (Y) and the chroma of the pixel (Cb and Cr). The term YCbCr is used for historical reasons and currently references any color space relying on one luma Sample and two chroma Samples, e.g., YCbCr (luma, blue-difference chroma, red-difference chroma), YCgCo, or ICtCp (intensity, blue-yellow, red-green).¶ 2.2. Conventions 2.2.1. Pseudocode The FFV1 bitstream is described in this document using pseudocode. Note that the pseudocode is used to illustrate the structure of FFV1 and is not intended to specify any particular implementation. The pseudocode used is based upon the C programming language [ISO.9899.2018] and uses its if/else, while, and for keywords as well as functions defined within this document.¶ In some instances, pseudocode is presented in a two-column format such as shown in Figure 1. In this form, the type column provides a symbol as defined in Table 4 that defines the storage of the data referenced in that same line of pseudocode.¶ pseudocode | type --------------------------------------------------------------|----- ExamplePseudoCode( ) { | value | ur } | Figure 1: A depiction of type-labeled pseudocode used within this document. 2.2.2. Arithmetic Operators Note: the operators and the order of precedence are the same as used in the C programming language [ISO.9899.2018], with the exception of >> (removal of implementation-defined behavior) and ^ (power instead of XOR) operators, which are redefined within this section.¶ a + b means a plus b.¶ a - b means a minus b.¶ -a means negation of a.¶ a * b means a multiplied by b.¶ a / b means a divided by b.¶ a ^ b means a raised to the b-th power.¶ a & b means bitwise \"and\" of a and b.¶ a | b means bitwise \"or\" of a and b.¶ a >> b means arithmetic right shift of the two's complement integer representation of a by b binary digits. This is equivalent to dividing a by 2, b times, with rounding toward negative infinity.¶ a << b means arithmetic left shift of the two's complement integer representation of a by b binary digits.¶ 2.2.3. Assignment Operators a = b means a is assigned b.¶ a++ is equivalent to a is assigned a + 1.¶ a-- is equivalent to a is assigned a - 1.¶ a += b is equivalent to a is assigned a + b.¶ a -= b is equivalent to a is assigned a - b.¶ a *= b is equivalent to a is assigned a * b.¶ 2.2.4. Comparison Operators a > b is true when a is greater than b.¶ a >= b is true when a is greater than or equal to b.¶ a < b is true when a is less than b.¶ a <= b is true when a is less than or equal b.¶ a == b is true when a is equal to b.¶ a != b is true when a is not equal to b.¶ a && b is true when both a is true and b is true.¶ a || b is true when either a is true or b is true.¶ !a is true when a is not true.¶ a ? b : c if a is true, then b, otherwise c.¶ 2.2.5. Mathematical Functions floor(a) means the largest integer less than or equal to a.¶ ceil(a) means the smallest integer greater than or equal to a.¶ sign(a) extracts the sign of a number, i.e., if a < 0 then -1, else if a > 0 then 1, else 0.¶ abs(a) means the absolute value of a, i.e., abs(a) = sign(a) * a.¶ log2(a) means the base-two logarithm of a.¶ min(a,b) means the smaller of two values a and b.¶ max(a,b) means the larger of two values a and b.¶ median(a,b,c) means the numerical middle value in a data set of a, b, and c, i.e., a+b+c-min(a,b,c)-max(a,b,c).¶ a ==> b means a implies b.¶ a <==> b means a ==> b, b ==> a.¶ ab means the b-th value of a sequence of a.¶ ab,c means the 'b,c'-th value of a sequence of a.¶ 2.2.6. Order of Operation Precedence When order of precedence is not indicated explicitly by use of parentheses, operations are evaluated in the following order (from top to bottom, operations of same precedence being evaluated from left to right). This order of operations is based on the order of operations used in Standard C.¶ a++, a-- !a, -a a ^ b a * b, a / b a + b, a - b a << b, a >> b a < b, a <= b, a > b, a >= b a == b, a != b a & b a | b a && b a || b a ? b : c a = b, a += b, a -= b, a *= b ¶ 2.2.7. Range a...b means any value from a to b, inclusive.¶ 2.2.8. NumBytes NumBytes is a nonnegative integer that expresses the size in 8-bit octets of a particular FFV1 Configuration Record or Frame. FFV1 relies on its container to store the NumBytes values; see Section 4.3.3.¶ 2.2.9. Bitstream Functions 2.2.9.1. remaining_bits_in_bitstream remaining_bits_in_bitstream( NumBytes ) means the count of remaining bits after the pointer in that Configuration Record or Frame. It is computed from the NumBytes value multiplied by 8 minus the count of bits of that Configuration Record or Frame already read by the bitstream parser.¶ 2.2.9.2. remaining_symbols_in_syntax remaining_symbols_in_syntax( ) is true as long as the range coder has not consumed all the given input bytes.¶ 2.2.9.3. byte_aligned byte_aligned( ) is true if remaining_bits_in_bitstream( NumBytes ) is a multiple of 8, otherwise false.¶ 2.2.9.4. get_bits get_bits( i ) is the action to read the next i bits in the bitstream, from most significant bit to least significant bit, and to return the corresponding value. The pointer is increased by i.¶ 3. Sample Coding For each Slice (as described in Section 4.5) of a Frame, the Planes, Lines, and Samples are coded in an order determined by the color space (see Section 3.7). Each Sample is predicted by the median predictor as described in Section 3.3 from other Samples within the same Plane, and the difference is stored using the method described in Section 3.8.¶ 3.1. Border A border is assumed for each coded Slice for the purpose of the median predictor and context according to the following rules:¶ One column of Samples to the left of the coded Slice is assumed as identical to the Samples of the leftmost column of the coded Slice shifted down by one row. The value of the topmost Sample of the column of Samples to the left of the coded Slice is assumed to be 0.¶ One column of Samples to the right of the coded Slice is assumed as identical to the Samples of the rightmost column of the coded Slice.¶ An additional column of Samples to the left of the coded Slice and two rows of Samples above the coded Slice are assumed to be 0.¶ Figure 2 depicts a Slice of nine Samples a,b,c,d,e,f,g,h,i in a three-by-three arrangement along with its assumed border.¶ +---+---+---+---+---+---+---+---+ | 0 | 0 | | 0 | 0 | 0 | | 0 | +---+---+---+---+---+---+---+---+ | 0 | 0 | | 0 | 0 | 0 | | 0 | +---+---+---+---+---+---+---+---+ | | | | | | | | | +---+---+---+---+---+---+---+---+ | 0 | 0 | | a | b | c | | c | +---+---+---+---+---+---+---+---+ | 0 | a | | d | e | f | | f | +---+---+---+---+---+---+---+---+ | 0 | d | | g | h | i | | i | +---+---+---+---+---+---+---+---+ Figure 2: A depiction of FFV1's assumed border for a set of example Samples. 3.2. Samples Relative to any Sample X, six other relatively positioned Samples from the coded Samples and presumed border are identified according to the labels used in Figure 3. The labels for these relatively positioned Samples are used within the median predictor and context.¶ +---+---+---+---+ | | | T | | +---+---+---+---+ | |tl | t |tr | +---+---+---+---+ | L | l | X | | +---+---+---+---+ Figure 3: A depiction of how relatively positioned Samples are referenced within this document. The labels for these relative Samples are made of the first letters of the words Top, Left, and Right.¶ 3.3. Median Predictor The prediction for any Sample value at position X may be computed based upon the relative neighboring values of l, t, and tl via this equation:¶ median(l, t, l + t - tl) ¶ Note that this prediction template is also used in [ISO.14495-1.1999] and [HuffYUV].¶ 3.3.1. Exception If colorspace_type == 0 && bits_per_raw_sample == 16 && ( coder_type == 1 || coder_type == 2 ) (see Sections 4.2.5, 4.2.7, and 4.2.3), the following median predictor MUST be used:¶ median(left16s, top16s, left16s + top16s - diag16s) ¶ where:¶ left16s = l >= 32768 ? ( l - 65536 ) : l top16s = t >= 32768 ? ( t - 65536 ) : t diag16s = tl >= 32768 ? ( tl - 65536 ) : tl ¶ Background: a two's complement 16-bit signed integer was used for storing Sample values in all known implementations of FFV1 bitstream (see Appendix C). So in some circumstances, the most significant bit was wrongly interpreted (used as a sign bit instead of the 16th bit of an unsigned integer). Note that when the issue was discovered, the only impacted configuration of all known implementations was the 16-bit YCbCr with no pixel transformation and with the range coder coder type, as the other potentially impacted configurations (e.g., the 15/16-bit JPEG 2000 Reversible Color Transform (RCT) [ISO.15444-1.2019] with range coder or the 16-bit content with the Golomb Rice coder type) were not implemented. Meanwhile, the 16-bit JPEG 2000 RCT with range coder was deployed without this issue in one implementation and validated by one conformance checker. It is expected (to be confirmed) that this exception for the median predictor will be removed in the next version of the FFV1 bitstream.¶ 3.4. Quantization Table Sets Quantization Tables are used on Sample Differences (see Section 3.8), so Quantized Sample Differences are stored in the bitstream.¶ The FFV1 bitstream contains one or more Quantization Table Sets. Each Quantization Table Set contains exactly five Quantization Tables with each Quantization Table corresponding to one of the five Quantized Sample Differences. For each Quantization Table, both the number of quantization steps and their distribution are stored in the FFV1 bitstream; each Quantization Table has exactly 256 entries, and the eight least significant bits of the Quantized Sample Difference are used as an index:¶ svg ¶ Figure 4: Description of the mapping from sample differences to the corresponding Quantized Sample Differences. In this formula, i is the Quantization Table Set index, j is the Quantized Table index, and k is the Quantized Sample Difference (see Section 4.1.1).¶ 3.5. Context Relative to any Sample X, the Quantized Sample Differences L-l, l-tl, tl-t, T-t, and t-tr are used as context:¶ svg ¶ Figure 5: Description of the computing of the Context. If context >= 0 then context is used, and the difference between the Sample and its predicted value is encoded as is; else -context is used, and the difference between the Sample and its predicted value is encoded with a flipped sign.¶ 3.6. Quantization Table Set Indexes For each Plane of each Slice, a Quantization Table Set is selected from an index:¶ For Y Plane, quant_table_set_index[ 0 ] index is used.¶ For Cb and Cr Planes, quant_table_set_index[ 1 ] index is used.¶ For extra Plane, quant_table_set_index[ (version <= 3 || chroma_planes) ? 2 : 1 ] index is used.¶ Background: in the first implementations of the FFV1 bitstream, the index for Cb and Cr Planes was stored even if it was not used (chroma_planes set to 0), this index is kept for version <= 3 in order to keep compatibility with FFV1 bitstreams in the wild.¶ 3.7. Color Spaces FFV1 supports several color spaces. The count of allowed coded Planes and the meaning of the extra Plane are determined by the selected color space.¶ The FFV1 bitstream interleaves data in an order determined by the color space. In YCbCr for each Plane, each Line is coded from top to bottom, and for each Line, each Sample is coded from left to right. In JPEG 2000 RCT for each Line from top to bottom, each Plane is coded, and for each Plane, each Sample is encoded from left to right.¶ 3.7.1. YCbCr This color space allows one to four Planes.¶ The Cb and Cr Planes are optional, but if they are used, then they MUST be used together. Omitting the Cb and Cr Planes codes the frames in gray scale without color data.¶ An optional transparency Plane can be used to code transparency data.¶ An FFV1 Frame using YCbCr MUST use one of the following arrangements:¶ Y¶ Y, Transparency¶ Y, Cb, Cr¶ Y, Cb, Cr, Transparency¶ The Y Plane MUST be coded first. If the Cb and Cr Planes are used, then they MUST be coded after the Y Plane. If a transparency Plane is used, then it MUST be coded last.¶ 3.7.2. RGB This color space allows three or four Planes.¶ An optional transparency Plane can be used to code transparency data.¶ JPEG 2000 RCT is a Reversible Color Transform that codes RGB (Red, Green, Blue) Planes losslessly in a modified YCbCr color space [ISO.15444-1.2019]. Reversible pixel transformations between YCbCr and RGB use the following formulae:¶ svg ¶ Figure 6: Description of the transformation of pixels from RGB color space to coded, modified YCbCr color space. svg ¶ Figure 7: Description of the transformation of pixels from coded, modified YCbCr color space to RGB color space. Cb and Cr are positively offset by 1 << bits_per_raw_sample after the conversion from RGB to the modified YCbCr, and they are negatively offset by the same value before the conversion from the modified YCbCr to RGB in order to have only nonnegative values after the conversion.¶ When FFV1 uses the JPEG 2000 RCT, the horizontal Lines are interleaved to improve caching efficiency since it is most likely that the JPEG 2000 RCT will immediately be converted to RGB during decoding. The interleaved coding order is also Y, then Cb, then Cr, and then, if used, transparency.¶ As an example, a Frame that is two pixels wide and two pixels high could comprise the following structure:¶ +------------------------+------------------------+ | Pixel(1,1) | Pixel(2,1) | | Y(1,1) Cb(1,1) Cr(1,1) | Y(2,1) Cb(2,1) Cr(2,1) | +------------------------+------------------------+ | Pixel(1,2) | Pixel(2,2) | | Y(1,2) Cb(1,2) Cr(1,2) | Y(2,2) Cb(2,2) Cr(2,2) | +------------------------+------------------------+ ¶ In JPEG 2000 RCT, the coding order is left to right and then top to bottom, with values interleaved by Lines and stored in this order:¶ Y(1,1) Y(2,1) Cb(1,1) Cb(2,1) Cr(1,1) Cr(2,1) Y(1,2) Y(2,2) Cb(1,2) Cb(2,2) Cr(1,2) Cr(2,2)¶ 3.7.2.1. RGB Exception If bits_per_raw_sample is between 9 and 15 inclusive and extra_plane is 0, the following formulae for reversible conversions between YCbCr and RGB MUST be used instead of the ones above:¶ svg ¶ Figure 8: Description of the transformation of pixels from RGB color space to coded, modified YCbCr color space (in case of exception). svg ¶ Figure 9: Description of the transformation of pixels from coded, modified YCbCr color space to RGB color space (in case of exception). Background: At the time of this writing, in all known implementations of the FFV1 bitstream, when bits_per_raw_sample was between 9 and 15 inclusive and extra_plane was 0, Green Blue Red (GBR) Planes were used as Blue Green Red (BGR) Planes during both encoding and decoding. Meanwhile, 16-bit JPEG 2000 RCT was implemented without this issue in one implementation and validated by one conformance checker. Methods to address this exception for the transform are under consideration for the next version of the FFV1 bitstream.¶ 3.8. Coding of the Sample Difference Instead of coding the n+1 bits of the Sample Difference with Huffman or Range coding (or n+2 bits, in the case of JPEG 2000 RCT), only the n (or n+1, in the case of JPEG 2000 RCT) least significant bits are used, since this is sufficient to recover the original Sample. In Figure 10, the term bits represents bits_per_raw_sample + 1 for JPEG 2000 RCT or bits_per_raw_sample otherwise:¶ svg ¶ Figure 10: Description of the coding of the Sample Difference in the bitstream. 3.8.1. Range Coding Mode Early experimental versions of FFV1 used the Context-Adaptive Binary Arithmetic Coding (CABAC) coder from H.264 as defined in [ISO.14496-10.2020], but due to the uncertain patent/royalty situation, as well as its slightly worse performance, CABAC was replaced by a range coder based on an algorithm defined by G. Nigel N. Martin in 1979 [Range-Encoding].¶ 3.8.1.1. Range Binary Values To encode binary digits efficiently, a range coder is used. A range coder encodes a series of binary symbols by using a probability estimation within each context. The sizes of each of the two subranges are proportional to their estimated probability. The Quantization Table is used to choose the context used from the surrounding image sample values for the case of coding the Sample Differences. The coding of integers is done by coding multiple binary values. The range decoder will read bytes until it can determine into which subrange the input falls to return the next binary symbol.¶ To describe Range coding for FFV1, the following values are used:¶ Ci the i-th context.¶ Bi the i-th byte of the bytestream.¶ Ri the Range at the i-th symbol.¶ ri the boundary between two subranges of Ri: a subrange of ri values and a subrange Ri - ri values.¶ Li the Low value of the Range at the i-th symbol.¶ li a temporary variable to carry over or adjust the Low value of the Range between range coding operations.¶ ti a temporary variable to transmit subranges between range coding operations.¶ bi the i-th range-coded binary value.¶ S0, i the i-th initial state.¶ jn the length of the bytestream encoding n binary symbols.¶ The following range coder state variables are initialized to the following values. The Range is initialized to a value of 65,280 (expressed in base 16 as 0xFF00) as depicted in Figure 11. The Low is initialized according to the value of the first two bytes as depicted in Figure 12. ji tracks the length of the bytestream encoding while incrementing from an initial value of j0 to a final value of jn. j0 is initialized to 2 as depicted in Figure 13.¶ svg ¶ Figure 11: The initial value for the Range. svg ¶ Figure 12: The initial value for Low is set according to the first two bytes of the bytestream. svg ¶ Figure 13: The initial value for j, the length of the bytestream encoding. The following equations define how the range coder variables evolve as it reads or writes symbols.¶ svg ¶ Figure 14: This formula shows the positioning of range split based on the state. svg ¶ Figure 15: This formula shows the linking of the decoded symbol (represented as bi), the updated state (represented as Si+1,Ci), and the updated range (represented as a range from li to ti). svg ¶ Figure 16: If the value of k is unequal to the i-th value of context, in other words, if the state is unchanged from the last symbol coding, then the value of the state is carried over to the next symbol coding. svg ¶ Figure 17: This formula shows the linking of the range coder with the reading or writing of the bytestream. range = 0xFF00; end = 0; low = get_bits(16); if (low >= range) { low = range; end = 1; } Figure 18: A pseudocode description of the initialization of range coder variables in Range binary mode. refill() { if (range < 256) { range = range * 256; low = low * 256; if (!end) { c.low += get_bits(8); if (remaining_bits_in_bitstream( NumBytes ) == 0) { end = 1; } } } } Figure 19: A pseudocode description of refilling the binary value buffer of the range coder. get_rac(state) { rangeoff = (range * state) / 256; range -= rangeoff; if (low < range) { state = zero_state[state]; refill(); return 0; } else { low -= range; state = one_state[state]; range = rangeoff; refill(); return 1; } } Figure 20: A pseudocode description of the read of a binary value in Range binary mode. 3.8.1.1.1. Termination The range coder can be used in three modes:¶ In Open mode when decoding, every symbol the reader attempts to read is available. In this mode, arbitrary data can have been appended without affecting the range coder output. This mode is not used in FFV1.¶ In Closed mode, the length in bytes of the bytestream is provided to the range decoder. Bytes beyond the length are read as 0 by the range decoder. This is generally one byte shorter than the Open mode.¶ In Sentinel mode, the exact length in bytes is not known, and thus the range decoder MAY read into the data that follows the range-coded bytestream by one byte. In Sentinel mode, the end of the range-coded bytestream is a binary symbol with state 129, which value SHALL be discarded. After reading this symbol, the range decoder will have read one byte beyond the end of the range-coded bytestream. This way the byte position of the end can be determined. Bytestreams written in Sentinel mode can be read in Closed mode if the length can be determined. In this case, the last (sentinel) symbol will be read uncorrupted and be of value 0.¶ The above describes the range decoding. Encoding is defined as any process that produces a decodable bytestream.¶ There are three places where range coder termination is needed in FFV1. The first is in the Configuration Record, which in this case the size of the range-coded bytestream is known and handled as Closed mode. The second is the switch from the Slice Header, which is range coded to Golomb-coded Slices as Sentinel mode. The third is the end of range-coded Slices, which need to terminate before the CRC at their end. This can be handled as Sentinel mode or as Closed mode if the CRC position has been determined.¶ 3.8.1.2. Range Nonbinary Values To encode scalar integers, it would be possible to encode each bit separately and use the past bits as context. However, that would mean 255 contexts per 8-bit symbol, which is not only a waste of memory but also requires more past data to reach a reasonably good estimate of the probabilities. Alternatively, it would also be possible to assume a Laplacian distribution and only deal with its variance and mean (as in Huffman coding). However, for maximum flexibility and simplicity, the chosen method uses a single symbol to encode if a number is 0, and if the number is nonzero, it encodes the number using its exponent, mantissa, and sign. The exact contexts used are best described by Figure 21.¶ int get_symbol(RangeCoder *c, uint8_t *state, int is_signed) { if (get_rac(c, state + 0) { return 0; } int e = 0; while (get_rac(c, state + 1 + min(e, 9)) { //1..10 e++; } int a = 1; for (int i = e - 1; i >= 0; i--) { a = a * 2 + get_rac(c, state + 22 + min(i, 9)); // 22..31 } if (!is_signed) { return a; } if (get_rac(c, state + 11 + min(e, 10))) { //11..21 return -a; } else { return a; } } Figure 21: A pseudocode description of the contexts of Range nonbinary values. get_symbol is used for the read out of sample_difference indicated in Figure 10.¶ get_rac returns a boolean computed from the bytestream as described by the formula found in Figure 14 and by the pseudocode found in Figure 20.¶ 3.8.1.3. Initial Values for the Context Model When the keyframe value (see Section 4.4) is 1, all range coder state variables are set to their initial state.¶ 3.8.1.4. State Transition Table In Range Coding Mode, a state transition table is used, indicating to which state the decoder will move based on the current state and the value extracted from Figure 20.¶ svg ¶ Figure 22: Description of the coding of the state transition table for a get_rac readout value of 1. svg ¶ Figure 23: Description of the coding of the state transition table for a get_rac readout value of 0. 3.8.1.5. default_state_transition By default, the following state transition table is used:¶ 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99,100,101,102,103, 104,105,106,107,108,109,110,111,112,113,114,114,115,116,117,118, 119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,133, 134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149, 150,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164, 165,166,167,168,169,170,171,171,172,173,174,175,176,177,178,179, 180,181,182,183,184,185,186,187,188,189,190,190,191,192,194,194, 195,196,197,198,199,200,201,202,202,204,205,206,207,208,209,209, 210,211,212,213,215,215,216,217,218,219,220,220,222,223,224,225, 226,227,227,229,229,230,231,232,234,234,235,236,237,238,239,240, 241,242,243,244,245,246,247,248,248, 0, 0, 0, 0, 0, 0, 0, Figure 24: Default state transition table for Range coding. 3.8.1.6. Alternative State Transition Table The alternative state transition table has been built using iterative minimization of frame sizes and generally performs better than the default. To use it, the coder_type (see Section 4.2.3) MUST be set to 2, and the difference to the default MUST be stored in the Parameters, see Section 4.2. At the time of this writing, the reference implementation of FFV1 in FFmpeg uses Figure 25 by default when Range coding is used.¶ 0, 10, 10, 10, 10, 16, 16, 16, 28, 16, 16, 29, 42, 49, 20, 49, 59, 25, 26, 26, 27, 31, 33, 33, 33, 34, 34, 37, 67, 38, 39, 39, 40, 40, 41, 79, 43, 44, 45, 45, 48, 48, 64, 50, 51, 52, 88, 52, 53, 74, 55, 57, 58, 58, 74, 60,101, 61, 62, 84, 66, 66, 68, 69, 87, 82, 71, 97, 73, 73, 82, 75,111, 77, 94, 78, 87, 81, 83, 97, 85, 83, 94, 86, 99, 89, 90, 99,111, 92, 93,134, 95, 98,105, 98, 105,110,102,108,102,118,103,106,106,113,109,112,114,112,116,125, 115,116,117,117,126,119,125,121,121,123,145,124,126,131,127,129, 165,130,132,138,133,135,145,136,137,139,146,141,143,142,144,148, 147,155,151,149,151,150,152,157,153,154,156,168,158,162,161,160, 172,163,169,164,166,184,167,170,177,174,171,173,182,176,180,178, 175,189,179,181,186,183,192,185,200,187,191,188,190,197,193,196, 197,194,195,196,198,202,199,201,210,203,207,204,205,206,208,214, 209,211,221,212,213,215,224,216,217,218,219,220,222,228,223,225, 226,224,227,229,240,230,231,232,233,234,235,236,238,239,237,242, 241,243,242,244,245,246,247,248,249,250,251,252,252,253,254,255, Figure 25: Alternative state transition table for Range coding. 3.8.2. Golomb Rice Mode The end of the bitstream of the Frame is padded with zeroes until the bitstream contains a multiple of eight bits.¶ 3.8.2.1. Signed Golomb Rice Codes This coding mode uses Golomb Rice codes. The VLC is split into two parts: the prefix and suffix. The prefix stores the most significant bits or indicates if the symbol is too large to be stored (this is known as the ESC case, see Section 3.8.2.1.1). The suffix either stores the k least significant bits or stores the whole number in the ESC case.¶ int get_ur_golomb(k) { for (prefix = 0; prefix < 12; prefix++) { if (get_bits(1)) { return get_bits(k) + (prefix << k); } } return get_bits(bits) + 11; } Figure 26: A pseudocode description of the read of an unsigned integer in Golomb Rice mode. int get_sr_golomb(k) { v = get_ur_golomb(k); if (v & 1) return - (v >> 1) - 1; else return (v >> 1); } Figure 27: A pseudocode description of the read of a signed integer in Golomb Rice mode. 3.8.2.1.1. Prefix Table 1: Description of the coding of the prefix of signed Golomb Rice codes. bits value 1 0 01 1 ... ... 0000 0000 01 9 0000 0000 001 10 0000 0000 0001 11 0000 0000 0000 ESC ESC is an ESCape symbol to indicate that the symbol to be stored is too large for normal storage and that an alternate storage method is used.¶ 3.8.2.1.2. Suffix Table 2: Description of the coding of the suffix of signed Golomb Rice codes. non-ESC the k least significant bits MSB first ESC the value - 11, in MSB first order ESC MUST NOT be used if the value can be coded as non-ESC.¶ 3.8.2.1.3. Examples Table 3 shows practical examples of how signed Golomb Rice codes are decoded based on the series of bits extracted from the bitstream as described by the method above:¶ Table 3: Examples of decoded, signed Golomb Rice codes. k bits value 0 1 0 0 001 2 2 1 00 0 2 1 10 2 2 01 01 5 any 000000000000 10000000 139 3.8.2.2. Run Mode Run mode is entered when the context is 0 and left as soon as a nonzero difference is found. The Sample Difference is identical to the predicted one. The run and the first different Sample Difference are coded as defined in Section 3.8.2.4.1.¶ 3.8.2.2.1. Run Length Coding The run value is encoded in two parts. The prefix part stores the more significant part of the run as well as adjusting the run_index that determines the number of bits in the less significant part of the run. The second part of the value stores the less significant part of the run as it is. The run_index is reset to zero for each Plane and Slice.¶ log2_run[41] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9,10,11,12,13,14,15, 16,17,18,19,20,21,22,23, 24, }; if (run_count == 0 && run_mode == 1) { if (get_bits(1)) { run_count = 1 << log2_run[run_index]; if (x + run_count <= w) { run_index++; } } else { if (log2_run[run_index]) { run_count = get_bits(log2_run[run_index]); } else { run_count = 0; } if (run_index) { run_index--; } run_mode = 2; } } ¶ The log2_run array is also used within [ISO.14495-1.1999].¶ 3.8.2.3. Sign Extension sign_extend is the function of increasing the number of bits of an input binary number in two's complement signed number representation while preserving the input number's sign (positive/negative) and value, in order to fit in the output bit width. It MAY be computed with the following:¶ sign_extend(input_number, input_bits) { negative_bias = 1 << (input_bits - 1); bits_mask = negative_bias - 1; output_number = input_number & bits_mask; // Remove negative bit is_negative = input_number & negative_bias; // Test negative bit if (is_negative) output_number -= negative_bias; return output_number } ¶ 3.8.2.4. Scalar Mode Each difference is coded with the per context mean prediction removed and a per context value for k.¶ get_vlc_symbol(state) { i = state->count; k = 0; while (i < state->error_sum) { k++; i += i; } v = get_sr_golomb(k); if (2 * state->drift < -state->count) { v = -1 - v; } ret = sign_extend(v + state->bias, bits); state->error_sum += abs(v); state->drift += v; if (state->count == 128) { state->count >>= 1; state->drift >>= 1; state->error_sum >>= 1; } state->count++; if (state->drift <= -state->count) { state->bias = max(state->bias - 1, -128); state->drift = max(state->drift + state->count, -state->count + 1); } else if (state->drift > 0) { state->bias = min(state->bias + 1, 127); state->drift = min(state->drift - state->count, 0); } return ret; } ¶ 3.8.2.4.1. Golomb Rice Sample Difference Coding Level coding is identical to the normal difference coding with the exception that the 0 value is removed as it cannot occur:¶ diff = get_vlc_symbol(context_state); if (diff >= 0) { diff++; } ¶ Note that this is different from JPEG-LS (lossless JPEG), which doesn't use prediction in run mode and uses a different encoding and context model for the last difference. On a small set of test Samples, the use of prediction slightly improved the compression rate.¶ 3.8.2.5. Initial Values for the VLC Context State When keyframe (see Section 4.4) value is 1, all VLC coder state variables are set to their initial state.¶ drift = 0; error_sum = 4; bias = 0; count = 1; ¶ 4. Bitstream An FFV1 bitstream is composed of a series of one or more Frames and (when required) a Configuration Record.¶ Within the following subsections, pseudocode as described in Section 2.2.1 is used to explain the structure of each FFV1 bitstream component. Table 4 lists symbols used to annotate that pseudocode in order to define the storage of the data referenced in that line of pseudocode.¶ Table 4: Definition of pseudocode symbols for this document. symbol definition u(n) Unsigned, big-endian integer symbol using n bits br Boolean (1-bit) symbol that is range coded with the method described in Section 3.8.1.1 ur Unsigned scalar symbol that is range coded with the method described in Section 3.8.1.2 sr Signed scalar symbol that is range coded with the method described in Section 3.8.1.2 sd Sample Difference symbol that is coded with the method described in Section 3.8 The following MUST be provided by external means during the initialization of the decoder:¶ frame_pixel_width is defined as Frame width in pixels.¶ frame_pixel_height is defined as Frame height in pixels.¶ Default values at the decoder initialization phase:¶ ConfigurationRecordIsPresent is set to 0.¶ 4.1. Quantization Table Set The Quantization Table Sets store a sequence of values that are equal to one less than the count of equal concurrent entries for each set of equal concurrent entries within the first half of the table (represented as len - 1 in the pseudocode below) using the method described in Section 3.8.1.2. The second half doesn't need to be stored as it is identical to the first with flipped sign. scale and len_count[ i ][ j ] are temporary values used for the computing of context_count[ i ] and are not used outside Quantization Table Set pseudocode.¶ Example:¶ Table: 0 0 1 1 1 1 2 2 -2 -2 -2 -1 -1 -1 -1 0¶ Stored values: 1, 3, 1¶ QuantizationTableSet has its own initial states, all set to 128.¶ pseudocode | type --------------------------------------------------------------|----- QuantizationTableSet( i ) { | scale = 1 | for (j = 0; j < MAX_CONTEXT_INPUTS; j++) { | QuantizationTable( i, j, scale ) | scale *= 2 * len_count[ i ][ j ] - 1 | } | context_count[ i ] = ceil( scale / 2 ) | } | ¶ MAX_CONTEXT_INPUTS is 5.¶ pseudocode | type --------------------------------------------------------------|----- QuantizationTable(i, j, scale) { | v = 0 | for (k = 0; k < 128;) { | len - 1 | ur for (n = 0; n < len; n++) { | quant_tables[ i ][ j ][ k ] = scale * v | k++ | } | v++ | } | for (k = 1; k < 128; k++) { | quant_tables[ i ][ j ][ 256 - k ] = \\ | -quant_tables[ i ][ j ][ k ] | } | quant_tables[ i ][ j ][ 128 ] = \\ | -quant_tables[ i ][ j ][ 127 ] | len_count[ i ][ j ] = v | } | ¶ 4.1.1. quant_tables quant_tables[ i ][ j ][ k ] indicates the Quantization Table value of the Quantized Sample Difference k of the Quantization Table j of the Quantization Table Set i.¶ 4.1.2. context_count context_count[ i ] indicates the count of contexts for Quantization Table Set i. context_count[ i ] MUST be less than or equal to 32768.¶ 4.2. Parameters The Parameters section, which could be in a global header of a container file that may or may not be considered to be part of the bitstream, contains significant characteristics about the decoding configuration used for all instances of Frame (in FFV1 versions 0 and 1) or the whole FFV1 bitstream (other versions), including the stream version, color configuration, and Quantization Tables. Figure 28 describes the contents of the bitstream.¶ Parameters has its own initial states, all set to 128.¶ pseudocode | type --------------------------------------------------------------|----- Parameters( ) { | version | ur if (version >= 3) { | micro_version | ur } | coder_type | ur if (coder_type > 1) { | for (i = 1; i < 256; i++) { | state_transition_delta[ i ] | sr } | } | colorspace_type | ur if (version >= 1) { | bits_per_raw_sample | ur } | chroma_planes | br log2_h_chroma_subsample | ur log2_v_chroma_subsample | ur extra_plane | br if (version >= 3) { | num_h_slices - 1 | ur num_v_slices - 1 | ur quant_table_set_count | ur } | for (i = 0; i < quant_table_set_count; i++) { | QuantizationTableSet( i ) | } | if (version >= 3) { | for (i = 0; i < quant_table_set_count; i++) { | states_coded | br if (states_coded) { | for (j = 0; j < context_count[ i ]; j++) { | for (k = 0; k < CONTEXT_SIZE; k++) { | initial_state_delta[ i ][ j ][ k ] | sr } | } | } | } | ec | ur intra | ur } | } | Figure 28: A pseudocode description of the bitstream contents. CONTEXT_SIZE is 32.¶ 4.2.1. version version specifies the version of the FFV1 bitstream.¶ Each version is incompatible with other versions: decoders SHOULD reject FFV1 bitstreams due to an unknown version.¶ Decoders SHOULD reject FFV1 bitstreams with version <= 1 && ConfigurationRecordIsPresent == 1.¶ Decoders SHOULD reject FFV1 bitstreams with version >= 3 && ConfigurationRecordIsPresent == 0.¶ Table 5: The definitions for version values. value version 0 FFV1 version 0 1 FFV1 version 1 2 reserved* 3 FFV1 version 3 Other reserved for future use * Version 2 was experimental and this document does not describe it.¶ 4.2.2. micro_version micro_version specifies the micro-version of the FFV1 bitstream.¶ After a version is considered stable (a micro-version value is assigned to be the first stable variant of a specific version), each new micro-version after this first stable variant is compatible with the previous micro-version: decoders SHOULD NOT reject FFV1 bitstreams due to an unknown micro-version equal or above the micro-version considered as stable.¶ Meaning of micro_version for version 3:¶ Table 6: The definitions for micro_version values for FFV1 version 3. value micro_version 0...3 reserved* 4 first stable variant Other reserved for future use * Development versions may be incompatible with the stable variants.¶ 4.2.3. coder_type coder_type specifies the coder used.¶ Table 7: The definitions for coder_type values. value coder used 0 Golomb Rice 1 Range coder with default state transition table 2 Range coder with custom state transition table Other reserved for future use Restrictions:¶ If coder_type is 0, then bits_per_raw_sample SHOULD NOT be > 8.¶ Background: At the time of this writing, there is no known implementation of FFV1 bitstream supporting the Golomb Rice algorithm with bits_per_raw_sample greater than eight, and range coder is preferred.¶ 4.2.4. state_transition_delta state_transition_delta specifies the range coder custom state transition table.¶ If state_transition_delta is not present in the FFV1 bitstream, all range coder custom state transition table elements are assumed to be 0.¶ 4.2.5. colorspace_type colorspace_type specifies the color space encoded, the pixel transformation used by the encoder, the extra Plane content, as well as interleave method.¶ Table 8: The definitions for colorspace_type values. value color space encoded pixel transformation extra Plane content interleave method 0 YCbCr None Transparency Plane then Line 1 RGB JPEG 2000 RCT Transparency Line then Plane Other reserved for future use reserved for future use reserved for future use reserved for future use FFV1 bitstreams with colorspace_type == 1 && (chroma_planes != 1 || log2_h_chroma_subsample != 0 || log2_v_chroma_subsample != 0) are not part of this specification.¶ 4.2.6. chroma_planes chroma_planes indicates if chroma (color) Planes are present.¶ Table 9: The definitions for chroma_planes values. value presence 0 chroma Planes are not present 1 chroma Planes are present 4.2.7. bits_per_raw_sample bits_per_raw_sample indicates the number of bits for each Sample. Inferred to be 8 if not present.¶ Table 10: The definitions for bits_per_raw_sample values. value bits for each Sample 0 reserved* Other the actual bits for each Sample * Encoders MUST NOT store bits_per_raw_sample = 0. Decoders SHOULD accept and interpret bits_per_raw_sample = 0 as 8.¶ 4.2.8. log2_h_chroma_subsample log2_h_chroma_subsample indicates the subsample factor, stored in powers to which the number 2 is raised, between luma and chroma width (chroma_width = 2 ^ -log2_h_chroma_subsample * luma_width).¶ 4.2.9. log2_v_chroma_subsample log2_v_chroma_subsample indicates the subsample factor, stored in powers to which the number 2 is raised, between luma and chroma height (chroma_height = 2 ^ -log2_v_chroma_subsample * luma_height).¶ 4.2.10. extra_plane extra_plane indicates if an extra Plane is present.¶ Table 11: The definitions for extra_plane values. value presence 0 extra Plane is not present 1 extra Plane is present 4.2.11. num_h_slices num_h_slices indicates the number of horizontal elements of the Slice raster.¶ Inferred to be 1 if not present.¶ 4.2.12. num_v_slices num_v_slices indicates the number of vertical elements of the Slice raster.¶ Inferred to be 1 if not present.¶ 4.2.13. quant_table_set_count quant_table_set_count indicates the number of Quantization Table Sets. quant_table_set_count MUST be less than or equal to 8.¶ Inferred to be 1 if not present.¶ MUST NOT be 0.¶ 4.2.14. states_coded states_coded indicates if the respective Quantization Table Set has the initial states coded.¶ Inferred to be 0 if not present.¶ Table 12: The definitions for states_coded values. value initial states 0 initial states are not present and are assumed to be all 128 1 initial states are present 4.2.15. initial_state_delta initial_state_delta[ i ][ j ][ k ] indicates the initial range coder state, and it is encoded using k as context index for the range coder and the following pseudocode:¶ svg ¶ Figure 29: Predictor value for the coding of initial_state_delta[ i ][ j ][ k ]. svg ¶ Figure 30: Description of the coding of initial_state_delta[ i ][ j ][ k ]. 4.2.16. ec ec indicates the error detection/correction type.¶ Table 13: The definitions for ec values. value error detection/correction type 0 32-bit CRC in ConfigurationRecord 1 32-bit CRC in Slice and ConfigurationRecord Other reserved for future use 4.2.17. intra intra indicates the constraint on keyframe in each instance of Frame.¶ Inferred to be 0 if not present.¶ Table 14: The definitions for intra values. value relationship 0 keyframe can be 0 or 1 (non keyframes or keyframes) 1 keyframe MUST be 1 (keyframes only) Other reserved for future use 4.3. Configuration Record In the case of a FFV1 bitstream with version >= 3, a Configuration Record is stored in the underlying container as described in Section 4.3.3. It contains the Parameters used for all instances of Frame. The size of the Configuration Record, NumBytes, is supplied by the underlying container.¶ pseudocode | type -----------------------------------------------------------|----- ConfigurationRecord( NumBytes ) { | ConfigurationRecordIsPresent = 1 | Parameters( ) | while (remaining_symbols_in_syntax(NumBytes - 4)) { | reserved_for_future_use | br/ur/sr } | configuration_record_crc_parity | u(32) } | ¶ 4.3.1. reserved_for_future_use reserved_for_future_use is a placeholder for future updates of this specification.¶ Encoders conforming to this version of this specification SHALL NOT write reserved_for_future_use.¶ Decoders conforming to this version of this specification SHALL ignore reserved_for_future_use.¶ 4.3.2. configuration_record_crc_parity configuration_record_crc_parity is 32 bits that are chosen so that the Configuration Record as a whole has a CRC remainder of zero.¶ This is equivalent to storing the CRC remainder in the 32-bit parity.¶ The CRC generator polynomial used is described in Section 4.9.3.¶ 4.3.3. Mapping FFV1 into Containers This Configuration Record can be placed in any file format that supports Configuration Records, fitting as much as possible with how the file format stores Configuration Records. The Configuration Record storage place and NumBytes are currently defined and supported for the following formats:¶ 4.3.3.1. Audio Video Interleave (AVI) File Format The Configuration Record extends the stream format chunk (\"AVI \", \"hdlr\", \"strl\", \"strf\") with the ConfigurationRecord bitstream.¶ See [AVI] for more information about chunks.¶ NumBytes is defined as the size, in bytes, of the \"strf\" chunk indicated in the chunk header minus the size of the stream format structure.¶ 4.3.3.2. ISO Base Media File Format The Configuration Record extends the sample description box (\"moov\", \"trak\", \"mdia\", \"minf\", \"stbl\", \"stsd\") with a \"glbl\" box that contains the ConfigurationRecord bitstream. See [ISO.14496-12.2020] for more information about boxes.¶ NumBytes is defined as the size, in bytes, of the \"glbl\" box indicated in the box header minus the size of the box header.¶ 4.3.3.3. NUT File Format The codec_specific_data element (in stream_header packet) contains the ConfigurationRecord bitstream. See [NUT] for more information about elements.¶ NumBytes is defined as the size, in bytes, of the codec_specific_data element as indicated in the \"length\" field of codec_specific_data.¶ 4.3.3.4. Matroska File Format FFV1 SHOULD use V_FFV1 as the Matroska Codec ID. For FFV1 versions 2 or less, the Matroska CodecPrivate Element SHOULD NOT be used. For FFV1 versions 3 or greater, the Matroska CodecPrivate Element MUST contain the FFV1 Configuration Record structure and no other data. See [Matroska] for more information about elements.¶ NumBytes is defined as the Element Data Size of the CodecPrivate Element.¶ 4.4. Frame A Frame is an encoded representation of a complete static image. The whole Frame is provided by the underlying container.¶ A Frame consists of the keyframe field, Parameters (if version <= 1), and a sequence of independent Slices. The pseudocode below describes the contents of a Frame.¶ The keyframe field has its own initial state, set to 128.¶ pseudocode | type --------------------------------------------------------------|----- Frame( NumBytes ) { | keyframe | br if (keyframe && !ConfigurationRecordIsPresent { | Parameters( ) | } | while (remaining_bits_in_bitstream( NumBytes )) { | Slice( ) | } | } | ¶ The following is an architecture overview of Slices in a Frame:¶ +-----------------------------------------------------------------+ | first Slice header | +-----------------------------------------------------------------+ | first Slice content | +-----------------------------------------------------------------+ | first Slice footer | +-----------------------------------------------------------------+ | --------------------------------------------------------------- | +-----------------------------------------------------------------+ | second Slice header | +-----------------------------------------------------------------+ | second Slice content | +-----------------------------------------------------------------+ | second Slice footer | +-----------------------------------------------------------------+ | --------------------------------------------------------------- | +-----------------------------------------------------------------+ | ... | +-----------------------------------------------------------------+ | --------------------------------------------------------------- | +-----------------------------------------------------------------+ | last Slice header | +-----------------------------------------------------------------+ | last Slice content | +-----------------------------------------------------------------+ | last Slice footer | +-----------------------------------------------------------------+ ¶ 4.5. Slice A Slice is an independent, spatial subsection of a Frame that is encoded separately from another region of the same Frame. The use of more than one Slice per Frame provides opportunities for taking advantage of multithreaded encoding and decoding.¶ A Slice consists of a Slice Header (when relevant), a Slice Content, and a Slice Footer (when relevant). The pseudocode below describes the contents of a Slice.¶ pseudocode | type --------------------------------------------------------------|----- Slice( ) { | if (version >= 3) { | SliceHeader( ) | } | SliceContent( ) | if (coder_type == 0) { | while (!byte_aligned()) { | padding | u(1) } | } | if (version <= 1) { | while (remaining_bits_in_bitstream( NumBytes ) != 0) {| reserved | u(1) } | } | if (version >= 3) { | SliceFooter( ) | } | } | ¶ padding specifies a bit without any significance and used only for byte alignment. padding MUST be 0.¶ reserved specifies a bit without any significance in this specification but may have a significance in a later revision of this specification.¶ Encoders SHOULD NOT fill reserved.¶ Decoders SHOULD ignore reserved.¶ 4.6. Slice Header A Slice Header provides information about the decoding configuration of the Slice, such as its spatial position, size, and aspect ratio. The pseudocode below describes the contents of the Slice Header.¶ Slice Header has its own initial states, all set to 128.¶ pseudocode | type --------------------------------------------------------------|----- SliceHeader( ) { | slice_x | ur slice_y | ur slice_width - 1 | ur slice_height - 1 | ur for (i = 0; i < quant_table_set_index_count; i++) { | quant_table_set_index[ i ] | ur } | picture_structure | ur sar_num | ur sar_den | ur } | ¶ 4.6.1. slice_x slice_x indicates the x position on the Slice raster formed by num_h_slices.¶ Inferred to be 0 if not present.¶ 4.6.2. slice_y slice_y indicates the y position on the Slice raster formed by num_v_slices.¶ Inferred to be 0 if not present.¶ 4.6.3. slice_width slice_width indicates the width on the Slice raster formed by num_h_slices.¶ Inferred to be 1 if not present.¶ 4.6.4. slice_height slice_height indicates the height on the Slice raster formed by num_v_slices.¶ Inferred to be 1 if not present.¶ 4.6.5. quant_table_set_index_count quant_table_set_index_count is defined as the following:¶ 1 + ( ( chroma_planes || version <= 3 ) ? 1 : 0 ) + ( extra_plane ? 1 : 0 ) ¶ 4.6.6. quant_table_set_index quant_table_set_index indicates the Quantization Table Set index to select the Quantization Table Set and the initial states for the Slice Content.¶ Inferred to be 0 if not present.¶ 4.6.7. picture_structure picture_structure specifies the temporal and spatial relationship of each Line of the Frame.¶ Inferred to be 0 if not present.¶ Table 15: The definitions for picture_structure values. value picture structure used 0 unknown 1 top field first 2 bottom field first 3 progressive Other reserved for future use 4.6.8. sar_num sar_num specifies the Sample aspect ratio numerator.¶ Inferred to be 0 if not present.¶ A value of 0 means that aspect ratio is unknown.¶ Encoders MUST write 0 if the Sample aspect ratio is unknown.¶ If sar_den is 0, decoders SHOULD ignore the encoded value and consider that sar_num is 0.¶ 4.6.9. sar_den sar_den specifies the Sample aspect ratio denominator.¶ Inferred to be 0 if not present.¶ A value of 0 means that aspect ratio is unknown.¶ Encoders MUST write 0 if the Sample aspect ratio is unknown.¶ If sar_num is 0, decoders SHOULD ignore the encoded value and consider that sar_den is 0.¶ 4.7. Slice Content A Slice Content contains all Line elements part of the Slice.¶ Depending on the configuration, Line elements are ordered by Plane then by row (YCbCr) or by row then by Plane (RGB).¶ pseudocode | type --------------------------------------------------------------|----- SliceContent( ) { | if (colorspace_type == 0) { | for (p = 0; p < primary_color_count; p++) { | for (y = 0; y < plane_pixel_height[ p ]; y++) { | Line( p, y ) | } | } | } else if (colorspace_type == 1) { | for (y = 0; y < slice_pixel_height; y++) { | for (p = 0; p < primary_color_count; p++) { | Line( p, y ) | } | } | } | } | ¶ 4.7.1. primary_color_count primary_color_count is defined as the following:¶ 1 + ( chroma_planes ? 2 : 0 ) + ( extra_plane ? 1 : 0 ) ¶ 4.7.2. plane_pixel_height plane_pixel_height[ p ] is the height in pixels of Plane p of the Slice. It is defined as the following:¶ chroma_planes == 1 && (p == 1 || p == 2) ? ceil(slice_pixel_height / (1 << log2_v_chroma_subsample)) : slice_pixel_height ¶ 4.7.3. slice_pixel_height slice_pixel_height is the height in pixels of the Slice. It is defined as the following:¶ floor( ( slice_y + slice_height ) * slice_pixel_height / num_v_slices ) - slice_pixel_y. ¶ 4.7.4. slice_pixel_y slice_pixel_y is the Slice vertical position in pixels. It is defined as the following:¶ floor( slice_y * frame_pixel_height / num_v_slices ) ¶ 4.8. Line A Line is a list of the Sample Differences (relative to the predictor) of primary color components. The pseudocode below describes the contents of the Line.¶ pseudocode | type --------------------------------------------------------------|----- Line( p, y ) { | if (colorspace_type == 0) { | for (x = 0; x < plane_pixel_width[ p ]; x++) { | sample_difference[ p ][ y ][ x ] | sd } | } else if (colorspace_type == 1) { | for (x = 0; x < slice_pixel_width; x++) { | sample_difference[ p ][ y ][ x ] | sd } | } | } | ¶ 4.8.1. plane_pixel_width plane_pixel_width[ p ] is the width in pixels of Plane p of the Slice. It is defined as the following:¶ chroma_planes == 1 && (p == 1 || p == 2) ? ceil( slice_pixel_width / (1 << log2_h_chroma_subsample) ) : slice_pixel_width. ¶ 4.8.2. slice_pixel_width slice_pixel_width is the width in pixels of the Slice. It is defined as the following:¶ floor( ( slice_x + slice_width ) * slice_pixel_width / num_h_slices ) - slice_pixel_x ¶ 4.8.3. slice_pixel_x slice_pixel_x is the Slice horizontal position in pixels. It is defined as the following:¶ floor( slice_x * frame_pixel_width / num_h_slices ) ¶ 4.8.4. sample_difference sample_difference[ p ][ y ][ x ] is the Sample Difference for Sample at Plane p, y position y, and x position x. The Sample value is computed based on median predictor and context described in Section 3.2.¶ 4.9. Slice Footer A Slice Footer provides information about Slice size and (optionally) parity. The pseudocode below describes the contents of the Slice Footer.¶ Note: Slice Footer is always byte aligned.¶ pseudocode | type --------------------------------------------------------------|----- SliceFooter( ) { | slice_size | u(24) if (ec) { | error_status | u(8) slice_crc_parity | u(32) } | } | ¶ 4.9.1. slice_size slice_size indicates the size of the Slice in bytes.¶ Note: this allows finding the start of Slices before previous Slices have been fully decoded and allows parallel decoding as well as error resilience.¶ 4.9.2. error_status error_status specifies the error status.¶ Table 16: The definitions for error_status values. value error status 0 no error 1 Slice contains a correctable error 2 Slice contains an uncorrectable error Other reserved for future use 4.9.3. slice_crc_parity slice_crc_parity is 32 bits that are chosen so that the Slice as a whole has a CRC remainder of 0.¶ This is equivalent to storing the CRC remainder in the 32-bit parity.¶ The CRC generator polynomial used is the standard IEEE CRC polynomial (0x104C11DB7) with initial value 0, without pre-inversion, and without post-inversion.¶ 5. Restrictions To ensure that fast multithreaded decoding is possible, starting with version 3 and if frame_pixel_width * frame_pixel_height is more than 101376, slice_width * slice_height MUST be less or equal to num_h_slices * num_v_slices / 4. Note: 101376 is the frame size in pixels of a 352x288 frame also known as CIF (Common Intermediate Format) frame size format.¶ For each Frame, each position in the Slice raster MUST be filled by one and only one Slice of the Frame (no missing Slice position and no Slice overlapping).¶ For each Frame with a keyframe value of 0, each Slice MUST have the same value of slice_x, slice_y, slice_width, and slice_height as a Slice in the previous Frame.¶ 6. Security Considerations Like any other codec (such as [RFC6716]), FFV1 should not be used with insecure ciphers or cipher modes that are vulnerable to known plaintext attacks. Some of the header bits as well as the padding are easily predictable.¶ Implementations of the FFV1 codec need to take appropriate security considerations into account. Those related to denial of service are outlined in Section 2.1 of [RFC4732]. It is extremely important for the decoder to be robust against malicious payloads. Malicious payloads MUST NOT cause the decoder to overrun its allocated memory or to take an excessive amount of resources to decode. An overrun in allocated memory could lead to arbitrary code execution by an attacker. The same applies to the encoder, even though problems in encoders are typically rarer. Malicious video streams MUST NOT cause the encoder to misbehave because this would allow an attacker to attack transcoding gateways. A frequent security problem in image and video codecs is failure to check for integer overflows. An example is allocating frame_pixel_width * frame_pixel_height in pixel count computations without considering that the multiplication result may have overflowed the range of the arithmetic type. The range coder could, if implemented naively, read one byte over the end. The implementation MUST ensure that no read outside allocated and initialized memory occurs.¶ None of the content carried in FFV1 is intended to be executable.¶ 7. IANA Considerations IANA has registered the following values.¶ 7.1. Media Type Definition This registration is done using the template defined in [RFC6838] and following [RFC4855].¶ Type name: video¶ Subtype name: FFV1¶ Required parameters: None.¶ Optional parameters: These parameters are used to signal the capabilities of a receiver implementation. These parameters MUST NOT be used for any other purpose.¶ version: The version of the FFV1 encoding as defined by Section 4.2.1.¶ micro_version: The micro_version of the FFV1 encoding as defined by Section 4.2.2.¶ coder_type: The coder_type of the FFV1 encoding as defined by Section 4.2.3.¶ colorspace_type: The colorspace_type of the FFV1 encoding as defined by Section 4.2.5.¶ bits_per_raw_sample: The bits_per_raw_sample of the FFV1 encoding as defined by Section 4.2.7.¶ max_slices: The value of max_slices is an integer indicating the maximum count of Slices within a Frame of the FFV1 encoding.¶ Encoding considerations: This media type is defined for encapsulation in several audiovisual container formats and contains binary data; see Section 4.3.3. This media type is framed binary data; see Section 4.8 of [RFC6838].¶ Security considerations: See Section 6 of this document.¶ Interoperability considerations: None.¶ Published specification: RFC 9043.¶ Applications that use this media type: Any application that requires the transport of lossless video can use this media type. Some examples are, but not limited to, screen recording, scientific imaging, and digital video preservation.¶ Fragment identifier considerations: N/A.¶ Additional information: None.¶ Person & email address to contact for further information: Michael Niedermayer (mailto:michael@niedermayer.cc)¶ Intended usage: COMMON¶ Restrictions on usage: None.¶ Author: Dave Rice (mailto:dave@dericed.com)¶ Change controller: IETF CELLAR Working Group delegated from the IESG.¶ 8. References 8.1. Normative References [ISO.9899.2018] International Organization for Standardization, \"Information technology - Programming languages - C\", ISO/IEC 9899:2018, June 2018. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4732] Handley, M., Ed., Rescorla, E., Ed., and IAB, \"Internet Denial-of-Service Considerations\", RFC 4732, DOI 10.17487/RFC4732, December 2006, <https://www.rfc-editor.org/info/rfc4732>. [RFC4855] Casner, S., \"Media Type Registration of RTP Payload Formats\", RFC 4855, DOI 10.17487/RFC4855, February 2007, <https://www.rfc-editor.org/info/rfc4855>. [RFC6838] Freed, N., Klensin, J., and T. Hansen, \"Media Type Specifications and Registration Procedures\", BCP 13, RFC 6838, DOI 10.17487/RFC6838, January 2013, <https://www.rfc-editor.org/info/rfc6838>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. 8.2. Informative References [AddressSanitizer] Clang Project, \"AddressSanitizer\", Clang 12 documentation, <https://clang.llvm.org/docs/AddressSanitizer.html>. [AVI] Microsoft, \"AVI RIFF File Reference\", <https://docs.microsoft.com/en-us/windows/win32/directshow/avi-riff-file-reference>. [FFV1GO] Buitenhuis, D., \"FFV1 Decoder in Go\", 2019, <https://github.com/dwbuiten/go-ffv1>. [FFV1_V0] Niedermayer, M., \"Commit to mark FFV1 version 0 as non-experimental\", April 2006, <https://git.videolan.org/?p=ffmpeg.git;a=commit;h=b548f2b91b701e1235608ac882ea6df915167c7e>. [FFV1_V1] Niedermayer, M., \"Commit to release FFV1 version 1\", April 2009, <https://git.videolan.org/?p=ffmpeg.git;a=commit;h=68f8d33becbd73b4d0aa277f472a6e8e72ea6849>. [FFV1_V3] Niedermayer, M., \"Commit to mark FFV1 version 3 as non-experimental\", August 2013, <https://git.videolan.org/?p=ffmpeg.git;a=commit;h=abe76b851c05eea8743f6c899cbe5f7409b0f301>. [HuffYUV] Rudiak-Gould, B., \"HuffYUV revisited\", December 2003, <https://web.archive.org/web/20040402121343/http://cultact-server.novi.dk/kpo/huffyuv/huffyuv.html>. [ISO.14495-1.1999] International Organization for Standardization, \"Information technology -- Lossless and near-lossless compression of continuous-tone still images: Baseline\", ISO/IEC 14495-1:1999, December 1999. [ISO.14496-10.2020] International Organization for Standardization, \"Information technology -- Coding of audio-visual objects -- Part 10: Advanced Video Coding\", ISO/IEC 14496-10:2020, December 2020. [ISO.14496-12.2020] International Organization for Standardization, \"Information technology -- Coding of audio-visual objects -- Part 12: ISO base media file format\", ISO/IEC 14496-12:2020, December 2020. [ISO.15444-1.2019] International Organization for Standardization, \"Information technology -- JPEG 2000 image coding system: Core coding system\", ISO/IEC 15444-1:2019, October 2019. [Matroska] Lhomme, S., Bunkus, M., and D. Rice, \"Matroska Media Container Format Specifications\", Work in Progress, Internet-Draft, draft-ietf-cellar-matroska-07, 12 April 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-cellar-matroska-07>. [MediaConch] MediaArea.net, \"MediaConch\", 2018, <https://mediaarea.net/MediaConch>. [NUT] Niedermayer, M., \"NUT Open Container Format\", December 2013, <https://ffmpeg.org/~michael/nut.txt>. [Range-Encoding] Martin, G. N. N., \"Range encoding: an algorithm for removing redundancy from a digitised message\", Proceedings of the Conference on Video and Data Recording, Institution of Electronic and Radio Engineers, Hampshire, England, July 1979. [REFIMPL] Niedermayer, M., \"The reference FFV1 implementation / the FFV1 codec in FFmpeg\", <https://ffmpeg.org/doxygen/trunk/ffv1_8h.html>. [RFC6716] Valin, JM., Vos, K., and T. Terriberry, \"Definition of the Opus Audio Codec\", RFC 6716, DOI 10.17487/RFC6716, September 2012, <https://www.rfc-editor.org/info/rfc6716>. [Valgrind] Valgrind Developers, \"Valgrind website\", <https://valgrind.org/>. [YCbCr] Wikipedia, \"YCbCr\", 25 May 2021, <https://en.wikipedia.org/w/index.php?title=YCbCr&oldid=1025097882>. Appendix A. Multithreaded Decoder Implementation Suggestions This appendix is informative.¶ The FFV1 bitstream is parsable in two ways: in sequential order as described in this document or with the pre-analysis of the footer of each Slice. Each Slice footer contains a slice_size field so the boundary of each Slice is computable without having to parse the Slice content. That allows multithreading as well as independence of Slice content (a bitstream error in a Slice header or Slice content has no impact on the decoding of the other Slices).¶ After having checked the keyframe field, a decoder should parse slice_size fields, from slice_size of the last Slice at the end of the Frame up to slice_size of the first Slice at the beginning of the Frame before parsing Slices, in order to have Slice boundaries. A decoder may fall back on sequential order e.g., in case of a corrupted Frame (e.g., frame size unknown or slice_size of Slices not coherent) or if there is no possibility of seeking into the stream.¶ Appendix B. Future Handling of Some Streams Created by Nonconforming Encoders This appendix is informative.¶ Some bitstreams were found with 40 extra bits corresponding to error_status and slice_crc_parity in the reserved bits of Slice. Any revision of this specification should avoid adding 40 bits of content after SliceContent if version == 0 or version == 1, otherwise a decoder conforming to the revised specification could not distinguish between a revised bitstream and such buggy bitstream in the wild.¶ Appendix C. FFV1 Implementations This appendix provides references to a few notable implementations of FFV1.¶ C.1. FFmpeg FFV1 Codec This reference implementation [REFIMPL] contains no known buffer overflow or cases where a specially crafted packet or video segment could cause a significant increase in CPU load.¶ The reference implementation [REFIMPL] was validated in the following conditions:¶ Sending the decoder valid packets generated by the reference encoder and verifying that the decoder's output matches the encoder's input.¶ Sending the decoder packets generated by the reference encoder and then subjected to random corruption.¶ Sending the decoder random packets that are not FFV1.¶ In all of the conditions above, the decoder and encoder was run inside the Valgrind memory debugger [Valgrind] as well as the Clang AddressSanitizer [AddressSanitizer], which tracks reads and writes to invalid memory regions as well as the use of uninitialized memory. There were no errors reported on any of the tested conditions.¶ C.2. FFV1 Decoder in Go An FFV1 decoder [FFV1GO] was written in Go by Derek Buitenhuis during the work to develop this document.¶ C.3. MediaConch The developers of the MediaConch project [MediaConch] created an independent FFV1 decoder as part of that project to validate FFV1 bitstreams. This work led to the discovery of three conflicts between existing FFV1 implementations and draft versions of this document. These issues are addressed by Section 3.3.1, Section 3.7.2.1, and Appendix B.¶ Authors' Addresses Michael Niedermayer Email: michael@niedermayer.cc Dave Rice Email: dave@dericed.com Jérôme Martinez Email: jerome@mediaarea.net"
    },
    {
        "Number": "9040",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "TCP Control Block Interdependence",
        "Authors": [
            "J. Touch",
            "M. Welzl",
            "S. Islam"
        ],
        "Date": "2021-07",
        "More Info": "Obsoletes RFC 2140",
        "Status": "Informational",
        "Abstract": "This memo provides guidance to TCP implementers that is intended to help improve connection convergence to steady-state operation without affecting interoperability. It updates and replaces RFC 2140's description of sharing TCP state, as typically represented in TCP Control Blocks, among similar concurrent or consecutive connections.",
        "Keywords": [],
        "Content": "RFC 9040: TCP Control Block Interdependence RFC 9040 TCP Control Block Interdependence July 2021 Touch, et al. Informational [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9040 Obsoletes: 2140 Category: Informational Published: July 2021 ISSN: 2070-1721 Authors: J. Touch Independent M. Welzl University of Oslo S. Islam University of Oslo RFC 9040 TCP Control Block Interdependence Abstract This memo provides guidance to TCP implementers that is intended to help improve connection convergence to steady-state operation without affecting interoperability. It updates and replaces RFC 2140's description of sharing TCP state, as typically represented in TCP Control Blocks, among similar concurrent or consecutive connections.¶ Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are candidates for any level of Internet Standard; see Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9040.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Conventions Used in This Document 3.  Terminology 4.  The TCP Control Block (TCB) 5.  TCB Interdependence 6.  Temporal Sharing 6.1.  Initialization of a New TCB 6.2.  Updates to the TCB Cache 6.3.  Discussion 7.  Ensemble Sharing 7.1.  Initialization of a New TCB 7.2.  Updates to the TCB Cache 7.3.  Discussion 8.  Issues with TCB Information Sharing 8.1.  Traversing the Same Network Path 8.2.  State Dependence 8.3.  Problems with Sharing Based on IP Address 9.  Implications 9.1.  Layering 9.2.  Other Possibilities 10. Implementation Observations 11. Changes Compared to RFC 2140 12. Security Considerations 13. IANA Considerations 14. References 14.1.  Normative References 14.2.  Informative References Appendix A.  TCB Sharing History Appendix B.  TCP Option Sharing and Caching Appendix C.  Automating the Initial Window in TCP over Long Timescales C.1.  Introduction C.2.  Design Considerations C.3.  Proposed IW Algorithm C.4.  Discussion C.5.  Observations Acknowledgments Authors' Addresses 1. Introduction TCP is a connection-oriented reliable transport protocol layered over IP [RFC0793]. Each TCP connection maintains state, usually in a data structure called the \"TCP Control Block (TCB)\". The TCB contains information about the connection state, its associated local process, and feedback parameters about the connection's transmission properties. As originally specified and usually implemented, most TCB information is maintained on a per-connection basis. Some implementations share certain TCB information across connections to the same host [RFC2140]. Such sharing is intended to lead to better overall transient performance, especially for numerous short-lived and simultaneous connections, as can be used in the World Wide Web and other applications [Be94] [Br02]. This sharing of state is intended to help TCP connections converge to long-term behavior (assuming stable application load, i.e., so-called \"steady-state\") more quickly without affecting TCP interoperability.¶ This document updates RFC 2140's discussion of TCB state sharing and provides a complete replacement for that document. This state sharing affects only TCB initialization [RFC2140] and thus has no effect on the long-term behavior of TCP after a connection has been established or on interoperability. Path information shared across SYN destination port numbers assumes that TCP segments having the same host-pair experience the same path properties, i.e., that traffic is not routed differently based on port numbers or other connection parameters (also addressed further in Section 8.1). The observations about TCB sharing in this document apply similarly to any protocol with congestion state, including the Stream Control Transmission Protocol (SCTP) [RFC4960] and the Datagram Congestion Control Protocol (DCCP) [RFC4340], as well as to individual subflows in Multipath TCP [RFC8684].¶ 2. Conventions Used in This Document The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ The core of this document describes behavior that is already permitted by TCP standards. As a result, this document provides informative guidance but does not use normative language except when quoting other documents. Normative language is used in Appendix C as examples of requirements for future consideration.¶ 3. Terminology The following terminology is used frequently in this document. Items preceded with a \"+\" may be part of the state maintained as TCP connection state in the TCB of associated connections and are the focus of sharing as described in this document. Note that terms are used as originally introduced where possible; in some cases, direction is indicated with a suffix (_S for send, _R for receive) and in other cases spelled out (sendcwnd).¶ +cwnd: TCP congestion window size [RFC5681]¶ host: a source or sink of TCP segments associated with a single IP address¶ host-pair: a pair of hosts and their corresponding IP addresses¶ ISN: Initial Sequence Number¶ +MMS_R: maximum message size that can be received, the largest received transport payload of an IP datagram [RFC1122]¶ +MMS_S: maximum message size that can be sent, the largest transmitted transport payload of an IP datagram [RFC1122]¶ path: an Internet path between the IP addresses of two hosts¶ PCB: protocol control block, the data associated with a protocol as maintained by an endpoint; a TCP PCB is called a \"TCB\"¶ PLPMTUD: packetization-layer path MTU discovery, a mechanism that uses transport packets to discover the Path Maximum Transmission Unit (PMTU) [RFC4821]¶ +PMTU: largest IP datagram that can traverse a path [RFC1191] [RFC8201]¶ PMTUD: path-layer MTU discovery, a mechanism that relies on ICMP error messages to discover the PMTU [RFC1191] [RFC8201]¶ +RTT: round-trip time of a TCP packet exchange [RFC0793]¶ +RTTVAR: variation of round-trip times of a TCP packet exchange [RFC6298]¶ +rwnd: TCP receive window size [RFC5681]¶ +sendcwnd: TCP send-side congestion window (cwnd) size [RFC5681]¶ +sendMSS: TCP maximum segment size, a value transmitted in a TCP option that represents the largest TCP user data payload that can be received [RFC6691]¶ +ssthresh: TCP slow-start threshold [RFC5681]¶ TCB: TCP Control Block, the data associated with a TCP connection as maintained by an endpoint¶ TCP-AO: TCP Authentication Option [RFC5925]¶ TFO: TCP Fast Open option [RFC7413]¶ +TFO_cookie: TCP Fast Open cookie, state that is used as part of the TFO mechanism, when TFO is supported [RFC7413]¶ +TFO_failure: an indication of when TFO option negotiation failed, when TFO is supported¶ +TFOinfo: information cached when a TFO connection is established, which includes the TFO_cookie [RFC7413]¶ 4. The TCP Control Block (TCB) A TCB describes the data associated with each connection, i.e., with each association of a pair of applications across the network. The TCB contains at least the following information [RFC0793]:¶ Local process state¶ pointers to send and receive buffers¶ pointers to retransmission queue and current segment¶ pointers to Internet Protocol (IP) PCB¶ Per-connection shared state¶ macro-state¶ connection state¶ timers¶ flags¶ local and remote host numbers and ports¶ TCP option state¶ micro-state¶ send and receive window state (size*, current number)¶ congestion window size (sendcwnd)*¶ congestion window size threshold (ssthresh)*¶ max window size seen*¶ sendMSS#¶ MMS_S#¶ MMS_R#¶ PMTU#¶ round-trip time and its variation#¶ The per-connection information is shown as split into macro-state and micro-state, terminology borrowed from [Co91]. Macro-state describes the protocol for establishing the initial shared state about the connection; we include the endpoint numbers and components (timers, flags) required upon commencement that are later used to help maintain that state. Micro-state describes the protocol after a connection has been established, to maintain the reliability and congestion control of the data transferred in the connection.¶ We distinguish two other classes of shared micro-state that are associated more with host-pairs than with application pairs. One class is clearly host-pair dependent (shown above as \"#\", e.g., sendMSS, MMS_R, MMS_S, PMTU, RTT), because these parameters are defined by the endpoint or endpoint pair (of the given example: sendMSS, MMS_R, MMS_S, RTT) or are already cached and shared on that basis (of the given example: PMTU [RFC1191] [RFC4821]). The other is host-pair dependent in its aggregate (shown above as \"*\", e.g., congestion window information, current window sizes, etc.) because they depend on the total capacity between the two endpoints.¶ Not all of the TCB state is necessarily shareable. In particular, some TCP options are negotiated only upon request by the application layer, so their use may not be correlated across connections. Other options negotiate connection-specific parameters, which are similarly not shareable. These are discussed further in Appendix B.¶ Finally, we exclude rwnd from further discussion because its value should depend on the send window size, so it is already addressed by send window sharing and is not independently affected by sharing.¶ 5. TCB Interdependence There are two cases of TCB interdependence. Temporal sharing occurs when the TCB of an earlier (now CLOSED) connection to a host is used to initialize some parameters of a new connection to that same host, i.e., in sequence. Ensemble sharing occurs when a currently active connection to a host is used to initialize another (concurrent) connection to that host.¶ 6. Temporal Sharing The TCB data cache is accessed in two ways: it is read to initialize new TCBs and written when more current per-host state is available.¶ 6.1. Initialization of a New TCB TCBs for new connections can be initialized using cached context from past connections as follows:¶ Table 1: Temporal Sharing - TCB Initialization Cached TCB New TCB old_MMS_S old_MMS_S or not cached (2) old_MMS_R old_MMS_R or not cached (2) old_sendMSS old_sendMSS old_PMTU old_PMTU (1) old_RTT old_RTT old_RTTVAR old_RTTVAR old_option (option specific) old_ssthresh old_ssthresh old_sendcwnd old_sendcwnd (1) Note that PMTU is cached at the IP layer [RFC1191] [RFC4821].¶ (2) Note that some values are not cached when they are computed locally (MMS_R) or indicated in the connection itself (MMS_S in the SYN).¶ Table 2 gives an overview of option-specific information that can be shared. Additional information on some specific TCP options and sharing is provided in Appendix B.¶ Table 2: Temporal Sharing - Option Info Initialization Cached New old_TFO_cookie old_TFO_cookie old_TFO_failure old_TFO_failure 6.2. Updates to the TCB Cache During a connection, the TCB cache can be updated based on events of current connections and their TCBs as they progress over time, as shown in Table 3.¶ Table 3: Temporal Sharing - Cache Updates Cached TCB Current TCB When? New Cached TCB old_MMS_S curr_MMS_S OPEN curr_MMS_S old_MMS_R curr_MMS_R OPEN curr_MMS_R old_sendMSS curr_sendMSS MSSopt curr_sendMSS old_PMTU curr_PMTU PMTUD (1) / PLPMTUD (1) curr_PMTU old_RTT curr_RTT CLOSE merge(curr,old) old_RTTVAR curr_RTTVAR CLOSE merge(curr,old) old_option curr_option ESTAB (depends on option) old_ssthresh curr_ssthresh CLOSE merge(curr,old) old_sendcwnd curr_sendcwnd CLOSE merge(curr,old) (1) Note that PMTU is cached at the IP layer [RFC1191] [RFC4821].¶ Merge() is the function that combines the current and previous (old) values and may vary for each parameter of the TCB cache. The particular function is not specified in this document; examples include windowed averages (mean of the past N values, for some N) and exponential decay (new = (1-alpha)*old + alpha *new, where alpha is in the range [0..1]).¶ Table 4 gives an overview of option-specific information that can be similarly shared. The TFO cookie is maintained until the client explicitly requests it be updated as a separate event.¶ Table 4: Temporal Sharing - Option Info Updates Cached Current When? New Cached old_TFO_cookie old_TFO_cookie ESTAB old_TFO_cookie old_TFO_failure old_TFO_failure ESTAB old_TFO_failure 6.3. Discussion As noted, there is no particular benefit to caching MMS_S and MMS_R as these are reported by the local IP stack. Caching sendMSS and PMTU is trivial; reported values are cached (PMTU at the IP layer), and the most recent values are used. The cache is updated when the MSS option is received in a SYN or after PMTUD (i.e., when an ICMPv4 Fragmentation Needed [RFC1191] or ICMPv6 Packet Too Big message is received [RFC8201] or the equivalent is inferred, e.g., as from PLPMTUD [RFC4821]), respectively, so the cache always has the most recent values from any connection. For sendMSS, the cache is consulted only at connection establishment and not otherwise updated, which means that MSS options do not affect current connections. The default sendMSS is never saved; only reported MSS values update the cache, so an explicit override is required to reduce the sendMSS. Cached sendMSS affects only data sent in the SYN segment, i.e., during client connection initiation or during simultaneous open; the MSS of all other segments are constrained by the value updated as included in the SYN.¶ RTT values are updated by formulae that merge the old and new values, as noted in Section 6.2. Dynamic RTT estimation requires a sequence of RTT measurements. As a result, the cached RTT (and its variation) is an average of its previous value with the contents of the currently active TCB for that host, when a TCB is closed. RTT values are updated only when a connection is closed. The method for merging old and current values needs to attempt to reduce the transient effects of the new connections.¶ The updates for RTT, RTTVAR, and ssthresh rely on existing information, i.e., old values. Should no such values exist, the current values are cached instead.¶ TCP options are copied or merged depending on the details of each option. For example, TFO state is updated when a connection is established and read before establishing a new connection.¶ Sections 8 and 9 discuss compatibility issues and implications of sharing the specific information listed above. Section 10 gives an overview of known implementations.¶ Most cached TCB values are updated when a connection closes. The exceptions are MMS_R and MMS_S, which are reported by IP [RFC1122]; PMTU, which is updated after Path MTU Discovery and also reported by IP [RFC1191] [RFC4821] [RFC8201]; and sendMSS, which is updated if the MSS option is received in the TCP SYN header.¶ Sharing sendMSS information affects only data in the SYN of the next connection, because sendMSS information is typically included in most TCP SYN segments. Caching PMTU can accelerate the efficiency of PMTUD but can also result in black-holing until corrected if in error. Caching MMS_R and MMS_S may be of little direct value as they are reported by the local IP stack anyway.¶ The way in which state related to other TCP options can be shared depends on the details of that option. For example, TFO state includes the TCP Fast Open cookie [RFC7413] or, in case TFO fails, a negative TCP Fast Open response. RFC 7413 states,¶ The client MUST cache negative responses from the server in order to avoid potential connection failures. Negative responses include the server not acknowledging the data in the SYN, ICMP error messages, and (most importantly) no response (SYN-ACK) from the server at all, i.e., connection timeout.¶ TFOinfo is cached when a connection is established.¶ State related to other TCP options might not be as readily cached. For example, TCP-AO [RFC5925] success or failure between a host-pair for a single SYN destination port might be usefully cached. TCP-AO success or failure to other SYN destination ports on that host-pair is never useful to cache because TCP-AO security parameters can vary per service.¶ 7. Ensemble Sharing Sharing cached TCB data across concurrent connections requires attention to the aggregate nature of some of the shared state. For example, although MSS and RTT values can be shared by copying, it may not be appropriate to simply copy congestion window or ssthresh information; instead, the new values can be a function (f) of the cumulative values and the number of connections (N).¶ 7.1. Initialization of a New TCB TCBs for new connections can be initialized using cached context from concurrent connections as follows:¶ Table 5: Ensemble Sharing - TCB Initialization Cached TCB New TCB old_MMS_S old_MMS_S old_MMS_R old_MMS_R old_sendMSS old_sendMSS old_PMTU old_PMTU (1) old_RTT old_RTT old_RTTVAR old_RTTVAR sum(old_ssthresh) f(sum(old_ssthresh), N) sum(old_sendcwnd) f(sum(old_sendcwnd), N) old_option (option specific) (1) Note that PMTU is cached at the IP layer [RFC1191] [RFC4821].¶ In Table 5, the cached sum() is a total across all active connections because these parameters act in aggregate; similarly, f() is a function that updates that sum based on the new connection's values, represented as \"N\".¶ Table 6 gives an overview of option-specific information that can be similarly shared. Again, the TFO_cookie is updated upon explicit client request, which is a separate event.¶ Table 6: Ensemble Sharing - Option Info Initialization Cached New old_TFO_cookie old_TFO_cookie old_TFO_failure old_TFO_failure 7.2. Updates to the TCB Cache During a connection, the TCB cache can be updated based on changes to concurrent connections and their TCBs, as shown below:¶ Table 7: Ensemble Sharing - Cache Updates Cached TCB Current TCB When? New Cached TCB old_MMS_S curr_MMS_S OPEN curr_MMS_S old_MMS_R curr_MMS_R OPEN curr_MMS_R old_sendMSS curr_sendMSS MSSopt curr_sendMSS old_PMTU curr_PMTU PMTUD+ / PLPMTUD+ curr_PMTU old_RTT curr_RTT update rtt_update(old, curr) old_RTTVAR curr_RTTVAR update rtt_update(old, curr) old_ssthresh curr_ssthresh update adjust sum as appropriate old_sendcwnd curr_sendcwnd update adjust sum as appropriate old_option curr_option (depends) (option specific) + Note that the PMTU is cached at the IP layer [RFC1191] [RFC4821].¶ In Table 7, rtt_update() is the function used to combine old and current values, e.g., as a windowed average or exponentially decayed average.¶ Table 8 gives an overview of option-specific information that can be similarly shared.¶ Table 8: Ensemble Sharing - Option Info Updates Cached Current When? New Cached old_TFO_cookie old_TFO_cookie ESTAB old_TFO_cookie old_TFO_failure old_TFO_failure ESTAB old_TFO_failure 7.3. Discussion For ensemble sharing, TCB information should be cached as early as possible, sometimes before a connection is closed. Otherwise, opening multiple concurrent connections may not result in TCB data sharing if no connection closes before others open. The amount of work involved in updating the aggregate average should be minimized, but the resulting value should be equivalent to having all values measured within a single connection. The function \"rtt_update\" in Table 7 indicates this operation, which occurs whenever the RTT would have been updated in the individual TCP connection. As a result, the cache contains the shared RTT variables, which no longer need to reside in the TCB.¶ Congestion window size and ssthresh aggregation are more complicated in the concurrent case. When there is an ensemble of connections, we need to decide how that ensemble would have shared these variables, in order to derive initial values for new TCBs.¶ Sections 8 and 9 discuss compatibility issues and implications of sharing the specific information listed above.¶ There are several ways to initialize the congestion window in a new TCB among an ensemble of current connections to a host. Current TCP implementations initialize it to 4 segments as standard [RFC3390] and 10 segments experimentally [RFC6928]. These approaches assume that new connections should behave as conservatively as possible. The algorithm described in [Ba12] adjusts the initial cwnd depending on the cwnd values of ongoing connections. It is also possible to use sharing mechanisms over long timescales to adapt TCP's initial window automatically, as described further in Appendix C.¶ 8. Issues with TCB Information Sharing Here, we discuss various types of problems that may arise with TCB information sharing.¶ For the congestion and current window information, the initial values computed by TCB interdependence may not be consistent with the long-term aggregate behavior of a set of concurrent connections between the same endpoints. Under conventional TCP congestion control, if the congestion window of a single existing connection has converged to 40 segments, two newly joining concurrent connections will assume initial windows of 10 segments [RFC6928] and the existing connection's window will not decrease to accommodate this additional load. As a consequence, the three connections can mutually interfere. One example of this is seen on low-bandwidth, high-delay links, where concurrent connections supporting Web traffic can collide because their initial windows were too large, even when set at 1 segment.¶ The authors of [Hu12] recommend caching ssthresh for temporal sharing only when flows are long. Some studies suggest that sharing ssthresh between short flows can deteriorate the performance of individual connections [Hu12] [Du16], although this may benefit aggregate network performance.¶ 8.1. Traversing the Same Network Path TCP is sometimes used in situations where packets of the same host-pair do not always take the same path, such as when connection-specific parameters are used for routing (e.g., for load balancing). Multipath routing that relies on examining transport headers, such as ECMP and Link Aggregation Group (LAG) [RFC7424], may not result in repeatable path selection when TCP segments are encapsulated, encrypted, or altered -- for example, in some Virtual Private Network (VPN) tunnels that rely on proprietary encapsulation. Similarly, such approaches cannot operate deterministically when the TCP header is encrypted, e.g., when using IPsec Encapsulating Security Payload (ESP) (although TCB interdependence among the entire set sharing the same endpoint IP addresses should work without problems when the TCP header is encrypted). Measures to increase the probability that connections use the same path could be applied; for example, the connections could be given the same IPv6 flow label [RFC6437]. TCB interdependence can also be extended to sets of host IP address pairs that share the same network path conditions, such as when a group of addresses is on the same LAN (see Section 9).¶ Traversing the same path is not important for host-specific information (e.g., rwnd), TCP option state (e.g., TFOinfo), or for information that is already cached per-host (e.g., path MTU). When TCB information is shared across different SYN destination ports, path-related information can be incorrect; however, the impact of this error is potentially diminished if (as discussed here) TCB sharing affects only the transient event of a connection start or if TCB information is shared only within connections to the same SYN destination port.¶ In the case of temporal sharing, TCB information could also become invalid over time, i.e., indicating that although the path remains the same, path properties have changed. Because this is similar to the case when a connection becomes idle, mechanisms that address idle TCP connections (e.g., [RFC7661]) could also be applied to TCB cache management, especially when TCP Fast Open is used [RFC7413].¶ 8.2. State Dependence There may be additional considerations to the way in which TCB interdependence rebalances congestion feedback among the current connections. For example, it may be appropriate to consider the impact of a connection being in Fast Recovery [RFC5681] or some other similar unusual feedback state that could inhibit or affect the calculations described herein.¶ 8.3. Problems with Sharing Based on IP Address It can be wrong to share TCB information between TCP connections on the same host as identified by the IP address if an IP address is assigned to a new host (e.g., IP address spinning, as is used by ISPs to inhibit running servers). It can be wrong if Network Address Translation (NAT) [RFC2663], Network Address and Port Translation (NAPT) [RFC2663], or any other IP sharing mechanism is used. Such mechanisms are less likely to be used with IPv6. Other methods to identify a host could also be considered to make correct TCB sharing more likely. Moreover, some TCB information is about dominant path properties rather than the specific host. IP addresses may differ, yet the relevant part of the path may be the same.¶ 9. Implications There are several implications to incorporating TCB interdependence in TCP implementations. First, it may reduce the need for application-layer multiplexing for performance enhancement [RFC7231]. Protocols like HTTP/2 [RFC7540] avoid connection re-establishment costs by serializing or multiplexing a set of per-host connections across a single TCP connection. This avoids TCP's per-connection OPEN handshake and also avoids recomputing the MSS, RTT, and congestion window values. By avoiding the so-called \"slow-start restart\", performance can be optimized [Hu01]. TCB interdependence can provide the \"slow-start restart avoidance\" of multiplexing, without requiring a multiplexing mechanism at the application layer.¶ Like the initial version of this document [RFC2140], this update's approach to TCB interdependence focuses on sharing a set of TCBs by updating the TCB state to reduce the impact of transients when connections begin, end, or otherwise significantly change state. Other mechanisms have since been proposed to continuously share information between all ongoing communication (including connectionless protocols) and update the congestion state during any congestion-related event (e.g., timeout, loss confirmation, etc.) [RFC3124]. By dealing exclusively with transients, the approach in this document is more likely to exhibit the \"steady-state\" behavior as unmodified, independent TCP connections.¶ 9.1. Layering TCB interdependence pushes some of the TCP implementation from its typical placement solely within the transport layer (in the ISO model) to the network layer. This acknowledges that some components of state are, in fact, per-host-pair or can be per-path as indicated solely by that host-pair. Transport protocols typically manage per-application-pair associations (per stream), and network protocols manage per-host-pair and path associations (routing). Round-trip time, MSS, and congestion information could be more appropriately handled at the network layer, aggregated among concurrent connections, and shared across connection instances [RFC3124].¶ An earlier version of RTT sharing suggested implementing RTT state at the IP layer rather than at the TCP layer. Our observations describe sharing state among TCP connections, which avoids some of the difficulties in an IP-layer solution. One such problem of an IP-layer solution is determining the correspondence between packet exchanges using IP header information alone, where such correspondence is needed to compute RTT. Because TCB sharing computes RTTs inside the TCP layer using TCP header information, it can be implemented more directly and simply than at the IP layer. This is a case where information should be computed at the transport layer but could be shared at the network layer.¶ 9.2. Other Possibilities Per-host-pair associations are not the limit of these techniques. It is possible that TCBs could be similarly shared between hosts on a subnet or within a cluster, because the predominant path can be subnet-subnet rather than host-host. Additionally, TCB interdependence can be applied to any protocol with congestion state, including SCTP [RFC4960] and DCCP [RFC4340], as well as to individual subflows in Multipath TCP [RFC8684].¶ There may be other information that can be shared between concurrent connections. For example, knowing that another connection has just tried to expand its window size and failed, a connection may not attempt to do the same for some period. The idea is that existing TCP implementations infer the behavior of all competing connections, including those within the same host or subnet. One possible optimization is to make that implicit feedback explicit, via extended information associated with the endpoint IP address and its TCP implementation, rather than per-connection state in the TCB.¶ This document focuses on sharing TCB information at connection initialization. Subsequent to RFC 2140, there have been numerous approaches that attempt to coordinate ongoing state across concurrent connections, both within TCP and other congestion-reactive protocols, which are summarized in [Is18]. These approaches are more complex to implement, and their comparison to steady-state TCP equivalence can be more difficult to establish, sometimes intentionally (i.e., they sometimes intend to provide a different kind of \"fairness\" than emerges from TCP operation).¶ 10. Implementation Observations The observation that some TCB state is host-pair specific rather than application-pair dependent is not new and is a common engineering decision in layered protocol implementations. Although now deprecated, T/TCP [RFC1644] was the first to propose using caches in order to maintain TCB states (see Appendix A).¶ Table 9 describes the current implementation status for TCB temporal sharing in Windows as of December 2020, Apple variants (macOS, iOS, iPadOS, tvOS, and watchOS) as of January 2021, Linux kernel version 5.10.3, and FreeBSD 12. Ensemble sharing is not yet implemented.¶ Table 9: KNOWN IMPLEMENTATION STATUS TCB data Status old_MMS_S Not shared old_MMS_R Not shared old_sendMSS Cached and shared in Apple, Linux (MSS) old_PMTU Cached and shared in Apple, FreeBSD, Windows (PMTU) old_RTT Cached and shared in Apple, FreeBSD, Linux, Windows old_RTTVAR Cached and shared in Apple, FreeBSD, Windows old_TFOinfo Cached and shared in Apple, Linux, Windows old_sendcwnd Not shared old_ssthresh Cached and shared in Apple, FreeBSD*, Linux* TFO failure Cached and shared in Apple * Note: In FreeBSD, new ssthresh is the mean of curr_ssthresh and its previous value if a previous value exists; in Linux, the calculation depends on state and is max(curr_cwnd/2, old_ssthresh) in most cases.¶ In Table 9, \"Apple\" refers to all Apple OSes, i.e., macOS (desktop/laptop), iOS (phone), iPadOS (tablet), tvOS (video player), and watchOS (smart watch), which all share the same Internet protocol stack.¶ 11. Changes Compared to RFC 2140 This document updates the description of TCB sharing in RFC 2140 and its associated impact on existing and new connection state, providing a complete replacement for that document [RFC2140]. It clarifies the previous description and terminology and extends the mechanism to its impact on new protocols and mechanisms, including multipath TCP, Fast Open, PLPMTUD, NAT, and the TCP Authentication Option.¶ The detailed impact on TCB state addresses TCB parameters with greater specificity. It separates the way MSS is used in both send and receive directions, it separates the way both of these MSS values differ from sendMSS, it adds both path MTU and ssthresh, and it addresses the impact on state associated with TCP options.¶ New sections have been added to address compatibility issues and implementation observations. The relation of this work to T/TCP has been moved to Appendix A (which describes the history to TCB sharing) partly to reflect the deprecation of that protocol.¶ Appendix C has been added to discuss the potential to use temporal sharing over long timescales to adapt TCP's initial window automatically, avoiding the need to periodically revise a single global constant value.¶ Finally, this document updates and significantly expands the referenced literature.¶ 12. Security Considerations These presented implementation methods do not have additional ramifications for direct (connection-aborting or information-injecting) attacks on individual connections. Individual connections, whether using sharing or not, also may be susceptible to denial-of-service attacks that reduce performance or completely deny connections and transfers if not otherwise secured.¶ TCB sharing may create additional denial-of-service attacks that affect the performance of other connections by polluting the cached information. This can occur across any set of connections in which the TCB is shared, between connections in a single host, or between hosts if TCB sharing is implemented within a subnet (see \"Implications\" (Section 9)). Some shared TCB parameters are used only to create new TCBs; others are shared among the TCBs of ongoing connections. New connections can join the ongoing set, e.g., to optimize send window size among a set of connections to the same host. PMTU is defined as shared at the IP layer and is already susceptible in this way.¶ Options in client SYNs can be easier to forge than complete, two-way connections. As a result, their values may not be safely incorporated in shared values until after the three-way handshake completes.¶ Attacks on parameters used only for initialization affect only the transient performance of a TCP connection. For short connections, the performance ramification can approach that of a denial-of-service attack. For example, if an application changes its TCB to have a false and small window size, subsequent connections will experience performance degradation until their window grows appropriately.¶ TCB sharing reuses and mixes information from past and current connections. Although reusing information could create a potential for fingerprinting to identify hosts, the mixing reduces that potential. There has been no evidence of fingerprinting based on this technique, and it is currently considered safe in that regard. Further, information about the performance of a TCP connection has not been considered as private.¶ 13. IANA Considerations This document has no IANA actions.¶ 14. References 14.1. Normative References [RFC0793] Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793, DOI 10.17487/RFC0793, September 1981, <https://www.rfc-editor.org/info/rfc793>. [RFC1122] Braden, R., Ed., \"Requirements for Internet Hosts - Communication Layers\", STD 3, RFC 1122, DOI 10.17487/RFC1122, October 1989, <https://www.rfc-editor.org/info/rfc1122>. [RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191, DOI 10.17487/RFC1191, November 1990, <https://www.rfc-editor.org/info/rfc1191>. [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC4821] Mathis, M. and J. Heffner, \"Packetization Layer Path MTU Discovery\", RFC 4821, DOI 10.17487/RFC4821, March 2007, <https://www.rfc-editor.org/info/rfc4821>. [RFC5681] Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009, <https://www.rfc-editor.org/info/rfc5681>. [RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, \"Computing TCP's Retransmission Timer\", RFC 6298, DOI 10.17487/RFC6298, June 2011, <https://www.rfc-editor.org/info/rfc6298>. [RFC7413] Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014, <https://www.rfc-editor.org/info/rfc7413>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8201] McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed., \"Path MTU Discovery for IP version 6\", STD 87, RFC 8201, DOI 10.17487/RFC8201, July 2017, <https://www.rfc-editor.org/info/rfc8201>. 14.2. Informative References [Al10] Allman, M., \"Initial Congestion Window Specification\", Work in Progress, Internet-Draft, draft-allman-tcpm-bump-initcwnd-00, 15 November 2010, <https://datatracker.ietf.org/doc/html/draft-allman-tcpm-bump-initcwnd-00>. [Ba12] Barik, R., Welzl, M., Ferlin, S., and O. Alay, \"LISA: A linked slow-start algorithm for MPTCP\", IEEE ICC , DOI 10.1109/ICC.2016.7510786, May 2016, <https://doi.org/10.1109/ICC.2016.7510786>. [Ba20] Bagnulo, M. and B. Briscoe, \"ECN++: Adding Explicit Congestion Notification (ECN) to TCP Control Packets\", Work in Progress, Internet-Draft, draft-ietf-tcpm-generalized-ecn-07, 16 February 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-tcpm-generalized-ecn-07>. [Be94] Berners-Lee, T., Cailliau, C., Luotonen, A., Nielsen, H., and A. Secret, \"The World-Wide Web\", Communications of the ACM V37, pp. 76-82, DOI 10.1145/179606.179671, August 1994, <https://doi.org/10.1145/179606.179671>. [Br02] Brownlee, N. and KC. Claffy, \"Understanding Internet traffic streams: dragonflies and tortoises\", IEEE Communications Magazine, pp. 110-117, DOI 10.1109/MCOM.2002.1039865, 2002, <https://doi.org/10.1109/MCOM.2002.1039865>. [Br94] Braden, B., \"T/TCP -- Transaction TCP: Source Changes for Sun OS 4.1.3\", USC/ISI Release 1.0, September 1994. [Co91] Comer, D. and D. Stevens, \"Internetworking with TCP/IP\", ISBN 10: 0134685059, ISBN 13: 9780134685052, 1991. [Du16] Dukkipati, N., Cheng, Y., and A. Vahdat, \"Research Impacting the Practice of Congestion Control\", Computer Communication Review, The ACM SIGCOMM newsletter, July 2016. [FreeBSD] FreeBSD, \"The FreeBSD Project\", <https://www.freebsd.org/>. [Hu01] Hughes, A., Touch, J., and J. Heidemann, \"Issues in TCP Slow-Start Restart After Idle\", Work in Progress, Internet-Draft, draft-hughes-restart-00, December 2001, <https://datatracker.ietf.org/doc/html/draft-hughes-restart-00>. [Hu12] Hurtig, P. and A. Brunstrom, \"Enhanced metric caching for short TCP flows\", IEEE International Conference on Communications, DOI 10.1109/ICC.2012.6364516, 2012, <https://doi.org/10.1109/ICC.2012.6364516>. [IANA] IANA, \"Transmission Control Protocol (TCP) Parameters\", <https://www.iana.org/assignments/tcp-parameters>. [Is18] Islam, S., Welzl, M., Hiorth, K., Hayes, D., Armitage, G., and S. Gjessing, \"ctrlTCP: Reducing latency through coupled, heterogeneous multi-flow TCP congestion control\", IEEE INFOCOM 2018 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS), DOI 10.1109/INFCOMW.2018.8406887, April 2018, <https://doi.org/10.1109/INFCOMW.2018.8406887>. [Ja88] Jacobson, V. and M. Karels, \"Congestion Avoidance and Control\", SIGCOMM Symposium proceedings on Communications architectures and protocols , November 1988. [RFC1379] Braden, R., \"Extending TCP for Transactions -- Concepts\", RFC 1379, DOI 10.17487/RFC1379, November 1992, <https://www.rfc-editor.org/info/rfc1379>. [RFC1644] Braden, R., \"T/TCP -- TCP Extensions for Transactions Functional Specification\", RFC 1644, DOI 10.17487/RFC1644, July 1994, <https://www.rfc-editor.org/info/rfc1644>. [RFC2001] Stevens, W., \"TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms\", RFC 2001, DOI 10.17487/RFC2001, January 1997, <https://www.rfc-editor.org/info/rfc2001>. [RFC2140] Touch, J., \"TCP Control Block Interdependence\", RFC 2140, DOI 10.17487/RFC2140, April 1997, <https://www.rfc-editor.org/info/rfc2140>. [RFC2414] Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's Initial Window\", RFC 2414, DOI 10.17487/RFC2414, September 1998, <https://www.rfc-editor.org/info/rfc2414>. [RFC2663] Srisuresh, P. and M. Holdrege, \"IP Network Address Translator (NAT) Terminology and Considerations\", RFC 2663, DOI 10.17487/RFC2663, August 1999, <https://www.rfc-editor.org/info/rfc2663>. [RFC3124] Balakrishnan, H. and S. Seshan, \"The Congestion Manager\", RFC 3124, DOI 10.17487/RFC3124, June 2001, <https://www.rfc-editor.org/info/rfc3124>. [RFC3390] Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's Initial Window\", RFC 3390, DOI 10.17487/RFC3390, October 2002, <https://www.rfc-editor.org/info/rfc3390>. [RFC4340] Kohler, E., Handley, M., and S. Floyd, \"Datagram Congestion Control Protocol (DCCP)\", RFC 4340, DOI 10.17487/RFC4340, March 2006, <https://www.rfc-editor.org/info/rfc4340>. [RFC4960] Stewart, R., Ed., \"Stream Control Transmission Protocol\", RFC 4960, DOI 10.17487/RFC4960, September 2007, <https://www.rfc-editor.org/info/rfc4960>. [RFC5925] Touch, J., Mankin, A., and R. Bonica, \"The TCP Authentication Option\", RFC 5925, DOI 10.17487/RFC5925, June 2010, <https://www.rfc-editor.org/info/rfc5925>. [RFC6437] Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme, \"IPv6 Flow Label Specification\", RFC 6437, DOI 10.17487/RFC6437, November 2011, <https://www.rfc-editor.org/info/rfc6437>. [RFC6691] Borman, D., \"TCP Options and Maximum Segment Size (MSS)\", RFC 6691, DOI 10.17487/RFC6691, July 2012, <https://www.rfc-editor.org/info/rfc6691>. [RFC6928] Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis, \"Increasing TCP's Initial Window\", RFC 6928, DOI 10.17487/RFC6928, April 2013, <https://www.rfc-editor.org/info/rfc6928>. [RFC7231] Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\", RFC 7231, DOI 10.17487/RFC7231, June 2014, <https://www.rfc-editor.org/info/rfc7231>. [RFC7323] Borman, D., Braden, B., Jacobson, V., and R. Scheffenegger, Ed., \"TCP Extensions for High Performance\", RFC 7323, DOI 10.17487/RFC7323, September 2014, <https://www.rfc-editor.org/info/rfc7323>. [RFC7424] Krishnan, R., Yong, L., Ghanwani, A., So, N., and B. Khasnabish, \"Mechanisms for Optimizing Link Aggregation Group (LAG) and Equal-Cost Multipath (ECMP) Component Link Utilization in Networks\", RFC 7424, DOI 10.17487/RFC7424, January 2015, <https://www.rfc-editor.org/info/rfc7424>. [RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext Transfer Protocol Version 2 (HTTP/2)\", RFC 7540, DOI 10.17487/RFC7540, May 2015, <https://www.rfc-editor.org/info/rfc7540>. [RFC7661] Fairhurst, G., Sathiaseelan, A., and R. Secchi, \"Updating TCP to Support Rate-Limited Traffic\", RFC 7661, DOI 10.17487/RFC7661, October 2015, <https://www.rfc-editor.org/info/rfc7661>. [RFC8684] Ford, A., Raiciu, C., Handley, M., Bonaventure, O., and C. Paasch, \"TCP Extensions for Multipath Operation with Multiple Addresses\", RFC 8684, DOI 10.17487/RFC8684, March 2020, <https://www.rfc-editor.org/info/rfc8684>. Appendix A. TCB Sharing History T/TCP proposed using caches to maintain TCB information across instances (temporal sharing), e.g., smoothed RTT, RTT variation, congestion-avoidance threshold, and MSS [RFC1644]. These values were in addition to connection counts used by T/TCP to accelerate data delivery prior to the full three-way handshake during an OPEN. The goal was to aggregate TCB components where they reflect one association -- that of the host-pair rather than artificially separating those components by connection.¶ At least one T/TCP implementation saved the MSS and aggregated the RTT parameters across multiple connections but omitted caching the congestion window information [Br94], as originally specified in [RFC1379]. Some T/TCP implementations immediately updated MSS when the TCP MSS header option was received [Br94], although this was not addressed specifically in the concepts or functional specification [RFC1379] [RFC1644]. In later T/TCP implementations, RTT values were updated only after a CLOSE, which does not benefit concurrent sessions.¶ Temporal sharing of cached TCB data was originally implemented in the Sun OS 4.1.3 T/TCP extensions [Br94] and the FreeBSD port of same [FreeBSD]. As mentioned before, only the MSS and RTT parameters were cached, as originally specified in [RFC1379]. Later discussion of T/TCP suggested including congestion control parameters in this cache; for example, Section 3.1 of [RFC1644] hints at initializing the congestion window to the old window size.¶ Appendix B. TCP Option Sharing and Caching In addition to the options that can be cached and shared, this memo also lists known TCP options [IANA] for which state is unsafe to be kept. This list is not intended to be authoritative or exhaustive.¶ Obsolete (unsafe to keep state):¶ Echo¶ Echo Reply¶ Partial Order Connection Permitted¶ Partial Order Service Profile¶ CC¶ CC.NEW¶ CC.ECHO¶ TCP Alternate Checksum Request¶ TCP Alternate Checksum Data¶ No state to keep:¶ End of Option List (EOL)¶ No-Operation (NOP)¶ Window Scale (WS)¶ SACK¶ Timestamps (TS)¶ MD5 Signature Option¶ TCP Authentication Option (TCP-AO)¶ RFC3692-style Experiment 1¶ RFC3692-style Experiment 2¶ Unsafe to keep state:¶ Skeeter (DH exchange, known to be vulnerable)¶ Bubba (DH exchange, known to be vulnerable)¶ Trailer Checksum Option¶ SCPS capabilities¶ Selective Negative Acknowledgements (S-NACK)¶ Records Boundaries¶ Corruption experienced¶ SNAP¶ TCP Compression Filter¶ Quick-Start Response¶ User Timeout Option (UTO)¶ Multipath TCP (MPTCP) negotiation success (see below for negotiation failure)¶ TCP Fast Open (TFO) negotiation success (see below for negotiation failure)¶ Safe but optional to keep state:¶ Multipath TCP (MPTCP) negotiation failure (to avoid negotiation retries)¶ Maximum Segment Size (MSS)¶ TCP Fast Open (TFO) negotiation failure (to avoid negotiation retries)¶ Safe and necessary to keep state:¶ TCP Fast Open (TFO) Cookie (if TFO succeeded in the past)¶ Appendix C. Automating the Initial Window in TCP over Long Timescales C.1. Introduction Temporal sharing, as described earlier in this document, builds on the assumption that multiple consecutive connections between the same host-pair are somewhat likely to be exposed to similar environment characteristics. The stored information can become less accurate over time and suitable precautions should take this aging into consideration (this is discussed further in Section 8.1). However, there are also cases where it can make sense to track these values over longer periods, observing properties of TCP connections to gradually influence evolving trends in TCP parameters. This appendix describes an example of such a case.¶ TCP's congestion control algorithm uses an initial window value (IW) both as a starting point for new connections and as an upper limit for restarting after an idle period [RFC5681] [RFC7661]. This value has evolved over time; it was originally 1 maximum segment size (MSS) and increased to the lesser of 4 MSSs or 4,380 bytes [RFC3390] [RFC5681]. For a typical Internet connection with a maximum transmission unit (MTU) of 1500 bytes, this permits 3 segments of 1,460 bytes each.¶ The IW value was originally implied in the original TCP congestion control description and documented as a standard in 1997 [RFC2001] [Ja88]. The value was updated in 1998 experimentally and moved to the Standards Track in 2002 [RFC2414] [RFC3390]. In 2013, it was experimentally increased to 10 [RFC6928].¶ This appendix discusses how TCP can objectively measure when an IW is too large and that such feedback should be used over long timescales to adjust the IW automatically. The result should be safer to deploy and might avoid the need to repeatedly revisit IW over time.¶ Note that this mechanism attempts to make the IW more adaptive over time. It can increase the IW beyond that which is currently recommended for wide-scale deployment, so its use should be carefully monitored.¶ C.2. Design Considerations TCP's IW value has existed statically for over two decades, so any solution to adjusting the IW dynamically should have similarly stable, non-invasive effects on the performance and complexity of TCP. In order to be fair, the IW should be similar for most machines on the public Internet. Finally, a desirable goal is to develop a self-correcting algorithm so that IW values that cause network problems can be avoided. To that end, we propose the following design goals:¶ Impart little to no impact to TCP in the absence of loss, i.e., it should not increase the complexity of default packet processing in the normal case.¶ Adapt to network feedback over long timescales, avoiding values that persistently cause network problems.¶ Decrease the IW in the presence of sustained loss of IW segments, as determined over a number of different connections.¶ Increase the IW in the absence of sustained loss of IW segments, as determined over a number of different connections.¶ Operate conservatively, i.e., tend towards leaving the IW the same in the absence of sufficient information, and give greater consideration to IW segment loss than IW segment success.¶ We expect that, without other context, a good IW algorithm will converge to a single value, but this is not required. An endpoint with additional context or information, or deployed in a constrained environment, can always use a different value. In particular, information from previous connections, or sets of connections with a similar path, can already be used as context for such decisions (as noted in the core of this document).¶ However, if a given IW value persistently causes packet loss during the initial burst of packets, it is clearly inappropriate and could be inducing unnecessary loss in other competing connections. This might happen for sites behind very slow boxes with small buffers, which may or may not be the first hop.¶ C.3. Proposed IW Algorithm Below is a simple description of the proposed IW algorithm. It relies on the following parameters:¶ MinIW = 3 MSS or 4,380 bytes (as per [RFC3390])¶ MaxIW = 10 MSS (as per [RFC6928])¶ MulDecr = 0.5¶ AddIncr = 2 MSS¶ Threshold = 0.05¶ We assume that the minimum IW (MinIW) should be as currently specified as standard [RFC3390]. The maximum IW (MaxIW) can be set to a fixed value (we suggest using the experimental and now somewhat de facto standard in [RFC6928]) or set based on a schedule if trusted time references are available [Al10]; here, we prefer a fixed value. We also propose to use an Additive Increase Multiplicative Decrease (AIMD) algorithm, with increase and decreases as noted.¶ Although these parameters are somewhat arbitrary, their initial values are not important except that the algorithm is AIMD and the MaxIW should not exceed that recommended for other systems on the Internet (here, we selected the current de facto standard rather than the actual standard). Current proposals, including default current operation, are degenerate cases of the algorithm below for given parameters, notably MulDec = 1.0 and AddIncr = 0 MSS, thus disabling the automatic part of the algorithm.¶ The proposed algorithm is as follows:¶ On boot:¶ IW = MaxIW; # assume this is in bytes and indicates an integer # multiple of 2 MSS (an even number to support # ACK compression) ¶ Upon starting a new connection:¶ CWND = IW; conncount++; IWnotchecked = 1; # true ¶ During a connection's SYN-ACK processing, if SYN-ACK includes ECN (as similarly addressed in Section 5 of ECN++ for TCP [Ba20]), treat as if the IW is too large:¶ if (IWnotchecked && (synackecn == 1)) { losscount++; IWnotchecked = 0; # never check again } ¶ During a connection, if retransmission occurs, check the seqno of the outgoing packet (in bytes) to see if the re-sent segment fixes an IW loss:¶ if (Retransmitting && IWnotchecked && ((seqno - ISN) < IW))) { losscount++; IWnotchecked = 0; # never do this entire \"if\" again } else { IWnotchecked = 0; # you're beyond the IW so stop checking } ¶ Once every 1000 connections, as a separate process (i.e., not as part of processing a given connection):¶ if (conncount > 1000) { if (losscount/conncount > threshold) { # the number of connections with errors is too high IW = IW * MulDecr; } else { IW = IW + AddIncr; } } ¶ As presented, this algorithm can yield a false positive when the sequence number wraps around, e.g., the code might increment losscount in step 4 when no loss occurred or fail to increment losscount when a loss did occur. This can be avoided using either Protection Against Wrapped Sequences (PAWS) [RFC7323] context or internal extended sequence number representations (as in TCP Authentication Option (TCP-AO) [RFC5925]). Alternately, false positives can be tolerated because they are expected to be infrequent and thus will not significantly impact the algorithm.¶ A number of additional constraints need to be imposed if this mechanism is implemented to ensure that it defaults to values that comply with current Internet standards, is conservative in how it extends those values, and returns to those values in the absence of positive feedback (i.e., success). To that end, we recommend the following list of example constraints:¶ The automatic IW algorithm MUST initialize MaxIW a value no larger than the currently recommended Internet default in the absence of other context information.¶ Thus, if there are too few connections to make a decision or if there is otherwise insufficient information to increase the IW, then the MaxIW defaults to the current recommended value.¶ An implementation MAY allow the MaxIW to grow beyond the currently recommended Internet default but not more than 2 segments per calendar year.¶ Thus, if an endpoint has a persistent history of successfully transmitting IW segments without loss, then it is allowed to probe the Internet to determine if larger IW values have similar success. This probing is limited and requires a trusted time source; otherwise, the MaxIW remains constant.¶ An implementation MUST adjust the IW based on loss statistics at least once every 1000 connections.¶ An endpoint needs to be sufficiently reactive to IW loss.¶ An implementation MUST decrease the IW by at least 1 MSS when indicated during an evaluation interval.¶ An endpoint that detects loss needs to decrease its IW by at least 1 MSS; otherwise, it is not participating in an automatic reactive algorithm.¶ An implementation MUST increase by no more than 2 MSSs per evaluation interval.¶ An endpoint that does not experience IW loss needs to probe the network incrementally.¶ An implementation SHOULD use an IW that is an integer multiple of 2 MSSs.¶ The IW should remain a multiple of 2 MSS segments to enable efficient ACK compression without incurring unnecessary timeouts.¶ An implementation MUST decrease the IW if more than 95% of connections have IW losses.¶ Again, this is to ensure an implementation is sufficiently reactive.¶ An implementation MAY group IW values and statistics within subsets of connections. Such grouping MAY use any information about connections to form groups except loss statistics.¶ There are some TCP connections that might not be counted at all, such as those to/from loopback addresses or those within the same subnet as that of a local interface (for which congestion control is sometimes disabled anyway). This may also include connections that terminate before the IW is full, i.e., as a separate check at the time of the connection closing.¶ The period over which the IW is updated is intended to be a long timescale, e.g., a month or so, or 1,000 connections, whichever is longer. An implementation might check the IW once a month and simply not update the IW or clear the connection counts in months where the number of connections is too small.¶ C.4. Discussion There are numerous parameters to the above algorithm that are compliant with the given requirements; this is intended to allow variation in configuration and implementation while ensuring that all such algorithms are reactive and safe.¶ This algorithm continues to assume segments because that is the basis of most TCP implementations. It might be useful to consider revising the specifications to allow byte-based congestion given sufficient experience.¶ The algorithm checks for IW losses only during the first IW after a connection start; it does not check for IW losses elsewhere the IW is used, e.g., during slow-start restarts.¶ An implementation MAY detect IW losses during slow-start restarts in addition to losses during the first IW of a connection. In this case, the implementation MUST count each restart as a \"connection\" for the purposes of connection counts and periodic rechecking of the IW value.¶ False positives can occur during some kinds of segment reordering, e.g., that might trigger spurious retransmissions even without a true segment loss. These are not expected to be sufficiently common to dominate the algorithm and its conclusions.¶ This mechanism does require additional per-connection state, which is currently common in some implementations and is useful for other reasons (e.g., the ISN is used in TCP-AO [RFC5925]). The mechanism in this appendix also benefits from persistent state kept across reboots, which would also be useful to other state sharing mechanisms (e.g., TCP Control Block Sharing per the main body of this document).¶ The receive window (rwnd) is not involved in this calculation. The size of rwnd is determined by receiver resources and provides space to accommodate segment reordering. Also, rwnd is not involved with congestion control, which is the focus of the way this appendix manages the IW.¶ C.5. Observations The IW may not converge to a single global value. It also may not converge at all but rather may oscillate by a few MSSs as it repeatedly probes the Internet for larger IWs and fails. Both properties are consistent with TCP behavior during each individual connection.¶ This mechanism assumes that losses during the IW are due to IW size. Persistent errors that drop packets for other reasons, e.g., OS bugs, can cause false positives. Again, this is consistent with TCP's basic assumption that loss is caused by congestion and requires backoff. This algorithm treats the IW of new connections as a long-timescale backoff system.¶ Acknowledgments The authors would like to thank Praveen Balasubramanian for information regarding TCB sharing in Windows; Christoph Paasch for information regarding TCB sharing in Apple OSs; Yuchung Cheng, Lars Eggert, Ilpo Jarvinen, and Michael Scharf for comments on earlier draft versions of this document; as well as members of the TCPM WG. Earlier revisions of this work received funding from a collaborative research project between the University of Oslo and Huawei Technologies Co., Ltd. and were partly supported by USC/ISI's Postel Center.¶ Authors' Addresses Joe Touch Manhattan Beach, CA 90266 United States of America Phone: +1 (310) 560-0334 Email: touch@strayalpha.com Michael Welzl University of Oslo PO Box 1080 Blindern N-0316 Oslo Norway Phone: +47 22 85 24 20 Email: michawe@ifi.uio.no Safiqul Islam University of Oslo PO Box 1080 BlindernOslo N-0316Norway Phone: +47 22 84 08 37 Email: safiquli@ifi.uio.no"
    },
    {
        "Number": "9050",
        "Files": [
            "HTML",
            "TEXT",
            "PDF",
            "XML"
        ],
        "Title": "Path Computation Element Communication Protocol (PCEP) Procedures and Extensions for Using the PCE as a Central Controller (PCECC) of LSPs",
        "Authors": [
            "Z. Li",
            "S. Peng",
            "M. Negi",
            "Q. Zhao",
            "C. Zhou"
        ],
        "Date": "2021-07",
        "More Info": "",
        "Status": "Proposed Standard",
        "Abstract": "The Path Computation Element (PCE) is a core component of Software-Defined Networking (SDN) systems.  A PCE as a Central Controller (PCECC) can simplify the processing of a distributed control plane by blending it with elements of SDN and without necessarily completely replacing it. Thus, the Label Switched Path (LSP) can be calculated/set up/initiated and the label-forwarding entries can also be downloaded through a centralized PCE server to each network device along the path while leveraging the existing PCE technologies as much as possible.  This document specifies the procedures and Path Computation Element Communication Protocol (PCEP) extensions for using the PCE as the central controller for provisioning labels along the path of the static LSP.",
        "Keywords": [
            "SDN",
            "CCI",
            "Central Control"
        ],
        "Content": "RFC 9050: Path Computation Element Communication Protocol (PCEP) Procedures and Extensions for Using the PCE as a Central Controller (PCECC) of LSPs RFC 9050 PCECC July 2021 Li, et al. Standards Track [Page] Stream: Internet Engineering Task Force (IETF) RFC: 9050 Category: Standards Track Published: July 2021 ISSN: 2070-1721 Authors: Z. Li Huawei Technologies S. Peng Huawei Technologies M. Negi RtBrick Inc Q. Zhao Etheric Networks C. Zhou HPE RFC 9050 Path Computation Element Communication Protocol (PCEP) Procedures and Extensions for Using the PCE as a Central Controller (PCECC) of LSPs Abstract The Path Computation Element (PCE) is a core component of Software-Defined Networking (SDN) systems.¶ A PCE as a Central Controller (PCECC) can simplify the processing of a distributed control plane by blending it with elements of SDN and without necessarily completely replacing it. Thus, the Label Switched Path (LSP) can be calculated/set up/initiated and the label-forwarding entries can also be downloaded through a centralized PCE server to each network device along the path while leveraging the existing PCE technologies as much as possible.¶ This document specifies the procedures and Path Computation Element Communication Protocol (PCEP) extensions for using the PCE as the central controller for provisioning labels along the path of the static LSP.¶ Status of This Memo This is an Internet Standards Track document.¶ This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶ Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9050.¶ Copyright Notice Copyright (c) 2021 IETF Trust and the persons identified as the document authors. All rights reserved.¶ This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.¶ ▲ Table of Contents 1.  Introduction 2.  Terminology 2.1.  Requirements Language 3.  Basic PCECC Mode 4.  PCEP Requirements 5.  Procedures for Using the PCE as a Central Controller (PCECC) 5.1.  Stateful PCE Model 5.2.  New LSP Functions 5.3.  New PCEP Object 5.4.  PCECC Capability Advertisement 5.5.  LSP Operations 5.5.1.  PCE-Initiated PCECC LSP 5.5.2.  PCC-Initiated PCECC LSP 5.5.3.  Central Controller Instructions 5.5.3.1.  Label Download CCI 5.5.3.2.  Label Cleanup CCI 5.5.4.  PCECC LSP Update 5.5.5.  Re-delegation and Cleanup 5.5.6.  Synchronization of Central Controller Instructions 5.5.7.  PCECC LSP State Report 5.5.8.  PCC-Based Allocations 6.  PCEP Messages 6.1.  The PCInitiate Message 6.2.  The PCRpt Message 7.  PCEP Objects 7.1.  OPEN Object 7.1.1.  PCECC Capability Sub-TLV 7.2.  PATH-SETUP-TYPE TLV 7.3.  CCI Object 7.3.1.  Address TLVs 8.  Security Considerations 8.1.  Malicious PCE 8.2.  Malicious PCC 9.  Manageability Considerations 9.1.  Control of Function and Policy 9.2.  Information and Data Models 9.3.  Liveness Detection and Monitoring 9.4.  Verify Correct Operations 9.5.  Requirements on Other Protocols 9.6.  Impact on Network Operations 10. IANA Considerations 10.1.  PATH-SETUP-TYPE-CAPABILITY Sub-TLV Type Indicators 10.2.  PCECC-CAPABILITY Sub-TLV's Flag Field 10.3.  PCEP Path Setup Type Registry 10.4.  PCEP Object 10.5.  CCI Object Flag Field 10.6.  PCEP-Error Object 11. References 11.1.  Normative References 11.2.  Informative References Acknowledgments Contributors Authors' Addresses 1. Introduction The Path Computation Element (PCE) [RFC4655] was developed to offload the path computation function from routers in an MPLS traffic-engineered (TE) network. It can compute optimal paths for traffic across a network and can also update the paths to reflect changes in the network or traffic demands. Since then, the role and function of the PCE have grown to cover a number of other uses (such as GMPLS [RFC7025]) and to allow delegated control [RFC8231] and PCE-initiated use of network resources [RFC8281].¶ According to [RFC7399], Software-Defined Networking (SDN) refers to a separation between the control elements and the forwarding components so that software running in a centralized system, called a controller, can act to program the devices in the network to behave in specific ways. A required element in an SDN architecture is a component that plans how the network resources will be used and how the devices will be programmed. It is possible to view this component as performing specific computations to place traffic flows within the network given knowledge of the availability of network resources, how other forwarding devices are programmed, and the way that other flows are routed. This is the function and purpose of a PCE, and the way that a PCE integrates into a wider network control system (including an SDN system) is presented in [RFC7491].¶ In early PCE implementations, where the PCE was used to derive paths for MPLS Label Switched Paths (LSPs), paths were requested by network elements (known as Path Computation Clients (PCCs)), and the results of the path computations were supplied to network elements using the Path Computation Element Communication Protocol (PCEP) [RFC5440]. This protocol was later extended to allow a PCE to send unsolicited requests to the network for LSP establishment [RFC8281].¶ The PCE was developed to derive paths for MPLS LSPs, which are supplied to the head end of the LSP using the PCEP. But SDN has a broader applicability than signaled MPLS and GMPLS TE networks, and the PCE may be used to determine paths in a range of use cases. PCEP has been proposed as a control protocol for use in these environments to allow the PCE to be fully enabled as a central controller.¶ [RFC8283] introduces the architecture for the PCE as a central controller as an extension to the architecture described in [RFC4655] and assumes the continued use of PCEP as the protocol used between the PCE and PCC. [RFC8283] further examines the motivations and applicability for PCEP as a Southbound Interface (SBI) and introduces the implications for the protocol. [PCECC] describes the use cases for the PCECC architecture.¶ A PCECC can simplify the processing of a distributed control plane by blending it with elements of SDN and without necessarily completely replacing it. Thus, the LSP can be calculated/set up/initiated and the label-forwarding entries can also be downloaded through a centralized PCE server to each network device along the path while leveraging the existing PCE technologies as much as possible.¶ This document specifies the procedures and PCEP extensions for using the PCE as the central controller for static LSPs, where LSPs can be provisioned as explicit label instructions at each hop on the end-to-end path. Each router along the path must be told what label-forwarding instructions to program and what resources to reserve. The PCE-based controller keeps a view of the network and determines the paths of the end-to-end LSPs, and the controller uses PCEP to communicate with each router along the path of the end-to-end LSP.¶ While this document is focused on the procedures for the static LSPs (referred to as the basic PCECC mode in Section 3), the mechanisms and protocol encodings are specified in such a way that extensions for other use cases are easy to achieve. For example, the extensions for the PCECC for Segment Routing (SR) are specified in [PCECC-SR] and [PCECC-SRv6].¶ 2. Terminology The terminology used in this document is the same as that described in the [RFC8283].¶ 2.1. Requirements Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶ 3. Basic PCECC Mode In this mode, LSPs are provisioned as explicit label instructions at each hop on the end-to-end path. Each router along the path must be told what label-forwarding instructions to program and what resources to reserve. The controller uses PCEP to communicate with each router along the path of the end-to-end LSP.¶ [RFC8283] examines the motivations and applicability for the PCECC and use of PCEP as an SBI. Section 3.1.2 of [RFC8283] highlights the use of the PCECC for label allocation along the static LSPs, and it simplifies the processing of a distributed control plane by blending it with elements of SDN and without necessarily completely replacing it. This allows the operator to introduce the advantages of SDN (such as programmability) into the network. Further, Section 3.3 of [PCECC] describes some of the scenarios where the PCECC technique could be useful. Section 4 of [RFC8283] also describes the implications on the protocol when used as an SDN SBI. The operator needs to evaluate the advantages offered by the PCECC against the operational and scalability needs of the PCECC.¶ As per Section 3.1.2 of [RFC8283], the PCE-based controller will take responsibility for managing some part of the MPLS label space for each of the routers that it controls and may take wider responsibility for partitioning the label space for each router and allocating different parts for different uses. The PCC MUST NOT make allocations from the label space set aside for the PCE to avoid overlap and collisions of label allocations. It is RECOMMENDED that the PCE makes allocations (from the label space set aside for the PCE) for all nodes along the path. For the purpose of this document, it is assumed that the exclusive label range to be used by a PCE is known and set on both PCEP peers. A future extension could add the capability to advertise this range via a possible PCEP extension as well (see [PCE-ID]). The rest of the processing is similar to the existing stateful PCE mechanism.¶ This document also allows a case where the label space is maintained by the PCC and the labels are allocated by it. In this case, the PCE should request the allocation from the PCC, as described in Section 5.5.8.¶ 4. PCEP Requirements The following key requirements should be considered when designing the PCECC-based solution:¶ A PCEP speaker supporting this document needs to have the capability to advertise its PCECC capability to its peers.¶ A PCEP speaker needs means to identify PCECC-based LSPs in the PCEP messages.¶ PCEP procedures need to allow for PCC-based label allocations.¶ PCEP procedures need to provide a means to update (or clean up) label entries downloaded to the PCC.¶ PCEP procedures need to provide a means to synchronize the labels between the PCE and the PCC via PCEP messages.¶ 5. Procedures for Using the PCE as a Central Controller (PCECC) 5.1. Stateful PCE Model Active stateful PCE is described in [RFC8231]. A PCE as a Central Controller (PCECC) reuses the existing active stateful PCE mechanism as much as possible to control LSPs.¶ 5.2. New LSP Functions Several new functions are required in PCEP to support the PCECC. This document extends the existing messages to support the new functions required by the PCECC:¶ PCInitiate: A PCEP message described in [RFC8281]. A PCInitiate message is used to set up a PCE-initiated LSP based on a PCECC mechanism. It is also extended for Central Controller Instructions (CCI) (download or clean up the label-forwarding instructions in the context of this document) on all nodes along the path, as described in Section 6.1.¶ PCRpt: A PCEP message described in [RFC8231]. A PCRpt message is used to send the PCECC LSP Reports. It is also extended to report the set of CCI (label-forwarding instructions in the context of this document) received from the PCE, as described in Section 6.2. Section 5.5.6 describes the use of a PCRpt message during synchronization.¶ PCUpd: A PCEP message described in [RFC8231]. A PCUpd message is used to send the PCECC LSP Updates.¶ The new functions defined in this document are mapped onto the PCEP messages, as shown in Table 1.¶ Table 1: Functions Mapped to the PCEP Messages Function Message PCECC Capability advertisement Open Label entry Add PCInitiate Label entry Clean up PCInitiate PCECC-Initiated LSP PCInitiate PCECC LSP Update PCUpd PCECC LSP State Report PCRpt PCECC LSP Delegation PCRpt PCECC Label Report PCRpt 5.3. New PCEP Object This document defines a new PCEP object called CCI (Section 7.3) to specify the Central Controller Instructions. In the scope of this document, this is limited to label-forwarding instructions. Future documents can create new CCI object-types for other types of Central Controller Instructions. The CC-ID is the unique identifier for the CCI in PCEP. The PCEP messages are extended in this document to handle the PCECC operations.¶ 5.4. PCECC Capability Advertisement During the PCEP initialization phase, PCEP speakers (PCE or PCC) advertise their support of and willingness to use PCEP extensions for the PCECC using these elements in the OPEN message:¶ a new Path Setup Type (PST) (Section 7.2) in the PATH-SETUP-TYPE-CAPABILITY TLV to indicate support for PCEP extensions for the PCECC - 2 (Traffic engineering path is set up using PCECC mode)¶ a new PCECC-CAPABILITY sub-TLV (Section 7.1.1) with the L bit set to '1' inside the PATH-SETUP-TYPE-CAPABILITY TLV to indicate a willingness to use PCEP extensions for the PCECC-based Central Controller Instructions for label download¶ the STATEFUL-PCE-CAPABILITY TLV [RFC8231] (with the I flag set [RFC8281])¶ The new PST is to be listed in the PATH-SETUP-TYPE-CAPABILITY TLV by all PCEP speakers that support the PCEP extensions for the PCECC in this document.¶ The new PCECC-CAPABILITY sub-TLV is included in the PATH-SETUP-TYPE-CAPABILITY TLV in the OPEN object to indicate a willingness to use the PCEP extensions for the PCECC during the established PCEP session. Using the L bit in this TLV, the PCE shows the intention to function as a PCECC server, and the PCC shows a willingness to act as a PCECC client for label download instructions (see Section 7.1.1).¶ If the PCECC-CAPABILITY sub-TLV is advertised and the STATEFUL-PCE-CAPABILITY TLV is not advertised, or is advertised without the I flag set, in the OPEN object, the receiver MUST:¶ send a PCErr message with Error-Type=19 (Invalid Operation) and Error-value=17 (Stateful PCE capability was not advertised) and¶ terminate the session.¶ If a PCEP speaker receives the PATH-SETUP-TYPE-CAPABILITY TLV with the PCECC PST but without the PCECC-CAPABILITY sub-TLV, it MUST:¶ send a PCErr message with Error-Type=10 (Reception of an invalid object) and Error-value=33 (Missing PCECC Capability sub-TLV) and¶ terminate the PCEP session.¶ The PCECC-CAPABILITY sub-TLV MUST NOT be used without the corresponding PST being listed in the PATH-SETUP-TYPE-CAPABILITY TLV. If it is present without the corresponding PST listed in the PATH-SETUP-TYPE-CAPABILITY TLV, it MUST be ignored.¶ If one or both speakers (PCE and PCC) have not indicated support and willingness to use the PCEP extensions for the PCECC, the PCEP extensions for the PCECC MUST NOT be used. If a PCECC operation is attempted when both speakers have not agreed in the OPEN messages, the receiver of the message MUST:¶ send a PCErr message with Error-Type=19 (Invalid Operation) and Error-value=16 (Attempted PCECC operations when PCECC capability was not advertised) and¶ terminate the PCEP session.¶ A legacy PCEP speaker (that does not recognize the PCECC Capability sub-TLV) will ignore the sub-TLV in accordance with [RFC8408] and [RFC5440]. As per [RFC8408], the legacy PCEP speaker, on receipt of an unsupported PST in a Request Parameter (RP) / Stateful PCE Request Parameter (SRP) object, will:¶ send a PCErr message with Error-Type=21 (Invalid traffic engineering path setup type) and Error-value=1 (Unsupported path setup type) and¶ terminate the PCEP session.¶ 5.5. LSP Operations The PCEP messages pertaining to a PCECC MUST include the PATH-SETUP-TYPE TLV [RFC8408] in the SRP object [RFC8231] with the PST set to '2' to clearly identify that the PCECC LSP is intended.¶ 5.5.1. PCE-Initiated PCECC LSP The LSP instantiation operation is defined in [RFC8281]. In order to set up a PCE-initiated LSP based on the PCECC mechanism, a PCE sends a PCInitiate message with the PST set to '2' for the PCECC (see Section 7.2) to the ingress PCC.¶ The label-forwarding instructions (see Section 5.5.3) from the PCECC are sent after the initial PCInitiate and PCRpt message exchange with the ingress PCC, as per [RFC8281] (see Figure 1). This is done so that the PCEP-specific identifier for the LSP (PLSP-ID) and other LSP identifiers can be obtained from the ingress and can be included in the label-forwarding instruction in the next set of PCInitiate messages along the path, as described below.¶ An LSP-IDENTIFIERS TLV [RFC8231] MUST be included for the PCECC LSPs; it uniquely identifies the LSP in the network. Note that the fields in the LSP-IDENTIFIERS TLV are described for the RSVP-signaled LSPs but are applicable to the PCECC LSP as well. The LSP object is included in the CCI (label download Section 7.3) to identify the PCECC LSP for this instruction. The PLSP-ID is the original identifier used by the ingress PCC, so a transit/egress Label Switching Router (LSR) could have multiple Central Controller Instructions that have the same PLSP-ID. The PLSP-ID in combination with the source (in the LSP-IDENTIFIERS TLV) MUST be unique. The PLSP-ID is included for maintainability reasons to ease debugging. As per [RFC8281], the LSP object could also include the SPEAKER-ENTITY-ID TLV to identify the PCE that initiated these instructions. Also, the CC-ID is unique in each PCEP session, as described in Section 7.3.¶ On receipt of a PCInitiate message for the PCECC LSP, the PCC responds with a PCRpt message with the status set to 'Going-up' and carrying the assigned PLSP-ID (see Figure 1). The ingress PCC also sets the D (Delegate) flag (see [RFC8231]) and C (Create) flag (see [RFC8281]) in the LSP object. When the PCE receives this PCRpt message with the PLSP-ID, it assigns labels along the path and sets up the path by sending a PCInitiate message to each node along the path of the LSP, as per the PCECC technique. The CC-ID uniquely identifies the Central Controller Instructions within a PCEP session. Each node along the path (PCC) responds with a PCRpt message to acknowledge the CCI with the PCRpt messages including the CCI and LSP objects.¶ The ingress node would receive one CCI object with the O bit (out-label) set. The transit node(s) would receive two CCI objects with the in-label CCI without the O bit set and the out-label CCI with the O bit set. The egress node would receive one CCI object without the O bit set (see Figure 1). A node can determine its role based on the setting of the O bit in the CCI object(s) and the LSP-IDENTIFIERS TLV in the LSP object.¶ The LSP deletion operation for the PCE-initiated PCECC LSP is the same as defined in [RFC8281]. The PCE should further perform the label entry cleanup operation, as described in Section 5.5.3.2, for the corresponding LSP.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | |<--PCInitiate,PLSP-ID=0,PST=2---------| PCECC LSP |PCC +--------+ | | Initiate |egress | | |----PCRpt,PLSP-ID=2,D=1,C=1---------->| PCECC LSP +--------+ | | (GOING-UP) | | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=2----------------| Label | | | | download |--------PCRpt,CC-ID=X,PLSP-ID=2-------------------->| CCI | | | | | |<------PCInitiate,CC-ID=Y1,Y2,PLSP-ID=2-----| Label | | | | download | |-------PCRpt,CC-ID=Y1,Y2,PLSP-ID=2--------->| CCI | | | | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=2-----| Label | | | | download | | |-----PCRpt,CC-ID=Z,PLSP-ID=2--------->| CCI | | | | | | |<---PCUpd,PLSP-ID=2,PST=2,D=1---------| PCECC LSP | | | (UP) | Update | | |----PCRpt,PLSP-ID=2,D=1,C=1---------->| | | | (UP) | Figure 1: PCE-Initiated PCECC LSP Once the label operations are completed, the PCE MUST send a PCUpd message to the ingress PCC. As per [RFC8231], the PCUpd message is with the D flag set.¶ The PCECC LSPs are considered to be 'up' by default (on receipt of a PCUpd message from the PCE). The ingress could further choose to deploy a data-plane check mechanism and report the status back to the PCE via a PCRpt message to make sure that the correct label instructions are made along the path of the PCECC LSP (and it is ready to carry traffic). The exact mechanism is out of scope of this document.¶ In the case where the label allocations are made by the PCC itself (see Section 5.5.8), the PCE could request an allocation to be made by the PCC; then, the PCC would send a PCRpt message with the allocated label encoded in the CC-ID object (as shown in Figure 2) in the configuration sequence from the egress towards the ingress along the path.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | |<--PCInitiate,PLSP-ID=0,PST=2,--------| PCECC LSP |PCC +--------+ | | Initiate |egress | | |----PCRpt,PLSP-ID=2,D=1,C=1---------->| PCECC LSP +--------+ | | (GOING-UP) | | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=2----------------| Label | | | C=1,O=0 | download |--------PCRpt,CC-ID=X,PLSP-ID=2-------------------->| CCI | | | Label=L1 | | |<------PCInitiate,PLSP-ID=2,----------------| Labels | | | CC-ID=Y1,C=1,O=0 | download | | | CC-ID=Y2,C=0,O=1,L1 | CCI | |-------PCRpt,PLSP-ID=2--------------------->| | | | CC-ID=Y1,O=0,Label=L2 | | | | CC-ID=Y2,O=1 | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=2-----| Label | | | C=0,O=1,L2 | download | | |-----PCRpt,CC-ID=Z,PLSP-ID=2--------->| CCI | | | | | | |<---PCUpd,PLSP-ID=2,PST=2,D=1---------| PCECC LSP | | | (UP) | Update Figure 2: PCE-Initiated PCECC LSP (PCC Allocation) In this example, it should be noted that the request is made to the egress node with the C bit set in the CCI object to indicate that the label allocation needs to be done by the egress, and the egress responds with the allocated label to the PCE. The PCE further informs the transit PCC without setting the C bit to '1' in the CCI object for the out-label, but the C bit is set to '1' for the in-label, so the transit node makes the label allocation (for the in-label) and reports to the PCE. Similarly, the C bit is unset towards the ingress to complete all the label allocations for the PCECC LSP.¶ 5.5.2. PCC-Initiated PCECC LSP In order to set up an LSP based on the PCECC mechanism where the LSP is configured at the PCC, a PCC MUST delegate the LSP by sending a PCRpt message with the PST set for the PCECC (see Section 7.2) and D (Delegate) flag (see [RFC8231]) set in the LSP object (see Figure 3).¶ When a PCE receives the initial PCRpt message with the D flag and PST set to '2', it SHOULD calculate the path and assign labels along the path in addition to setting up the path by sending a PCInitiate message to each node along the path of the LSP, as per the PCECC technique (see Figure 3). The CC-ID uniquely identifies the CCI within a PCEP session. Each PCC further responds with the PCRpt messages, including the CCI and LSP objects.¶ Once the CCI (label operations) are completed, the PCE MUST send the PCUpd message to the ingress PCC. As per [RFC8231], this PCUpd message should include the path information calculated by the PCE.¶ Note that the PCECC LSPs MUST be delegated to a PCE at all times.¶ The LSP deletion operation for the PCECC LSPs is the same as defined in [RFC8231]. If the PCE receives a PCRpt message for LSP deletion, then it does label the cleanup operation, as described in Section 5.5.3.2, for the corresponding LSP.¶ The basic PCECC LSP setup sequence is as shown in Figure 3.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | |---PCRpt,PLSP-ID=1,PST=2,D=1-------->| PCECC LSP |PCC +--------+ | | |egress | | | | +--------+ | | | | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=1---------------| Label | | | L1,O=0 | download |--------PCRpt,CC-ID=X,PLSP-ID=1------------------->| CCI | | | | | |<------PCInitiate,PLSP-ID=1,---------------| Labels | | | CC-ID=Y1,O=0,L2 | download | | | CC-ID=Y2,O=1,L1 | CCI | |-------PCRpt,CC-ID=Y1,Y2,PLSP-ID=1-------->| | | | | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=1----| Label | | | L2,O=1 | download | | |-----PCRpt,CC-ID=Z,PLSP-ID=1-------->| CCI | | | | | | |<---PCUpd,PLSP-ID=1,PST=2,D=1--------| PCECC LSP | | | | Update | | | | Figure 3: PCC-Initiated PCECC LSP In the case where the label allocations are made by the PCC itself (see Section 5.5.8), the PCE could request an allocation to be made by the PCC; then, the PCC would send a PCRpt message with the allocated label encoded in the CC-ID object, as shown in Figure 4.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | |---PCRpt,PLSP-ID=1,PST=2,D=1-------->| PCECC LSP |PCC +--------+ | | |egress | | | | +--------+ | | | | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=1---------------| Label | | | C=1 | download |--------PCRpt,CC-ID=X,PLSP-ID=1------------------->| CCI | | | Label=L1 | | |<------PCInitiate,PLSP-ID=1,---------------| Labels | | | CC-ID=Y1,C=1 | download | | | CC-ID=Y2,C=0,L1 | CCI | |-------PCRpt,PLSP-ID=1-------------------->| | | | CC-ID=Y1,Label=L2 | | | | CC-ID=Y2 | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=1----| Label | | | C=0,L2 | download | | |-----PCRpt,CC-ID=Z,PLSP-ID=1-------->| CCI | | | | | | |<---PCUpd,PLSP-ID=1,PST=2,D=1--------| PCECC LSP | | | | Update | | | | Figure 4: PCC-Initiated PCECC LSP (PCC Allocation) Note:¶ The O bit is set as before (and thus not included).¶ In the case where the label allocations are made by the PCC itself (see Section 5.5.8), the procedure remains the same, with just an additional constraint on the configuration sequence.¶ The rest of the PCC-initiated PCECC LSP setup operations are the same as those described in Section 5.5.1.¶ 5.5.3. Central Controller Instructions The new CCI for the label operations in PCEP are done via the PCInitiate message (Section 6.1) by defining a new PCEP object for CCI operations. The local label range of each PCC is assumed to be known by both the PCC and the PCE.¶ 5.5.3.1. Label Download CCI In order to set up an LSP based on the PCECC, the PCE sends a PCInitiate message to each node along the path to download the label instructions, as described in Sections 5.5.1 and 5.5.2.¶ The CCI object MUST be included, along with the LSP object in the PCInitiate message. The LSP-IDENTIFIERS TLV MUST be included in the LSP object. The SPEAKER-ENTITY-ID TLV SHOULD be included in the LSP object.¶ If a node (PCC) receives a PCInitiate message that includes a label to download (as part of CCI) that is out of the range set aside for the PCE, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=1 (Label out of range) and MUST include the SRP object to specify the error is for the corresponding label update via a PCInitiate message. If a PCC receives a PCInitiate message but fails to download the label entry, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=2 (Instruction failed) and MUST include the SRP object to specify the error is for the corresponding label update via a PCInitiate message.¶ A new PCEP object for CCI is defined in Section 7.3.¶ 5.5.3.2. Label Cleanup CCI In order to delete an LSP based on the PCECC, the PCE sends Central Controller Instructions via a PCInitiate message to each node along the path of the LSP to clean up the label-forwarding instruction.¶ If the PCC receives a PCInitiate message but does not recognize the label in the CCI, the PCC MUST generate a PCErr message with Error-Type=19 (Invalid operation) and Error-value=18 (Unknown Label) and MUST include the SRP object to specify the error is for the corresponding label cleanup (via a PCInitiate message).¶ The R flag in the SRP object defined in [RFC8281] specifies the deletion of the label entry in the PCInitiate message.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | | | |PCC +--------+ | | |egress | | | | +--------+ | | | | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=2----------------| Label | | | R=1 | cleanup |--------PCRpt,CC-ID=X,PLSP-ID=2-------------------->| CCI | | | R=1 | | |<------PCInitiate,CC-ID=Y1,Y2,PLSP-ID=2-----| Label | | | R=1 | cleanup | |-------PCRpt,CC-ID=Y1,Y2,PLSP-ID=2--------->| CCI | | | R=1 | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=2-----| Label | | | R=1 | cleanup | | |-----PCRpt,CC-ID=Z,PLSP-ID=2--------->| CCI | | | R=1 | | | |<--PCInitiate,PLSP-ID=2,PST=2,R=1-----| PCECC LSP | | | | remove Figure 5: Label Cleanup As per [RFC8281], following the removal of the label-forwarding instruction, the PCC MUST send a PCRpt message. The SRP object in the PCRpt message MUST include the SRP-ID-number from the PCInitiate message that triggered the removal. The R flag in the SRP object MUST be set.¶ In the case where the label allocation is made by the PCC itself (see Section 5.5.8), the removal procedure remains the same, adding the sequence constraint.¶ 5.5.4. PCECC LSP Update The update is done as per the make-before-break procedures, i.e., the PCECC first updates new label instructions based on the updated path and then informs the ingress to switch traffic before cleaning up the former instructions. New CC-IDs are used to identify the updated instructions; the identifiers in the LSP object uniquely identify the existing LSP. Once new instructions are downloaded, the PCE further updates the new path at the ingress, which triggers the traffic switch on the updated path. The ingress PCC acknowledges with a PCRpt message, on receipt of the PCRpt message, the PCE does the cleanup operation for the former LSP, as described in Section 5.5.3.2.¶ +-------+ +-------+ |PCC | | PCE | |ingress| +-------+ +------| | | | PCC +-------+ | | transit| | | +------| | | | |PCC +--------+ | | |egress | | | | +--------+ | | | | | | | New Path |<------ PCInitiate,CC-ID=XX,PLSP-ID=1 -------------| for LSP | | | | trigger |--------PCRpt,CC-ID=XX,PLSP-ID=1------------------>| new CCI | | | | | |<------PCInitiate,CC-ID=YY1,YY2,PLSP-ID=1--| Label | | | | download | |-------PCRpt,CC-ID=YY1,YY2,PLSP-ID=1------>| CCI | | | | | | |<----PCInitiate,CC-ID=ZZ,PLSP-ID=1---| Label | | | | download | | |-----PCRpt,CC-ID=ZZ,PLSP-ID=1------->| CCI | | | | | | |<---PCUpd,PLSP-ID=1,PST=2,D=1--------| PCECC | | | SRP=S | LSP Update | | | | | | |---PCRpt,PLSP-ID=1,PST=2,D=1-------->| Trigger | | | (SRP=S) | Delete | | | | former CCI | | | | |<-------PCInitiate,CC-ID=X,PLSP-ID=1---------------| Label | | | R=1 | cleanup |--------PCRpt,CC-ID=X,PLSP-ID=1------------------->| CCI | | | R=1 | | |<------PCInitiate,CC-ID=Y1,Y2,PLSP-ID=1----| Label | | | R=1 | cleanup | |-------PCRpt,CC-ID=Y1,Y2,PLSP-ID=1-------->| CCI | | | R=1 | | | |<----PCInitiate,CC-ID=Z,PLSP-ID=1----| Label | | | R=1 | cleanup | | |-----PCRpt,CC-ID=Z,PLSP-ID=1-------->| CCI | | | R=1 | Figure 6: PCECC LSP Update The modified PCECC LSPs are considered to be 'up' by default. The ingress could further choose to deploy a data-plane check mechanism and report the status back to the PCE via a PCRpt message. The exact mechanism is out of scope of this document.¶ In the case where the label allocations are made by the PCC itself (see Section 5.5.8), the procedure remains the same.¶ 5.5.5. Re-delegation and Cleanup As described in [RFC8281], a new PCE can gain control over an orphaned LSP. In the case of a PCECC LSP, the new PCE MUST also gain control over the CCI in the same way by sending a PCInitiate message that includes the SRP, LSP, and CCI objects and carries the CC-ID and PLSP-ID identifying the instructions that it wants to take control of.¶ Further, as described in [RFC8281], the State Timeout Interval timer ensures that a PCE crash does not result in automatic and immediate disruption for the services using PCE-initiated LSPs. Similarly the Central Controller Instructions are not removed immediately upon PCE failure. Instead, they are cleaned up on the expiration of this timer. This allows for network cleanup without manual intervention. The PCC MUST support the removal of CCI as one of the behaviors applied on expiration of the State Timeout Interval timer.¶ In the case of the PCC-initiated PCECC LSP, the control over the orphaned LSP at the ingress PCC is taken over by the mechanism specified in [RFC8741] to request delegation. The control over the CCI is described above using [RFC8281].¶ 5.5.6. Synchronization of Central Controller Instructions The purpose of CCI synchronization (labels in the context of this document) is to make sure that the PCE's view of CCI (labels) matches with the PCC's label allocation. This synchronization is performed as part of the LSP State Synchronization, as described in [RFC8231] and [RFC8232].¶ As per LSP State Synchronization [RFC8231], a PCC reports the state of its LSPs to the PCE using PCRpt messages and, as per [RFC8281], the PCE would initiate any missing LSPs and/or remove any LSPs that are not wanted. The same PCEP messages and procedures are also used for the CCI synchronization. The PCRpt message includes the CCI and the LSP object to report the label-forwarding instructions. The PCE would further remove any unwanted instructions or initiate any missing instructions.¶ 5.5.7. PCECC LSP State Report As mentioned before, an ingress PCC MAY choose to apply any Operations, Administration, and Maintenance (OAM) mechanism to check the status of the LSP in the data plane and MAY further send its status in a PCRpt message to the PCE.¶ 5.5.8. PCC-Based Allocations The PCE can request the PCC to allocate the label using the PCInitiate message. The C flag in the CCI object is set to '1' to indicate that the allocation needs to be made by the PCC. The PCC MUST try to allocate the label and MUST report to the PCE via a PCRpt or PCErr message.¶ If the value of the label is 0 and the C flag is set to '1', it indicates that the PCE is requesting the allocation to be made by the PCC. If the label is 'n' and the C flag is set to '1' in the CCI object, it indicates that the PCE requests a specific value 'n' for the label. If the allocation is successful, the PCC MUST report via the PCRpt message with the CCI object. If the value of the label in the CCI object is invalid, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=3 (Invalid CCI). If it is valid but the PCC is unable to allocate it, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=4 (Unable to allocate the specified CCI).¶ If the PCC wishes to withdraw or modify the previously assigned label, it MUST send a PCRpt message without any label or with the label containing the new value, respectively, in the CCI object. The PCE would further trigger the label cleanup of the older label, as per Section 5.5.3.2.¶ 6. PCEP Messages As defined in [RFC5440], a PCEP message consists of a common header followed by a variable-length body made of a set of objects that can be either mandatory or optional. An object is said to be mandatory in a PCEP message when the object must be included for the message to be considered valid. For each PCEP message type, a set of rules is defined, which specifies the set of objects that the message can carry. An implementation MUST form the PCEP messages using the object ordering specified in this document.¶ The LSP-IDENTIFIERS TLV MUST be included in the LSP object for the PCECC LSP.¶ The message formats in this document are specified using Routing Backus-Naur Form (RBNF) encoding, as specified in [RFC5511].¶ 6.1. The PCInitiate Message The PCInitiate message [RFC8281] can be used to download or remove the labels; this document extends the message, as shown below.¶ <PCInitiate Message> ::= <Common Header> <PCE-initiated-lsp-list> ¶ Where:¶ <Common Header> is defined in [RFC5440].¶ <PCE-initiated-lsp-list> ::= <PCE-initiated-lsp-request> [<PCE-initiated-lsp-list>] <PCE-initiated-lsp-request> ::= (<PCE-initiated-lsp-instantiation>| <PCE-initiated-lsp-deletion>| <PCE-initiated-lsp-central-control>) <PCE-initiated-lsp-central-control> ::= <SRP> <LSP> <cci-list> <cci-list> ::= <CCI> [<cci-list>] ¶ Where:¶ <PCE-initiated-lsp-instantiation> and <PCE-initiated-lsp-deletion> are as per [RFC8281].¶ The LSP and SRP object is defined in [RFC8231].¶ When a PCInitiate message is used for the CCI (labels), the SRP, LSP, and CCI objects MUST be present. The SRP object is defined in [RFC8231]; if the SRP object is missing, the receiving PCC MUST send a PCErr message with Error-Type=6 (Mandatory Object missing) and Error-value=10 (SRP object missing). The LSP object is defined in [RFC8231], and if the LSP object is missing, the receiving PCC MUST send a PCErr message with Error-Type=6 (Mandatory Object missing) and Error-value=8 (LSP object missing). The CCI object is defined in Section 7.3, and if the CCI object is missing, the receiving PCC MUST send a PCErr message with Error-Type=6 (Mandatory Object missing) and Error-value=17 (CCI object missing). More than one CCI object MAY be included in the PCInitiate message for a transit LSR.¶ To clean up entries, the R (remove) bit MUST be set in the SRP object to be encoded along with the LSP and CCI objects.¶ The CCI object received at the ingress node MUST have the O bit (out-label) set. The CCI object received at the egress MUST have the O bit unset. If this is not the case, the PCC MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=3 (Invalid CCI). Other instances of the CCI object, if present, MUST be ignored.¶ For the point-to-point (P2P) LSP setup via the PCECC technique, at the transit LSR, two CCI objects are expected for incoming and outgoing labels associated with the LSP object. If any other CCI object is included in the PCInitiate message, it MUST be ignored. If the transit LSR did not receive two CCI objects, with one of them having the O bit set and another with the O bit unset, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=3 (Invalid CCI).¶ Note that, on receipt of the PCInitiate message with CCI object, the ingress, egress, or transit role of the PCC is identified via the ingress and egress IP address encoded in the LSP-IDENTIFIERS TLV.¶ 6.2. The PCRpt Message The PCRpt message can be used to report the labels that were allocated by the PCE to be used during the State Synchronization phase or as an acknowledgment to a PCInitiate message.¶ <PCRpt Message> ::= <Common Header> <state-report-list> ¶ Where:¶ <state-report-list> ::= <state-report>[<state-report-list>] <state-report> ::= (<lsp-state-report>| <central-control-report>) <lsp-state-report> ::= [<SRP>] <LSP> <path> <central-control-report> ::= [<SRP>] <LSP> <cci-list> <cci-list> ::= <CCI> [<cci-list>] ¶ Where:¶ <path> is as per [RFC8231], and the LSP and SRP objects are also defined in [RFC8231].¶ When a PCRpt message is used to report the CCI (labels), the LSP and CCI objects MUST be present. The LSP object is defined in [RFC8231], and if the LSP object is missing, the receiving PCE MUST send a PCErr message with Error-Type=6 (Mandatory Object missing) and Error-value=8 (LSP object missing). The CCI object is defined in Section 7.3, and if the CCI object is missing, the receiving PCE MUST send a PCErr message with Error-Type=6 (Mandatory Object missing) and Error-value=17 (CCI object missing). Two CCI objects can be included in the PCRpt message for a transit LSR.¶ 7. PCEP Objects The PCEP objects defined in this document are compliant with the PCEP object format defined in [RFC5440].¶ 7.1. OPEN Object This document defines a new PST (2) to be included in the PATH-SETUP-TYPE-CAPABILITY TLV in the OPEN object. Further, a new sub-TLV for the PCECC capability exchange is also defined.¶ 7.1.1. PCECC Capability Sub-TLV The PCECC-CAPABILITY sub-TLV is an optional TLV for use in the OPEN object in the PATH-SETUP-TYPE-CAPABILITY TLV when the Path Setup Type list includes the PCECC Path Setup Type 2. A PCECC-CAPABILITY sub-TLV MUST be ignored if the PST list does not contain PST=2.¶ Its format is shown in Figure 7.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type=1 | Length=4 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Flags |L| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 7: PCECC Capability Sub-TLV The type of the TLV is 1, and it has a fixed length of 4 octets.¶ The value comprises a single field: Flags (32 bits). Currently, the following flag bit is defined:¶ L bit (Label): If set to '1' by a PCEP speaker, the L flag indicates that the PCEP speaker will support and is willing to handle the PCEC-based Central Controller Instructions for label download. The bit MUST be set to '1' by both a PCC and a PCE for the PCECC label download/report on a PCEP session.¶ Unassigned bits MUST be set to '0' on transmission and MUST be ignored on receipt.¶ 7.2. PATH-SETUP-TYPE TLV The PATH-SETUP-TYPE TLV is defined in [RFC8408]; this document defines a new PST value:¶ PST=2: Path is set up via the PCECC mode.¶ On a PCRpt/PCUpd/PCInitiate message, the PST=2 in the PATH-SETUP-TYPE TLV in the SRP object MUST be included for an LSP set up via the PCECC-based mechanism.¶ 7.3. CCI Object The CCI object is used by the PCE to specify the forwarding instructions (label information in the context of this document) to the PCC and MAY be carried within a PCInitiate or PCRpt message for label download/report.¶ CCI Object-Class is 44.¶ CCI Object-Type is 1 for the MPLS label.¶ 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | CC-ID | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Reserved1 | Flags |C|O| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Label | Reserved2 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | // Optional TLV // | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Figure 8: CCI Object The fields in the CCI object are as follows:¶ CC-ID: A PCEP-specific identifier for the CCI information. A PCE creates a CC-ID for each instruction; the value is unique within the scope of the PCE and is constant for the lifetime of a PCEP session. The values 0 and 0xFFFFFFFF are reserved and MUST NOT be used. Note that [SECURITY-ID] gives advice on assigning transient numeric identifiers, such as the CC-ID, so as to minimize security risks.¶ Reserved1 (16 bit): Set to 'zero' while sending; ignored on receipt.¶ Flags (16 bit): A field used to carry any additional information pertaining to the CCI. Currently, the following flag bits are defined:¶ O bit (out-label) : If the bit is set to '1', it specifies the label is the out-label, and it is mandatory to encode the next-hop information (via Address TLVs (Section 7.3.1) in the CCI object). If the bit is not set, it specifies the label is the in-label, and it is optional to encode the local interface information (via Address TLVs in the CCI object).¶ C Bit (PCC allocation): If the bit is set to '1', it indicates that the label allocation needs to be done by the PCC for the Central Controller Instruction. A PCE sets this bit to request the PCC to make an allocation from its label space. A PCC would set this bit to indicate that it has allocated the label and report it to the PCE.¶ All unassigned bits MUST be set to 'zero' at transmission and ignored at receipt.¶ Label (20-bit): The label information.¶ Reserved2 (12 bit): Set to 'zero' while sending; ignored on receive.¶ 7.3.1. Address TLVs [RFC8779] defines the IPV4-ADDRESS, IPV6-ADDRESS, and UNNUMBERED-ENDPOINT TLVs for the use of Generalized Endpoint. The same TLVs can also be used in the CCI object to associate the next-hop information in the case of an outgoing label and local interface information in the case of an incoming label. The next-hop information encoded in these TLVs needs to be a directly connected IP address/interface information. If the PCC is not able to resolve the next-hop information, it MUST reject the CCI and respond with a PCErr message with Error-Type=31 (PCECC failure) and Error-value=5 (Invalid next-hop information).¶ 8. Security Considerations As per [RFC8283], the security considerations for a PCE-based controller are a little different from those for any other PCE system. That is, the operation relies heavily on the use and security of PCEP, so consideration should be given to the security features discussed in [RFC5440] and the additional mechanisms described in [RFC8253]. It further lists the vulnerability of a central controller architecture, such as a central point of failure, denial of service, and a focus for interception and modification of messages sent to individual Network Elements (NEs).¶ In the PCECC operations, the PCEP sessions are also required to the internal routers, thus increasing the resources required for the session management at the PCE.¶ The PCECC extension builds on the existing PCEP messages; thus, the security considerations described in [RFC5440], [RFC8231], and [RFC8281] continue to apply. [RFC8253] specifies the support of Transport Layer Security (TLS) in PCEP, as it provides support for peer authentication, message encryption, and integrity. It further provides mechanisms for associating peer identities with different levels of access and/or authoritativeness via an attribute in X.509 certificates or a local policy with a specific accept-list of X.509 certificates. This can be used to check the authority for the PCECC operations. Additional considerations are discussed in following sections.¶ 8.1. Malicious PCE In this extension, the PCE has complete control over the PCC to download/remove the labels and can cause the LSPs to behave inappropriately and cause a major impact to the network. As a general precaution, it is RECOMMENDED that this PCEP extension be activated on mutually authenticated and encrypted sessions across PCEs and PCCs belonging to the same administrative authority, using TLS [RFC8253], as per the recommendations and best current practices in BCP 195 [RFC7525].¶ Further, an attacker may flood the PCC with the PCECC-related messages at a rate that exceeds either the PCC's ability to process them or the network's ability to send them, by either spoofing messages or compromising the PCE itself. [RFC8281] provides a mechanism to protect the PCC by imposing a limit. The same can be used for the PCECC operations as well.¶ As specified in Section 5.5.3.1, a PCC needs to check if the label in the CCI object is in the range set aside for the PCE; otherwise, it MUST send a PCErr message with Error-Type=31 (PCECC failure) and Error-value=1 (Label out of range).¶ 8.2. Malicious PCC The PCECC mechanism described in this document requires the PCE to keep labels (CCI) that it downloads and relies on the PCC responding (with either an acknowledgment or an error message) to request for LSP instantiation. This is an additional attack surface by placing a requirement for the PCE to keep a CCI/label replica for each PCC. It is RECOMMENDED that PCE implementations provide a limit on resources (in this case the CCI) a single PCC can occupy. [RFC8231] provides a notification mechanism when such threshold is reached.¶ 9. Manageability Considerations 9.1. Control of Function and Policy A PCE or PCC implementation SHOULD allow the PCECC capability to be enabled/disabled as part of the global configuration. Section 6.1 of [RFC8664] list various controlling factors regarding the Path Setup Type. They are also applicable to the PCECC Path Setup Types. Further, Section 6.2 of [RFC8664] describes the migration steps when the Path Setup Type of an existing LSP is changed.¶ 9.2. Information and Data Models [RFC7420] describes the PCEP MIB; this MIB can be extended to get the PCECC capability status.¶ The PCEP YANG module [PCEP-YANG] could be extended to enable/disable the PCECC capability.¶ 9.3. Liveness Detection and Monitoring Mechanisms defined in this document do not imply any new liveness detection and monitoring requirements in addition to those already listed in [RFC5440].¶ 9.4. Verify Correct Operations The operator needs the following information to verify that PCEP is operating correctly with respect to the PCECC Path Setup Type.¶ An implementation SHOULD allow the operator to view whether the PCEP speaker sent the PCECC PST capability to its peer.¶ An implementation SHOULD allow the operator to view whether the peer sent the PCECC PST capability.¶ An implementation SHOULD allow the operator to view whether the PCECC PST is enabled on a PCEP session.¶ If one PCEP speaker advertises the PCECC PST capability, but the other does not, then the implementation SHOULD create a log to inform the operator of the capability mismatch.¶ If a PCEP speaker rejects a CCI, then it SHOULD create a log to inform the operator, giving the reason for the decision (local policy, label issues, etc.).¶ 9.5. Requirements on Other Protocols PCEP extensions defined in this document do not put new requirements on other protocols.¶ 9.6. Impact on Network Operations PCEP extensions defined in this document do not put new requirements on network operations.¶ 10. IANA Considerations 10.1. PATH-SETUP-TYPE-CAPABILITY Sub-TLV Type Indicators [RFC8408] detailed the creation of the \"PATH-SETUP-TYPE-CAPABILITY Sub-TLV Type Indicators\" subregistry. Further, IANA has allocated the following codepoint:¶ Table 2: PATH-SETUP-TYPE-CAPABILITY Sub-TLV Type Indicators Subregistry Addition Value Meaning Reference 1 PCECC-CAPABILITY RFC 9050 10.2. PCECC-CAPABILITY Sub-TLV's Flag Field This document defines the PCECC-CAPABILITY sub-TLV; IANA has created a new subregistry to manage the value of the PCECC-CAPABILITY sub-TLV's 32-bit Flag field. New values are to be assigned by Standards Action [RFC8126]. Each bit should be tracked with the following qualities:¶ bit number (counting from bit 0 as the most significant bit)¶ capability description¶ defining RFC¶ Currently, there is one allocation in this registry.¶ Table 3: Initial Contents of the PCECC-CAPABILITY Sub-TLV Subregistry Bit Name Reference 0-30 Unassigned RFC 9050 31 Label RFC 9050 10.3. PCEP Path Setup Type Registry [RFC8408] created a subregistry within the \"Path Computation Element Protocol (PCEP) Numbers\" registry called \"PCEP Path Setup Types\". IANA has allocated a new codepoint within this registry, as follows:¶ Table 4: Path Setup Type Registry Codepoint Addition Value Description Reference 2 Traffic engineering path is set up using PCECC mode RFC 9050 10.4. PCEP Object IANA has allocated new codepoints in the \"PCEP Objects\" subregistry for the CCI object as follows:¶ Table 5: PCEP Objects Subregistry Additions Object-Class Value Name Object-Type Reference 44 CCI Object-Type 0: Reserved¶ 1: MPLS Label¶ 2-15: Unassigned¶ RFC 9050 10.5. CCI Object Flag Field IANA has created a new subregistry to manage the Flag field of the CCI object called \"CCI Object Flag Field for MPLS Label\". New values are to be assigned by Standards Action [RFC8126]. Each bit should be tracked with the following qualities:¶ bit number (counting from bit 0 as the most significant bit)¶ capability description¶ defining RFC¶ Two bits are defined for the CCI Object flag field in this document as follows:¶ Table 6: CCI Object Flag Field for MPLS Label Initial Contents Bit Description Reference 0-13 Unassigned 14 C Bit - PCC allocation RFC 9050 15 O Bit - Specifies label is out-label RFC 9050 10.6. PCEP-Error Object IANA has allocated new error types and error values within the \"PCEP-ERROR Object Error Types and Values\" subregistry of the \"Path Computation Element Protocol (PCEP) Numbers\" registry for the following errors:¶ Table 7: PCEP-ERROR Object Error Types and Values Additions Error-Type Meaning Error-value Reference 6 Mandatory Object missing 17: CCI object missing RFC 9050 10 Reception of an invalid object 33: Missing PCECC Capability sub-TLV RFC 9050 19 Invalid Operation 16: Attempted PCECC operations when PCECC capability was not advertised¶ 17: Stateful PCE capability was not advertised¶ 18: Unknown Label¶ RFC 9050 31 PCECC failure 1: Label out of range¶ 2: Instruction failed¶ 3: Invalid CCI¶ 4: Unable to allocate the specified CCI¶ 5: Invalid next-hop information¶ RFC 9050 11. References 11.1. Normative References [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>. [RFC5440] Vasseur, JP., Ed. and JL. Le Roux, Ed., \"Path Computation Element (PCE) Communication Protocol (PCEP)\", RFC 5440, DOI 10.17487/RFC5440, March 2009, <https://www.rfc-editor.org/info/rfc5440>. [RFC5511] Farrel, A., \"Routing Backus-Naur Form (RBNF): A Syntax Used to Form Encoding Rules in Various Routing Protocol Specifications\", RFC 5511, DOI 10.17487/RFC5511, April 2009, <https://www.rfc-editor.org/info/rfc5511>. [RFC7525] Sheffer, Y., Holz, R., and P. Saint-Andre, \"Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May 2015, <https://www.rfc-editor.org/info/rfc7525>. [RFC8126] Cotton, M., Leiba, B., and T. Narten, \"Guidelines for Writing an IANA Considerations Section in RFCs\", BCP 26, RFC 8126, DOI 10.17487/RFC8126, June 2017, <https://www.rfc-editor.org/info/rfc8126>. [RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>. [RFC8231] Crabbe, E., Minei, I., Medved, J., and R. Varga, \"Path Computation Element Communication Protocol (PCEP) Extensions for Stateful PCE\", RFC 8231, DOI 10.17487/RFC8231, September 2017, <https://www.rfc-editor.org/info/rfc8231>. [RFC8253] Lopez, D., Gonzalez de Dios, O., Wu, Q., and D. Dhody, \"PCEPS: Usage of TLS to Provide a Secure Transport for the Path Computation Element Communication Protocol (PCEP)\", RFC 8253, DOI 10.17487/RFC8253, October 2017, <https://www.rfc-editor.org/info/rfc8253>. [RFC8281] Crabbe, E., Minei, I., Sivabalan, S., and R. Varga, \"Path Computation Element Communication Protocol (PCEP) Extensions for PCE-Initiated LSP Setup in a Stateful PCE Model\", RFC 8281, DOI 10.17487/RFC8281, December 2017, <https://www.rfc-editor.org/info/rfc8281>. [RFC8408] Sivabalan, S., Tantsura, J., Minei, I., Varga, R., and J. Hardwick, \"Conveying Path Setup Type in PCE Communication Protocol (PCEP) Messages\", RFC 8408, DOI 10.17487/RFC8408, July 2018, <https://www.rfc-editor.org/info/rfc8408>. [RFC8664] Sivabalan, S., Filsfils, C., Tantsura, J., Henderickx, W., and J. Hardwick, \"Path Computation Element Communication Protocol (PCEP) Extensions for Segment Routing\", RFC 8664, DOI 10.17487/RFC8664, December 2019, <https://www.rfc-editor.org/info/rfc8664>. [RFC8779] Margaria, C., Ed., Gonzalez de Dios, O., Ed., and F. Zhang, Ed., \"Path Computation Element Communication Protocol (PCEP) Extensions for GMPLS\", RFC 8779, DOI 10.17487/RFC8779, July 2020, <https://www.rfc-editor.org/info/rfc8779>. 11.2. Informative References [RFC4655] Farrel, A., Vasseur, JP., and J. Ash, \"A Path Computation Element (PCE)-Based Architecture\", RFC 4655, DOI 10.17487/RFC4655, August 2006, <https://www.rfc-editor.org/info/rfc4655>. [RFC7025] Otani, T., Ogaki, K., Caviglia, D., Zhang, F., and C. Margaria, \"Requirements for GMPLS Applications of PCE\", RFC 7025, DOI 10.17487/RFC7025, September 2013, <https://www.rfc-editor.org/info/rfc7025>. [RFC7399] Farrel, A. and D. King, \"Unanswered Questions in the Path Computation Element Architecture\", RFC 7399, DOI 10.17487/RFC7399, October 2014, <https://www.rfc-editor.org/info/rfc7399>. [RFC7420] Koushik, A., Stephan, E., Zhao, Q., King, D., and J. Hardwick, \"Path Computation Element Communication Protocol (PCEP) Management Information Base (MIB) Module\", RFC 7420, DOI 10.17487/RFC7420, December 2014, <https://www.rfc-editor.org/info/rfc7420>. [RFC7491] King, D. and A. Farrel, \"A PCE-Based Architecture for Application-Based Network Operations\", RFC 7491, DOI 10.17487/RFC7491, March 2015, <https://www.rfc-editor.org/info/rfc7491>. [RFC8232] Crabbe, E., Minei, I., Medved, J., Varga, R., Zhang, X., and D. Dhody, \"Optimizations of Label Switched Path State Synchronization Procedures for a Stateful PCE\", RFC 8232, DOI 10.17487/RFC8232, September 2017, <https://www.rfc-editor.org/info/rfc8232>. [RFC8283] Farrel, A., Ed., Zhao, Q., Ed., Li, Z., and C. Zhou, \"An Architecture for Use of PCE and the PCE Communication Protocol (PCEP) in a Network with Central Control\", RFC 8283, DOI 10.17487/RFC8283, December 2017, <https://www.rfc-editor.org/info/rfc8283>. [RFC8741] Raghuram, A., Goddard, A., Karthik, J., Sivabalan, S., and M. Negi, \"Ability for a Stateful Path Computation Element (PCE) to Request and Obtain Control of a Label Switched Path (LSP)\", RFC 8741, DOI 10.17487/RFC8741, March 2020, <https://www.rfc-editor.org/info/rfc8741>. [PCECC] Li, Z. (., Dhody, D., Zhao, Q., Ke, K., Khasanov, B., Fang, L., Zhou, C., Zhang, B., Rachitskiy, A., and A. Gulida, \"The Use Cases for Path Computation Element (PCE) as a Central Controller (PCECC).\", Work in Progress, Internet-Draft, draft-ietf-teas-pcecc-use-cases-07, 8 March 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-teas-pcecc-use-cases-07>. [PCEP-YANG] Dhody, D., Ed., Hardwick, J., Beeram, V., and J. Tantsura, \"A YANG Data Model for Path Computation Element Communications Protocol (PCEP)\", Work in Progress, Internet-Draft, draft-ietf-pce-pcep-yang-16, 22 February 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-pce-pcep-yang-16>. [PCECC-SR] Li, Z., Peng, S., Negi, M. S., Zhao, Q., and C. Zhou, \"PCEP Procedures and Protocol Extensions for Using PCE as a Central Controller (PCECC) for Segment Routing (SR) MPLS Segment Identifier (SID) Allocation and Distribution.\", Work in Progress, Internet-Draft, draft-ietf-pce-pcep-extension-pce-controller-sr-02, 25 March 2021, <https://datatracker.ietf.org/doc/html/draft-ietf-pce-pcep-extension-pce-controller-sr-02>. [PCECC-SRv6] Li, Z., Peng, S., Geng, X., and M. S. Negi, \"PCEP Procedures and Protocol Extensions for Using PCE as a Central Controller (PCECC) for SRv6\", Work in Progress, Internet-Draft, draft-dhody-pce-pcep-extension-pce-controller-srv6-06, 21 February 2021, <https://datatracker.ietf.org/doc/html/draft-dhody-pce-pcep-extension-pce-controller-srv6-06>. [PCE-ID] Li, C., Chen, M., Wang, A., Cheng, W., and C. Zhou, \"PCE Controlled ID Space\", Work in Progress, Internet-Draft, draft-li-pce-controlled-id-space-08, 22 February 2021, <https://datatracker.ietf.org/doc/html/draft-li-pce-controlled-id-space-08>. [SECURITY-ID] Gont, F. and I. Arce, \"Security Considerations for Transient Numeric Identifiers Employed in Network Protocols\", Work in Progress, Internet-Draft, draft-gont-numeric-ids-sec-considerations-06, 5 December 2020, <https://datatracker.ietf.org/doc/html/draft-gont-numeric-ids-sec-considerations-06>. Acknowledgments We would like to thank Robert Tao, Changjing Yan, Tieying Huang, Avantika, and Aijun Wang for their useful comments and suggestions.¶ Thanks to Julien Meuric for shepherding this document and providing valuable comments. Thanks to Deborah Brungard for being the responsible AD.¶ Thanks to Victoria Pritchard for a very detailed RTGDIR review. Thanks to Yaron Sheffer for the SECDIR review. Thanks to Gyan Mishra for the Gen-ART review.¶ Thanks to Alvaro Retana, Murray Kucherawy, Benjamin Kaduk, Roman Danyliw, Robert Wilton, Éric Vyncke, and Erik Kline for the IESG review.¶ Contributors Dhruv Dhody Huawei Technologies Divyashree Techno Park, Whitefield Bangalore 560066 Karnataka India Email: dhruv.ietf@gmail.com Satish Karunanithi Huawei Technologies Divyashree Techno Park, Whitefield Bangalore 560066 Karnataka India Email: satishk@huawei.com Adrian Farrel Old Dog Consulting United Kingdom Email: adrian@olddog.co.uk Xuesong Geng Huawei Technologies China Email: gengxuesong@huawei.com Udayasree Palle Email: udayasreereddy@gmail.com Katherine Zhao Futurewei Technologies Email: katherine.zhao@futurewei.com Boris Zhang Telus Ltd. Toronto Canada Email: boris.zhang@telus.com Alex Tokar Cisco Systems Slovakia Email: atokar@cisco.com Authors' Addresses Zhenbin Li Huawei Technologies Huawei Bld., No.156 Beiqing Rd. Beijing 100095 China Email: lizhenbin@huawei.com Shuping Peng Huawei Technologies Huawei Bld., No.156 Beiqing Rd. Beijing 100095 China Email: pengshuping@huawei.com Mahendra Singh Negi RtBrick Inc N-17L, 18th Cross Rd, HSR Layout Bangalore 560102 Karnataka India Email: mahend.ietf@gmail.com Quintin Zhao Etheric Networks 1009 S Claremont St. San Mateo, CA 94402 United States of America Email: qzhao@ethericnetworks.com Chao Zhou HPE Email: chaozhou_us@yahoo.com"
    }
]